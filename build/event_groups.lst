ARM GAS  /tmp/ccRKRluC.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"event_groups.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTestWaitCondition,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTestWaitCondition:
  25              	.LFB15:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  31:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  /tmp/ccRKRluC.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** task.h is included from an application file. */
  34:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* FreeRTOS includes. */
  37:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "FreeRTOS.h"
  38:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "task.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "timers.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #include "event_groups.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  42:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* Lint e961, e750 and e9021 are suppressed as a MISRA exception justified
  43:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** for the header files above, but not in this file, in order to generate the
  45:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** correct privileged Vs unprivileged linkage and placement. */
  46:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021 See comment above. */
  47:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  48:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* The following bit fields convey control information in a task's event list
  49:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** item value.  It is important they don't clash with the
  50:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** taskEVENT_LIST_ITEM_VALUE_IN_USE definition. */
  51:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if configUSE_16_BIT_TICKS == 1
  52:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x0100U
  53:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x0200U
  54:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x0400U
  55:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff00U
  56:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #else
  57:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventCLEAR_EVENTS_ON_EXIT_BIT	0x01000000UL
  58:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventUNBLOCKED_DUE_TO_BIT_SET	0x02000000UL
  59:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventWAIT_FOR_ALL_BITS			0x04000000UL
  60:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#define eventEVENT_BITS_CONTROL_BYTES	0xff000000UL
  61:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
  62:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** typedef struct EventGroupDef_t
  64:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  65:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventBits_t uxEventBits;
  66:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	List_t xTasksWaitingForBits;		/*< List of tasks waiting for a bit to be set. */
  67:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  68:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
  69:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		UBaseType_t uxEventGroupNumber;
  70:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  71:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
  73:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uint8_t ucStaticallyAllocated; /*< Set to pdTRUE if the event group is statically allocated to en
  74:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
  75:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } EventGroup_t;
  76:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  77:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
  78:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*
  80:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * Test the bits set in uxCurrentEventBits to see if the wait condition is met.
  81:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * The wait condition is defined by xWaitForAllBits.  If xWaitForAllBits is
  82:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * pdTRUE then the wait condition is met if all the bits set in uxBitsToWaitFor
  83:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * are also set in uxCurrentEventBits.  If xWaitForAllBits is pdFALSE then the
  84:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * wait condition is met if any of the bits set in uxBitsToWait for are also set
  85:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  * in uxCurrentEventBits.
  86:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
  88:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  89:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccRKRluC.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
  92:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  93:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
  95:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  96:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* A StaticEventGroup_t object must be provided. */
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( pxEventGroupBuffer );
  99:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( configASSERT_DEFINED == 1 )
 101:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 102:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Sanity check that the size of the structure used to declare a
 103:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			variable of type StaticEventGroup_t equals the size of the real
 104:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			event group structure. */
 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			volatile size_t xSize = sizeof( StaticEventGroup_t );
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
 107:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
 108:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configASSERT_DEFINED */
 109:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 110:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The user has provided a statically allocated event group - use it. */
 111:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticE
 112:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 113:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 114:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 117:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 119:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 120:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note that
 121:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				this event group was created statically in case the event group
 122:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				is later deleted. */
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdTRUE;
 124:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 125:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 126:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 128:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 129:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 130:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 131:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* xEventGroupCreateStatic should only ever be called with
 132:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventGroupBuffer pointing to a pre-allocated (compile time
 133:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			allocated) StaticEventGroup_t variable. */
 134:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED();
 135:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 136:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 137:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 139:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 141:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 142:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 144:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 145:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroupHandle_t xEventGroupCreate( void )
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
ARM GAS  /tmp/ccRKRluC.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 148:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Allocate the event group.  Justification for MISRA deviation as
 150:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		follows:  pvPortMalloc() always ensures returned memory blocks are
 151:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		aligned per the requirements of the MCU stack.  In this case
 152:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pvPortMalloc() must return a pointer that is guaranteed to meet the
 153:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		alignment requirements of the EventGroup_t structure - which (if you
 154:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		follow it through) is the alignment requirements of the TickType_t type
 155:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		(EventBits_t being of TickType_t itself).  Therefore, whenever the
 156:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		stack alignment requirements are greater than or equal to the
 157:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		TickType_t alignment requirements the cast is safe.  In other cases,
 158:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		where the natural word size of the architecture is less than
 159:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		sizeof( TickType_t ), the TickType_t variables will be accessed in two
 160:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		or more reads operations, and the alignment requirements is only that
 161:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		of each individual read. */
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see
 163:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( pxEventBits != NULL )
 165:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits = 0;
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 168:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 170:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 171:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Both static and dynamic allocation can be used, so note this
 172:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				event group was allocated statically in case the event group is
 173:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				later deleted. */
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->ucStaticallyAllocated = pdFALSE;
 175:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 176:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 177:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 178:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE( pxEventBits );
 179:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 180:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 181:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 182:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and doe
 183:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 184:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return pxEventBits;
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 187:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 188:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 189:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const E
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 194:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 195:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xAlreadyYielded;
 196:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 197:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 200:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 201:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 203:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
ARM GAS  /tmp/ccRKRluC.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 205:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 207:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxOriginalBitValue = pxEventBits->uxEventBits;
 209:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 211:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 213:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 214:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* All the rendezvous bits are now set - no need to block. */
 215:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 216:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 217:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Rendezvous always clear the bits.  They will have been cleared
 218:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			already unless this is the only task in the rendezvous. */
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 220:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = 0;
 222:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 223:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 224:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xTicksToWait != ( TickType_t ) 0 )
 226:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 227:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
 228:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the bits that the calling task is waiting for in the
 230:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task's event list item so the kernel knows when a match is
 231:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				found.  Then enter the blocked state. */
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eve
 233:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 234:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* This assignment is obsolete as uxReturn will get set after
 235:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				the task unblocks, but some compilers mistakenly generate a
 236:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				warning about uxReturn being returned without being set if the
 237:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				assignment is omitted. */
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = 0;
 239:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 240:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 241:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 242:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The rendezvous bits were not set, but no block time was
 243:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				specified - just return the current event bit value. */
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 245:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 246:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 247:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 248:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 250:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 252:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 254:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 256:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 257:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 258:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 259:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 260:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
ARM GAS  /tmp/ccRKRluC.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 262:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 263:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 264:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 265:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 267:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 269:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 270:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task timed out, just return the current event bit value. */
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 272:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 274:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 275:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Although the task got here because it timed out before the
 276:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				bits it was waiting for were set, it is possible that since it
 277:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				unblocked another task has set the bits.  If this is the case
 278:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				then it needs to clear the bits before exiting. */
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 280:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 282:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 283:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 284:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 285:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 286:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 287:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 289:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 290:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 291:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 292:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 293:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 294:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 295:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 296:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Control bits might be set as the task had blocked should not be
 298:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		returned. */
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 300:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 301:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 302:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
 303:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 304:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 305:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 306:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 309:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 310:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor,
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 313:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn, uxControlBits = 0;
 315:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 316:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xTimeoutOccurred = pdFALSE;
 317:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccRKRluC.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to wait on the bits used by the kernel
 319:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself, and that at least one bit is being requested. */
 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 323:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 324:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 326:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 327:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 330:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 332:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Check to see if the wait condition is already met or not. */
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 335:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xWaitConditionMet != pdFALSE )
 337:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 338:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has already been met so there is no need to
 339:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			block. */
 340:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 341:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTicksToWait = ( TickType_t ) 0;
 342:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 343:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Clear the wait bits if requested to do so. */
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 345:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 347:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 348:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 349:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 350:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 351:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 352:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else if( xTicksToWait == ( TickType_t ) 0 )
 354:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 355:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The wait condition has not been met, but no block time was
 356:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			specified, so just return the current value. */
 357:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = uxCurrentEventBits;
 358:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xTimeoutOccurred = pdTRUE;
 359:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 360:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 361:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 362:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task is going to block to wait for its required bits to be
 363:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			set.  uxControlBits are used to remember the specified behaviour of
 364:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			this call to xEventGroupWaitBits() - for use when the event bits
 365:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			unblock the task. */
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xClearOnExit != pdFALSE )
 367:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 369:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 370:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 371:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 372:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 373:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 374:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccRKRluC.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xWaitForAllBits != pdFALSE )
 376:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 378:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 379:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 380:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 381:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 382:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 383:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Store the bits that the calling task is waiting for in the
 385:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			task's event list item so the kernel knows when a match is
 386:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			found.  Then enter the blocked state. */
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxCo
 388:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* This is obsolete as it will get set after the task unblocks, but
 390:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			some compilers mistakenly generate a warning about the variable
 391:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			being returned without being set if it is not done. */
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxReturn = 0;
 393:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 394:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
 395:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 396:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	xAlreadyYielded = xTaskResumeAll();
 398:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xTicksToWait != ( TickType_t ) 0 )
 400:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xAlreadyYielded == pdFALSE )
 402:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			portYIELD_WITHIN_API();
 404:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 405:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 406:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 407:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 408:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 409:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked to wait for its required bits to be set - at this
 411:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		point either the required bits were set or the block time expired.  If
 412:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		the required bits were set they will have been stored in the task's
 413:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		event list item, and they should now be retrieved then cleared. */
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = uxTaskResetEventItemValue();
 415:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 417:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskENTER_CRITICAL();
 419:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 420:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The task timed out, just return the current event bit value. */
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				uxReturn = pxEventBits->uxEventBits;
 422:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 423:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* It is possible that the event bits were updated between this
 424:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				task leaving the Blocked state and running again. */
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 426:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					if( xClearOnExit != pdFALSE )
 428:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 430:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 431:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					else
ARM GAS  /tmp/ccRKRluC.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 433:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 						mtCOVERAGE_TEST_MARKER();
 434:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 435:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 436:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 437:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 438:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 439:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 440:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 441:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			taskEXIT_CRITICAL();
 443:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 444:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 445:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 446:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The task unblocked because the bits were set. */
 447:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 448:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The task blocked so control bits may have been set. */
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 451:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 452:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
 453:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 454:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Prevent compiler warnings when trace macros are not used. */
 455:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTimeoutOccurred;
 456:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 457:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 459:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 460:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 463:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 464:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 465:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 466:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to clear the bits used by the kernel
 467:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 470:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskENTER_CRITICAL();
 472:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 473:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
 474:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* The value returned is the event group value prior to the bits being
 476:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		cleared. */
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 478:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 479:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear the bits. */
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 481:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	taskEXIT_CRITICAL();
 483:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 486:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 487:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
ARM GAS  /tmp/ccRKRluC.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsTo
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 492:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 493:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 494:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( 
 496:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 499:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 502:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 503:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 505:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 506:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t const * const pxEventBits = xEventGroup;
 507:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxReturn;
 508:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 510:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		uxReturn = pxEventBits->uxEventBits;
 512:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 513:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 514:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 515:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return uxReturn;
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** } /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to co
 517:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 518:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 521:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 522:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t const *pxListEnd;
 523:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** List_t const * pxList;
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 525:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 526:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xMatchFound = pdFALSE;
 527:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	/* Check the user is not attempting to set the bits used by the kernel
 529:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	itself. */
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( xEventGroup );
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 532:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxList = &( pxEventBits->xTasksWaitingForBits );
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is use
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 536:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 537:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
 538:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxListItem = listGET_HEAD_ENTRY( pxList );
 540:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Set the bits. */
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits |= uxBitsToSet;
 543:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* See if the new bit value should unblock any tasks. */
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( pxListItem != pxListEnd )
ARM GAS  /tmp/ccRKRluC.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxNext = listGET_NEXT( pxListItem );
 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 550:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 551:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Split the bits waited for from the control bits. */
 552:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 554:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 556:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 557:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Just looking for single bit being set. */
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 559:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					xMatchFound = pdTRUE;
 561:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 562:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 563:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 564:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 565:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 566:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 568:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 569:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* All bits are set. */
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xMatchFound = pdTRUE;
 571:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 572:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 573:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 574:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Need all bits to be set, but not all the bits were set. */
 575:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 576:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( xMatchFound != pdFALSE )
 578:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 579:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* The bits match.  Should the bits be cleared on exit? */
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 581:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					uxBitsToClear |= uxBitsWaitedFor;
 583:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 584:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				else
 585:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 586:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					mtCOVERAGE_TEST_MARKER();
 587:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 588:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				/* Store the actual event flag value in the task's event list
 590:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				item before removing the task from the event list.  The
 591:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
 592:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				that is was unblocked due to its required bits matching, rather
 593:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				than because it timed out. */
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO
 595:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 596:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Move onto the next list item.  Note pxListItem->pxNext is not
 598:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			used here as the list item may have been removed from the event list
 599:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and inserted into the ready/pending reading list. */
 600:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			pxListItem = pxNext;
 601:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 602:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
ARM GAS  /tmp/ccRKRluC.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
 604:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		bit was set in the control word. */
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		pxEventBits->uxEventBits &= ~uxBitsToClear;
 606:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 608:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 609:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return pxEventBits->uxEventBits;
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 611:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 612:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 613:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupDelete( EventGroupHandle_t xEventGroup )
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 615:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 616:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 617:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 619:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 620:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_DELETE( xEventGroup );
 621:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 623:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* Unblock the task, returning 0 as the event list is being deleted
 625:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			and cannot therefore have any bits set. */
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaiting
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 628:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 629:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 631:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 632:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group can only have been allocated dynamically - free
 633:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			it again. */
 634:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vPortFree( pxEventBits );
 635:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 636:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 637:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 638:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			/* The event group could have been allocated statically or
 639:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			dynamically, so check before attempting to free the memory. */
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 641:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				vPortFree( pxEventBits );
 643:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 644:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			else
 645:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 646:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				mtCOVERAGE_TEST_MARKER();
 647:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 648:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 649:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 650:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xTaskResumeAll();
 652:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 653:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 654:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'set bits' command that was pended from
 656:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 657:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
ARM GAS  /tmp/ccRKRluC.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 661:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 662:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /* For internal use only - execute a 'clear bits' command that was pended from
 664:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** an interrupt. */
 665:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 668:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 669:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 670:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxB
 672:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** {
  27              		.loc 1 672 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
 674:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	if( xWaitForAllBits == pdFALSE )
  33              		.loc 1 675 0
  34 0000 1AB9     		cbnz	r2, .L2
 676:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 677:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task only has to wait for one bit within uxBitsToWaitFor to be
 678:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		set.  Is one already set? */
 679:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
  35              		.loc 1 679 0
  36 0002 0842     		tst	r0, r1
  37 0004 06D1     		bne	.L4
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet = pdFALSE;
  38              		.loc 1 673 0
  39 0006 0020     		movs	r0, #0
  40              	.LVL1:
  41 0008 7047     		bx	lr
  42              	.LVL2:
  43              	.L2:
 680:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
 682:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 683:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 684:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 685:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 686:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 687:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 688:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	else
 689:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 690:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
 691:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		Are they set already? */
 692:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
  44              		.loc 1 692 0
  45 000a 31EA0003 		bics	r3, r1, r0
  46 000e 03D0     		beq	.L5
 673:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  47              		.loc 1 673 0
  48 0010 0020     		movs	r0, #0
ARM GAS  /tmp/ccRKRluC.s 			page 14


  49              	.LVL3:
  50 0012 7047     		bx	lr
  51              	.LVL4:
  52              	.L4:
 681:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
  53              		.loc 1 681 0
  54 0014 0120     		movs	r0, #1
  55              	.LVL5:
  56 0016 7047     		bx	lr
  57              	.LVL6:
  58              	.L5:
 693:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 694:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xWaitConditionMet = pdTRUE;
  59              		.loc 1 694 0
  60 0018 0120     		movs	r0, #1
  61              	.LVL7:
 695:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 696:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 697:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 698:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			mtCOVERAGE_TEST_MARKER();
 699:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 700:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 701:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 702:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	return xWaitConditionMet;
 703:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
  62              		.loc 1 703 0
  63 001a 7047     		bx	lr
  64              		.cfi_endproc
  65              	.LFE15:
  67              		.section	.text.xEventGroupCreateStatic,"ax",%progbits
  68              		.align	1
  69              		.global	xEventGroupCreateStatic
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv4-sp-d16
  75              	xEventGroupCreateStatic:
  76              	.LFB4:
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  77              		.loc 1 94 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 8
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81              	.LVL8:
  98:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
  82              		.loc 1 98 0
  83 0000 80B1     		cbz	r0, .L13
  94:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
  84              		.loc 1 94 0
  85 0002 10B5     		push	{r4, lr}
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 4, -8
  88              		.cfi_offset 14, -4
  89 0004 82B0     		sub	sp, sp, #8
  90              		.cfi_def_cfa_offset 16
  91 0006 0446     		mov	r4, r0
  92              	.LBB36:
ARM GAS  /tmp/ccRKRluC.s 			page 15


 105:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			configASSERT( xSize == sizeof( EventGroup_t ) );
  93              		.loc 1 105 0
  94 0008 2023     		movs	r3, #32
  95 000a 0193     		str	r3, [sp, #4]
 106:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
  96              		.loc 1 106 0
  97 000c 019B     		ldr	r3, [sp, #4]
  98 000e 202B     		cmp	r3, #32
  99 0010 11D0     		beq	.L9
 100              	.LBB37:
 101              	.LBB38:
 102              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccRKRluC.s 			page 16


  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
ARM GAS  /tmp/ccRKRluC.s 			page 17


 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccRKRluC.s 			page 18


 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 103              		.loc 2 195 0
 104              		.syntax unified
 105              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 106 0012 4FF05003 			mov r3, #80												
 107 0016 83F31188 		msr basepri, r3											
 108 001a BFF36F8F 		isb														
 109 001e BFF34F8F 		dsb														
 110              	
 111              	@ 0 "" 2
 112              	.LVL9:
 113              		.thumb
 114              		.syntax unified
 115              	.L10:
 116 0022 FEE7     		b	.L10
 117              	.L13:
 118              		.cfi_def_cfa_offset 0
 119              		.cfi_restore 4
 120              		.cfi_restore 14
 121              	.LBE38:
 122              	.LBE37:
 123              	.LBE36:
ARM GAS  /tmp/ccRKRluC.s 			page 19


 124              	.LBB39:
 125              	.LBB40:
 126              		.syntax unified
 127              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 128 0024 4FF05003 			mov r3, #80												
 129 0028 83F31188 		msr basepri, r3											
 130 002c BFF36F8F 		isb														
 131 0030 BFF34F8F 		dsb														
 132              	
 133              	@ 0 "" 2
 134              	.LVL10:
 135              		.thumb
 136              		.syntax unified
 137              	.L8:
 138 0034 FEE7     		b	.L8
 139              	.L9:
 140              		.cfi_def_cfa_offset 16
 141              		.cfi_offset 4, -8
 142              		.cfi_offset 14, -4
 143              	.LVL11:
 144              	.LBE40:
 145              	.LBE39:
 115:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 146              		.loc 1 115 0
 147 0036 0023     		movs	r3, #0
 148 0038 40F8043B 		str	r3, [r0], #4
 149              	.LVL12:
 116:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 150              		.loc 1 116 0
 151 003c FFF7FEFF 		bl	vListInitialise
 152              	.LVL13:
 123:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 153              		.loc 1 123 0
 154 0040 0123     		movs	r3, #1
 155 0042 2377     		strb	r3, [r4, #28]
 138:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 156              		.loc 1 138 0
 157 0044 2046     		mov	r0, r4
 158 0046 02B0     		add	sp, sp, #8
 159              		.cfi_def_cfa_offset 8
 160              		@ sp needed
 161 0048 10BD     		pop	{r4, pc}
 162              		.cfi_endproc
 163              	.LFE4:
 165              		.section	.text.xEventGroupCreate,"ax",%progbits
 166              		.align	1
 167              		.global	xEventGroupCreate
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 171              		.fpu fpv4-sp-d16
 173              	xEventGroupCreate:
 174              	.LFB5:
 146:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t *pxEventBits;
 175              		.loc 1 146 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccRKRluC.s 			page 20


 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179 0000 38B5     		push	{r3, r4, r5, lr}
 180              		.cfi_def_cfa_offset 16
 181              		.cfi_offset 3, -16
 182              		.cfi_offset 4, -12
 183              		.cfi_offset 5, -8
 184              		.cfi_offset 14, -4
 162:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 185              		.loc 1 162 0
 186 0002 2020     		movs	r0, #32
 187 0004 FFF7FEFF 		bl	pvPortMalloc
 188              	.LVL14:
 164:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 189              		.loc 1 164 0
 190 0008 0446     		mov	r4, r0
 191 000a 28B1     		cbz	r0, .L14
 166:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 192              		.loc 1 166 0
 193 000c 0025     		movs	r5, #0
 194 000e 40F8045B 		str	r5, [r0], #4
 195              	.LVL15:
 167:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 196              		.loc 1 167 0
 197 0012 FFF7FEFF 		bl	vListInitialise
 198              	.LVL16:
 174:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 199              		.loc 1 174 0
 200 0016 2577     		strb	r5, [r4, #28]
 201              	.L14:
 186:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 202              		.loc 1 186 0
 203 0018 2046     		mov	r0, r4
 204 001a 38BD     		pop	{r3, r4, r5, pc}
 205              		.cfi_endproc
 206              	.LFE5:
 208              		.section	.text.xEventGroupWaitBits,"ax",%progbits
 209              		.align	1
 210              		.global	xEventGroupWaitBits
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu fpv4-sp-d16
 216              	xEventGroupWaitBits:
 217              	.LFB7:
 312:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 218              		.loc 1 312 0
 219              		.cfi_startproc
 220              		@ args = 4, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222              	.LVL17:
 223 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 224              		.cfi_def_cfa_offset 32
 225              		.cfi_offset 4, -32
 226              		.cfi_offset 5, -28
 227              		.cfi_offset 6, -24
 228              		.cfi_offset 7, -20
 229              		.cfi_offset 8, -16
ARM GAS  /tmp/ccRKRluC.s 			page 21


 230              		.cfi_offset 9, -12
 231              		.cfi_offset 10, -8
 232              		.cfi_offset 14, -4
 233 0004 DDF82090 		ldr	r9, [sp, #32]
 234              	.LVL18:
 320:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 235              		.loc 1 320 0
 236 0008 60B1     		cbz	r0, .L41
 237 000a 0646     		mov	r6, r0
 321:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 238              		.loc 1 321 0
 239 000c 11F07F4A 		ands	r10, r1, #-16777216
 240 0010 11D0     		beq	.L20
 241              	.LBB41:
 242              	.LBB42:
 243              		.loc 2 195 0
 244              		.syntax unified
 245              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 246 0012 4FF05003 			mov r3, #80												
 247 0016 83F31188 		msr basepri, r3											
 248 001a BFF36F8F 		isb														
 249 001e BFF34F8F 		dsb														
 250              	
 251              	@ 0 "" 2
 252              	.LVL19:
 253              		.thumb
 254              		.syntax unified
 255              	.L21:
 256 0022 FEE7     		b	.L21
 257              	.LVL20:
 258              	.L41:
 259              	.LBE42:
 260              	.LBE41:
 261              	.LBB43:
 262              	.LBB44:
 263              		.syntax unified
 264              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 265 0024 4FF05003 			mov r3, #80												
 266 0028 83F31188 		msr basepri, r3											
 267 002c BFF36F8F 		isb														
 268 0030 BFF34F8F 		dsb														
 269              	
 270              	@ 0 "" 2
 271              	.LVL21:
 272              		.thumb
 273              		.syntax unified
 274              	.L19:
 275 0034 FEE7     		b	.L19
 276              	.LVL22:
 277              	.L20:
 278              	.LBE44:
 279              	.LBE43:
 322:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 280              		.loc 1 322 0
 281 0036 41B9     		cbnz	r1, .L22
 282              	.LBB45:
 283              	.LBB46:
ARM GAS  /tmp/ccRKRluC.s 			page 22


 284              		.loc 2 195 0
 285              		.syntax unified
 286              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 287 0038 4FF05003 			mov r3, #80												
 288 003c 83F31188 		msr basepri, r3											
 289 0040 BFF36F8F 		isb														
 290 0044 BFF34F8F 		dsb														
 291              	
 292              	@ 0 "" 2
 293              	.LVL23:
 294              		.thumb
 295              		.syntax unified
 296              	.L23:
 297 0048 FEE7     		b	.L23
 298              	.LVL24:
 299              	.L22:
 300 004a 9846     		mov	r8, r3
 301 004c 1746     		mov	r7, r2
 302 004e 0D46     		mov	r5, r1
 303              	.LBE46:
 304              	.LBE45:
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 305              		.loc 1 325 0
 306 0050 FFF7FEFF 		bl	xTaskGetSchedulerState
 307              	.LVL25:
 308 0054 68B9     		cbnz	r0, .L35
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 309              		.loc 1 325 0 is_stmt 0 discriminator 2
 310 0056 B9F1000F 		cmp	r9, #0
 311 005a 0CD1     		bne	.L36
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 312              		.loc 1 325 0
 313 005c 0123     		movs	r3, #1
 314              	.L24:
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 315              		.loc 1 325 0 discriminator 6
 316 005e 63B9     		cbnz	r3, .L25
 317              	.LBB47:
 318              	.LBB48:
 319              		.loc 2 195 0 is_stmt 1
 320              		.syntax unified
 321              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 322 0060 4FF05003 			mov r3, #80												
 323 0064 83F31188 		msr basepri, r3											
 324 0068 BFF36F8F 		isb														
 325 006c BFF34F8F 		dsb														
 326              	
 327              	@ 0 "" 2
 328              	.LVL26:
 329              		.thumb
 330              		.syntax unified
 331              	.L26:
 332 0070 FEE7     		b	.L26
 333              	.L35:
 334              	.LBE48:
 335              	.LBE47:
 325:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
ARM GAS  /tmp/ccRKRluC.s 			page 23


 336              		.loc 1 325 0
 337 0072 0123     		movs	r3, #1
 338 0074 F3E7     		b	.L24
 339              	.L36:
 340 0076 0023     		movs	r3, #0
 341 0078 F1E7     		b	.L24
 342              	.L25:
 329:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 343              		.loc 1 329 0
 344 007a FFF7FEFF 		bl	vTaskSuspendAll
 345              	.LVL27:
 346              	.LBB49:
 331:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 347              		.loc 1 331 0
 348 007e 3468     		ldr	r4, [r6]
 349              	.LVL28:
 334:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 350              		.loc 1 334 0
 351 0080 4246     		mov	r2, r8
 352 0082 2946     		mov	r1, r5
 353 0084 2046     		mov	r0, r4
 354 0086 FFF7FEFF 		bl	prvTestWaitCondition
 355              	.LVL29:
 336:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 356              		.loc 1 336 0
 357 008a 58B3     		cbz	r0, .L27
 358              	.LVL30:
 344:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 359              		.loc 1 344 0
 360 008c 17B1     		cbz	r7, .L28
 346:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 361              		.loc 1 346 0
 362 008e 24EA0503 		bic	r3, r4, r5
 363 0092 3360     		str	r3, [r6]
 364              	.LVL31:
 365              	.L28:
 366              	.LBE49:
 397:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 367              		.loc 1 397 0
 368 0094 FFF7FEFF 		bl	xTaskResumeAll
 369              	.LVL32:
 399:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 370              		.loc 1 399 0
 371 0098 BAF1000F 		cmp	r10, #0
 372 009c 1FD0     		beq	.L17
 401:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 373              		.loc 1 401 0
 374 009e 38B9     		cbnz	r0, .L32
 403:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 375              		.loc 1 403 0
 376 00a0 4FF08052 		mov	r2, #268435456
 377 00a4 1B4B     		ldr	r3, .L42
 378 00a6 1A60     		str	r2, [r3]
 379              		.syntax unified
 380              	@ 403 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 381 00a8 BFF34F8F 		dsb
 382              	@ 0 "" 2
ARM GAS  /tmp/ccRKRluC.s 			page 24


 383              	@ 403 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 384 00ac BFF36F8F 		isb
 385              	@ 0 "" 2
 386              		.thumb
 387              		.syntax unified
 388              	.L32:
 414:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 389              		.loc 1 414 0
 390 00b0 FFF7FEFF 		bl	uxTaskResetEventItemValue
 391              	.LVL33:
 392 00b4 0446     		mov	r4, r0
 393              	.LVL34:
 416:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 394              		.loc 1 416 0
 395 00b6 10F0007F 		tst	r0, #33554432
 396 00ba 0ED1     		bne	.L33
 418:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 397              		.loc 1 418 0
 398 00bc FFF7FEFF 		bl	vPortEnterCritical
 399              	.LVL35:
 421:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 400              		.loc 1 421 0
 401 00c0 3468     		ldr	r4, [r6]
 402              	.LVL36:
 425:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 403              		.loc 1 425 0
 404 00c2 4246     		mov	r2, r8
 405 00c4 2946     		mov	r1, r5
 406 00c6 2046     		mov	r0, r4
 407 00c8 FFF7FEFF 		bl	prvTestWaitCondition
 408              	.LVL37:
 409 00cc 18B1     		cbz	r0, .L34
 427:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					{
 410              		.loc 1 427 0
 411 00ce 17B1     		cbz	r7, .L34
 429:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 					}
 412              		.loc 1 429 0
 413 00d0 24EA0505 		bic	r5, r4, r5
 414              	.LVL38:
 415 00d4 3560     		str	r5, [r6]
 416              	.L34:
 417              	.LVL39:
 442:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 418              		.loc 1 442 0
 419 00d6 FFF7FEFF 		bl	vPortExitCritical
 420              	.LVL40:
 421              	.L33:
 450:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 422              		.loc 1 450 0
 423 00da 24F07F44 		bic	r4, r4, #-16777216
 424              	.LVL41:
 425              	.L17:
 458:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 426              		.loc 1 458 0
 427 00de 2046     		mov	r0, r4
 428 00e0 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 429              	.LVL42:
ARM GAS  /tmp/ccRKRluC.s 			page 25


 430              	.L27:
 431              	.LBB50:
 353:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 432              		.loc 1 353 0
 433 00e4 B9F1000F 		cmp	r9, #0
 434 00e8 11D0     		beq	.L38
 366:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 435              		.loc 1 366 0
 436 00ea 6FB9     		cbnz	r7, .L39
 437              	.LBE50:
 314:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** BaseType_t xWaitConditionMet, xAlreadyYielded;
 438              		.loc 1 314 0
 439 00ec 0021     		movs	r1, #0
 440              	.L29:
 441              	.LVL43:
 442              	.LBB51:
 375:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 443              		.loc 1 375 0
 444 00ee B8F1000F 		cmp	r8, #0
 445 00f2 01D0     		beq	.L30
 377:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 446              		.loc 1 377 0
 447 00f4 41F08061 		orr	r1, r1, #67108864
 448              	.LVL44:
 449              	.L30:
 387:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 450              		.loc 1 387 0
 451 00f8 4A46     		mov	r2, r9
 452 00fa 2943     		orrs	r1, r1, r5
 453              	.LVL45:
 454 00fc 301D     		adds	r0, r6, #4
 455              	.LVL46:
 456 00fe FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 457              	.LVL47:
 458 0102 CA46     		mov	r10, r9
 392:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 459              		.loc 1 392 0
 460 0104 0024     		movs	r4, #0
 461              	.LVL48:
 462 0106 C5E7     		b	.L28
 463              	.LVL49:
 464              	.L39:
 368:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 465              		.loc 1 368 0
 466 0108 4FF08071 		mov	r1, #16777216
 467 010c EFE7     		b	.L29
 468              	.L38:
 469 010e CA46     		mov	r10, r9
 470 0110 C0E7     		b	.L28
 471              	.L43:
 472 0112 00BF     		.align	2
 473              	.L42:
 474 0114 04ED00E0 		.word	-536810236
 475              	.LBE51:
 476              		.cfi_endproc
 477              	.LFE7:
 479              		.section	.text.xEventGroupClearBits,"ax",%progbits
ARM GAS  /tmp/ccRKRluC.s 			page 26


 480              		.align	1
 481              		.global	xEventGroupClearBits
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 485              		.fpu fpv4-sp-d16
 487              	xEventGroupClearBits:
 488              	.LFB8:
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 489              		.loc 1 462 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              	.LVL50:
 468:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 494              		.loc 1 468 0
 495 0000 68B1     		cbz	r0, .L51
 462:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 496              		.loc 1 462 0
 497 0002 70B5     		push	{r4, r5, r6, lr}
 498              		.cfi_def_cfa_offset 16
 499              		.cfi_offset 4, -16
 500              		.cfi_offset 5, -12
 501              		.cfi_offset 6, -8
 502              		.cfi_offset 14, -4
 503 0004 0546     		mov	r5, r0
 469:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 504              		.loc 1 469 0
 505 0006 11F07F4F 		tst	r1, #-16777216
 506 000a 11D0     		beq	.L47
 507              	.LBB52:
 508              	.LBB53:
 509              		.loc 2 195 0
 510              		.syntax unified
 511              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 512 000c 4FF05003 			mov r3, #80												
 513 0010 83F31188 		msr basepri, r3											
 514 0014 BFF36F8F 		isb														
 515 0018 BFF34F8F 		dsb														
 516              	
 517              	@ 0 "" 2
 518              	.LVL51:
 519              		.thumb
 520              		.syntax unified
 521              	.L48:
 522 001c FEE7     		b	.L48
 523              	.L51:
 524              		.cfi_def_cfa_offset 0
 525              		.cfi_restore 4
 526              		.cfi_restore 5
 527              		.cfi_restore 6
 528              		.cfi_restore 14
 529              	.LBE53:
 530              	.LBE52:
 531              	.LBB54:
 532              	.LBB55:
 533              		.syntax unified
ARM GAS  /tmp/ccRKRluC.s 			page 27


 534              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 535 001e 4FF05003 			mov r3, #80												
 536 0022 83F31188 		msr basepri, r3											
 537 0026 BFF36F8F 		isb														
 538 002a BFF34F8F 		dsb														
 539              	
 540              	@ 0 "" 2
 541              	.LVL52:
 542              		.thumb
 543              		.syntax unified
 544              	.L46:
 545 002e FEE7     		b	.L46
 546              	.L47:
 547              		.cfi_def_cfa_offset 16
 548              		.cfi_offset 4, -16
 549              		.cfi_offset 5, -12
 550              		.cfi_offset 6, -8
 551              		.cfi_offset 14, -4
 552 0030 0C46     		mov	r4, r1
 553              	.LBE55:
 554              	.LBE54:
 471:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 555              		.loc 1 471 0
 556 0032 FFF7FEFF 		bl	vPortEnterCritical
 557              	.LVL53:
 477:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 558              		.loc 1 477 0
 559 0036 2E68     		ldr	r6, [r5]
 560              	.LVL54:
 480:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 561              		.loc 1 480 0
 562 0038 26EA0404 		bic	r4, r6, r4
 563              	.LVL55:
 564 003c 2C60     		str	r4, [r5]
 482:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 565              		.loc 1 482 0
 566 003e FFF7FEFF 		bl	vPortExitCritical
 567              	.LVL56:
 485:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 568              		.loc 1 485 0
 569 0042 3046     		mov	r0, r6
 570 0044 70BD     		pop	{r4, r5, r6, pc}
 571              		.cfi_endproc
 572              	.LFE8:
 574              		.section	.text.vEventGroupClearBitsCallback,"ax",%progbits
 575              		.align	1
 576              		.global	vEventGroupClearBitsCallback
 577              		.syntax unified
 578              		.thumb
 579              		.thumb_func
 580              		.fpu fpv4-sp-d16
 582              	vEventGroupClearBitsCallback:
 583              	.LFB14:
 666:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't 
 584              		.loc 1 666 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccRKRluC.s 			page 28


 587              		@ frame_needed = 0, uses_anonymous_args = 0
 588              	.LVL57:
 589 0000 08B5     		push	{r3, lr}
 590              		.cfi_def_cfa_offset 8
 591              		.cfi_offset 3, -8
 592              		.cfi_offset 14, -4
 667:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 593              		.loc 1 667 0
 594 0002 FFF7FEFF 		bl	xEventGroupClearBits
 595              	.LVL58:
 596 0006 08BD     		pop	{r3, pc}
 597              		.cfi_endproc
 598              	.LFE14:
 600              		.section	.text.xEventGroupClearBitsFromISR,"ax",%progbits
 601              		.align	1
 602              		.global	xEventGroupClearBitsFromISR
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu fpv4-sp-d16
 608              	xEventGroupClearBitsFromISR:
 609              	.LFB9:
 491:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		BaseType_t xReturn;
 610              		.loc 1 491 0
 611              		.cfi_startproc
 612              		@ args = 0, pretend = 0, frame = 0
 613              		@ frame_needed = 0, uses_anonymous_args = 0
 614              	.LVL59:
 615 0000 08B5     		push	{r3, lr}
 616              		.cfi_def_cfa_offset 8
 617              		.cfi_offset 3, -8
 618              		.cfi_offset 14, -4
 495:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 619              		.loc 1 495 0
 620 0002 0023     		movs	r3, #0
 621 0004 0A46     		mov	r2, r1
 622 0006 0146     		mov	r1, r0
 623              	.LVL60:
 624 0008 0148     		ldr	r0, .L56
 625              	.LVL61:
 626 000a FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 627              	.LVL62:
 498:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 628              		.loc 1 498 0
 629 000e 08BD     		pop	{r3, pc}
 630              	.L57:
 631              		.align	2
 632              	.L56:
 633 0010 00000000 		.word	vEventGroupClearBitsCallback
 634              		.cfi_endproc
 635              	.LFE9:
 637              		.section	.text.xEventGroupGetBitsFromISR,"ax",%progbits
 638              		.align	1
 639              		.global	xEventGroupGetBitsFromISR
 640              		.syntax unified
 641              		.thumb
 642              		.thumb_func
ARM GAS  /tmp/ccRKRluC.s 			page 29


 643              		.fpu fpv4-sp-d16
 645              	xEventGroupGetBitsFromISR:
 646              	.LFB10:
 504:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** UBaseType_t uxSavedInterruptStatus;
 647              		.loc 1 504 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652              	.LVL63:
 653              	.LBB56:
 654              	.LBB57:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 655              		.loc 2 211 0
 656              		.syntax unified
 657              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 658 0000 EFF31183 			mrs r3, basepri											
 659 0004 4FF05002 		mov r2, #80												
 660 0008 82F31188 		msr basepri, r2											
 661 000c BFF36F8F 		isb														
 662 0010 BFF34F8F 		dsb														
 663              	
 664              	@ 0 "" 2
 665              		.thumb
 666              		.syntax unified
 667              	.LBE57:
 668              	.LBE56:
 511:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 669              		.loc 1 511 0
 670 0014 0068     		ldr	r0, [r0]
 671              	.LVL64:
 672              	.LBB58:
 673              	.LBB59:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccRKRluC.s 			page 30


 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 674              		.loc 2 229 0
 675              		.syntax unified
 676              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 677 0016 83F31188 			msr basepri, r3	
 678              	@ 0 "" 2
 679              		.thumb
 680              		.syntax unified
 681              	.LBE59:
 682              	.LBE58:
 516:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 683              		.loc 1 516 0
 684 001a 7047     		bx	lr
 685              		.cfi_endproc
 686              	.LFE10:
 688              		.section	.text.xEventGroupSetBits,"ax",%progbits
 689              		.align	1
 690              		.global	xEventGroupSetBits
 691              		.syntax unified
 692              		.thumb
 693              		.thumb_func
 694              		.fpu fpv4-sp-d16
 696              	xEventGroupSetBits:
 697              	.LFB11:
 520:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** ListItem_t *pxListItem, *pxNext;
 698              		.loc 1 520 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              	.LVL65:
 703 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 704              		.cfi_def_cfa_offset 24
 705              		.cfi_offset 3, -24
 706              		.cfi_offset 4, -20
 707              		.cfi_offset 5, -16
 708              		.cfi_offset 6, -12
 709              		.cfi_offset 7, -8
 710              		.cfi_offset 14, -4
 711              	.LVL66:
 530:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 712              		.loc 1 530 0
 713 0002 60B1     		cbz	r0, .L73
 714 0004 0446     		mov	r4, r0
 531:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 715              		.loc 1 531 0
 716 0006 11F07F4F 		tst	r1, #-16777216
 717 000a 11D0     		beq	.L62
 718              	.LBB60:
 719              	.LBB61:
ARM GAS  /tmp/ccRKRluC.s 			page 31


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 720              		.loc 2 195 0
 721              		.syntax unified
 722              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 723 000c 4FF05003 			mov r3, #80												
 724 0010 83F31188 		msr basepri, r3											
 725 0014 BFF36F8F 		isb														
 726 0018 BFF34F8F 		dsb														
 727              	
 728              	@ 0 "" 2
 729              	.LVL67:
 730              		.thumb
 731              		.syntax unified
 732              	.L63:
 733 001c FEE7     		b	.L63
 734              	.L73:
 735              	.LBE61:
 736              	.LBE60:
 737              	.LBB62:
 738              	.LBB63:
 739              		.syntax unified
 740              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 741 001e 4FF05003 			mov r3, #80												
 742 0022 83F31188 		msr basepri, r3											
 743 0026 BFF36F8F 		isb														
 744 002a BFF34F8F 		dsb														
 745              	
 746              	@ 0 "" 2
 747              	.LVL68:
 748              		.thumb
 749              		.syntax unified
 750              	.L61:
 751 002e FEE7     		b	.L61
 752              	.L62:
 753 0030 0D46     		mov	r5, r1
 754              	.LVL69:
 755              	.LBE63:
 756              	.LBE62:
 534:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	vTaskSuspendAll();
 757              		.loc 1 534 0
 758 0032 00F10C06 		add	r6, r0, #12
 759              	.LVL70:
 535:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 760              		.loc 1 535 0
 761 0036 FFF7FEFF 		bl	vTaskSuspendAll
 762              	.LVL71:
 539:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 763              		.loc 1 539 0
 764 003a 2069     		ldr	r0, [r4, #16]
 765              	.LVL72:
 542:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 766              		.loc 1 542 0
 767 003c 2368     		ldr	r3, [r4]
 768 003e 2B43     		orrs	r3, r3, r5
 769 0040 2360     		str	r3, [r4]
 524:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 770              		.loc 1 524 0
ARM GAS  /tmp/ccRKRluC.s 			page 32


 771 0042 0025     		movs	r5, #0
 772              	.LVL73:
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 773              		.loc 1 545 0
 774 0044 0FE0     		b	.L64
 775              	.LVL74:
 776              	.L65:
 567:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 777              		.loc 1 567 0
 778 0046 2368     		ldr	r3, [r4]
 779 0048 32EA0303 		bics	r3, r2, r3
 780 004c 03D0     		beq	.L71
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 781              		.loc 1 549 0
 782 004e 0023     		movs	r3, #0
 783 0050 16E0     		b	.L66
 784              	.L70:
 560:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 785              		.loc 1 560 0
 786 0052 0123     		movs	r3, #1
 787 0054 14E0     		b	.L66
 788              	.L71:
 570:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 789              		.loc 1 570 0
 790 0056 0123     		movs	r3, #1
 791 0058 12E0     		b	.L66
 792              	.LVL75:
 793              	.L68:
 594:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 794              		.loc 1 594 0
 795 005a 2168     		ldr	r1, [r4]
 796              	.LVL76:
 797 005c 41F00071 		orr	r1, r1, #33554432
 798 0060 FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 799              	.LVL77:
 800              	.L67:
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 801              		.loc 1 549 0
 802 0064 3846     		mov	r0, r7
 803              	.LVL78:
 804              	.L64:
 545:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 805              		.loc 1 545 0
 806 0066 B042     		cmp	r0, r6
 807 0068 11D0     		beq	.L74
 547:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 808              		.loc 1 547 0
 809 006a 4768     		ldr	r7, [r0, #4]
 810              	.LVL79:
 548:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xMatchFound = pdFALSE;
 811              		.loc 1 548 0
 812 006c 0168     		ldr	r1, [r0]
 813              	.LVL80:
 553:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 814              		.loc 1 553 0
 815 006e 21F07F42 		bic	r2, r1, #-16777216
 816              	.LVL81:
ARM GAS  /tmp/ccRKRluC.s 			page 33


 555:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 817              		.loc 1 555 0
 818 0072 11F0806F 		tst	r1, #67108864
 819 0076 E6D1     		bne	.L65
 558:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 820              		.loc 1 558 0
 821 0078 2368     		ldr	r3, [r4]
 822 007a 1A42     		tst	r2, r3
 823 007c E9D1     		bne	.L70
 549:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 824              		.loc 1 549 0
 825 007e 0023     		movs	r3, #0
 826              	.L66:
 827              	.LVL82:
 577:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 828              		.loc 1 577 0
 829 0080 002B     		cmp	r3, #0
 830 0082 EFD0     		beq	.L67
 580:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 831              		.loc 1 580 0
 832 0084 11F0807F 		tst	r1, #16777216
 833 0088 E7D0     		beq	.L68
 582:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 834              		.loc 1 582 0
 835 008a 1543     		orrs	r5, r5, r2
 836              	.LVL83:
 837 008c E5E7     		b	.L68
 838              	.LVL84:
 839              	.L74:
 605:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 840              		.loc 1 605 0
 841 008e 2368     		ldr	r3, [r4]
 842 0090 23EA0503 		bic	r3, r3, r5
 843 0094 2360     		str	r3, [r4]
 607:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 844              		.loc 1 607 0
 845 0096 FFF7FEFF 		bl	xTaskResumeAll
 846              	.LVL85:
 610:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 847              		.loc 1 610 0
 848 009a 2068     		ldr	r0, [r4]
 849 009c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 850              		.cfi_endproc
 851              	.LFE11:
 853              		.section	.text.xEventGroupSync,"ax",%progbits
 854              		.align	1
 855              		.global	xEventGroupSync
 856              		.syntax unified
 857              		.thumb
 858              		.thumb_func
 859              		.fpu fpv4-sp-d16
 861              	xEventGroupSync:
 862              	.LFB6:
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 863              		.loc 1 192 0
 864              		.cfi_startproc
 865              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccRKRluC.s 			page 34


 866              		@ frame_needed = 0, uses_anonymous_args = 0
 867              	.LVL86:
 198:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	configASSERT( uxBitsToWaitFor != 0 );
 868              		.loc 1 198 0
 869 0000 12F07F4F 		tst	r2, #-16777216
 870 0004 08D0     		beq	.L76
 871              	.LBB64:
 872              	.LBB65:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 873              		.loc 2 195 0
 874              		.syntax unified
 875              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 876 0006 4FF05003 			mov r3, #80												
 877 000a 83F31188 		msr basepri, r3											
 878 000e BFF36F8F 		isb														
 879 0012 BFF34F8F 		dsb														
 880              	
 881              	@ 0 "" 2
 882              	.LVL87:
 883              		.thumb
 884              		.syntax unified
 885              	.L77:
 886 0016 FEE7     		b	.L77
 887              	.LVL88:
 888              	.L76:
 889              	.LBE65:
 890              	.LBE64:
 192:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventBits_t uxOriginalBitValue, uxReturn;
 891              		.loc 1 192 0
 892 0018 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 893              		.cfi_def_cfa_offset 24
 894              		.cfi_offset 4, -24
 895              		.cfi_offset 5, -20
 896              		.cfi_offset 6, -16
 897              		.cfi_offset 7, -12
 898              		.cfi_offset 8, -8
 899              		.cfi_offset 14, -4
 900 001c 0646     		mov	r6, r0
 901 001e 8846     		mov	r8, r1
 902 0020 1546     		mov	r5, r2
 903 0022 1F46     		mov	r7, r3
 199:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 904              		.loc 1 199 0
 905 0024 42B9     		cbnz	r2, .L78
 906              	.LBB66:
 907              	.LBB67:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 908              		.loc 2 195 0
 909              		.syntax unified
 910              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 911 0026 4FF05003 			mov r3, #80												
 912 002a 83F31188 		msr basepri, r3											
 913 002e BFF36F8F 		isb														
 914 0032 BFF34F8F 		dsb														
 915              	
 916              	@ 0 "" 2
 917              	.LVL89:
ARM GAS  /tmp/ccRKRluC.s 			page 35


 918              		.thumb
 919              		.syntax unified
 920              	.L79:
 921 0036 FEE7     		b	.L79
 922              	.LVL90:
 923              	.L78:
 924              	.LBE67:
 925              	.LBE66:
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 926              		.loc 1 202 0
 927 0038 FFF7FEFF 		bl	xTaskGetSchedulerState
 928              	.LVL91:
 929 003c 58B9     		cbnz	r0, .L90
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 930              		.loc 1 202 0 is_stmt 0 discriminator 2
 931 003e 67B9     		cbnz	r7, .L91
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 932              		.loc 1 202 0
 933 0040 0123     		movs	r3, #1
 934              	.L80:
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 935              		.loc 1 202 0 discriminator 6
 936 0042 63B9     		cbnz	r3, .L81
 937              	.LBB68:
 938              	.LBB69:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 939              		.loc 2 195 0 is_stmt 1
 940              		.syntax unified
 941              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 942 0044 4FF05003 			mov r3, #80												
 943 0048 83F31188 		msr basepri, r3											
 944 004c BFF36F8F 		isb														
 945 0050 BFF34F8F 		dsb														
 946              	
 947              	@ 0 "" 2
 948              	.LVL92:
 949              		.thumb
 950              		.syntax unified
 951              	.L82:
 952 0054 FEE7     		b	.L82
 953              	.L90:
 954              	.LBE69:
 955              	.LBE68:
 202:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 956              		.loc 1 202 0
 957 0056 0123     		movs	r3, #1
 958 0058 F3E7     		b	.L80
 959              	.L91:
 960 005a 0023     		movs	r3, #0
 961 005c F1E7     		b	.L80
 962              	.L81:
 206:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 963              		.loc 1 206 0
 964 005e FFF7FEFF 		bl	vTaskSuspendAll
 965              	.LVL93:
 208:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 966              		.loc 1 208 0
ARM GAS  /tmp/ccRKRluC.s 			page 36


 967 0062 3468     		ldr	r4, [r6]
 968              	.LVL94:
 210:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 969              		.loc 1 210 0
 970 0064 4146     		mov	r1, r8
 971 0066 3046     		mov	r0, r6
 972 0068 FFF7FEFF 		bl	xEventGroupSetBits
 973              	.LVL95:
 212:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 974              		.loc 1 212 0
 975 006c 44EA0804 		orr	r4, r4, r8
 976              	.LVL96:
 977 0070 35EA0403 		bics	r3, r5, r4
 978 0074 26D1     		bne	.L83
 979              	.LVL97:
 219:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 980              		.loc 1 219 0
 981 0076 3368     		ldr	r3, [r6]
 982 0078 23EA0503 		bic	r3, r3, r5
 983 007c 3360     		str	r3, [r6]
 984              	.LVL98:
 221:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 985              		.loc 1 221 0
 986 007e 0027     		movs	r7, #0
 987              	.LVL99:
 988              	.L84:
 249:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 989              		.loc 1 249 0
 990 0080 FFF7FEFF 		bl	xTaskResumeAll
 991              	.LVL100:
 251:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 992              		.loc 1 251 0
 993 0084 DFB1     		cbz	r7, .L75
 253:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 994              		.loc 1 253 0
 995 0086 38B9     		cbnz	r0, .L87
 255:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 996              		.loc 1 255 0
 997 0088 4FF08052 		mov	r2, #268435456
 998 008c 134B     		ldr	r3, .L94
 999 008e 1A60     		str	r2, [r3]
 1000              		.syntax unified
 1001              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 1002 0090 BFF34F8F 		dsb
 1003              	@ 0 "" 2
 1004              	@ 255 "Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" 1
 1005 0094 BFF36F8F 		isb
 1006              	@ 0 "" 2
 1007              		.thumb
 1008              		.syntax unified
 1009              	.L87:
 266:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 1010              		.loc 1 266 0
 1011 0098 FFF7FEFF 		bl	uxTaskResetEventItemValue
 1012              	.LVL101:
 1013 009c 0446     		mov	r4, r0
 1014              	.LVL102:
ARM GAS  /tmp/ccRKRluC.s 			page 37


 268:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1015              		.loc 1 268 0
 1016 009e 10F0007F 		tst	r0, #33554432
 1017 00a2 0AD1     		bne	.L88
 271:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 1018              		.loc 1 271 0
 1019 00a4 FFF7FEFF 		bl	vPortEnterCritical
 1020              	.LVL103:
 273:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 1021              		.loc 1 273 0
 1022 00a8 3468     		ldr	r4, [r6]
 1023              	.LVL104:
 279:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				{
 1024              		.loc 1 279 0
 1025 00aa 35EA0403 		bics	r3, r5, r4
 1026 00ae 02D1     		bne	.L89
 281:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				}
 1027              		.loc 1 281 0
 1028 00b0 24EA0505 		bic	r5, r4, r5
 1029              	.LVL105:
 1030 00b4 3560     		str	r5, [r6]
 1031              	.L89:
 288:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 1032              		.loc 1 288 0
 1033 00b6 FFF7FEFF 		bl	vPortExitCritical
 1034              	.LVL106:
 1035              	.L88:
 299:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1036              		.loc 1 299 0
 1037 00ba 24F07F44 		bic	r4, r4, #-16777216
 1038              	.LVL107:
 1039              	.L75:
 308:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 1040              		.loc 1 308 0
 1041 00be 2046     		mov	r0, r4
 1042 00c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1043              	.LVL108:
 1044              	.L83:
 225:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 1045              		.loc 1 225 0
 1046 00c4 3FB1     		cbz	r7, .L85
 232:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 1047              		.loc 1 232 0
 1048 00c6 3A46     		mov	r2, r7
 1049 00c8 45F0A061 		orr	r1, r5, #83886080
 1050 00cc 301D     		adds	r0, r6, #4
 1051 00ce FFF7FEFF 		bl	vTaskPlaceOnUnorderedEventList
 1052              	.LVL109:
 238:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 1053              		.loc 1 238 0
 1054 00d2 0024     		movs	r4, #0
 1055 00d4 D4E7     		b	.L84
 1056              	.LVL110:
 1057              	.L85:
 244:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 				xTimeoutOccurred = pdTRUE;
 1058              		.loc 1 244 0
 1059 00d6 3468     		ldr	r4, [r6]
ARM GAS  /tmp/ccRKRluC.s 			page 38


 1060              	.LVL111:
 1061 00d8 D2E7     		b	.L84
 1062              	.L95:
 1063 00da 00BF     		.align	2
 1064              	.L94:
 1065 00dc 04ED00E0 		.word	-536810236
 1066              		.cfi_endproc
 1067              	.LFE6:
 1069              		.section	.text.vEventGroupSetBitsCallback,"ax",%progbits
 1070              		.align	1
 1071              		.global	vEventGroupSetBitsCallback
 1072              		.syntax unified
 1073              		.thumb
 1074              		.thumb_func
 1075              		.fpu fpv4-sp-d16
 1077              	vEventGroupSetBitsCallback:
 1078              	.LFB13:
 658:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoi
 1079              		.loc 1 658 0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 0
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 1083              	.LVL112:
 1084 0000 08B5     		push	{r3, lr}
 1085              		.cfi_def_cfa_offset 8
 1086              		.cfi_offset 3, -8
 1087              		.cfi_offset 14, -4
 659:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1088              		.loc 1 659 0
 1089 0002 FFF7FEFF 		bl	xEventGroupSetBits
 1090              	.LVL113:
 1091 0006 08BD     		pop	{r3, pc}
 1092              		.cfi_endproc
 1093              	.LFE13:
 1095              		.section	.text.vEventGroupDelete,"ax",%progbits
 1096              		.align	1
 1097              		.global	vEventGroupDelete
 1098              		.syntax unified
 1099              		.thumb
 1100              		.thumb_func
 1101              		.fpu fpv4-sp-d16
 1103              	vEventGroupDelete:
 1104              	.LFB12:
 614:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** EventGroup_t *pxEventBits = xEventGroup;
 1105              		.loc 1 614 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              	.LVL114:
 1110 0000 10B5     		push	{r4, lr}
 1111              		.cfi_def_cfa_offset 8
 1112              		.cfi_offset 4, -8
 1113              		.cfi_offset 14, -4
 1114 0002 0446     		mov	r4, r0
 1115              	.LVL115:
 618:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1116              		.loc 1 618 0
ARM GAS  /tmp/ccRKRluC.s 			page 39


 1117 0004 FFF7FEFF 		bl	vTaskSuspendAll
 1118              	.LVL116:
 1119              	.L99:
 622:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 1120              		.loc 1 622 0
 1121 0008 6368     		ldr	r3, [r4, #4]
 1122 000a 93B1     		cbz	r3, .L105
 626:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO
 1123              		.loc 1 626 0
 1124 000c 2069     		ldr	r0, [r4, #16]
 1125 000e 04F10C03 		add	r3, r4, #12
 1126 0012 9842     		cmp	r0, r3
 1127 0014 04D0     		beq	.L106
 627:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 1128              		.loc 1 627 0
 1129 0016 4FF00071 		mov	r1, #33554432
 1130 001a FFF7FEFF 		bl	vTaskRemoveFromUnorderedEventList
 1131              	.LVL117:
 1132 001e F3E7     		b	.L99
 1133              	.L106:
 1134              	.LBB70:
 1135              	.LBB71:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1136              		.loc 2 195 0
 1137              		.syntax unified
 1138              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1139 0020 4FF05003 			mov r3, #80												
 1140 0024 83F31188 		msr basepri, r3											
 1141 0028 BFF36F8F 		isb														
 1142 002c BFF34F8F 		dsb														
 1143              	
 1144              	@ 0 "" 2
 1145              	.LVL118:
 1146              		.thumb
 1147              		.syntax unified
 1148              	.L101:
 1149 0030 FEE7     		b	.L101
 1150              	.L105:
 1151              	.LBE71:
 1152              	.LBE70:
 640:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			{
 1153              		.loc 1 640 0
 1154 0032 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 1155 0034 13B1     		cbz	r3, .L107
 1156              	.L103:
 651:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** }
 1157              		.loc 1 651 0
 1158 0036 FFF7FEFF 		bl	xTaskResumeAll
 1159              	.LVL119:
 1160 003a 10BD     		pop	{r4, pc}
 1161              	.LVL120:
 1162              	.L107:
 642:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			}
 1163              		.loc 1 642 0
 1164 003c 2046     		mov	r0, r4
 1165 003e FFF7FEFF 		bl	vPortFree
 1166              	.LVL121:
ARM GAS  /tmp/ccRKRluC.s 			page 40


 1167 0042 F8E7     		b	.L103
 1168              		.cfi_endproc
 1169              	.LFE12:
 1171              		.section	.text.xEventGroupSetBitsFromISR,"ax",%progbits
 1172              		.align	1
 1173              		.global	xEventGroupSetBitsFromISR
 1174              		.syntax unified
 1175              		.thumb
 1176              		.thumb_func
 1177              		.fpu fpv4-sp-d16
 1179              	xEventGroupSetBitsFromISR:
 1180              	.LFB16:
 704:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 705:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 706:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_T
 707:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 708:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSe
 709:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1181              		.loc 1 709 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 1185              	.LVL122:
 1186 0000 08B5     		push	{r3, lr}
 1187              		.cfi_def_cfa_offset 8
 1188              		.cfi_offset 3, -8
 1189              		.cfi_offset 14, -4
 710:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	BaseType_t xReturn;
 711:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 712:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
 713:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( ui
 1190              		.loc 1 713 0
 1191 0002 1346     		mov	r3, r2
 1192 0004 0A46     		mov	r2, r1
 1193              	.LVL123:
 1194 0006 0146     		mov	r1, r0
 1195              	.LVL124:
 1196 0008 0148     		ldr	r0, .L110
 1197              	.LVL125:
 1198 000a FFF7FEFF 		bl	xTimerPendFunctionCallFromISR
 1199              	.LVL126:
 714:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 716:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1200              		.loc 1 716 0
 1201 000e 08BD     		pop	{r3, pc}
 1202              	.L111:
 1203              		.align	2
 1204              	.L110:
 1205 0010 00000000 		.word	vEventGroupSetBitsCallback
 1206              		.cfi_endproc
 1207              	.LFE16:
 1209              		.section	.text.uxEventGroupGetNumber,"ax",%progbits
 1210              		.align	1
 1211              		.global	uxEventGroupGetNumber
 1212              		.syntax unified
 1213              		.thumb
ARM GAS  /tmp/ccRKRluC.s 			page 41


 1214              		.thumb_func
 1215              		.fpu fpv4-sp-d16
 1217              	uxEventGroupGetNumber:
 1218              	.LFB17:
 717:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif
 719:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 720:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if (configUSE_TRACE_FACILITY == 1)
 722:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
 724:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1219              		.loc 1 724 0
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 0
 1222              		@ frame_needed = 0, uses_anonymous_args = 0
 1223              		@ link register save eliminated.
 1224              	.LVL127:
 725:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	UBaseType_t xReturn;
 726:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	EventGroup_t const *pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupH
 727:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		if( xEventGroup == NULL )
 1225              		.loc 1 728 0
 1226 0000 08B1     		cbz	r0, .L114
 729:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 730:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xReturn = 0;
 731:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 732:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		else
 733:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		{
 734:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 			xReturn = pxEventBits->uxEventGroupNumber;
 1227              		.loc 1 734 0
 1228 0002 8069     		ldr	r0, [r0, #24]
 1229              	.LVL128:
 1230 0004 7047     		bx	lr
 1231              	.LVL129:
 1232              	.L114:
 730:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 1233              		.loc 1 730 0
 1234 0006 0020     		movs	r0, #0
 1235              	.LVL130:
 735:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		}
 736:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 737:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		return xReturn;
 738:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	}
 1236              		.loc 1 738 0
 1237 0008 7047     		bx	lr
 1238              		.cfi_endproc
 1239              	.LFE17:
 1241              		.section	.text.vEventGroupSetNumber,"ax",%progbits
 1242              		.align	1
 1243              		.global	vEventGroupSetNumber
 1244              		.syntax unified
 1245              		.thumb
 1246              		.thumb_func
 1247              		.fpu fpv4-sp-d16
 1249              	vEventGroupSetNumber:
 1250              	.LFB18:
ARM GAS  /tmp/ccRKRluC.s 			page 42


 739:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #endif /* configUSE_TRACE_FACILITY */
 741:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** /*-----------------------------------------------------------*/
 742:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 743:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 744:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 
 745:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
 746:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 	{
 1251              		.loc 1 746 0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 0
 1254              		@ frame_needed = 0, uses_anonymous_args = 0
 1255              		@ link register save eliminated.
 1256              	.LVL131:
 747:Middlewares/Third_Party/FreeRTOS/Source/event_groups.c **** 		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079
 1257              		.loc 1 747 0
 1258 0000 8161     		str	r1, [r0, #24]
 1259 0002 7047     		bx	lr
 1260              		.cfi_endproc
 1261              	.LFE18:
 1263              		.text
 1264              	.Letext0:
 1265              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1266              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 1267              		.file 5 "/usr/include/newlib/sys/lock.h"
 1268              		.file 6 "/usr/include/newlib/sys/_types.h"
 1269              		.file 7 "/usr/include/newlib/sys/reent.h"
 1270              		.file 8 "/usr/include/newlib/stdlib.h"
 1271              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 1272              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 1273              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1274              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 1275              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"
 1276              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 1277              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1278              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccRKRluC.s 			page 43


DEFINED SYMBOLS
                            *ABS*:0000000000000000 event_groups.c
     /tmp/ccRKRluC.s:18     .text.prvTestWaitCondition:0000000000000000 $t
     /tmp/ccRKRluC.s:24     .text.prvTestWaitCondition:0000000000000000 prvTestWaitCondition
     /tmp/ccRKRluC.s:68     .text.xEventGroupCreateStatic:0000000000000000 $t
     /tmp/ccRKRluC.s:75     .text.xEventGroupCreateStatic:0000000000000000 xEventGroupCreateStatic
     /tmp/ccRKRluC.s:166    .text.xEventGroupCreate:0000000000000000 $t
     /tmp/ccRKRluC.s:173    .text.xEventGroupCreate:0000000000000000 xEventGroupCreate
     /tmp/ccRKRluC.s:209    .text.xEventGroupWaitBits:0000000000000000 $t
     /tmp/ccRKRluC.s:216    .text.xEventGroupWaitBits:0000000000000000 xEventGroupWaitBits
     /tmp/ccRKRluC.s:474    .text.xEventGroupWaitBits:0000000000000114 $d
     /tmp/ccRKRluC.s:480    .text.xEventGroupClearBits:0000000000000000 $t
     /tmp/ccRKRluC.s:487    .text.xEventGroupClearBits:0000000000000000 xEventGroupClearBits
     /tmp/ccRKRluC.s:575    .text.vEventGroupClearBitsCallback:0000000000000000 $t
     /tmp/ccRKRluC.s:582    .text.vEventGroupClearBitsCallback:0000000000000000 vEventGroupClearBitsCallback
     /tmp/ccRKRluC.s:601    .text.xEventGroupClearBitsFromISR:0000000000000000 $t
     /tmp/ccRKRluC.s:608    .text.xEventGroupClearBitsFromISR:0000000000000000 xEventGroupClearBitsFromISR
     /tmp/ccRKRluC.s:633    .text.xEventGroupClearBitsFromISR:0000000000000010 $d
     /tmp/ccRKRluC.s:638    .text.xEventGroupGetBitsFromISR:0000000000000000 $t
     /tmp/ccRKRluC.s:645    .text.xEventGroupGetBitsFromISR:0000000000000000 xEventGroupGetBitsFromISR
     /tmp/ccRKRluC.s:689    .text.xEventGroupSetBits:0000000000000000 $t
     /tmp/ccRKRluC.s:696    .text.xEventGroupSetBits:0000000000000000 xEventGroupSetBits
     /tmp/ccRKRluC.s:854    .text.xEventGroupSync:0000000000000000 $t
     /tmp/ccRKRluC.s:861    .text.xEventGroupSync:0000000000000000 xEventGroupSync
     /tmp/ccRKRluC.s:1065   .text.xEventGroupSync:00000000000000dc $d
     /tmp/ccRKRluC.s:1070   .text.vEventGroupSetBitsCallback:0000000000000000 $t
     /tmp/ccRKRluC.s:1077   .text.vEventGroupSetBitsCallback:0000000000000000 vEventGroupSetBitsCallback
     /tmp/ccRKRluC.s:1096   .text.vEventGroupDelete:0000000000000000 $t
     /tmp/ccRKRluC.s:1103   .text.vEventGroupDelete:0000000000000000 vEventGroupDelete
     /tmp/ccRKRluC.s:1172   .text.xEventGroupSetBitsFromISR:0000000000000000 $t
     /tmp/ccRKRluC.s:1179   .text.xEventGroupSetBitsFromISR:0000000000000000 xEventGroupSetBitsFromISR
     /tmp/ccRKRluC.s:1205   .text.xEventGroupSetBitsFromISR:0000000000000010 $d
     /tmp/ccRKRluC.s:1210   .text.uxEventGroupGetNumber:0000000000000000 $t
     /tmp/ccRKRluC.s:1217   .text.uxEventGroupGetNumber:0000000000000000 uxEventGroupGetNumber
     /tmp/ccRKRluC.s:1242   .text.vEventGroupSetNumber:0000000000000000 $t
     /tmp/ccRKRluC.s:1249   .text.vEventGroupSetNumber:0000000000000000 vEventGroupSetNumber
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSuspendAll
xTaskResumeAll
uxTaskResetEventItemValue
vPortEnterCritical
vPortExitCritical
vTaskPlaceOnUnorderedEventList
xTimerPendFunctionCallFromISR
vTaskRemoveFromUnorderedEventList
vPortFree
