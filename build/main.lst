ARM GAS  /tmp/ccF5CrYN.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.StartDefaultTask,"ax",%progbits
  18              		.align	1
  19              		.global	StartDefaultTask
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	StartDefaultTask:
  26              	.LFB140:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** #include "bms.h"
  27:Core/Src/main.c **** #include "can_setup.h"
  28:Core/Src/main.c **** #include "visEffect.h"
  29:Core/Src/main.c **** #include "ws2812b.h"
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** //#include "visEffect.h"
ARM GAS  /tmp/ccF5CrYN.s 			page 2


  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PD */
  41:Core/Src/main.c **** /* USER CODE END PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  50:Core/Src/main.c **** CAN_HandleTypeDef hcan2;
  51:Core/Src/main.c **** CAN_HandleTypeDef hcan3;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Definitions for defaultTask */
  54:Core/Src/main.c **** osThreadId_t defaultTaskHandle;
  55:Core/Src/main.c **** const osThreadAttr_t defaultTask_attributes = {
  56:Core/Src/main.c ****     .name = "defaultTask",
  57:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  58:Core/Src/main.c ****     .stack_size = 128 * 4};
  59:Core/Src/main.c **** /* Definitions for sendCommand */
  60:Core/Src/main.c **** osThreadId_t sendCommandHandle;
  61:Core/Src/main.c **** const osThreadAttr_t sendCommand_attributes = {
  62:Core/Src/main.c ****     .name = "sendCommand",
  63:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  64:Core/Src/main.c ****     .stack_size = 128 * 4};
  65:Core/Src/main.c **** /* Definitions for balanceCommand */
  66:Core/Src/main.c **** osThreadId_t balanceCommandHandle;
  67:Core/Src/main.c **** const osThreadAttr_t balanceCommand_attributes = {
  68:Core/Src/main.c ****     .name = "balanceCommand",
  69:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityLow,
  70:Core/Src/main.c ****     .stack_size = 128 * 4};
  71:Core/Src/main.c **** /* Definitions for processData */
  72:Core/Src/main.c **** osThreadId_t processDataHandle;
  73:Core/Src/main.c **** const osThreadAttr_t processData_attributes = {
  74:Core/Src/main.c ****     .name = "processData",
  75:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityLow,
  76:Core/Src/main.c ****     .stack_size = 128 * 4};
  77:Core/Src/main.c **** /* USER CODE BEGIN PV */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* USER CODE END PV */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  82:Core/Src/main.c **** void SystemClock_Config(void);
  83:Core/Src/main.c **** static void MX_CAN1_Init(void);
  84:Core/Src/main.c **** static void MX_CAN2_Init(void);
  85:Core/Src/main.c **** static void MX_CAN3_Init(void);
  86:Core/Src/main.c **** void StartDefaultTask(void *argument);
  87:Core/Src/main.c **** void StartsendCommand(void *argument);
  88:Core/Src/main.c **** void StartbalanceCommand(void *argument);
ARM GAS  /tmp/ccF5CrYN.s 			page 3


  89:Core/Src/main.c **** void StartprocessData(void *argument);
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* USER CODE END PFP */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  96:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /* USER CODE END 0 */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** /**
 101:Core/Src/main.c ****   * @brief  The application entry point.
 102:Core/Src/main.c ****   * @retval int
 103:Core/Src/main.c ****   */
 104:Core/Src/main.c **** int main(void)
 105:Core/Src/main.c **** {
 106:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END 1 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 113:Core/Src/main.c ****   HAL_Init();
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE END Init */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* Configure the system clock */
 120:Core/Src/main.c ****   SystemClock_Config();
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* USER CODE END SysInit */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* Initialize all configured peripherals */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   MX_CAN1_Init();
 129:Core/Src/main.c ****   MX_CAN2_Init();
 130:Core/Src/main.c ****   MX_CAN3_Init();
 131:Core/Src/main.c ****   ;
 132:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 133:Core/Src/main.c ****   canSettings();
 134:Core/Src/main.c ****   visInit();
 135:Core/Src/main.c ****   initBMS();
 136:Core/Src/main.c ****   /* USER CODE END 2 */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* Init scheduler */
 139:Core/Src/main.c ****   osKernelInitialize();
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 142:Core/Src/main.c ****   /* add mutexes, ... */
 143:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
ARM GAS  /tmp/ccF5CrYN.s 			page 4


 146:Core/Src/main.c ****   /* add semaphores, ... */
 147:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 150:Core/Src/main.c ****   /* start timers, add new ones, ... */
 151:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 154:Core/Src/main.c ****   /* add queues, ... */
 155:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   /* Create the thread(s) */
 158:Core/Src/main.c ****   /* creation of defaultTask */
 159:Core/Src/main.c ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   /* creation of sendCommand */
 162:Core/Src/main.c ****   sendCommandHandle = osThreadNew(StartsendCommand, NULL, &sendCommand_attributes);
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   /* creation of balanceCommand */
 165:Core/Src/main.c ****   balanceCommandHandle = osThreadNew(StartbalanceCommand, NULL, &balanceCommand_attributes);
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /* creation of processData */
 168:Core/Src/main.c ****   processDataHandle = osThreadNew(StartprocessData, NULL, &processData_attributes);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 171:Core/Src/main.c ****   /* add threads, ... */
 172:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 175:Core/Src/main.c ****   /* add events, ... */
 176:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   /* Start scheduler */
 179:Core/Src/main.c ****   osKernelStart();
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 182:Core/Src/main.c ****   /* Infinite loop */
 183:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 184:Core/Src/main.c ****   while (1)
 185:Core/Src/main.c ****   {
 186:Core/Src/main.c ****     /* USER CODE END WHILE */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 189:Core/Src/main.c ****   }
 190:Core/Src/main.c ****   /* USER CODE END 3 */
 191:Core/Src/main.c **** }
 192:Core/Src/main.c **** 
 193:Core/Src/main.c **** /**
 194:Core/Src/main.c ****   * @brief System Clock Configuration
 195:Core/Src/main.c ****   * @retval None
 196:Core/Src/main.c ****   */
 197:Core/Src/main.c **** void SystemClock_Config(void)
 198:Core/Src/main.c **** {
 199:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 200:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
ARM GAS  /tmp/ccF5CrYN.s 			page 5


 203:Core/Src/main.c ****   */
 204:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 205:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 206:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 207:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 211:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 219:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 220:Core/Src/main.c ****   {
 221:Core/Src/main.c ****     Error_Handler();
 222:Core/Src/main.c ****   }
 223:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 224:Core/Src/main.c ****   */
 225:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 226:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 227:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 229:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c **** }
 236:Core/Src/main.c **** 
 237:Core/Src/main.c **** /**
 238:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 239:Core/Src/main.c ****   * @param None
 240:Core/Src/main.c ****   * @retval None
 241:Core/Src/main.c ****   */
 242:Core/Src/main.c **** static void MX_CAN1_Init(void)
 243:Core/Src/main.c **** {
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 252:Core/Src/main.c ****   hcan1.Instance = CAN1;
 253:Core/Src/main.c ****   hcan1.Init.Prescaler = 48;
 254:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 255:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 256:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 257:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 258:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 259:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
ARM GAS  /tmp/ccF5CrYN.s 			page 6


 260:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 261:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 262:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 263:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 264:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 265:Core/Src/main.c ****   {
 266:Core/Src/main.c ****     Error_Handler();
 267:Core/Src/main.c ****   }
 268:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 271:Core/Src/main.c **** }
 272:Core/Src/main.c **** 
 273:Core/Src/main.c **** /**
 274:Core/Src/main.c ****   * @brief CAN2 Initialization Function
 275:Core/Src/main.c ****   * @param None
 276:Core/Src/main.c ****   * @retval None
 277:Core/Src/main.c ****   */
 278:Core/Src/main.c **** static void MX_CAN2_Init(void)
 279:Core/Src/main.c **** {
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 0 */
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /* USER CODE END CAN2_Init 0 */
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 1 */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE END CAN2_Init 1 */
 288:Core/Src/main.c ****   hcan2.Instance = CAN2;
 289:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 290:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 291:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 292:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 293:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 294:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 295:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 296:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 297:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 298:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 299:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 300:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 301:Core/Src/main.c ****   {
 302:Core/Src/main.c ****     Error_Handler();
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 2 */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* USER CODE END CAN2_Init 2 */
 307:Core/Src/main.c **** }
 308:Core/Src/main.c **** 
 309:Core/Src/main.c **** /**
 310:Core/Src/main.c ****   * @brief CAN3 Initialization Function
 311:Core/Src/main.c ****   * @param None
 312:Core/Src/main.c ****   * @retval None
 313:Core/Src/main.c ****   */
 314:Core/Src/main.c **** static void MX_CAN3_Init(void)
 315:Core/Src/main.c **** {
 316:Core/Src/main.c **** 
ARM GAS  /tmp/ccF5CrYN.s 			page 7


 317:Core/Src/main.c ****   /* USER CODE BEGIN CAN3_Init 0 */
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* USER CODE END CAN3_Init 0 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /* USER CODE BEGIN CAN3_Init 1 */
 322:Core/Src/main.c **** 
 323:Core/Src/main.c ****   /* USER CODE END CAN3_Init 1 */
 324:Core/Src/main.c ****   hcan3.Instance = CAN3;
 325:Core/Src/main.c ****   hcan3.Init.Prescaler = 48;
 326:Core/Src/main.c ****   hcan3.Init.Mode = CAN_MODE_NORMAL;
 327:Core/Src/main.c ****   hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 328:Core/Src/main.c ****   hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 329:Core/Src/main.c ****   hcan3.Init.TimeSeg2 = CAN_BS2_3TQ;
 330:Core/Src/main.c ****   hcan3.Init.TimeTriggeredMode = DISABLE;
 331:Core/Src/main.c ****   hcan3.Init.AutoBusOff = DISABLE;
 332:Core/Src/main.c ****   hcan3.Init.AutoWakeUp = DISABLE;
 333:Core/Src/main.c ****   hcan3.Init.AutoRetransmission = DISABLE;
 334:Core/Src/main.c ****   hcan3.Init.ReceiveFifoLocked = DISABLE;
 335:Core/Src/main.c ****   hcan3.Init.TransmitFifoPriority = DISABLE;
 336:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan3) != HAL_OK)
 337:Core/Src/main.c ****   {
 338:Core/Src/main.c ****     Error_Handler();
 339:Core/Src/main.c ****   }
 340:Core/Src/main.c ****   /* USER CODE BEGIN CAN3_Init 2 */
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /* USER CODE END CAN3_Init 2 */
 343:Core/Src/main.c **** }
 344:Core/Src/main.c **** 
 345:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 346:Core/Src/main.c **** /**
 347:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 348:Core/Src/main.c ****   * @param  argument: Not used
 349:Core/Src/main.c ****   * @retval None
 350:Core/Src/main.c ****   */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 353:Core/Src/main.c **** void StartDefaultTask(void *argument)
 354:Core/Src/main.c **** {
  28              		.loc 1 354 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  39              	.LVL1:
  40              	.L2:
 355:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 356:Core/Src/main.c ****   /* Infinite loop */
 357:Core/Src/main.c ****   for (;;)
 358:Core/Src/main.c ****   {
 359:Core/Src/main.c ****     //bmsStateHandler();
 360:Core/Src/main.c ****     //visHandle();
ARM GAS  /tmp/ccF5CrYN.s 			page 8


 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****     bmsStateHandler(&BMS[0]);
  41              		.loc 1 362 0 discriminator 1
  42 0002 074C     		ldr	r4, .L4
  43 0004 2046     		mov	r0, r4
  44 0006 FFF7FEFF 		bl	bmsStateHandler
  45              	.LVL2:
 363:Core/Src/main.c ****     bmsStateHandler(&BMS[1]);
  46              		.loc 1 363 0 discriminator 1
  47 000a 04F1F600 		add	r0, r4, #246
  48 000e FFF7FEFF 		bl	bmsStateHandler
  49              	.LVL3:
 364:Core/Src/main.c ****     acChargeCommand();
  50              		.loc 1 364 0 discriminator 1
  51 0012 FFF7FEFF 		bl	acChargeCommand
  52              	.LVL4:
 365:Core/Src/main.c **** 
 366:Core/Src/main.c ****     osDelay(1);
  53              		.loc 1 366 0 discriminator 1
  54 0016 0120     		movs	r0, #1
  55 0018 FFF7FEFF 		bl	osDelay
  56              	.LVL5:
  57 001c F1E7     		b	.L2
  58              	.L5:
  59 001e 00BF     		.align	2
  60              	.L4:
  61 0020 00000000 		.word	BMS
  62              		.cfi_endproc
  63              	.LFE140:
  65              		.section	.text.StartsendCommand,"ax",%progbits
  66              		.align	1
  67              		.global	StartsendCommand
  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu fpv4-sp-d16
  73              	StartsendCommand:
  74              	.LFB141:
 367:Core/Src/main.c ****   }
 368:Core/Src/main.c ****   /* USER CODE END 5 */
 369:Core/Src/main.c **** }
 370:Core/Src/main.c **** 
 371:Core/Src/main.c **** /* USER CODE BEGIN Header_StartsendCommand */
 372:Core/Src/main.c **** /**
 373:Core/Src/main.c **** * @brief Function implementing the sendCommand thread.
 374:Core/Src/main.c **** * @param argument: Not used
 375:Core/Src/main.c **** * @retval None
 376:Core/Src/main.c **** */
 377:Core/Src/main.c **** /* USER CODE END Header_StartsendCommand */
 378:Core/Src/main.c **** void StartsendCommand(void *argument)
 379:Core/Src/main.c **** {
  75              		.loc 1 379 0
  76              		.cfi_startproc
  77              		@ Volatile: function does not return.
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80              	.LVL6:
ARM GAS  /tmp/ccF5CrYN.s 			page 9


  81 0000 08B5     		push	{r3, lr}
  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 3, -8
  85              		.cfi_offset 14, -4
  86 0002 07E0     		b	.L9
  87              	.LVL7:
  88              	.L11:
 380:Core/Src/main.c ****   /* USER CODE BEGIN StartsendCommand */
 381:Core/Src/main.c ****   /* Infinite loop */
 382:Core/Src/main.c ****   for (;;)
 383:Core/Src/main.c ****   {
 384:Core/Src/main.c ****     sendCommand();
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****     if (BMS[0].balancecells)
 387:Core/Src/main.c ****     {
 388:Core/Src/main.c ****       balanceCommand(&BMS[0], 0);
  89              		.loc 1 388 0
  90 0004 0021     		movs	r1, #0
  91 0006 0C48     		ldr	r0, .L12
  92 0008 FFF7FEFF 		bl	balanceCommand
  93              	.LVL8:
  94 000c 09E0     		b	.L7
  95              	.L8:
 389:Core/Src/main.c ****     }
 390:Core/Src/main.c **** 
 391:Core/Src/main.c ****     if (BMS[1].balancecells)
 392:Core/Src/main.c ****     {
 393:Core/Src/main.c ****       balanceCommand(&BMS[1], 1);
 394:Core/Src/main.c ****     }
 395:Core/Src/main.c **** 
 396:Core/Src/main.c ****     osDelay(200);
  96              		.loc 1 396 0
  97 000e C820     		movs	r0, #200
  98 0010 FFF7FEFF 		bl	osDelay
  99              	.LVL9:
 100              	.L9:
 384:Core/Src/main.c **** 
 101              		.loc 1 384 0
 102 0014 FFF7FEFF 		bl	sendCommand
 103              	.LVL10:
 386:Core/Src/main.c ****     {
 104              		.loc 1 386 0
 105 0018 074B     		ldr	r3, .L12
 106 001a 93F8F530 		ldrb	r3, [r3, #245]	@ zero_extendqisi2
 107 001e 002B     		cmp	r3, #0
 108 0020 F0D1     		bne	.L11
 109              	.L7:
 391:Core/Src/main.c ****     {
 110              		.loc 1 391 0
 111 0022 054B     		ldr	r3, .L12
 112 0024 93F8EB31 		ldrb	r3, [r3, #491]	@ zero_extendqisi2
 113 0028 002B     		cmp	r3, #0
 114 002a F0D0     		beq	.L8
 393:Core/Src/main.c ****     }
 115              		.loc 1 393 0
 116 002c 0121     		movs	r1, #1
ARM GAS  /tmp/ccF5CrYN.s 			page 10


 117 002e 0348     		ldr	r0, .L12+4
 118 0030 FFF7FEFF 		bl	balanceCommand
 119              	.LVL11:
 120 0034 EBE7     		b	.L8
 121              	.L13:
 122 0036 00BF     		.align	2
 123              	.L12:
 124 0038 00000000 		.word	BMS
 125 003c F6000000 		.word	BMS+246
 126              		.cfi_endproc
 127              	.LFE141:
 129              		.section	.text.StartbalanceCommand,"ax",%progbits
 130              		.align	1
 131              		.global	StartbalanceCommand
 132              		.syntax unified
 133              		.thumb
 134              		.thumb_func
 135              		.fpu fpv4-sp-d16
 137              	StartbalanceCommand:
 138              	.LFB142:
 397:Core/Src/main.c ****   }
 398:Core/Src/main.c ****   /* USER CODE END StartsendCommand */
 399:Core/Src/main.c **** }
 400:Core/Src/main.c **** 
 401:Core/Src/main.c **** /* USER CODE BEGIN Header_StartbalanceCommand */
 402:Core/Src/main.c **** /**
 403:Core/Src/main.c **** * @brief Function implementing the balanceCommand thread.
 404:Core/Src/main.c **** * @param argument: Not used
 405:Core/Src/main.c **** * @retval None
 406:Core/Src/main.c **** */
 407:Core/Src/main.c **** /* USER CODE END Header_StartbalanceCommand */
 408:Core/Src/main.c **** void StartbalanceCommand(void *argument)
 409:Core/Src/main.c **** {
 139              		.loc 1 409 0
 140              		.cfi_startproc
 141              		@ Volatile: function does not return.
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              	.LVL12:
 145 0000 08B5     		push	{r3, lr}
 146              	.LCFI2:
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 3, -8
 149              		.cfi_offset 14, -4
 150              	.LVL13:
 151              	.L15:
 410:Core/Src/main.c ****   /* USER CODE BEGIN StartbalanceCommand */
 411:Core/Src/main.c ****   /* Infinite loop */
 412:Core/Src/main.c ****   for (;;)
 413:Core/Src/main.c ****   {
 414:Core/Src/main.c ****    /*
 415:Core/Src/main.c ****     if (BMS[0].balancecells)
 416:Core/Src/main.c ****     {
 417:Core/Src/main.c ****       balanceCommand(&BMS[0], 0);
 418:Core/Src/main.c ****     }
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****     if (BMS[1].balancecells)
ARM GAS  /tmp/ccF5CrYN.s 			page 11


 421:Core/Src/main.c ****     {
 422:Core/Src/main.c ****       balanceCommand(&BMS[1], 1);
 423:Core/Src/main.c ****     }
 424:Core/Src/main.c ****     */
 425:Core/Src/main.c ****    synchChargers();
 152              		.loc 1 425 0 discriminator 1
 153 0002 FFF7FEFF 		bl	synchChargers
 154              	.LVL14:
 426:Core/Src/main.c ****    
 427:Core/Src/main.c **** 
 428:Core/Src/main.c ****     osDelay(5000);
 155              		.loc 1 428 0 discriminator 1
 156 0006 41F28830 		movw	r0, #5000
 157 000a FFF7FEFF 		bl	osDelay
 158              	.LVL15:
 159 000e F8E7     		b	.L15
 160              		.cfi_endproc
 161              	.LFE142:
 163              		.section	.text.StartprocessData,"ax",%progbits
 164              		.align	1
 165              		.global	StartprocessData
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu fpv4-sp-d16
 171              	StartprocessData:
 172              	.LFB143:
 429:Core/Src/main.c ****   }
 430:Core/Src/main.c ****   /* USER CODE END StartbalanceCommand */
 431:Core/Src/main.c **** }
 432:Core/Src/main.c **** 
 433:Core/Src/main.c **** /* USER CODE BEGIN Header_StartprocessData */
 434:Core/Src/main.c **** /**
 435:Core/Src/main.c **** * @brief Function implementing the processData thread.
 436:Core/Src/main.c **** * @param argument: Not used
 437:Core/Src/main.c **** * @retval None
 438:Core/Src/main.c **** */
 439:Core/Src/main.c **** /* USER CODE END Header_StartprocessData */
 440:Core/Src/main.c **** void StartprocessData(void *argument)
 441:Core/Src/main.c **** {
 173              		.loc 1 441 0
 174              		.cfi_startproc
 175              		@ Volatile: function does not return.
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              	.LVL16:
 179 0000 08B5     		push	{r3, lr}
 180              	.LCFI3:
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 3, -8
 183              		.cfi_offset 14, -4
 184              	.LVL17:
 185              	.L18:
 442:Core/Src/main.c ****   /* USER CODE BEGIN StartprocessData */
 443:Core/Src/main.c ****   /* Infinite loop */
 444:Core/Src/main.c ****   for (;;)
 445:Core/Src/main.c ****   {
ARM GAS  /tmp/ccF5CrYN.s 			page 12


 446:Core/Src/main.c **** 
 447:Core/Src/main.c ****     refreshData();
 186              		.loc 1 447 0 discriminator 1
 187 0002 FFF7FEFF 		bl	refreshData
 188              	.LVL18:
 448:Core/Src/main.c ****     tx500kData();
 189              		.loc 1 448 0 discriminator 1
 190 0006 FFF7FEFF 		bl	tx500kData
 191              	.LVL19:
 449:Core/Src/main.c **** 
 450:Core/Src/main.c ****     osDelay(1000);
 192              		.loc 1 450 0 discriminator 1
 193 000a 4FF47A70 		mov	r0, #1000
 194 000e FFF7FEFF 		bl	osDelay
 195              	.LVL20:
 196 0012 F6E7     		b	.L18
 197              		.cfi_endproc
 198              	.LFE143:
 200              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 201              		.align	1
 202              		.global	HAL_TIM_PeriodElapsedCallback
 203              		.syntax unified
 204              		.thumb
 205              		.thumb_func
 206              		.fpu fpv4-sp-d16
 208              	HAL_TIM_PeriodElapsedCallback:
 209              	.LFB144:
 451:Core/Src/main.c ****   }
 452:Core/Src/main.c ****   /* USER CODE END StartprocessData */
 453:Core/Src/main.c **** }
 454:Core/Src/main.c **** 
 455:Core/Src/main.c **** /**
 456:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 457:Core/Src/main.c ****   * @note   This function is called  when TIM7 interrupt took place, inside
 458:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 459:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 460:Core/Src/main.c ****   * @param  htim : TIM handle
 461:Core/Src/main.c ****   * @retval None
 462:Core/Src/main.c ****   */
 463:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 464:Core/Src/main.c **** {
 210              		.loc 1 464 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 214              	.LVL21:
 215 0000 10B5     		push	{r4, lr}
 216              	.LCFI4:
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 4, -8
 219              		.cfi_offset 14, -4
 465:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 466:Core/Src/main.c ****   if (htim->Instance == TIM1)
 220              		.loc 1 466 0
 221 0002 0268     		ldr	r2, [r0]
 222 0004 0F4B     		ldr	r3, .L26
 223 0006 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccF5CrYN.s 			page 13


 224 0008 04D0     		beq	.L24
 225              	.L21:
 467:Core/Src/main.c ****   {
 468:Core/Src/main.c ****     ws2812b.timerPeriodCounter = 0;
 469:Core/Src/main.c ****     TIM1->CR1 = 0; // disable timer
 470:Core/Src/main.c **** 
 471:Core/Src/main.c ****     // disable the TIM2 Update IRQ
 472:Core/Src/main.c ****     __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****     // Set back 1,25us period
 475:Core/Src/main.c ****     TIM1->ARR = tim_period;
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****     // Generate an update event to reload the Prescaler value immediatly
 478:Core/Src/main.c ****     TIM1->EGR = TIM_EGR_UG;
 479:Core/Src/main.c ****     __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 480:Core/Src/main.c **** 
 481:Core/Src/main.c ****     // set transfer_complete flag
 482:Core/Src/main.c ****     ws2812b.transferComplete = 1;
 483:Core/Src/main.c ****   }
 484:Core/Src/main.c **** 
 485:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 486:Core/Src/main.c ****   if (htim->Instance == TIM7)
 226              		.loc 1 486 0
 227 000a 0268     		ldr	r2, [r0]
 228 000c 0E4B     		ldr	r3, .L26+4
 229 000e 9A42     		cmp	r2, r3
 230 0010 15D0     		beq	.L25
 231              	.LVL22:
 232              	.L20:
 233 0012 10BD     		pop	{r4, pc}
 234              	.LVL23:
 235              	.L24:
 468:Core/Src/main.c ****     TIM1->CR1 = 0; // disable timer
 236              		.loc 1 468 0
 237 0014 0D4C     		ldr	r4, .L26+8
 238 0016 0023     		movs	r3, #0
 239 0018 6361     		str	r3, [r4, #20]
 469:Core/Src/main.c **** 
 240              		.loc 1 469 0
 241 001a 0A4A     		ldr	r2, .L26
 242 001c 1360     		str	r3, [r2]
 472:Core/Src/main.c **** 
 243              		.loc 1 472 0
 244 001e 0C4B     		ldr	r3, .L26+12
 245 0020 1B68     		ldr	r3, [r3]
 246 0022 D968     		ldr	r1, [r3, #12]
 247 0024 21F00101 		bic	r1, r1, #1
 248 0028 D960     		str	r1, [r3, #12]
 475:Core/Src/main.c **** 
 249              		.loc 1 475 0
 250 002a 0A49     		ldr	r1, .L26+16
 251 002c 0968     		ldr	r1, [r1]
 252 002e D162     		str	r1, [r2, #44]
 478:Core/Src/main.c ****     __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 253              		.loc 1 478 0
 254 0030 0121     		movs	r1, #1
 255 0032 5161     		str	r1, [r2, #20]
ARM GAS  /tmp/ccF5CrYN.s 			page 14


 479:Core/Src/main.c **** 
 256              		.loc 1 479 0
 257 0034 6FF00102 		mvn	r2, #1
 258 0038 1A61     		str	r2, [r3, #16]
 482:Core/Src/main.c ****   }
 259              		.loc 1 482 0
 260 003a 2174     		strb	r1, [r4, #16]
 261 003c E5E7     		b	.L21
 262              	.L25:
 487:Core/Src/main.c ****   {
 488:Core/Src/main.c ****     HAL_IncTick();
 263              		.loc 1 488 0
 264 003e FFF7FEFF 		bl	HAL_IncTick
 265              	.LVL24:
 489:Core/Src/main.c ****   }
 490:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 491:Core/Src/main.c **** 
 492:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 493:Core/Src/main.c **** }
 266              		.loc 1 493 0
 267 0042 E6E7     		b	.L20
 268              	.L27:
 269              		.align	2
 270              	.L26:
 271 0044 00000140 		.word	1073807360
 272 0048 00140040 		.word	1073746944
 273 004c 00000000 		.word	ws2812b
 274 0050 00000000 		.word	TIM1_handle
 275 0054 00000000 		.word	tim_period
 276              		.cfi_endproc
 277              	.LFE144:
 279              		.section	.text.Error_Handler,"ax",%progbits
 280              		.align	1
 281              		.global	Error_Handler
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	Error_Handler:
 288              	.LFB145:
 494:Core/Src/main.c **** 
 495:Core/Src/main.c **** /**
 496:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 497:Core/Src/main.c ****   * @retval None
 498:Core/Src/main.c ****   */
 499:Core/Src/main.c **** void Error_Handler(void)
 500:Core/Src/main.c **** {
 289              		.loc 1 500 0
 290              		.cfi_startproc
 291              		@ Volatile: function does not return.
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 295              	.LBB4:
 296              	.LBB5:
 297              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
ARM GAS  /tmp/ccF5CrYN.s 			page 15


   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
ARM GAS  /tmp/ccF5CrYN.s 			page 16


  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccF5CrYN.s 			page 17


 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 298              		.loc 2 142 0
 299              		.syntax unified
 300              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 301 0000 72B6     		cpsid i
 302              	@ 0 "" 2
 303              		.thumb
 304              		.syntax unified
 305              	.L29:
 306 0002 FEE7     		b	.L29
 307              	.LBE5:
 308              	.LBE4:
 309              		.cfi_endproc
 310              	.LFE145:
 312              		.section	.text.MX_CAN1_Init,"ax",%progbits
 313              		.align	1
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu fpv4-sp-d16
 319              	MX_CAN1_Init:
 320              	.LFB137:
 243:Core/Src/main.c **** 
 321              		.loc 1 243 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325 0000 08B5     		push	{r3, lr}
 326              	.LCFI5:
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 3, -8
ARM GAS  /tmp/ccF5CrYN.s 			page 18


 329              		.cfi_offset 14, -4
 252:Core/Src/main.c ****   hcan1.Init.Prescaler = 48;
 330              		.loc 1 252 0
 331 0002 0D48     		ldr	r0, .L34
 332 0004 0D4B     		ldr	r3, .L34+4
 333 0006 0360     		str	r3, [r0]
 253:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 334              		.loc 1 253 0
 335 0008 3023     		movs	r3, #48
 336 000a 4360     		str	r3, [r0, #4]
 254:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 337              		.loc 1 254 0
 338 000c 0023     		movs	r3, #0
 339 000e 8360     		str	r3, [r0, #8]
 255:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 340              		.loc 1 255 0
 341 0010 C360     		str	r3, [r0, #12]
 256:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 342              		.loc 1 256 0
 343 0012 4FF48032 		mov	r2, #65536
 344 0016 0261     		str	r2, [r0, #16]
 257:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 345              		.loc 1 257 0
 346 0018 4FF40012 		mov	r2, #2097152
 347 001c 4261     		str	r2, [r0, #20]
 258:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 348              		.loc 1 258 0
 349 001e 0376     		strb	r3, [r0, #24]
 259:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 350              		.loc 1 259 0
 351 0020 4376     		strb	r3, [r0, #25]
 260:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 352              		.loc 1 260 0
 353 0022 8376     		strb	r3, [r0, #26]
 261:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 354              		.loc 1 261 0
 355 0024 C376     		strb	r3, [r0, #27]
 262:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 356              		.loc 1 262 0
 357 0026 0377     		strb	r3, [r0, #28]
 263:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 358              		.loc 1 263 0
 359 0028 4377     		strb	r3, [r0, #29]
 264:Core/Src/main.c ****   {
 360              		.loc 1 264 0
 361 002a FFF7FEFF 		bl	HAL_CAN_Init
 362              	.LVL25:
 363 002e 00B9     		cbnz	r0, .L33
 364 0030 08BD     		pop	{r3, pc}
 365              	.L33:
 266:Core/Src/main.c ****   }
 366              		.loc 1 266 0
 367 0032 FFF7FEFF 		bl	Error_Handler
 368              	.LVL26:
 369              	.L35:
 370 0036 00BF     		.align	2
 371              	.L34:
ARM GAS  /tmp/ccF5CrYN.s 			page 19


 372 0038 00000000 		.word	hcan1
 373 003c 00640040 		.word	1073767424
 374              		.cfi_endproc
 375              	.LFE137:
 377              		.section	.text.MX_CAN2_Init,"ax",%progbits
 378              		.align	1
 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 382              		.fpu fpv4-sp-d16
 384              	MX_CAN2_Init:
 385              	.LFB138:
 279:Core/Src/main.c **** 
 386              		.loc 1 279 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390 0000 08B5     		push	{r3, lr}
 391              	.LCFI6:
 392              		.cfi_def_cfa_offset 8
 393              		.cfi_offset 3, -8
 394              		.cfi_offset 14, -4
 288:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 395              		.loc 1 288 0
 396 0002 0D48     		ldr	r0, .L40
 397 0004 0D4B     		ldr	r3, .L40+4
 398 0006 0360     		str	r3, [r0]
 289:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 399              		.loc 1 289 0
 400 0008 0C23     		movs	r3, #12
 401 000a 4360     		str	r3, [r0, #4]
 290:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 402              		.loc 1 290 0
 403 000c 0023     		movs	r3, #0
 404 000e 8360     		str	r3, [r0, #8]
 291:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 405              		.loc 1 291 0
 406 0010 C360     		str	r3, [r0, #12]
 292:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 407              		.loc 1 292 0
 408 0012 4FF48032 		mov	r2, #65536
 409 0016 0261     		str	r2, [r0, #16]
 293:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 410              		.loc 1 293 0
 411 0018 4FF40012 		mov	r2, #2097152
 412 001c 4261     		str	r2, [r0, #20]
 294:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 413              		.loc 1 294 0
 414 001e 0376     		strb	r3, [r0, #24]
 295:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 415              		.loc 1 295 0
 416 0020 4376     		strb	r3, [r0, #25]
 296:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 417              		.loc 1 296 0
 418 0022 8376     		strb	r3, [r0, #26]
 297:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 419              		.loc 1 297 0
ARM GAS  /tmp/ccF5CrYN.s 			page 20


 420 0024 C376     		strb	r3, [r0, #27]
 298:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 421              		.loc 1 298 0
 422 0026 0377     		strb	r3, [r0, #28]
 299:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 423              		.loc 1 299 0
 424 0028 4377     		strb	r3, [r0, #29]
 300:Core/Src/main.c ****   {
 425              		.loc 1 300 0
 426 002a FFF7FEFF 		bl	HAL_CAN_Init
 427              	.LVL27:
 428 002e 00B9     		cbnz	r0, .L39
 429 0030 08BD     		pop	{r3, pc}
 430              	.L39:
 302:Core/Src/main.c ****   }
 431              		.loc 1 302 0
 432 0032 FFF7FEFF 		bl	Error_Handler
 433              	.LVL28:
 434              	.L41:
 435 0036 00BF     		.align	2
 436              	.L40:
 437 0038 00000000 		.word	hcan2
 438 003c 00680040 		.word	1073768448
 439              		.cfi_endproc
 440              	.LFE138:
 442              		.section	.text.MX_CAN3_Init,"ax",%progbits
 443              		.align	1
 444              		.syntax unified
 445              		.thumb
 446              		.thumb_func
 447              		.fpu fpv4-sp-d16
 449              	MX_CAN3_Init:
 450              	.LFB139:
 315:Core/Src/main.c **** 
 451              		.loc 1 315 0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455 0000 08B5     		push	{r3, lr}
 456              	.LCFI7:
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 3, -8
 459              		.cfi_offset 14, -4
 324:Core/Src/main.c ****   hcan3.Init.Prescaler = 48;
 460              		.loc 1 324 0
 461 0002 0D48     		ldr	r0, .L46
 462 0004 0D4B     		ldr	r3, .L46+4
 463 0006 0360     		str	r3, [r0]
 325:Core/Src/main.c ****   hcan3.Init.Mode = CAN_MODE_NORMAL;
 464              		.loc 1 325 0
 465 0008 3023     		movs	r3, #48
 466 000a 4360     		str	r3, [r0, #4]
 326:Core/Src/main.c ****   hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 467              		.loc 1 326 0
 468 000c 0023     		movs	r3, #0
 469 000e 8360     		str	r3, [r0, #8]
 327:Core/Src/main.c ****   hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
ARM GAS  /tmp/ccF5CrYN.s 			page 21


 470              		.loc 1 327 0
 471 0010 C360     		str	r3, [r0, #12]
 328:Core/Src/main.c ****   hcan3.Init.TimeSeg2 = CAN_BS2_3TQ;
 472              		.loc 1 328 0
 473 0012 4FF48032 		mov	r2, #65536
 474 0016 0261     		str	r2, [r0, #16]
 329:Core/Src/main.c ****   hcan3.Init.TimeTriggeredMode = DISABLE;
 475              		.loc 1 329 0
 476 0018 4FF40012 		mov	r2, #2097152
 477 001c 4261     		str	r2, [r0, #20]
 330:Core/Src/main.c ****   hcan3.Init.AutoBusOff = DISABLE;
 478              		.loc 1 330 0
 479 001e 0376     		strb	r3, [r0, #24]
 331:Core/Src/main.c ****   hcan3.Init.AutoWakeUp = DISABLE;
 480              		.loc 1 331 0
 481 0020 4376     		strb	r3, [r0, #25]
 332:Core/Src/main.c ****   hcan3.Init.AutoRetransmission = DISABLE;
 482              		.loc 1 332 0
 483 0022 8376     		strb	r3, [r0, #26]
 333:Core/Src/main.c ****   hcan3.Init.ReceiveFifoLocked = DISABLE;
 484              		.loc 1 333 0
 485 0024 C376     		strb	r3, [r0, #27]
 334:Core/Src/main.c ****   hcan3.Init.TransmitFifoPriority = DISABLE;
 486              		.loc 1 334 0
 487 0026 0377     		strb	r3, [r0, #28]
 335:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan3) != HAL_OK)
 488              		.loc 1 335 0
 489 0028 4377     		strb	r3, [r0, #29]
 336:Core/Src/main.c ****   {
 490              		.loc 1 336 0
 491 002a FFF7FEFF 		bl	HAL_CAN_Init
 492              	.LVL29:
 493 002e 00B9     		cbnz	r0, .L45
 494 0030 08BD     		pop	{r3, pc}
 495              	.L45:
 338:Core/Src/main.c ****   }
 496              		.loc 1 338 0
 497 0032 FFF7FEFF 		bl	Error_Handler
 498              	.LVL30:
 499              	.L47:
 500 0036 00BF     		.align	2
 501              	.L46:
 502 0038 00000000 		.word	hcan3
 503 003c 006C0040 		.word	1073769472
 504              		.cfi_endproc
 505              	.LFE139:
 507              		.section	.text.SystemClock_Config,"ax",%progbits
 508              		.align	1
 509              		.global	SystemClock_Config
 510              		.syntax unified
 511              		.thumb
 512              		.thumb_func
 513              		.fpu fpv4-sp-d16
 515              	SystemClock_Config:
 516              	.LFB136:
 198:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 517              		.loc 1 198 0
ARM GAS  /tmp/ccF5CrYN.s 			page 22


 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 80
 520              		@ frame_needed = 0, uses_anonymous_args = 0
 521 0000 00B5     		push	{lr}
 522              	.LCFI8:
 523              		.cfi_def_cfa_offset 4
 524              		.cfi_offset 14, -4
 525 0002 95B0     		sub	sp, sp, #84
 526              	.LCFI9:
 527              		.cfi_def_cfa_offset 88
 199:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 528              		.loc 1 199 0
 529 0004 3422     		movs	r2, #52
 530 0006 0021     		movs	r1, #0
 531 0008 07A8     		add	r0, sp, #28
 532 000a FFF7FEFF 		bl	memset
 533              	.LVL31:
 200:Core/Src/main.c **** 
 534              		.loc 1 200 0
 535 000e 0023     		movs	r3, #0
 536 0010 0293     		str	r3, [sp, #8]
 537 0012 0393     		str	r3, [sp, #12]
 538 0014 0493     		str	r3, [sp, #16]
 539 0016 0593     		str	r3, [sp, #20]
 540 0018 0693     		str	r3, [sp, #24]
 541              	.LBB6:
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 542              		.loc 1 204 0
 543 001a 0093     		str	r3, [sp]
 544 001c 1E4A     		ldr	r2, .L54
 545 001e 116C     		ldr	r1, [r2, #64]
 546 0020 41F08051 		orr	r1, r1, #268435456
 547 0024 1164     		str	r1, [r2, #64]
 548 0026 126C     		ldr	r2, [r2, #64]
 549 0028 02F08052 		and	r2, r2, #268435456
 550 002c 0092     		str	r2, [sp]
 551 002e 009A     		ldr	r2, [sp]
 552              	.LBE6:
 553              	.LBB7:
 205:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 554              		.loc 1 205 0
 555 0030 0193     		str	r3, [sp, #4]
 556 0032 1A4A     		ldr	r2, .L54+4
 557 0034 1168     		ldr	r1, [r2]
 558 0036 41F44041 		orr	r1, r1, #49152
 559 003a 1160     		str	r1, [r2]
 560 003c 1268     		ldr	r2, [r2]
 561 003e 02F44042 		and	r2, r2, #49152
 562 0042 0192     		str	r2, [sp, #4]
 563 0044 019A     		ldr	r2, [sp, #4]
 564              	.LBE7:
 209:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 565              		.loc 1 209 0
 566 0046 0222     		movs	r2, #2
 567 0048 0792     		str	r2, [sp, #28]
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 568              		.loc 1 210 0
ARM GAS  /tmp/ccF5CrYN.s 			page 23


 569 004a 0121     		movs	r1, #1
 570 004c 0A91     		str	r1, [sp, #40]
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 571              		.loc 1 211 0
 572 004e 1021     		movs	r1, #16
 573 0050 0B91     		str	r1, [sp, #44]
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 574              		.loc 1 212 0
 575 0052 0D92     		str	r2, [sp, #52]
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 576              		.loc 1 213 0
 577 0054 0E93     		str	r3, [sp, #56]
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 578              		.loc 1 214 0
 579 0056 0823     		movs	r3, #8
 580 0058 0F93     		str	r3, [sp, #60]
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 581              		.loc 1 215 0
 582 005a 4823     		movs	r3, #72
 583 005c 1093     		str	r3, [sp, #64]
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 584              		.loc 1 216 0
 585 005e 1192     		str	r2, [sp, #68]
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 586              		.loc 1 217 0
 587 0060 1292     		str	r2, [sp, #72]
 218:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 588              		.loc 1 218 0
 589 0062 1392     		str	r2, [sp, #76]
 219:Core/Src/main.c ****   {
 590              		.loc 1 219 0
 591 0064 07A8     		add	r0, sp, #28
 592 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 593              	.LVL32:
 594 006a 80B9     		cbnz	r0, .L52
 225:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 595              		.loc 1 225 0
 596 006c 0F23     		movs	r3, #15
 597 006e 0293     		str	r3, [sp, #8]
 226:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 598              		.loc 1 226 0
 599 0070 0221     		movs	r1, #2
 600 0072 0391     		str	r1, [sp, #12]
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 601              		.loc 1 227 0
 602 0074 0023     		movs	r3, #0
 603 0076 0493     		str	r3, [sp, #16]
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 604              		.loc 1 228 0
 605 0078 4FF48052 		mov	r2, #4096
 606 007c 0592     		str	r2, [sp, #20]
 229:Core/Src/main.c **** 
 607              		.loc 1 229 0
 608 007e 0693     		str	r3, [sp, #24]
 231:Core/Src/main.c ****   {
 609              		.loc 1 231 0
 610 0080 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccF5CrYN.s 			page 24


 611 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 612              	.LVL33:
 613 0086 20B9     		cbnz	r0, .L53
 235:Core/Src/main.c **** 
 614              		.loc 1 235 0
 615 0088 15B0     		add	sp, sp, #84
 616              	.LCFI10:
 617              		.cfi_remember_state
 618              		.cfi_def_cfa_offset 4
 619              		@ sp needed
 620 008a 5DF804FB 		ldr	pc, [sp], #4
 621              	.L52:
 622              	.LCFI11:
 623              		.cfi_restore_state
 221:Core/Src/main.c ****   }
 624              		.loc 1 221 0
 625 008e FFF7FEFF 		bl	Error_Handler
 626              	.LVL34:
 627              	.L53:
 233:Core/Src/main.c ****   }
 628              		.loc 1 233 0
 629 0092 FFF7FEFF 		bl	Error_Handler
 630              	.LVL35:
 631              	.L55:
 632 0096 00BF     		.align	2
 633              	.L54:
 634 0098 00380240 		.word	1073887232
 635 009c 00700040 		.word	1073770496
 636              		.cfi_endproc
 637              	.LFE136:
 639              		.section	.text.main,"ax",%progbits
 640              		.align	1
 641              		.global	main
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	main:
 648              	.LFB135:
 105:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 649              		.loc 1 105 0
 650              		.cfi_startproc
 651              		@ Volatile: function does not return.
 652              		@ args = 0, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654 0000 08B5     		push	{r3, lr}
 655              	.LCFI12:
 656              		.cfi_def_cfa_offset 8
 657              		.cfi_offset 3, -8
 658              		.cfi_offset 14, -4
 113:Core/Src/main.c **** 
 659              		.loc 1 113 0
 660 0002 FFF7FEFF 		bl	HAL_Init
 661              	.LVL36:
 120:Core/Src/main.c **** 
 662              		.loc 1 120 0
 663 0006 FFF7FEFF 		bl	SystemClock_Config
ARM GAS  /tmp/ccF5CrYN.s 			page 25


 664              	.LVL37:
 128:Core/Src/main.c ****   MX_CAN2_Init();
 665              		.loc 1 128 0
 666 000a FFF7FEFF 		bl	MX_CAN1_Init
 667              	.LVL38:
 129:Core/Src/main.c ****   MX_CAN3_Init();
 668              		.loc 1 129 0
 669 000e FFF7FEFF 		bl	MX_CAN2_Init
 670              	.LVL39:
 130:Core/Src/main.c ****   ;
 671              		.loc 1 130 0
 672 0012 FFF7FEFF 		bl	MX_CAN3_Init
 673              	.LVL40:
 133:Core/Src/main.c ****   visInit();
 674              		.loc 1 133 0
 675 0016 FFF7FEFF 		bl	canSettings
 676              	.LVL41:
 134:Core/Src/main.c ****   initBMS();
 677              		.loc 1 134 0
 678 001a FFF7FEFF 		bl	visInit
 679              	.LVL42:
 135:Core/Src/main.c ****   /* USER CODE END 2 */
 680              		.loc 1 135 0
 681 001e FFF7FEFF 		bl	initBMS
 682              	.LVL43:
 139:Core/Src/main.c **** 
 683              		.loc 1 139 0
 684 0022 FFF7FEFF 		bl	osKernelInitialize
 685              	.LVL44:
 159:Core/Src/main.c **** 
 686              		.loc 1 159 0
 687 0026 0F4A     		ldr	r2, .L59
 688 0028 0021     		movs	r1, #0
 689 002a 0F48     		ldr	r0, .L59+4
 690 002c FFF7FEFF 		bl	osThreadNew
 691              	.LVL45:
 692 0030 0E4B     		ldr	r3, .L59+8
 693 0032 1860     		str	r0, [r3]
 162:Core/Src/main.c **** 
 694              		.loc 1 162 0
 695 0034 0E4A     		ldr	r2, .L59+12
 696 0036 0021     		movs	r1, #0
 697 0038 0E48     		ldr	r0, .L59+16
 698 003a FFF7FEFF 		bl	osThreadNew
 699              	.LVL46:
 700 003e 0E4B     		ldr	r3, .L59+20
 701 0040 1860     		str	r0, [r3]
 165:Core/Src/main.c **** 
 702              		.loc 1 165 0
 703 0042 0E4A     		ldr	r2, .L59+24
 704 0044 0021     		movs	r1, #0
 705 0046 0E48     		ldr	r0, .L59+28
 706 0048 FFF7FEFF 		bl	osThreadNew
 707              	.LVL47:
 708 004c 0D4B     		ldr	r3, .L59+32
 709 004e 1860     		str	r0, [r3]
 168:Core/Src/main.c **** 
ARM GAS  /tmp/ccF5CrYN.s 			page 26


 710              		.loc 1 168 0
 711 0050 0D4A     		ldr	r2, .L59+36
 712 0052 0021     		movs	r1, #0
 713 0054 0D48     		ldr	r0, .L59+40
 714 0056 FFF7FEFF 		bl	osThreadNew
 715              	.LVL48:
 716 005a 0D4B     		ldr	r3, .L59+44
 717 005c 1860     		str	r0, [r3]
 179:Core/Src/main.c **** 
 718              		.loc 1 179 0
 719 005e FFF7FEFF 		bl	osKernelStart
 720              	.LVL49:
 721              	.L57:
 722 0062 FEE7     		b	.L57
 723              	.L60:
 724              		.align	2
 725              	.L59:
 726 0064 00000000 		.word	.LANCHOR0
 727 0068 00000000 		.word	StartDefaultTask
 728 006c 00000000 		.word	defaultTaskHandle
 729 0070 00000000 		.word	.LANCHOR1
 730 0074 00000000 		.word	StartsendCommand
 731 0078 00000000 		.word	sendCommandHandle
 732 007c 00000000 		.word	.LANCHOR2
 733 0080 00000000 		.word	StartbalanceCommand
 734 0084 00000000 		.word	balanceCommandHandle
 735 0088 00000000 		.word	.LANCHOR3
 736 008c 00000000 		.word	StartprocessData
 737 0090 00000000 		.word	processDataHandle
 738              		.cfi_endproc
 739              	.LFE135:
 741              		.global	processData_attributes
 742              		.comm	processDataHandle,4,4
 743              		.global	balanceCommand_attributes
 744              		.comm	balanceCommandHandle,4,4
 745              		.global	sendCommand_attributes
 746              		.comm	sendCommandHandle,4,4
 747              		.global	defaultTask_attributes
 748              		.comm	defaultTaskHandle,4,4
 749              		.comm	ws2812b,28,4
 750              		.comm	timer_reset_pulse_period,4,4
 751              		.comm	tim_period,4,4
 752              		.comm	tim2OC2,28,4
 753              		.comm	tim2OC1,28,4
 754              		.comm	TIM1_handle,64,4
 755              		.comm	charged,1,1
 756              		.comm	BMS,492,4
 757              		.comm	txCycle3,4,4
 758              		.comm	txCycle2,4,4
 759              		.comm	txCycle,4,4
 760              		.comm	canMailbox3,4,4
 761              		.comm	canMailbox2,4,4
 762              		.comm	canMailbox,4,4
 763              		.comm	canRx3,8,4
 764              		.comm	canRx2,8,4
 765              		.comm	canRx,8,4
 766              		.comm	txMsgExt3,24,4
ARM GAS  /tmp/ccF5CrYN.s 			page 27


 767              		.comm	txMsg3,24,4
 768              		.comm	rxMsg3,28,4
 769              		.comm	txMsgExt2,24,4
 770              		.comm	txMsg2,24,4
 771              		.comm	rxMsg2,28,4
 772              		.comm	txMsgExt,24,4
 773              		.comm	txMsg,24,4
 774              		.comm	rxMsg,28,4
 775              		.comm	sf5,40,4
 776              		.comm	sf4,40,4
 777              		.comm	sf3,40,4
 778              		.comm	sf2,40,4
 779              		.comm	sf,40,4
 780              		.comm	hcan3,40,4
 781              		.comm	hcan2,40,4
 782              		.comm	hcan1,40,4
 783              		.section	.rodata.balanceCommand_attributes,"a",%progbits
 784              		.align	2
 785              		.set	.LANCHOR2,. + 0
 788              	balanceCommand_attributes:
 789 0000 0C000000 		.word	.LC1
 790 0004 00000000 		.space	16
 790      00000000 
 790      00000000 
 790      00000000 
 791 0014 00020000 		.word	512
 792 0018 08000000 		.word	8
 793 001c 00000000 		.space	8
 793      00000000 
 794              		.section	.rodata.defaultTask_attributes,"a",%progbits
 795              		.align	2
 796              		.set	.LANCHOR0,. + 0
 799              	defaultTask_attributes:
 800 0000 28000000 		.word	.LC3
 801 0004 00000000 		.space	16
 801      00000000 
 801      00000000 
 801      00000000 
 802 0014 00020000 		.word	512
 803 0018 18000000 		.word	24
 804 001c 00000000 		.space	8
 804      00000000 
 805              		.section	.rodata.processData_attributes,"a",%progbits
 806              		.align	2
 807              		.set	.LANCHOR3,. + 0
 810              	processData_attributes:
 811 0000 00000000 		.word	.LC0
 812 0004 00000000 		.space	16
 812      00000000 
 812      00000000 
 812      00000000 
 813 0014 00020000 		.word	512
 814 0018 08000000 		.word	8
 815 001c 00000000 		.space	8
 815      00000000 
 816              		.section	.rodata.sendCommand_attributes,"a",%progbits
 817              		.align	2
ARM GAS  /tmp/ccF5CrYN.s 			page 28


 818              		.set	.LANCHOR1,. + 0
 821              	sendCommand_attributes:
 822 0000 1C000000 		.word	.LC2
 823 0004 00000000 		.space	16
 823      00000000 
 823      00000000 
 823      00000000 
 824 0014 00020000 		.word	512
 825 0018 18000000 		.word	24
 826 001c 00000000 		.space	8
 826      00000000 
 827              		.section	.rodata.str1.4,"aMS",%progbits,1
 828              		.align	2
 829              	.LC0:
 830 0000 70726F63 		.ascii	"processData\000"
 830      65737344 
 830      61746100 
 831              	.LC1:
 832 000c 62616C61 		.ascii	"balanceCommand\000"
 832      6E636543 
 832      6F6D6D61 
 832      6E6400
 833 001b 00       		.space	1
 834              	.LC2:
 835 001c 73656E64 		.ascii	"sendCommand\000"
 835      436F6D6D 
 835      616E6400 
 836              	.LC3:
 837 0028 64656661 		.ascii	"defaultTask\000"
 837      756C7454 
 837      61736B00 
 838              		.text
 839              	.Letext0:
 840              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 841              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 842              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 843              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 844              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 845              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 846              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 847              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 848              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 849              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 850              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 851              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 852              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 853              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 854              		.file 17 "/usr/include/newlib/sys/lock.h"
 855              		.file 18 "/usr/include/newlib/sys/_types.h"
 856              		.file 19 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 857              		.file 20 "/usr/include/newlib/sys/reent.h"
 858              		.file 21 "Core/Inc/can_setup.h"
 859              		.file 22 "Core/Inc/bms.h"
 860              		.file 23 "Core/Inc/ws2812b.h"
 861              		.file 24 "Core/Inc/visEffect.h"
ARM GAS  /tmp/ccF5CrYN.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccF5CrYN.s:18     .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccF5CrYN.s:25     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccF5CrYN.s:61     .text.StartDefaultTask:0000000000000020 $d
                            *COM*:00000000000001ec BMS
     /tmp/ccF5CrYN.s:66     .text.StartsendCommand:0000000000000000 $t
     /tmp/ccF5CrYN.s:73     .text.StartsendCommand:0000000000000000 StartsendCommand
     /tmp/ccF5CrYN.s:124    .text.StartsendCommand:0000000000000038 $d
     /tmp/ccF5CrYN.s:130    .text.StartbalanceCommand:0000000000000000 $t
     /tmp/ccF5CrYN.s:137    .text.StartbalanceCommand:0000000000000000 StartbalanceCommand
     /tmp/ccF5CrYN.s:164    .text.StartprocessData:0000000000000000 $t
     /tmp/ccF5CrYN.s:171    .text.StartprocessData:0000000000000000 StartprocessData
     /tmp/ccF5CrYN.s:201    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccF5CrYN.s:208    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccF5CrYN.s:271    .text.HAL_TIM_PeriodElapsedCallback:0000000000000044 $d
                            *COM*:000000000000001c ws2812b
                            *COM*:0000000000000040 TIM1_handle
                            *COM*:0000000000000004 tim_period
     /tmp/ccF5CrYN.s:280    .text.Error_Handler:0000000000000000 $t
     /tmp/ccF5CrYN.s:287    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccF5CrYN.s:313    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccF5CrYN.s:319    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccF5CrYN.s:372    .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccF5CrYN.s:378    .text.MX_CAN2_Init:0000000000000000 $t
     /tmp/ccF5CrYN.s:384    .text.MX_CAN2_Init:0000000000000000 MX_CAN2_Init
     /tmp/ccF5CrYN.s:437    .text.MX_CAN2_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan2
     /tmp/ccF5CrYN.s:443    .text.MX_CAN3_Init:0000000000000000 $t
     /tmp/ccF5CrYN.s:449    .text.MX_CAN3_Init:0000000000000000 MX_CAN3_Init
     /tmp/ccF5CrYN.s:502    .text.MX_CAN3_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan3
     /tmp/ccF5CrYN.s:508    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccF5CrYN.s:515    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccF5CrYN.s:634    .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccF5CrYN.s:640    .text.main:0000000000000000 $t
     /tmp/ccF5CrYN.s:647    .text.main:0000000000000000 main
     /tmp/ccF5CrYN.s:726    .text.main:0000000000000064 $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 sendCommandHandle
                            *COM*:0000000000000004 balanceCommandHandle
                            *COM*:0000000000000004 processDataHandle
     /tmp/ccF5CrYN.s:810    .rodata.processData_attributes:0000000000000000 processData_attributes
     /tmp/ccF5CrYN.s:788    .rodata.balanceCommand_attributes:0000000000000000 balanceCommand_attributes
     /tmp/ccF5CrYN.s:821    .rodata.sendCommand_attributes:0000000000000000 sendCommand_attributes
     /tmp/ccF5CrYN.s:799    .rodata.defaultTask_attributes:0000000000000000 defaultTask_attributes
                            *COM*:0000000000000004 timer_reset_pulse_period
                            *COM*:000000000000001c tim2OC2
                            *COM*:000000000000001c tim2OC1
                            *COM*:0000000000000001 charged
                            *COM*:0000000000000004 txCycle3
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000004 canMailbox3
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
ARM GAS  /tmp/ccF5CrYN.s 			page 30


                            *COM*:0000000000000008 canRx3
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt3
                            *COM*:0000000000000018 txMsg3
                            *COM*:000000000000001c rxMsg3
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
     /tmp/ccF5CrYN.s:784    .rodata.balanceCommand_attributes:0000000000000000 $d
     /tmp/ccF5CrYN.s:795    .rodata.defaultTask_attributes:0000000000000000 $d
     /tmp/ccF5CrYN.s:806    .rodata.processData_attributes:0000000000000000 $d
     /tmp/ccF5CrYN.s:817    .rodata.sendCommand_attributes:0000000000000000 $d
     /tmp/ccF5CrYN.s:828    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
bmsStateHandler
acChargeCommand
osDelay
balanceCommand
sendCommand
synchChargers
refreshData
tx500kData
HAL_IncTick
HAL_CAN_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
canSettings
visInit
initBMS
osKernelInitialize
osThreadNew
osKernelStart
