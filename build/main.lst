ARM GAS  /tmp/cc0lww7A.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB144:
  26              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** #include "bms.h"
  27:Core/Src/main.c **** #include "can_setup.h"
  28:Core/Src/main.c **** #include "visEffect.h"
  29:Core/Src/main.c **** #include "ws2812b.h"
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** //#include "visEffect.h"
  32:Core/Src/main.c **** /* USER CODE END Includes */
ARM GAS  /tmp/cc0lww7A.s 			page 2


  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** typedef StaticQueue_t osStaticMessageQDef_t;
  36:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PTD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PD */
  42:Core/Src/main.c **** /* USER CODE END PD */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  45:Core/Src/main.c **** /* USER CODE BEGIN PM */
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PM */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  50:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  51:Core/Src/main.c **** CAN_HandleTypeDef hcan2;
  52:Core/Src/main.c **** CAN_HandleTypeDef hcan3;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** IWDG_HandleTypeDef hiwdg;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  57:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  58:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim2_ch1;
  59:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim2_ch2_ch4;
  60:Core/Src/main.c **** DMA_HandleTypeDef hdma_tim2_up_ch3;
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* Definitions for defaultTask */
  63:Core/Src/main.c **** osThreadId_t defaultTaskHandle;
  64:Core/Src/main.c **** const osThreadAttr_t defaultTask_attributes = {
  65:Core/Src/main.c ****     .name = "defaultTask",
  66:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  67:Core/Src/main.c ****     .stack_size = 128 * 4};
  68:Core/Src/main.c **** /* Definitions for synchCommand */
  69:Core/Src/main.c **** osThreadId_t synchCommandHandle;
  70:Core/Src/main.c **** const osThreadAttr_t synchCommand_attributes = {
  71:Core/Src/main.c ****     .name = "synchCommand",
  72:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  73:Core/Src/main.c ****     .stack_size = 128 * 4};
  74:Core/Src/main.c **** /* Definitions for balanceCommand */
  75:Core/Src/main.c **** osThreadId_t balanceCommandHandle;
  76:Core/Src/main.c **** const osThreadAttr_t balanceCommand_attributes = {
  77:Core/Src/main.c ****     .name = "balanceCommand",
  78:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  79:Core/Src/main.c ****     .stack_size = 128 * 4};
  80:Core/Src/main.c **** /* Definitions for processData */
  81:Core/Src/main.c **** osThreadId_t processDataHandle;
  82:Core/Src/main.c **** const osThreadAttr_t processData_attributes = {
  83:Core/Src/main.c ****     .name = "processData",
  84:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  85:Core/Src/main.c ****     .stack_size = 128 * 4};
  86:Core/Src/main.c **** /* Definitions for kickTheDog */
  87:Core/Src/main.c **** osThreadId_t kickTheDogHandle;
  88:Core/Src/main.c **** const osThreadAttr_t kickTheDog_attributes = {
  89:Core/Src/main.c ****     .name = "kickTheDog",
ARM GAS  /tmp/cc0lww7A.s 			page 3


  90:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityRealtime,
  91:Core/Src/main.c ****     .stack_size = 128 * 4};
  92:Core/Src/main.c **** /* Definitions for canTxTask */
  93:Core/Src/main.c **** osThreadId_t canTxTaskHandle;
  94:Core/Src/main.c **** const osThreadAttr_t canTxTask_attributes = {
  95:Core/Src/main.c ****     .name = "canTxTask",
  96:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  97:Core/Src/main.c ****     .stack_size = 128 * 4};
  98:Core/Src/main.c **** /* Definitions for canTxQueue */
  99:Core/Src/main.c **** osMessageQueueId_t canTxQueueHandle;
 100:Core/Src/main.c **** uint8_t canTxQueueBuffer[16 * sizeof(uint16_t)];
 101:Core/Src/main.c **** osStaticMessageQDef_t canTxQueueControlBlock;
 102:Core/Src/main.c **** const osMessageQueueAttr_t canTxQueue_attributes = {
 103:Core/Src/main.c ****     .name = "canTxQueue",
 104:Core/Src/main.c ****     .cb_mem = &canTxQueueControlBlock,
 105:Core/Src/main.c ****     .cb_size = sizeof(canTxQueueControlBlock),
 106:Core/Src/main.c ****     .mq_mem = &canTxQueueBuffer,
 107:Core/Src/main.c ****     .mq_size = sizeof(canTxQueueBuffer)};
 108:Core/Src/main.c **** /* USER CODE BEGIN PV */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c **** /* USER CODE END PV */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
 113:Core/Src/main.c **** void SystemClock_Config(void);
 114:Core/Src/main.c **** static void MX_GPIO_Init(void);
 115:Core/Src/main.c **** static void MX_DMA_Init(void);
 116:Core/Src/main.c **** static void MX_CAN1_Init(void);
 117:Core/Src/main.c **** static void MX_CAN2_Init(void);
 118:Core/Src/main.c **** static void MX_CAN3_Init(void);
 119:Core/Src/main.c **** static void MX_TIM2_Init(void);
 120:Core/Src/main.c **** static void MX_TIM3_Init(void);
 121:Core/Src/main.c **** static void MX_IWDG_Init(void);
 122:Core/Src/main.c **** void StartDefaultTask(void *argument);
 123:Core/Src/main.c **** void StartsynchCommand(void *argument);
 124:Core/Src/main.c **** void StartbalanceCommand(void *argument);
 125:Core/Src/main.c **** void StartprocessData(void *argument);
 126:Core/Src/main.c **** void StartkickTheDog(void *argument);
 127:Core/Src/main.c **** void StartcanTxTask(void *argument);
 128:Core/Src/main.c **** 
 129:Core/Src/main.c **** /* USER CODE BEGIN PFP */
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** /* USER CODE END PFP */
 132:Core/Src/main.c **** 
 133:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 134:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c **** /* USER CODE END 0 */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c **** /**
 139:Core/Src/main.c ****   * @brief  The application entry point.
 140:Core/Src/main.c ****   * @retval int
 141:Core/Src/main.c ****   */
 142:Core/Src/main.c **** int main(void)
 143:Core/Src/main.c **** {
 144:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****   /* USER CODE END 1 */
ARM GAS  /tmp/cc0lww7A.s 			page 4


 147:Core/Src/main.c **** 
 148:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 149:Core/Src/main.c **** 
 150:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 151:Core/Src/main.c ****   HAL_Init();
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c ****   /* USER CODE END Init */
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   /* Configure the system clock */
 158:Core/Src/main.c ****   SystemClock_Config();
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /* USER CODE END SysInit */
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   /* Initialize all configured peripherals */
 165:Core/Src/main.c ****   MX_GPIO_Init();
 166:Core/Src/main.c ****   MX_DMA_Init();
 167:Core/Src/main.c ****   MX_CAN1_Init();
 168:Core/Src/main.c ****   MX_CAN2_Init();
 169:Core/Src/main.c ****   MX_CAN3_Init();
 170:Core/Src/main.c ****   MX_TIM2_Init();
 171:Core/Src/main.c ****   MX_TIM3_Init();
 172:Core/Src/main.c ****   MX_IWDG_Init();
 173:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 174:Core/Src/main.c ****   canSettings();
 175:Core/Src/main.c ****   visInit();
 176:Core/Src/main.c ****   initBMS();
 177:Core/Src/main.c ****   /* USER CODE END 2 */
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* Init scheduler */
 180:Core/Src/main.c ****   osKernelInitialize();
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 183:Core/Src/main.c ****   /* add mutexes, ... */
 184:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 187:Core/Src/main.c ****   /* add semaphores, ... */
 188:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 191:Core/Src/main.c ****   /* start timers, add new ones, ... */
 192:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* Create the queue(s) */
 195:Core/Src/main.c ****   /* creation of canTxQueue */
 196:Core/Src/main.c ****   canTxQueueHandle = osMessageQueueNew(16, sizeof(uint16_t), &canTxQueue_attributes);
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 199:Core/Src/main.c ****   /* add queues, ... */
 200:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /* Create the thread(s) */
 203:Core/Src/main.c ****   /* creation of defaultTask */
ARM GAS  /tmp/cc0lww7A.s 			page 5


 204:Core/Src/main.c ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 205:Core/Src/main.c **** 
 206:Core/Src/main.c ****   /* creation of synchCommand */
 207:Core/Src/main.c ****   synchCommandHandle = osThreadNew(StartsynchCommand, NULL, &synchCommand_attributes);
 208:Core/Src/main.c **** 
 209:Core/Src/main.c ****   /* creation of balanceCommand */
 210:Core/Src/main.c ****   balanceCommandHandle = osThreadNew(StartbalanceCommand, NULL, &balanceCommand_attributes);
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /* creation of processData */
 213:Core/Src/main.c ****   processDataHandle = osThreadNew(StartprocessData, NULL, &processData_attributes);
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /* creation of kickTheDog */
 216:Core/Src/main.c ****   kickTheDogHandle = osThreadNew(StartkickTheDog, NULL, &kickTheDog_attributes);
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****   /* creation of canTxTask */
 219:Core/Src/main.c ****   canTxTaskHandle = osThreadNew(StartcanTxTask, NULL, &canTxTask_attributes);
 220:Core/Src/main.c **** 
 221:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 222:Core/Src/main.c ****   /* add threads, ... */
 223:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 226:Core/Src/main.c ****   /* add events, ... */
 227:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* Start scheduler */
 230:Core/Src/main.c ****   osKernelStart();
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 233:Core/Src/main.c ****   /* Infinite loop */
 234:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 235:Core/Src/main.c ****   while (1)
 236:Core/Src/main.c ****   {
 237:Core/Src/main.c ****     /* USER CODE END WHILE */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 240:Core/Src/main.c ****   }
 241:Core/Src/main.c ****   /* USER CODE END 3 */
 242:Core/Src/main.c **** }
 243:Core/Src/main.c **** 
 244:Core/Src/main.c **** /**
 245:Core/Src/main.c ****   * @brief System Clock Configuration
 246:Core/Src/main.c ****   * @retval None
 247:Core/Src/main.c ****   */
 248:Core/Src/main.c **** void SystemClock_Config(void)
 249:Core/Src/main.c **** {
 250:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 251:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 252:Core/Src/main.c **** 
 253:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 254:Core/Src/main.c ****   */
 255:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 256:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 257:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 258:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 259:Core/Src/main.c ****   */
 260:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
ARM GAS  /tmp/cc0lww7A.s 			page 6


 261:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 262:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 263:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 270:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 271:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 272:Core/Src/main.c ****   {
 273:Core/Src/main.c ****     Error_Handler();
 274:Core/Src/main.c ****   }
 275:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 276:Core/Src/main.c ****   */
 277:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 278:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 279:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 280:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 281:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 284:Core/Src/main.c ****   {
 285:Core/Src/main.c ****     Error_Handler();
 286:Core/Src/main.c ****   }
 287:Core/Src/main.c **** }
 288:Core/Src/main.c **** 
 289:Core/Src/main.c **** /**
 290:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 291:Core/Src/main.c ****   * @param None
 292:Core/Src/main.c ****   * @retval None
 293:Core/Src/main.c ****   */
 294:Core/Src/main.c **** static void MX_CAN1_Init(void)
 295:Core/Src/main.c **** {
 296:Core/Src/main.c **** 
 297:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 300:Core/Src/main.c **** 
 301:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 304:Core/Src/main.c ****   hcan1.Instance = CAN1;
 305:Core/Src/main.c ****   hcan1.Init.Prescaler = 48;
 306:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 307:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 308:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 309:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 310:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 311:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 312:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 313:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 314:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 315:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 316:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 317:Core/Src/main.c ****   {
ARM GAS  /tmp/cc0lww7A.s 			page 7


 318:Core/Src/main.c ****     Error_Handler();
 319:Core/Src/main.c ****   }
 320:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 323:Core/Src/main.c **** }
 324:Core/Src/main.c **** 
 325:Core/Src/main.c **** /**
 326:Core/Src/main.c ****   * @brief CAN2 Initialization Function
 327:Core/Src/main.c ****   * @param None
 328:Core/Src/main.c ****   * @retval None
 329:Core/Src/main.c ****   */
 330:Core/Src/main.c **** static void MX_CAN2_Init(void)
 331:Core/Src/main.c **** {
 332:Core/Src/main.c **** 
 333:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 0 */
 334:Core/Src/main.c **** 
 335:Core/Src/main.c ****   /* USER CODE END CAN2_Init 0 */
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 1 */
 338:Core/Src/main.c ****    //{ CAN_BTR_TS1_4TQ, CAN_BTR_TS2_3TQ, 9 }, //500kbps
 339:Core/Src/main.c ****   /* USER CODE END CAN2_Init 1 */
 340:Core/Src/main.c ****   hcan2.Instance = CAN2;
 341:Core/Src/main.c ****   hcan2.Init.Prescaler = 9;//12;
 342:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 343:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 344:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;//CAN_BS1_2TQ;
 345:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;//CAN_BS2_3TQ;
 346:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 347:Core/Src/main.c ****   hcan2.Init.AutoBusOff = ENABLE;
 348:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 349:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 350:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 351:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 352:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 353:Core/Src/main.c ****   {
 354:Core/Src/main.c ****     Error_Handler();
 355:Core/Src/main.c ****   }
 356:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 2 */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /* USER CODE END CAN2_Init 2 */
 359:Core/Src/main.c **** }
 360:Core/Src/main.c **** 
 361:Core/Src/main.c **** /**
 362:Core/Src/main.c ****   * @brief CAN3 Initialization Function
 363:Core/Src/main.c ****   * @param None
 364:Core/Src/main.c ****   * @retval None
 365:Core/Src/main.c ****   */
 366:Core/Src/main.c **** static void MX_CAN3_Init(void)
 367:Core/Src/main.c **** {
 368:Core/Src/main.c **** 
 369:Core/Src/main.c ****   /* USER CODE BEGIN CAN3_Init 0 */
 370:Core/Src/main.c **** 
 371:Core/Src/main.c ****   /* USER CODE END CAN3_Init 0 */
 372:Core/Src/main.c **** 
 373:Core/Src/main.c ****   /* USER CODE BEGIN CAN3_Init 1 */
 374:Core/Src/main.c **** 
ARM GAS  /tmp/cc0lww7A.s 			page 8


 375:Core/Src/main.c ****   /* USER CODE END CAN3_Init 1 */
 376:Core/Src/main.c ****   hcan3.Instance = CAN3;
 377:Core/Src/main.c ****   hcan3.Init.Prescaler = 48;
 378:Core/Src/main.c ****   hcan3.Init.Mode = CAN_MODE_NORMAL;
 379:Core/Src/main.c ****   hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 380:Core/Src/main.c ****   hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 381:Core/Src/main.c ****   hcan3.Init.TimeSeg2 = CAN_BS2_3TQ;
 382:Core/Src/main.c ****   hcan3.Init.TimeTriggeredMode = DISABLE;
 383:Core/Src/main.c ****   hcan3.Init.AutoBusOff = ENABLE;
 384:Core/Src/main.c ****   hcan3.Init.AutoWakeUp = DISABLE;
 385:Core/Src/main.c ****   hcan3.Init.AutoRetransmission = DISABLE;
 386:Core/Src/main.c ****   hcan3.Init.ReceiveFifoLocked = DISABLE;
 387:Core/Src/main.c ****   hcan3.Init.TransmitFifoPriority = DISABLE;
 388:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan3) != HAL_OK)
 389:Core/Src/main.c ****   {
 390:Core/Src/main.c ****     Error_Handler();
 391:Core/Src/main.c ****   }
 392:Core/Src/main.c ****   /* USER CODE BEGIN CAN3_Init 2 */
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* USER CODE END CAN3_Init 2 */
 395:Core/Src/main.c **** }
 396:Core/Src/main.c **** 
 397:Core/Src/main.c **** /**
 398:Core/Src/main.c ****   * @brief IWDG Initialization Function
 399:Core/Src/main.c ****   * @param None
 400:Core/Src/main.c ****   * @retval None
 401:Core/Src/main.c ****   */
 402:Core/Src/main.c **** static void MX_IWDG_Init(void)
 403:Core/Src/main.c **** {
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 0 */
 406:Core/Src/main.c **** 
 407:Core/Src/main.c ****   /* USER CODE END IWDG_Init 0 */
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 1 */
 410:Core/Src/main.c **** 
 411:Core/Src/main.c ****   /* USER CODE END IWDG_Init 1 */
 412:Core/Src/main.c ****   hiwdg.Instance = IWDG;
 413:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 414:Core/Src/main.c ****   hiwdg.Init.Reload = 2000;
 415:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 416:Core/Src/main.c ****   {
 417:Core/Src/main.c ****     Error_Handler();
 418:Core/Src/main.c ****   }
 419:Core/Src/main.c ****   /* USER CODE BEGIN IWDG_Init 2 */
 420:Core/Src/main.c **** 
 421:Core/Src/main.c ****   /* USER CODE END IWDG_Init 2 */
 422:Core/Src/main.c **** }
 423:Core/Src/main.c **** 
 424:Core/Src/main.c **** /**
 425:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 426:Core/Src/main.c ****   * @param None
 427:Core/Src/main.c ****   * @retval None
 428:Core/Src/main.c ****   */
 429:Core/Src/main.c **** static void MX_TIM2_Init(void)
 430:Core/Src/main.c **** {
 431:Core/Src/main.c **** 
ARM GAS  /tmp/cc0lww7A.s 			page 9


 432:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 437:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 438:Core/Src/main.c **** 
 439:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 440:Core/Src/main.c **** 
 441:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 442:Core/Src/main.c ****   htim2.Instance = TIM2;
 443:Core/Src/main.c ****   htim2.Init.Prescaler = 3 - 1;
 444:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 445:Core/Src/main.c ****   htim2.Init.Period = 29;
 446:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 447:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 448:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 449:Core/Src/main.c ****   {
 450:Core/Src/main.c ****     Error_Handler();
 451:Core/Src/main.c ****   }
 452:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 453:Core/Src/main.c ****   {
 454:Core/Src/main.c ****     Error_Handler();
 455:Core/Src/main.c ****   }
 456:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 457:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 458:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 459:Core/Src/main.c ****   {
 460:Core/Src/main.c ****     Error_Handler();
 461:Core/Src/main.c ****   }
 462:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_TIMING;
 463:Core/Src/main.c ****   sConfigOC.Pulse = 8;
 464:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 465:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 466:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 467:Core/Src/main.c ****   {
 468:Core/Src/main.c ****     Error_Handler();
 469:Core/Src/main.c ****   }
 470:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 471:Core/Src/main.c ****   sConfigOC.Pulse = 17;
 472:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 473:Core/Src/main.c ****   {
 474:Core/Src/main.c ****     Error_Handler();
 475:Core/Src/main.c ****   }
 476:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 477:Core/Src/main.c **** 
 478:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 479:Core/Src/main.c **** }
 480:Core/Src/main.c **** 
 481:Core/Src/main.c **** /**
 482:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 483:Core/Src/main.c ****   * @param None
 484:Core/Src/main.c ****   * @retval None
 485:Core/Src/main.c ****   */
 486:Core/Src/main.c **** static void MX_TIM3_Init(void)
 487:Core/Src/main.c **** {
 488:Core/Src/main.c **** 
ARM GAS  /tmp/cc0lww7A.s 			page 10


 489:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 492:Core/Src/main.c **** 
 493:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 494:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 495:Core/Src/main.c **** 
 496:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 497:Core/Src/main.c **** 
 498:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 499:Core/Src/main.c ****   htim3.Instance = TIM3;
 500:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 501:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 502:Core/Src/main.c ****   htim3.Init.Period = 65535;
 503:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 504:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 505:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 506:Core/Src/main.c ****   {
 507:Core/Src/main.c ****     Error_Handler();
 508:Core/Src/main.c ****   }
 509:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 510:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 511:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 512:Core/Src/main.c ****   {
 513:Core/Src/main.c ****     Error_Handler();
 514:Core/Src/main.c ****   }
 515:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 516:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 517:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 518:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 519:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 520:Core/Src/main.c ****   {
 521:Core/Src/main.c ****     Error_Handler();
 522:Core/Src/main.c ****   }
 523:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 524:Core/Src/main.c ****   {
 525:Core/Src/main.c ****     Error_Handler();
 526:Core/Src/main.c ****   }
 527:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 528:Core/Src/main.c **** 
 529:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 530:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim3);
 531:Core/Src/main.c **** }
 532:Core/Src/main.c **** 
 533:Core/Src/main.c **** /**
 534:Core/Src/main.c ****   * Enable DMA controller clock
 535:Core/Src/main.c ****   */
 536:Core/Src/main.c **** static void MX_DMA_Init(void)
 537:Core/Src/main.c **** {
 538:Core/Src/main.c **** 
 539:Core/Src/main.c ****   /* DMA controller clock enable */
 540:Core/Src/main.c ****   __HAL_RCC_DMA1_CLK_ENABLE();
 541:Core/Src/main.c **** 
 542:Core/Src/main.c ****   /* DMA interrupt init */
 543:Core/Src/main.c ****   /* DMA1_Stream1_IRQn interrupt configuration */
 544:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 545:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
ARM GAS  /tmp/cc0lww7A.s 			page 11


 546:Core/Src/main.c ****   /* DMA1_Stream5_IRQn interrupt configuration */
 547:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 548:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 549:Core/Src/main.c ****   /* DMA1_Stream6_IRQn interrupt configuration */
 550:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 551:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 552:Core/Src/main.c **** }
 553:Core/Src/main.c **** 
 554:Core/Src/main.c **** /**
 555:Core/Src/main.c ****   * @brief GPIO Initialization Function
 556:Core/Src/main.c ****   * @param None
 557:Core/Src/main.c ****   * @retval None
 558:Core/Src/main.c ****   */
 559:Core/Src/main.c **** static void MX_GPIO_Init(void)
 560:Core/Src/main.c **** {
  27              		.loc 1 560 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              		.cfi_def_cfa_offset 12
  33              		.cfi_offset 4, -12
  34              		.cfi_offset 5, -8
  35              		.cfi_offset 14, -4
  36 0002 8BB0     		sub	sp, sp, #44
  37              		.cfi_def_cfa_offset 56
 561:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 561 0
  39 0004 0024     		movs	r4, #0
  40 0006 0594     		str	r4, [sp, #20]
  41 0008 0694     		str	r4, [sp, #24]
  42 000a 0794     		str	r4, [sp, #28]
  43 000c 0894     		str	r4, [sp, #32]
  44 000e 0994     		str	r4, [sp, #36]
  45              	.LBB4:
 562:Core/Src/main.c **** 
 563:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 564:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  46              		.loc 1 564 0
  47 0010 0194     		str	r4, [sp, #4]
  48 0012 224B     		ldr	r3, .L3
  49 0014 1A6B     		ldr	r2, [r3, #48]
  50 0016 42F00402 		orr	r2, r2, #4
  51 001a 1A63     		str	r2, [r3, #48]
  52 001c 1A6B     		ldr	r2, [r3, #48]
  53 001e 02F00402 		and	r2, r2, #4
  54 0022 0192     		str	r2, [sp, #4]
  55 0024 019A     		ldr	r2, [sp, #4]
  56              	.LBE4:
  57              	.LBB5:
 565:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  58              		.loc 1 565 0
  59 0026 0294     		str	r4, [sp, #8]
  60 0028 1A6B     		ldr	r2, [r3, #48]
  61 002a 42F08002 		orr	r2, r2, #128
  62 002e 1A63     		str	r2, [r3, #48]
  63 0030 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/cc0lww7A.s 			page 12


  64 0032 02F08002 		and	r2, r2, #128
  65 0036 0292     		str	r2, [sp, #8]
  66 0038 029A     		ldr	r2, [sp, #8]
  67              	.LBE5:
  68              	.LBB6:
 566:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  69              		.loc 1 566 0
  70 003a 0394     		str	r4, [sp, #12]
  71 003c 1A6B     		ldr	r2, [r3, #48]
  72 003e 42F00102 		orr	r2, r2, #1
  73 0042 1A63     		str	r2, [r3, #48]
  74 0044 1A6B     		ldr	r2, [r3, #48]
  75 0046 02F00102 		and	r2, r2, #1
  76 004a 0392     		str	r2, [sp, #12]
  77 004c 039A     		ldr	r2, [sp, #12]
  78              	.LBE6:
  79              	.LBB7:
 567:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  80              		.loc 1 567 0
  81 004e 0494     		str	r4, [sp, #16]
  82 0050 1A6B     		ldr	r2, [r3, #48]
  83 0052 42F00202 		orr	r2, r2, #2
  84 0056 1A63     		str	r2, [r3, #48]
  85 0058 1B6B     		ldr	r3, [r3, #48]
  86 005a 03F00203 		and	r3, r3, #2
  87 005e 0493     		str	r3, [sp, #16]
  88 0060 049B     		ldr	r3, [sp, #16]
  89              	.LBE7:
 568:Core/Src/main.c **** 
 569:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 570:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
  90              		.loc 1 570 0
  91 0062 0F4D     		ldr	r5, .L3+4
  92 0064 2246     		mov	r2, r4
  93 0066 4FF40051 		mov	r1, #8192
  94 006a 2846     		mov	r0, r5
  95 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
  96              	.LVL0:
 571:Core/Src/main.c **** 
 572:Core/Src/main.c ****   /*Configure GPIO pin : LED_Pin */
 573:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin;
  97              		.loc 1 573 0
  98 0070 4FF40053 		mov	r3, #8192
  99 0074 0593     		str	r3, [sp, #20]
 574:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 100              		.loc 1 574 0
 101 0076 0123     		movs	r3, #1
 102 0078 0693     		str	r3, [sp, #24]
 575:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 103              		.loc 1 575 0
 104 007a 0794     		str	r4, [sp, #28]
 576:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 105              		.loc 1 576 0
 106 007c 0894     		str	r4, [sp, #32]
 577:Core/Src/main.c ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 107              		.loc 1 577 0
 108 007e 05A9     		add	r1, sp, #20
ARM GAS  /tmp/cc0lww7A.s 			page 13


 109 0080 2846     		mov	r0, r5
 110 0082 FFF7FEFF 		bl	HAL_GPIO_Init
 111              	.LVL1:
 578:Core/Src/main.c **** 
 579:Core/Src/main.c ****   /*Configure GPIO pins : PA0 PA1 */
 580:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 112              		.loc 1 580 0
 113 0086 0323     		movs	r3, #3
 114 0088 0593     		str	r3, [sp, #20]
 581:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 115              		.loc 1 581 0
 116 008a 0694     		str	r4, [sp, #24]
 582:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 117              		.loc 1 582 0
 118 008c 0794     		str	r4, [sp, #28]
 583:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 119              		.loc 1 583 0
 120 008e 05A9     		add	r1, sp, #20
 121 0090 0448     		ldr	r0, .L3+8
 122 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 123              	.LVL2:
 584:Core/Src/main.c **** }
 124              		.loc 1 584 0
 125 0096 0BB0     		add	sp, sp, #44
 126              		.cfi_def_cfa_offset 12
 127              		@ sp needed
 128 0098 30BD     		pop	{r4, r5, pc}
 129              	.L4:
 130 009a 00BF     		.align	2
 131              	.L3:
 132 009c 00380240 		.word	1073887232
 133 00a0 00080240 		.word	1073874944
 134 00a4 00000240 		.word	1073872896
 135              		.cfi_endproc
 136              	.LFE144:
 138              		.section	.text.MX_DMA_Init,"ax",%progbits
 139              		.align	1
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu fpv4-sp-d16
 145              	MX_DMA_Init:
 146              	.LFB143:
 537:Core/Src/main.c **** 
 147              		.loc 1 537 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 8
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151 0000 10B5     		push	{r4, lr}
 152              		.cfi_def_cfa_offset 8
 153              		.cfi_offset 4, -8
 154              		.cfi_offset 14, -4
 155 0002 82B0     		sub	sp, sp, #8
 156              		.cfi_def_cfa_offset 16
 157              	.LBB8:
 540:Core/Src/main.c **** 
 158              		.loc 1 540 0
ARM GAS  /tmp/cc0lww7A.s 			page 14


 159 0004 0024     		movs	r4, #0
 160 0006 0194     		str	r4, [sp, #4]
 161 0008 114B     		ldr	r3, .L7
 162 000a 1A6B     		ldr	r2, [r3, #48]
 163 000c 42F40012 		orr	r2, r2, #2097152
 164 0010 1A63     		str	r2, [r3, #48]
 165 0012 1B6B     		ldr	r3, [r3, #48]
 166 0014 03F40013 		and	r3, r3, #2097152
 167 0018 0193     		str	r3, [sp, #4]
 168 001a 019B     		ldr	r3, [sp, #4]
 169              	.LBE8:
 544:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 170              		.loc 1 544 0
 171 001c 2246     		mov	r2, r4
 172 001e 0521     		movs	r1, #5
 173 0020 0C20     		movs	r0, #12
 174 0022 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 175              	.LVL3:
 545:Core/Src/main.c ****   /* DMA1_Stream5_IRQn interrupt configuration */
 176              		.loc 1 545 0
 177 0026 0C20     		movs	r0, #12
 178 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 179              	.LVL4:
 547:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 180              		.loc 1 547 0
 181 002c 2246     		mov	r2, r4
 182 002e 0521     		movs	r1, #5
 183 0030 1020     		movs	r0, #16
 184 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 185              	.LVL5:
 548:Core/Src/main.c ****   /* DMA1_Stream6_IRQn interrupt configuration */
 186              		.loc 1 548 0
 187 0036 1020     		movs	r0, #16
 188 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 189              	.LVL6:
 550:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 190              		.loc 1 550 0
 191 003c 2246     		mov	r2, r4
 192 003e 0521     		movs	r1, #5
 193 0040 1120     		movs	r0, #17
 194 0042 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 195              	.LVL7:
 551:Core/Src/main.c **** }
 196              		.loc 1 551 0
 197 0046 1120     		movs	r0, #17
 198 0048 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 199              	.LVL8:
 552:Core/Src/main.c **** 
 200              		.loc 1 552 0
 201 004c 02B0     		add	sp, sp, #8
 202              		.cfi_def_cfa_offset 8
 203              		@ sp needed
 204 004e 10BD     		pop	{r4, pc}
 205              	.L8:
 206              		.align	2
 207              	.L7:
 208 0050 00380240 		.word	1073887232
ARM GAS  /tmp/cc0lww7A.s 			page 15


 209              		.cfi_endproc
 210              	.LFE143:
 212              		.section	.text.StartDefaultTask,"ax",%progbits
 213              		.align	1
 214              		.global	StartDefaultTask
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu fpv4-sp-d16
 220              	StartDefaultTask:
 221              	.LFB145:
 585:Core/Src/main.c **** 
 586:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 587:Core/Src/main.c **** 
 588:Core/Src/main.c **** /* USER CODE END 4 */
 589:Core/Src/main.c **** 
 590:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 591:Core/Src/main.c **** /**
 592:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 593:Core/Src/main.c ****   * @param  argument: Not used
 594:Core/Src/main.c ****   * @retval None
 595:Core/Src/main.c ****   */
 596:Core/Src/main.c **** 
 597:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 598:Core/Src/main.c **** void StartDefaultTask(void *argument)
 599:Core/Src/main.c **** {
 222              		.loc 1 599 0
 223              		.cfi_startproc
 224              		@ Volatile: function does not return.
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              	.LVL9:
 228 0000 08B5     		push	{r3, lr}
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 3, -8
 231              		.cfi_offset 14, -4
 232              	.LVL10:
 233              	.L10:
 600:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 601:Core/Src/main.c ****   /* Infinite loop */
 602:Core/Src/main.c ****   for (;;)
 603:Core/Src/main.c ****   {
 604:Core/Src/main.c ****     visHandle();
 234              		.loc 1 604 0 discriminator 1
 235 0002 FFF7FEFF 		bl	visHandle
 236              	.LVL11:
 605:Core/Src/main.c ****     bmsStateHandler(&BMS[0]);
 237              		.loc 1 605 0 discriminator 1
 238 0006 074C     		ldr	r4, .L12
 239 0008 2046     		mov	r0, r4
 240 000a FFF7FEFF 		bl	bmsStateHandler
 241              	.LVL12:
 606:Core/Src/main.c ****     bmsStateHandler(&BMS[1]);
 242              		.loc 1 606 0 discriminator 1
 243 000e 04F1F600 		add	r0, r4, #246
 244 0012 FFF7FEFF 		bl	bmsStateHandler
 245              	.LVL13:
ARM GAS  /tmp/cc0lww7A.s 			page 16


 607:Core/Src/main.c ****     HAL_IWDG_Refresh(&hiwdg);
 246              		.loc 1 607 0 discriminator 1
 247 0016 0448     		ldr	r0, .L12+4
 248 0018 FFF7FEFF 		bl	HAL_IWDG_Refresh
 249              	.LVL14:
 608:Core/Src/main.c ****     //acChargeCommand();
 609:Core/Src/main.c **** 
 610:Core/Src/main.c ****     osDelay(10);
 250              		.loc 1 610 0 discriminator 1
 251 001c 0A20     		movs	r0, #10
 252 001e FFF7FEFF 		bl	osDelay
 253              	.LVL15:
 254 0022 EEE7     		b	.L10
 255              	.L13:
 256              		.align	2
 257              	.L12:
 258 0024 00000000 		.word	BMS
 259 0028 00000000 		.word	hiwdg
 260              		.cfi_endproc
 261              	.LFE145:
 263              		.section	.text.StartkickTheDog,"ax",%progbits
 264              		.align	1
 265              		.global	StartkickTheDog
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.fpu fpv4-sp-d16
 271              	StartkickTheDog:
 272              	.LFB149:
 611:Core/Src/main.c ****   }
 612:Core/Src/main.c ****   /* USER CODE END 5 */
 613:Core/Src/main.c **** }
 614:Core/Src/main.c **** 
 615:Core/Src/main.c **** /* USER CODE BEGIN Header_StartsynchCommand */
 616:Core/Src/main.c **** /**
 617:Core/Src/main.c **** * @brief Function implementing the synchCommand thread.
 618:Core/Src/main.c **** * @param argument: Not used
 619:Core/Src/main.c **** * @retval None
 620:Core/Src/main.c **** */
 621:Core/Src/main.c **** /* USER CODE END Header_StartsynchCommand */
 622:Core/Src/main.c **** void StartsynchCommand(void *argument)
 623:Core/Src/main.c **** {
 624:Core/Src/main.c ****   /* USER CODE BEGIN StartsynchCommand */
 625:Core/Src/main.c ****   /* Infinite loop */
 626:Core/Src/main.c ****   for (;;)
 627:Core/Src/main.c ****   {
 628:Core/Src/main.c ****     synchChargers();
 629:Core/Src/main.c ****     
 630:Core/Src/main.c ****     osDelay(5000);
 631:Core/Src/main.c ****   }
 632:Core/Src/main.c ****   /* USER CODE END StartsynchCommand */
 633:Core/Src/main.c **** }
 634:Core/Src/main.c **** 
 635:Core/Src/main.c **** /* USER CODE BEGIN Header_StartbalanceCommand */
 636:Core/Src/main.c **** /**
 637:Core/Src/main.c **** * @brief Function implementing the balanceCommand thread.
 638:Core/Src/main.c **** * @param argument: Not used
ARM GAS  /tmp/cc0lww7A.s 			page 17


 639:Core/Src/main.c **** * @retval None
 640:Core/Src/main.c **** */
 641:Core/Src/main.c **** /* USER CODE END Header_StartbalanceCommand */
 642:Core/Src/main.c **** void StartbalanceCommand(void *argument)
 643:Core/Src/main.c **** {
 644:Core/Src/main.c ****   /* USER CODE BEGIN StartbalanceCommand */
 645:Core/Src/main.c ****   /* Infinite loop */
 646:Core/Src/main.c ****   for (;;)
 647:Core/Src/main.c ****   {
 648:Core/Src/main.c ****     if (BMS[0].balancecells)
 649:Core/Src/main.c ****     {
 650:Core/Src/main.c ****       balanceCommand(&BMS[0], 0);
 651:Core/Src/main.c ****     }
 652:Core/Src/main.c **** 
 653:Core/Src/main.c ****     if (BMS[1].balancecells)
 654:Core/Src/main.c ****     {
 655:Core/Src/main.c ****       balanceCommand(&BMS[1], 1);
 656:Core/Src/main.c ****     }
 657:Core/Src/main.c **** 
 658:Core/Src/main.c ****     requestBICMdata(&BMS[0], 0);
 659:Core/Src/main.c ****     requestBICMdata(&BMS[1], 1);
 660:Core/Src/main.c ****     HAL_IWDG_Refresh(&hiwdg);
 661:Core/Src/main.c **** 
 662:Core/Src/main.c ****     osDelay(200);
 663:Core/Src/main.c ****   }
 664:Core/Src/main.c ****   /* USER CODE END StartbalanceCommand */
 665:Core/Src/main.c **** }
 666:Core/Src/main.c **** 
 667:Core/Src/main.c **** /* USER CODE BEGIN Header_StartprocessData */
 668:Core/Src/main.c **** /**
 669:Core/Src/main.c **** * @brief Function implementing the processData thread.
 670:Core/Src/main.c **** * @param argument: Not used
 671:Core/Src/main.c **** * @retval None
 672:Core/Src/main.c **** */
 673:Core/Src/main.c **** /* USER CODE END Header_StartprocessData */
 674:Core/Src/main.c **** void StartprocessData(void *argument)
 675:Core/Src/main.c **** {
 676:Core/Src/main.c ****   /* USER CODE BEGIN StartprocessData */
 677:Core/Src/main.c ****   /* Infinite loop */
 678:Core/Src/main.c ****   for (;;)
 679:Core/Src/main.c ****   {
 680:Core/Src/main.c ****     refreshData();
 681:Core/Src/main.c ****     tx500kData();
 682:Core/Src/main.c ****     acChargeCommand();
 683:Core/Src/main.c ****     osDelay(1000);
 684:Core/Src/main.c ****   }
 685:Core/Src/main.c ****   /* USER CODE END StartprocessData */
 686:Core/Src/main.c **** }
 687:Core/Src/main.c **** 
 688:Core/Src/main.c **** /* USER CODE BEGIN Header_StartkickTheDog */
 689:Core/Src/main.c **** /**
 690:Core/Src/main.c **** * @brief Function implementing the kickTheDog thread.
 691:Core/Src/main.c **** * @param argument: Not used
 692:Core/Src/main.c **** * @retval None
 693:Core/Src/main.c **** */
 694:Core/Src/main.c **** /* USER CODE END Header_StartkickTheDog */
 695:Core/Src/main.c **** void StartkickTheDog(void *argument)
ARM GAS  /tmp/cc0lww7A.s 			page 18


 696:Core/Src/main.c **** {
 273              		.loc 1 696 0
 274              		.cfi_startproc
 275              		@ Volatile: function does not return.
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              	.LVL16:
 279 0000 08B5     		push	{r3, lr}
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 3, -8
 282              		.cfi_offset 14, -4
 283              	.LVL17:
 284              	.L15:
 697:Core/Src/main.c ****   /* USER CODE BEGIN StartkickTheDog */
 698:Core/Src/main.c ****   /* Infinite loop */
 699:Core/Src/main.c ****   for (;;)
 700:Core/Src/main.c ****   {
 701:Core/Src/main.c ****     HAL_IWDG_Refresh(&hiwdg);
 285              		.loc 1 701 0 discriminator 1
 286 0002 0448     		ldr	r0, .L17
 287 0004 FFF7FEFF 		bl	HAL_IWDG_Refresh
 288              	.LVL18:
 702:Core/Src/main.c ****     osDelay(450);
 289              		.loc 1 702 0 discriminator 1
 290 0008 4FF4E170 		mov	r0, #450
 291 000c FFF7FEFF 		bl	osDelay
 292              	.LVL19:
 293 0010 F7E7     		b	.L15
 294              	.L18:
 295 0012 00BF     		.align	2
 296              	.L17:
 297 0014 00000000 		.word	hiwdg
 298              		.cfi_endproc
 299              	.LFE149:
 301              		.section	.text.StartcanTxTask,"ax",%progbits
 302              		.align	1
 303              		.global	StartcanTxTask
 304              		.syntax unified
 305              		.thumb
 306              		.thumb_func
 307              		.fpu fpv4-sp-d16
 309              	StartcanTxTask:
 310              	.LFB150:
 703:Core/Src/main.c ****   }
 704:Core/Src/main.c **** 
 705:Core/Src/main.c ****   /* USER CODE END StartkickTheDog */
 706:Core/Src/main.c **** }
 707:Core/Src/main.c **** 
 708:Core/Src/main.c **** /* USER CODE BEGIN Header_StartcanTxTask */
 709:Core/Src/main.c **** /**
 710:Core/Src/main.c **** * @brief Function implementing the canTxTask thread.
 711:Core/Src/main.c **** * @param argument: Not used
 712:Core/Src/main.c **** * @retval None
 713:Core/Src/main.c **** */
 714:Core/Src/main.c **** /* USER CODE END Header_StartcanTxTask */
 715:Core/Src/main.c **** void StartcanTxTask(void *argument)
 716:Core/Src/main.c **** {
ARM GAS  /tmp/cc0lww7A.s 			page 19


 311              		.loc 1 716 0
 312              		.cfi_startproc
 313              		@ Volatile: function does not return.
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              	.LVL20:
 317 0000 08B5     		push	{r3, lr}
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 3, -8
 320              		.cfi_offset 14, -4
 321              	.LVL21:
 322              	.L20:
 717:Core/Src/main.c ****   /* USER CODE BEGIN StartcanTxTask */
 718:Core/Src/main.c ****   /* Infinite loop */
 719:Core/Src/main.c ****   for (;;)
 720:Core/Src/main.c ****   {
 721:Core/Src/main.c ****     osDelay(5);
 323              		.loc 1 721 0 discriminator 1
 324 0002 0520     		movs	r0, #5
 325 0004 FFF7FEFF 		bl	osDelay
 326              	.LVL22:
 327 0008 FBE7     		b	.L20
 328              		.cfi_endproc
 329              	.LFE150:
 331              		.section	.text.StartsynchCommand,"ax",%progbits
 332              		.align	1
 333              		.global	StartsynchCommand
 334              		.syntax unified
 335              		.thumb
 336              		.thumb_func
 337              		.fpu fpv4-sp-d16
 339              	StartsynchCommand:
 340              	.LFB146:
 623:Core/Src/main.c ****   /* USER CODE BEGIN StartsynchCommand */
 341              		.loc 1 623 0
 342              		.cfi_startproc
 343              		@ Volatile: function does not return.
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              	.LVL23:
 347 0000 08B5     		push	{r3, lr}
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 3, -8
 350              		.cfi_offset 14, -4
 351              	.LVL24:
 352              	.L23:
 628:Core/Src/main.c ****     
 353              		.loc 1 628 0 discriminator 1
 354 0002 FFF7FEFF 		bl	synchChargers
 355              	.LVL25:
 630:Core/Src/main.c ****   }
 356              		.loc 1 630 0 discriminator 1
 357 0006 41F28830 		movw	r0, #5000
 358 000a FFF7FEFF 		bl	osDelay
 359              	.LVL26:
 360 000e F8E7     		b	.L23
 361              		.cfi_endproc
ARM GAS  /tmp/cc0lww7A.s 			page 20


 362              	.LFE146:
 364              		.section	.text.StartbalanceCommand,"ax",%progbits
 365              		.align	1
 366              		.global	StartbalanceCommand
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu fpv4-sp-d16
 372              	StartbalanceCommand:
 373              	.LFB147:
 643:Core/Src/main.c ****   /* USER CODE BEGIN StartbalanceCommand */
 374              		.loc 1 643 0
 375              		.cfi_startproc
 376              		@ Volatile: function does not return.
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              	.LVL27:
 380 0000 08B5     		push	{r3, lr}
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 3, -8
 383              		.cfi_offset 14, -4
 384 0002 14E0     		b	.L28
 385              	.LVL28:
 386              	.L30:
 650:Core/Src/main.c ****     }
 387              		.loc 1 650 0
 388 0004 0021     		movs	r1, #0
 389 0006 1148     		ldr	r0, .L31
 390 0008 FFF7FEFF 		bl	balanceCommand
 391              	.LVL29:
 392 000c 14E0     		b	.L26
 393              	.L27:
 658:Core/Src/main.c ****     requestBICMdata(&BMS[1], 1);
 394              		.loc 1 658 0
 395 000e 0F4C     		ldr	r4, .L31
 396 0010 0021     		movs	r1, #0
 397 0012 2046     		mov	r0, r4
 398 0014 FFF7FEFF 		bl	requestBICMdata
 399              	.LVL30:
 659:Core/Src/main.c ****     HAL_IWDG_Refresh(&hiwdg);
 400              		.loc 1 659 0
 401 0018 0121     		movs	r1, #1
 402 001a 04F1F600 		add	r0, r4, #246
 403 001e FFF7FEFF 		bl	requestBICMdata
 404              	.LVL31:
 660:Core/Src/main.c **** 
 405              		.loc 1 660 0
 406 0022 0B48     		ldr	r0, .L31+4
 407 0024 FFF7FEFF 		bl	HAL_IWDG_Refresh
 408              	.LVL32:
 662:Core/Src/main.c ****   }
 409              		.loc 1 662 0
 410 0028 C820     		movs	r0, #200
 411 002a FFF7FEFF 		bl	osDelay
 412              	.LVL33:
 413              	.L28:
 648:Core/Src/main.c ****     {
ARM GAS  /tmp/cc0lww7A.s 			page 21


 414              		.loc 1 648 0
 415 002e 074B     		ldr	r3, .L31
 416 0030 93F8F530 		ldrb	r3, [r3, #245]	@ zero_extendqisi2
 417 0034 002B     		cmp	r3, #0
 418 0036 E5D1     		bne	.L30
 419              	.L26:
 653:Core/Src/main.c ****     {
 420              		.loc 1 653 0
 421 0038 044B     		ldr	r3, .L31
 422 003a 93F8EB31 		ldrb	r3, [r3, #491]	@ zero_extendqisi2
 423 003e 002B     		cmp	r3, #0
 424 0040 E5D0     		beq	.L27
 655:Core/Src/main.c ****     }
 425              		.loc 1 655 0
 426 0042 0121     		movs	r1, #1
 427 0044 0348     		ldr	r0, .L31+8
 428 0046 FFF7FEFF 		bl	balanceCommand
 429              	.LVL34:
 430 004a E0E7     		b	.L27
 431              	.L32:
 432              		.align	2
 433              	.L31:
 434 004c 00000000 		.word	BMS
 435 0050 00000000 		.word	hiwdg
 436 0054 F6000000 		.word	BMS+246
 437              		.cfi_endproc
 438              	.LFE147:
 440              		.section	.text.StartprocessData,"ax",%progbits
 441              		.align	1
 442              		.global	StartprocessData
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 446              		.fpu fpv4-sp-d16
 448              	StartprocessData:
 449              	.LFB148:
 675:Core/Src/main.c ****   /* USER CODE BEGIN StartprocessData */
 450              		.loc 1 675 0
 451              		.cfi_startproc
 452              		@ Volatile: function does not return.
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 0, uses_anonymous_args = 0
 455              	.LVL35:
 456 0000 08B5     		push	{r3, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 3, -8
 459              		.cfi_offset 14, -4
 460              	.LVL36:
 461              	.L34:
 680:Core/Src/main.c ****     tx500kData();
 462              		.loc 1 680 0 discriminator 1
 463 0002 FFF7FEFF 		bl	refreshData
 464              	.LVL37:
 681:Core/Src/main.c ****     acChargeCommand();
 465              		.loc 1 681 0 discriminator 1
 466 0006 FFF7FEFF 		bl	tx500kData
 467              	.LVL38:
ARM GAS  /tmp/cc0lww7A.s 			page 22


 682:Core/Src/main.c ****     osDelay(1000);
 468              		.loc 1 682 0 discriminator 1
 469 000a FFF7FEFF 		bl	acChargeCommand
 470              	.LVL39:
 683:Core/Src/main.c ****   }
 471              		.loc 1 683 0 discriminator 1
 472 000e 4FF47A70 		mov	r0, #1000
 473 0012 FFF7FEFF 		bl	osDelay
 474              	.LVL40:
 475 0016 F4E7     		b	.L34
 476              		.cfi_endproc
 477              	.LFE148:
 479              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 480              		.align	1
 481              		.global	HAL_TIM_PeriodElapsedCallback
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 485              		.fpu fpv4-sp-d16
 487              	HAL_TIM_PeriodElapsedCallback:
 488              	.LFB151:
 722:Core/Src/main.c ****   }
 723:Core/Src/main.c ****   /* USER CODE END StartcanTxTask */
 724:Core/Src/main.c **** }
 725:Core/Src/main.c **** 
 726:Core/Src/main.c **** /**
 727:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 728:Core/Src/main.c ****   * @note   This function is called  when TIM7 interrupt took place, inside
 729:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 730:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 731:Core/Src/main.c ****   * @param  htim : TIM handle
 732:Core/Src/main.c ****   * @retval None
 733:Core/Src/main.c ****   */
 734:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 735:Core/Src/main.c **** {
 489              		.loc 1 735 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              	.LVL41:
 494 0000 10B5     		push	{r4, lr}
 495              		.cfi_def_cfa_offset 8
 496              		.cfi_offset 4, -8
 497              		.cfi_offset 14, -4
 736:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 737:Core/Src/main.c ****   if (htim->Instance == TIM1)
 498              		.loc 1 737 0
 499 0002 0268     		ldr	r2, [r0]
 500 0004 0F4B     		ldr	r3, .L42
 501 0006 9A42     		cmp	r2, r3
 502 0008 04D0     		beq	.L40
 503              	.L37:
 738:Core/Src/main.c ****   {
 739:Core/Src/main.c ****     ws2812b.timerPeriodCounter = 0;
 740:Core/Src/main.c ****     TIM1->CR1 = 0; // disable timer
 741:Core/Src/main.c **** 
 742:Core/Src/main.c ****     // disable the TIM2 Update IRQ
ARM GAS  /tmp/cc0lww7A.s 			page 23


 743:Core/Src/main.c ****     __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 744:Core/Src/main.c **** 
 745:Core/Src/main.c ****     // Set back 1,25us period
 746:Core/Src/main.c ****     TIM1->ARR = tim_period;
 747:Core/Src/main.c **** 
 748:Core/Src/main.c ****     // Generate an update event to reload the Prescaler value immediatly
 749:Core/Src/main.c ****     TIM1->EGR = TIM_EGR_UG;
 750:Core/Src/main.c ****     __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 751:Core/Src/main.c **** 
 752:Core/Src/main.c ****     // set transfer_complete flag
 753:Core/Src/main.c ****     ws2812b.transferComplete = 1;
 754:Core/Src/main.c ****   }
 755:Core/Src/main.c **** 
 756:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 757:Core/Src/main.c ****   if (htim->Instance == TIM7)
 504              		.loc 1 757 0
 505 000a 0268     		ldr	r2, [r0]
 506 000c 0E4B     		ldr	r3, .L42+4
 507 000e 9A42     		cmp	r2, r3
 508 0010 15D0     		beq	.L41
 509              	.LVL42:
 510              	.L36:
 511 0012 10BD     		pop	{r4, pc}
 512              	.LVL43:
 513              	.L40:
 739:Core/Src/main.c ****     TIM1->CR1 = 0; // disable timer
 514              		.loc 1 739 0
 515 0014 0D4C     		ldr	r4, .L42+8
 516 0016 0023     		movs	r3, #0
 517 0018 6361     		str	r3, [r4, #20]
 740:Core/Src/main.c **** 
 518              		.loc 1 740 0
 519 001a 0A4A     		ldr	r2, .L42
 520 001c 1360     		str	r3, [r2]
 743:Core/Src/main.c **** 
 521              		.loc 1 743 0
 522 001e 0C4B     		ldr	r3, .L42+12
 523 0020 1B68     		ldr	r3, [r3]
 524 0022 D968     		ldr	r1, [r3, #12]
 525 0024 21F00101 		bic	r1, r1, #1
 526 0028 D960     		str	r1, [r3, #12]
 746:Core/Src/main.c **** 
 527              		.loc 1 746 0
 528 002a 0A49     		ldr	r1, .L42+16
 529 002c 0968     		ldr	r1, [r1]
 530 002e D162     		str	r1, [r2, #44]
 749:Core/Src/main.c ****     __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 531              		.loc 1 749 0
 532 0030 0121     		movs	r1, #1
 533 0032 5161     		str	r1, [r2, #20]
 750:Core/Src/main.c **** 
 534              		.loc 1 750 0
 535 0034 6FF00102 		mvn	r2, #1
 536 0038 1A61     		str	r2, [r3, #16]
 753:Core/Src/main.c ****   }
 537              		.loc 1 753 0
 538 003a 2174     		strb	r1, [r4, #16]
ARM GAS  /tmp/cc0lww7A.s 			page 24


 539 003c E5E7     		b	.L37
 540              	.L41:
 758:Core/Src/main.c ****   {
 759:Core/Src/main.c ****     HAL_IncTick();
 541              		.loc 1 759 0
 542 003e FFF7FEFF 		bl	HAL_IncTick
 543              	.LVL44:
 760:Core/Src/main.c ****   }
 761:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 762:Core/Src/main.c **** 
 763:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 764:Core/Src/main.c **** }
 544              		.loc 1 764 0
 545 0042 E6E7     		b	.L36
 546              	.L43:
 547              		.align	2
 548              	.L42:
 549 0044 00000140 		.word	1073807360
 550 0048 00140040 		.word	1073746944
 551 004c 00000000 		.word	ws2812b
 552 0050 00000000 		.word	TIM1_handle
 553 0054 00000000 		.word	tim_period
 554              		.cfi_endproc
 555              	.LFE151:
 557              		.section	.text.Error_Handler,"ax",%progbits
 558              		.align	1
 559              		.global	Error_Handler
 560              		.syntax unified
 561              		.thumb
 562              		.thumb_func
 563              		.fpu fpv4-sp-d16
 565              	Error_Handler:
 566              	.LFB152:
 765:Core/Src/main.c **** 
 766:Core/Src/main.c **** /**
 767:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 768:Core/Src/main.c ****   * @retval None
 769:Core/Src/main.c ****   */
 770:Core/Src/main.c **** void Error_Handler(void)
 771:Core/Src/main.c **** {
 567              		.loc 1 771 0
 568              		.cfi_startproc
 569              		@ Volatile: function does not return.
 570              		@ args = 0, pretend = 0, frame = 0
 571              		@ frame_needed = 0, uses_anonymous_args = 0
 572              		@ link register save eliminated.
 573              	.LBB9:
 574              	.LBB10:
 575              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
ARM GAS  /tmp/cc0lww7A.s 			page 25


   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
ARM GAS  /tmp/cc0lww7A.s 			page 26


  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc0lww7A.s 			page 27


 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 576              		.loc 2 142 0
 577              		.syntax unified
 578              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 579 0000 72B6     		cpsid i
 580              	@ 0 "" 2
 581              		.thumb
 582              		.syntax unified
 583              	.L45:
 584 0002 FEE7     		b	.L45
 585              	.LBE10:
 586              	.LBE9:
 587              		.cfi_endproc
 588              	.LFE152:
 590              		.section	.text.MX_CAN1_Init,"ax",%progbits
 591              		.align	1
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 595              		.fpu fpv4-sp-d16
 597              	MX_CAN1_Init:
 598              	.LFB137:
 295:Core/Src/main.c **** 
 599              		.loc 1 295 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603 0000 08B5     		push	{r3, lr}
 604              		.cfi_def_cfa_offset 8
 605              		.cfi_offset 3, -8
 606              		.cfi_offset 14, -4
 304:Core/Src/main.c ****   hcan1.Init.Prescaler = 48;
 607              		.loc 1 304 0
 608 0002 0D48     		ldr	r0, .L50
 609 0004 0D4B     		ldr	r3, .L50+4
 610 0006 0360     		str	r3, [r0]
 305:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 611              		.loc 1 305 0
ARM GAS  /tmp/cc0lww7A.s 			page 28


 612 0008 3023     		movs	r3, #48
 613 000a 4360     		str	r3, [r0, #4]
 306:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 614              		.loc 1 306 0
 615 000c 0023     		movs	r3, #0
 616 000e 8360     		str	r3, [r0, #8]
 307:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 617              		.loc 1 307 0
 618 0010 C360     		str	r3, [r0, #12]
 308:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 619              		.loc 1 308 0
 620 0012 4FF48032 		mov	r2, #65536
 621 0016 0261     		str	r2, [r0, #16]
 309:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 622              		.loc 1 309 0
 623 0018 4FF40012 		mov	r2, #2097152
 624 001c 4261     		str	r2, [r0, #20]
 310:Core/Src/main.c ****   hcan1.Init.AutoBusOff = ENABLE;
 625              		.loc 1 310 0
 626 001e 0376     		strb	r3, [r0, #24]
 311:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 627              		.loc 1 311 0
 628 0020 0122     		movs	r2, #1
 629 0022 4276     		strb	r2, [r0, #25]
 312:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 630              		.loc 1 312 0
 631 0024 8376     		strb	r3, [r0, #26]
 313:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 632              		.loc 1 313 0
 633 0026 C376     		strb	r3, [r0, #27]
 314:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 634              		.loc 1 314 0
 635 0028 0377     		strb	r3, [r0, #28]
 315:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 636              		.loc 1 315 0
 637 002a 4377     		strb	r3, [r0, #29]
 316:Core/Src/main.c ****   {
 638              		.loc 1 316 0
 639 002c FFF7FEFF 		bl	HAL_CAN_Init
 640              	.LVL45:
 641 0030 00B9     		cbnz	r0, .L49
 642 0032 08BD     		pop	{r3, pc}
 643              	.L49:
 318:Core/Src/main.c ****   }
 644              		.loc 1 318 0
 645 0034 FFF7FEFF 		bl	Error_Handler
 646              	.LVL46:
 647              	.L51:
 648              		.align	2
 649              	.L50:
 650 0038 00000000 		.word	hcan1
 651 003c 00640040 		.word	1073767424
 652              		.cfi_endproc
 653              	.LFE137:
 655              		.section	.text.MX_CAN2_Init,"ax",%progbits
 656              		.align	1
 657              		.syntax unified
ARM GAS  /tmp/cc0lww7A.s 			page 29


 658              		.thumb
 659              		.thumb_func
 660              		.fpu fpv4-sp-d16
 662              	MX_CAN2_Init:
 663              	.LFB138:
 331:Core/Src/main.c **** 
 664              		.loc 1 331 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 0
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668 0000 08B5     		push	{r3, lr}
 669              		.cfi_def_cfa_offset 8
 670              		.cfi_offset 3, -8
 671              		.cfi_offset 14, -4
 340:Core/Src/main.c ****   hcan2.Init.Prescaler = 9;//12;
 672              		.loc 1 340 0
 673 0002 0D48     		ldr	r0, .L56
 674 0004 0D4B     		ldr	r3, .L56+4
 675 0006 0360     		str	r3, [r0]
 341:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 676              		.loc 1 341 0
 677 0008 0923     		movs	r3, #9
 678 000a 4360     		str	r3, [r0, #4]
 342:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 679              		.loc 1 342 0
 680 000c 0023     		movs	r3, #0
 681 000e 8360     		str	r3, [r0, #8]
 343:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_4TQ;//CAN_BS1_2TQ;
 682              		.loc 1 343 0
 683 0010 C360     		str	r3, [r0, #12]
 344:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;//CAN_BS2_3TQ;
 684              		.loc 1 344 0
 685 0012 4FF44032 		mov	r2, #196608
 686 0016 0261     		str	r2, [r0, #16]
 345:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 687              		.loc 1 345 0
 688 0018 4FF40012 		mov	r2, #2097152
 689 001c 4261     		str	r2, [r0, #20]
 346:Core/Src/main.c ****   hcan2.Init.AutoBusOff = ENABLE;
 690              		.loc 1 346 0
 691 001e 0376     		strb	r3, [r0, #24]
 347:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 692              		.loc 1 347 0
 693 0020 0122     		movs	r2, #1
 694 0022 4276     		strb	r2, [r0, #25]
 348:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 695              		.loc 1 348 0
 696 0024 8376     		strb	r3, [r0, #26]
 349:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 697              		.loc 1 349 0
 698 0026 C376     		strb	r3, [r0, #27]
 350:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 699              		.loc 1 350 0
 700 0028 0377     		strb	r3, [r0, #28]
 351:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 701              		.loc 1 351 0
 702 002a 4377     		strb	r3, [r0, #29]
ARM GAS  /tmp/cc0lww7A.s 			page 30


 352:Core/Src/main.c ****   {
 703              		.loc 1 352 0
 704 002c FFF7FEFF 		bl	HAL_CAN_Init
 705              	.LVL47:
 706 0030 00B9     		cbnz	r0, .L55
 707 0032 08BD     		pop	{r3, pc}
 708              	.L55:
 354:Core/Src/main.c ****   }
 709              		.loc 1 354 0
 710 0034 FFF7FEFF 		bl	Error_Handler
 711              	.LVL48:
 712              	.L57:
 713              		.align	2
 714              	.L56:
 715 0038 00000000 		.word	hcan2
 716 003c 00680040 		.word	1073768448
 717              		.cfi_endproc
 718              	.LFE138:
 720              		.section	.text.MX_CAN3_Init,"ax",%progbits
 721              		.align	1
 722              		.syntax unified
 723              		.thumb
 724              		.thumb_func
 725              		.fpu fpv4-sp-d16
 727              	MX_CAN3_Init:
 728              	.LFB139:
 367:Core/Src/main.c **** 
 729              		.loc 1 367 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733 0000 08B5     		push	{r3, lr}
 734              		.cfi_def_cfa_offset 8
 735              		.cfi_offset 3, -8
 736              		.cfi_offset 14, -4
 376:Core/Src/main.c ****   hcan3.Init.Prescaler = 48;
 737              		.loc 1 376 0
 738 0002 0D48     		ldr	r0, .L62
 739 0004 0D4B     		ldr	r3, .L62+4
 740 0006 0360     		str	r3, [r0]
 377:Core/Src/main.c ****   hcan3.Init.Mode = CAN_MODE_NORMAL;
 741              		.loc 1 377 0
 742 0008 3023     		movs	r3, #48
 743 000a 4360     		str	r3, [r0, #4]
 378:Core/Src/main.c ****   hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 744              		.loc 1 378 0
 745 000c 0023     		movs	r3, #0
 746 000e 8360     		str	r3, [r0, #8]
 379:Core/Src/main.c ****   hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 747              		.loc 1 379 0
 748 0010 C360     		str	r3, [r0, #12]
 380:Core/Src/main.c ****   hcan3.Init.TimeSeg2 = CAN_BS2_3TQ;
 749              		.loc 1 380 0
 750 0012 4FF48032 		mov	r2, #65536
 751 0016 0261     		str	r2, [r0, #16]
 381:Core/Src/main.c ****   hcan3.Init.TimeTriggeredMode = DISABLE;
 752              		.loc 1 381 0
ARM GAS  /tmp/cc0lww7A.s 			page 31


 753 0018 4FF40012 		mov	r2, #2097152
 754 001c 4261     		str	r2, [r0, #20]
 382:Core/Src/main.c ****   hcan3.Init.AutoBusOff = ENABLE;
 755              		.loc 1 382 0
 756 001e 0376     		strb	r3, [r0, #24]
 383:Core/Src/main.c ****   hcan3.Init.AutoWakeUp = DISABLE;
 757              		.loc 1 383 0
 758 0020 0122     		movs	r2, #1
 759 0022 4276     		strb	r2, [r0, #25]
 384:Core/Src/main.c ****   hcan3.Init.AutoRetransmission = DISABLE;
 760              		.loc 1 384 0
 761 0024 8376     		strb	r3, [r0, #26]
 385:Core/Src/main.c ****   hcan3.Init.ReceiveFifoLocked = DISABLE;
 762              		.loc 1 385 0
 763 0026 C376     		strb	r3, [r0, #27]
 386:Core/Src/main.c ****   hcan3.Init.TransmitFifoPriority = DISABLE;
 764              		.loc 1 386 0
 765 0028 0377     		strb	r3, [r0, #28]
 387:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan3) != HAL_OK)
 766              		.loc 1 387 0
 767 002a 4377     		strb	r3, [r0, #29]
 388:Core/Src/main.c ****   {
 768              		.loc 1 388 0
 769 002c FFF7FEFF 		bl	HAL_CAN_Init
 770              	.LVL49:
 771 0030 00B9     		cbnz	r0, .L61
 772 0032 08BD     		pop	{r3, pc}
 773              	.L61:
 390:Core/Src/main.c ****   }
 774              		.loc 1 390 0
 775 0034 FFF7FEFF 		bl	Error_Handler
 776              	.LVL50:
 777              	.L63:
 778              		.align	2
 779              	.L62:
 780 0038 00000000 		.word	hcan3
 781 003c 006C0040 		.word	1073769472
 782              		.cfi_endproc
 783              	.LFE139:
 785              		.section	.text.MX_TIM2_Init,"ax",%progbits
 786              		.align	1
 787              		.syntax unified
 788              		.thumb
 789              		.thumb_func
 790              		.fpu fpv4-sp-d16
 792              	MX_TIM2_Init:
 793              	.LFB141:
 430:Core/Src/main.c **** 
 794              		.loc 1 430 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 40
 797              		@ frame_needed = 0, uses_anonymous_args = 0
 798 0000 00B5     		push	{lr}
 799              		.cfi_def_cfa_offset 4
 800              		.cfi_offset 14, -4
 801 0002 8BB0     		sub	sp, sp, #44
 802              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/cc0lww7A.s 			page 32


 436:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 803              		.loc 1 436 0
 804 0004 0023     		movs	r3, #0
 805 0006 0893     		str	r3, [sp, #32]
 806 0008 0993     		str	r3, [sp, #36]
 437:Core/Src/main.c **** 
 807              		.loc 1 437 0
 808 000a 0193     		str	r3, [sp, #4]
 809 000c 0293     		str	r3, [sp, #8]
 810 000e 0393     		str	r3, [sp, #12]
 811 0010 0493     		str	r3, [sp, #16]
 812 0012 0593     		str	r3, [sp, #20]
 813 0014 0693     		str	r3, [sp, #24]
 814 0016 0793     		str	r3, [sp, #28]
 442:Core/Src/main.c ****   htim2.Init.Prescaler = 3 - 1;
 815              		.loc 1 442 0
 816 0018 1E48     		ldr	r0, .L76
 817 001a 4FF08042 		mov	r2, #1073741824
 818 001e 0260     		str	r2, [r0]
 443:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 819              		.loc 1 443 0
 820 0020 0222     		movs	r2, #2
 821 0022 4260     		str	r2, [r0, #4]
 444:Core/Src/main.c ****   htim2.Init.Period = 29;
 822              		.loc 1 444 0
 823 0024 8360     		str	r3, [r0, #8]
 445:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 824              		.loc 1 445 0
 825 0026 1D22     		movs	r2, #29
 826 0028 C260     		str	r2, [r0, #12]
 446:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 827              		.loc 1 446 0
 828 002a 0361     		str	r3, [r0, #16]
 447:Core/Src/main.c ****   if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 829              		.loc 1 447 0
 830 002c 8361     		str	r3, [r0, #24]
 448:Core/Src/main.c ****   {
 831              		.loc 1 448 0
 832 002e FFF7FEFF 		bl	HAL_TIM_OC_Init
 833              	.LVL51:
 834 0032 20BB     		cbnz	r0, .L71
 452:Core/Src/main.c ****   {
 835              		.loc 1 452 0
 836 0034 1748     		ldr	r0, .L76
 837 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 838              	.LVL52:
 839 003a 10BB     		cbnz	r0, .L72
 456:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 840              		.loc 1 456 0
 841 003c 0023     		movs	r3, #0
 842 003e 0893     		str	r3, [sp, #32]
 457:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 843              		.loc 1 457 0
 844 0040 0993     		str	r3, [sp, #36]
 458:Core/Src/main.c ****   {
 845              		.loc 1 458 0
 846 0042 08A9     		add	r1, sp, #32
ARM GAS  /tmp/cc0lww7A.s 			page 33


 847 0044 1348     		ldr	r0, .L76
 848 0046 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 849              	.LVL53:
 850 004a E0B9     		cbnz	r0, .L73
 462:Core/Src/main.c ****   sConfigOC.Pulse = 8;
 851              		.loc 1 462 0
 852 004c 0022     		movs	r2, #0
 853 004e 0192     		str	r2, [sp, #4]
 463:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 854              		.loc 1 463 0
 855 0050 0823     		movs	r3, #8
 856 0052 0293     		str	r3, [sp, #8]
 464:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 857              		.loc 1 464 0
 858 0054 0392     		str	r2, [sp, #12]
 465:Core/Src/main.c ****   if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 859              		.loc 1 465 0
 860 0056 0592     		str	r2, [sp, #20]
 466:Core/Src/main.c ****   {
 861              		.loc 1 466 0
 862 0058 01A9     		add	r1, sp, #4
 863 005a 0E48     		ldr	r0, .L76
 864 005c FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 865              	.LVL54:
 866 0060 98B9     		cbnz	r0, .L74
 470:Core/Src/main.c ****   sConfigOC.Pulse = 17;
 867              		.loc 1 470 0
 868 0062 6023     		movs	r3, #96
 869 0064 0193     		str	r3, [sp, #4]
 471:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 870              		.loc 1 471 0
 871 0066 1123     		movs	r3, #17
 872 0068 0293     		str	r3, [sp, #8]
 472:Core/Src/main.c ****   {
 873              		.loc 1 472 0
 874 006a 0422     		movs	r2, #4
 875 006c 0DEB0201 		add	r1, sp, r2
 876 0070 0848     		ldr	r0, .L76
 877 0072 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 878              	.LVL55:
 879 0076 50B9     		cbnz	r0, .L75
 479:Core/Src/main.c **** 
 880              		.loc 1 479 0
 881 0078 0BB0     		add	sp, sp, #44
 882              		.cfi_remember_state
 883              		.cfi_def_cfa_offset 4
 884              		@ sp needed
 885 007a 5DF804FB 		ldr	pc, [sp], #4
 886              	.L71:
 887              		.cfi_restore_state
 450:Core/Src/main.c ****   }
 888              		.loc 1 450 0
 889 007e FFF7FEFF 		bl	Error_Handler
 890              	.LVL56:
 891              	.L72:
 454:Core/Src/main.c ****   }
 892              		.loc 1 454 0
ARM GAS  /tmp/cc0lww7A.s 			page 34


 893 0082 FFF7FEFF 		bl	Error_Handler
 894              	.LVL57:
 895              	.L73:
 460:Core/Src/main.c ****   }
 896              		.loc 1 460 0
 897 0086 FFF7FEFF 		bl	Error_Handler
 898              	.LVL58:
 899              	.L74:
 468:Core/Src/main.c ****   }
 900              		.loc 1 468 0
 901 008a FFF7FEFF 		bl	Error_Handler
 902              	.LVL59:
 903              	.L75:
 474:Core/Src/main.c ****   }
 904              		.loc 1 474 0
 905 008e FFF7FEFF 		bl	Error_Handler
 906              	.LVL60:
 907              	.L77:
 908 0092 00BF     		.align	2
 909              	.L76:
 910 0094 00000000 		.word	htim2
 911              		.cfi_endproc
 912              	.LFE141:
 914              		.section	.text.MX_TIM3_Init,"ax",%progbits
 915              		.align	1
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 919              		.fpu fpv4-sp-d16
 921              	MX_TIM3_Init:
 922              	.LFB142:
 487:Core/Src/main.c **** 
 923              		.loc 1 487 0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 40
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927 0000 00B5     		push	{lr}
 928              		.cfi_def_cfa_offset 4
 929              		.cfi_offset 14, -4
 930 0002 8BB0     		sub	sp, sp, #44
 931              		.cfi_def_cfa_offset 48
 493:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 932              		.loc 1 493 0
 933 0004 0023     		movs	r3, #0
 934 0006 0893     		str	r3, [sp, #32]
 935 0008 0993     		str	r3, [sp, #36]
 494:Core/Src/main.c **** 
 936              		.loc 1 494 0
 937 000a 0193     		str	r3, [sp, #4]
 938 000c 0293     		str	r3, [sp, #8]
 939 000e 0393     		str	r3, [sp, #12]
 940 0010 0493     		str	r3, [sp, #16]
 941 0012 0593     		str	r3, [sp, #20]
 942 0014 0693     		str	r3, [sp, #24]
 943 0016 0793     		str	r3, [sp, #28]
 499:Core/Src/main.c ****   htim3.Init.Prescaler = 0;
 944              		.loc 1 499 0
ARM GAS  /tmp/cc0lww7A.s 			page 35


 945 0018 1A48     		ldr	r0, .L88
 946 001a 1B4A     		ldr	r2, .L88+4
 947 001c 0260     		str	r2, [r0]
 500:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 948              		.loc 1 500 0
 949 001e 4360     		str	r3, [r0, #4]
 501:Core/Src/main.c ****   htim3.Init.Period = 65535;
 950              		.loc 1 501 0
 951 0020 8360     		str	r3, [r0, #8]
 502:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 952              		.loc 1 502 0
 953 0022 4FF6FF72 		movw	r2, #65535
 954 0026 C260     		str	r2, [r0, #12]
 503:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 955              		.loc 1 503 0
 956 0028 0361     		str	r3, [r0, #16]
 504:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 957              		.loc 1 504 0
 958 002a 8361     		str	r3, [r0, #24]
 505:Core/Src/main.c ****   {
 959              		.loc 1 505 0
 960 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 961              	.LVL61:
 962 0030 F8B9     		cbnz	r0, .L84
 509:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 963              		.loc 1 509 0
 964 0032 0023     		movs	r3, #0
 965 0034 0893     		str	r3, [sp, #32]
 510:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 966              		.loc 1 510 0
 967 0036 0993     		str	r3, [sp, #36]
 511:Core/Src/main.c ****   {
 968              		.loc 1 511 0
 969 0038 08A9     		add	r1, sp, #32
 970 003a 1248     		ldr	r0, .L88
 971 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 972              	.LVL62:
 973 0040 C8B9     		cbnz	r0, .L85
 515:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 974              		.loc 1 515 0
 975 0042 6023     		movs	r3, #96
 976 0044 0193     		str	r3, [sp, #4]
 516:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 977              		.loc 1 516 0
 978 0046 0022     		movs	r2, #0
 979 0048 0292     		str	r2, [sp, #8]
 517:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 980              		.loc 1 517 0
 981 004a 0392     		str	r2, [sp, #12]
 518:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 982              		.loc 1 518 0
 983 004c 0592     		str	r2, [sp, #20]
 519:Core/Src/main.c ****   {
 984              		.loc 1 519 0
 985 004e 01A9     		add	r1, sp, #4
 986 0050 0C48     		ldr	r0, .L88
 987 0052 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
ARM GAS  /tmp/cc0lww7A.s 			page 36


 988              	.LVL63:
 989 0056 80B9     		cbnz	r0, .L86
 523:Core/Src/main.c ****   {
 990              		.loc 1 523 0
 991 0058 0422     		movs	r2, #4
 992 005a 0DEB0201 		add	r1, sp, r2
 993 005e 0948     		ldr	r0, .L88
 994 0060 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 995              	.LVL64:
 996 0064 58B9     		cbnz	r0, .L87
 530:Core/Src/main.c **** }
 997              		.loc 1 530 0
 998 0066 0748     		ldr	r0, .L88
 999 0068 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1000              	.LVL65:
 531:Core/Src/main.c **** 
 1001              		.loc 1 531 0
 1002 006c 0BB0     		add	sp, sp, #44
 1003              		.cfi_remember_state
 1004              		.cfi_def_cfa_offset 4
 1005              		@ sp needed
 1006 006e 5DF804FB 		ldr	pc, [sp], #4
 1007              	.L84:
 1008              		.cfi_restore_state
 507:Core/Src/main.c ****   }
 1009              		.loc 1 507 0
 1010 0072 FFF7FEFF 		bl	Error_Handler
 1011              	.LVL66:
 1012              	.L85:
 513:Core/Src/main.c ****   }
 1013              		.loc 1 513 0
 1014 0076 FFF7FEFF 		bl	Error_Handler
 1015              	.LVL67:
 1016              	.L86:
 521:Core/Src/main.c ****   }
 1017              		.loc 1 521 0
 1018 007a FFF7FEFF 		bl	Error_Handler
 1019              	.LVL68:
 1020              	.L87:
 525:Core/Src/main.c ****   }
 1021              		.loc 1 525 0
 1022 007e FFF7FEFF 		bl	Error_Handler
 1023              	.LVL69:
 1024              	.L89:
 1025 0082 00BF     		.align	2
 1026              	.L88:
 1027 0084 00000000 		.word	htim3
 1028 0088 00040040 		.word	1073742848
 1029              		.cfi_endproc
 1030              	.LFE142:
 1032              		.section	.text.MX_IWDG_Init,"ax",%progbits
 1033              		.align	1
 1034              		.syntax unified
 1035              		.thumb
 1036              		.thumb_func
 1037              		.fpu fpv4-sp-d16
 1039              	MX_IWDG_Init:
ARM GAS  /tmp/cc0lww7A.s 			page 37


 1040              	.LFB140:
 403:Core/Src/main.c **** 
 1041              		.loc 1 403 0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 0
 1044              		@ frame_needed = 0, uses_anonymous_args = 0
 1045 0000 08B5     		push	{r3, lr}
 1046              		.cfi_def_cfa_offset 8
 1047              		.cfi_offset 3, -8
 1048              		.cfi_offset 14, -4
 412:Core/Src/main.c ****   hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 1049              		.loc 1 412 0
 1050 0002 0748     		ldr	r0, .L94
 1051 0004 074B     		ldr	r3, .L94+4
 1052 0006 0360     		str	r3, [r0]
 413:Core/Src/main.c ****   hiwdg.Init.Reload = 2000;
 1053              		.loc 1 413 0
 1054 0008 0123     		movs	r3, #1
 1055 000a 4360     		str	r3, [r0, #4]
 414:Core/Src/main.c ****   if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 1056              		.loc 1 414 0
 1057 000c 4FF4FA63 		mov	r3, #2000
 1058 0010 8360     		str	r3, [r0, #8]
 415:Core/Src/main.c ****   {
 1059              		.loc 1 415 0
 1060 0012 FFF7FEFF 		bl	HAL_IWDG_Init
 1061              	.LVL70:
 1062 0016 00B9     		cbnz	r0, .L93
 1063 0018 08BD     		pop	{r3, pc}
 1064              	.L93:
 417:Core/Src/main.c ****   }
 1065              		.loc 1 417 0
 1066 001a FFF7FEFF 		bl	Error_Handler
 1067              	.LVL71:
 1068              	.L95:
 1069 001e 00BF     		.align	2
 1070              	.L94:
 1071 0020 00000000 		.word	hiwdg
 1072 0024 00300040 		.word	1073754112
 1073              		.cfi_endproc
 1074              	.LFE140:
 1076              		.section	.text.SystemClock_Config,"ax",%progbits
 1077              		.align	1
 1078              		.global	SystemClock_Config
 1079              		.syntax unified
 1080              		.thumb
 1081              		.thumb_func
 1082              		.fpu fpv4-sp-d16
 1084              	SystemClock_Config:
 1085              	.LFB136:
 249:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1086              		.loc 1 249 0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 80
 1089              		@ frame_needed = 0, uses_anonymous_args = 0
 1090 0000 00B5     		push	{lr}
 1091              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc0lww7A.s 			page 38


 1092              		.cfi_offset 14, -4
 1093 0002 95B0     		sub	sp, sp, #84
 1094              		.cfi_def_cfa_offset 88
 250:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1095              		.loc 1 250 0
 1096 0004 3422     		movs	r2, #52
 1097 0006 0021     		movs	r1, #0
 1098 0008 07A8     		add	r0, sp, #28
 1099 000a FFF7FEFF 		bl	memset
 1100              	.LVL72:
 251:Core/Src/main.c **** 
 1101              		.loc 1 251 0
 1102 000e 0023     		movs	r3, #0
 1103 0010 0293     		str	r3, [sp, #8]
 1104 0012 0393     		str	r3, [sp, #12]
 1105 0014 0493     		str	r3, [sp, #16]
 1106 0016 0593     		str	r3, [sp, #20]
 1107 0018 0693     		str	r3, [sp, #24]
 1108              	.LBB11:
 255:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1109              		.loc 1 255 0
 1110 001a 0093     		str	r3, [sp]
 1111 001c 1F4A     		ldr	r2, .L102
 1112 001e 116C     		ldr	r1, [r2, #64]
 1113 0020 41F08051 		orr	r1, r1, #268435456
 1114 0024 1164     		str	r1, [r2, #64]
 1115 0026 126C     		ldr	r2, [r2, #64]
 1116 0028 02F08052 		and	r2, r2, #268435456
 1117 002c 0092     		str	r2, [sp]
 1118 002e 009A     		ldr	r2, [sp]
 1119              	.LBE11:
 1120              	.LBB12:
 256:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 1121              		.loc 1 256 0
 1122 0030 0193     		str	r3, [sp, #4]
 1123 0032 1B4A     		ldr	r2, .L102+4
 1124 0034 1168     		ldr	r1, [r2]
 1125 0036 41F44041 		orr	r1, r1, #49152
 1126 003a 1160     		str	r1, [r2]
 1127 003c 1268     		ldr	r2, [r2]
 1128 003e 02F44042 		and	r2, r2, #49152
 1129 0042 0192     		str	r2, [sp, #4]
 1130 0044 019A     		ldr	r2, [sp, #4]
 1131              	.LBE12:
 260:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1132              		.loc 1 260 0
 1133 0046 0A22     		movs	r2, #10
 1134 0048 0792     		str	r2, [sp, #28]
 261:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1135              		.loc 1 261 0
 1136 004a 0122     		movs	r2, #1
 1137 004c 0A92     		str	r2, [sp, #40]
 262:Core/Src/main.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 1138              		.loc 1 262 0
 1139 004e 1021     		movs	r1, #16
 1140 0050 0B91     		str	r1, [sp, #44]
 263:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/cc0lww7A.s 			page 39


 1141              		.loc 1 263 0
 1142 0052 0C92     		str	r2, [sp, #48]
 264:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1143              		.loc 1 264 0
 1144 0054 0222     		movs	r2, #2
 1145 0056 0D92     		str	r2, [sp, #52]
 265:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1146              		.loc 1 265 0
 1147 0058 0E93     		str	r3, [sp, #56]
 266:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 1148              		.loc 1 266 0
 1149 005a 0823     		movs	r3, #8
 1150 005c 0F93     		str	r3, [sp, #60]
 267:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1151              		.loc 1 267 0
 1152 005e 4823     		movs	r3, #72
 1153 0060 1093     		str	r3, [sp, #64]
 268:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1154              		.loc 1 268 0
 1155 0062 1192     		str	r2, [sp, #68]
 269:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1156              		.loc 1 269 0
 1157 0064 1292     		str	r2, [sp, #72]
 270:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1158              		.loc 1 270 0
 1159 0066 1392     		str	r2, [sp, #76]
 271:Core/Src/main.c ****   {
 1160              		.loc 1 271 0
 1161 0068 07A8     		add	r0, sp, #28
 1162 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 1163              	.LVL73:
 1164 006e 80B9     		cbnz	r0, .L100
 277:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 1165              		.loc 1 277 0
 1166 0070 0F23     		movs	r3, #15
 1167 0072 0293     		str	r3, [sp, #8]
 278:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1168              		.loc 1 278 0
 1169 0074 0221     		movs	r1, #2
 1170 0076 0391     		str	r1, [sp, #12]
 279:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1171              		.loc 1 279 0
 1172 0078 0023     		movs	r3, #0
 1173 007a 0493     		str	r3, [sp, #16]
 280:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1174              		.loc 1 280 0
 1175 007c 4FF48052 		mov	r2, #4096
 1176 0080 0592     		str	r2, [sp, #20]
 281:Core/Src/main.c **** 
 1177              		.loc 1 281 0
 1178 0082 0693     		str	r3, [sp, #24]
 283:Core/Src/main.c ****   {
 1179              		.loc 1 283 0
 1180 0084 02A8     		add	r0, sp, #8
 1181 0086 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1182              	.LVL74:
 1183 008a 20B9     		cbnz	r0, .L101
ARM GAS  /tmp/cc0lww7A.s 			page 40


 287:Core/Src/main.c **** 
 1184              		.loc 1 287 0
 1185 008c 15B0     		add	sp, sp, #84
 1186              		.cfi_remember_state
 1187              		.cfi_def_cfa_offset 4
 1188              		@ sp needed
 1189 008e 5DF804FB 		ldr	pc, [sp], #4
 1190              	.L100:
 1191              		.cfi_restore_state
 273:Core/Src/main.c ****   }
 1192              		.loc 1 273 0
 1193 0092 FFF7FEFF 		bl	Error_Handler
 1194              	.LVL75:
 1195              	.L101:
 285:Core/Src/main.c ****   }
 1196              		.loc 1 285 0
 1197 0096 FFF7FEFF 		bl	Error_Handler
 1198              	.LVL76:
 1199              	.L103:
 1200 009a 00BF     		.align	2
 1201              	.L102:
 1202 009c 00380240 		.word	1073887232
 1203 00a0 00700040 		.word	1073770496
 1204              		.cfi_endproc
 1205              	.LFE136:
 1207              		.section	.text.main,"ax",%progbits
 1208              		.align	1
 1209              		.global	main
 1210              		.syntax unified
 1211              		.thumb
 1212              		.thumb_func
 1213              		.fpu fpv4-sp-d16
 1215              	main:
 1216              	.LFB135:
 143:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1217              		.loc 1 143 0
 1218              		.cfi_startproc
 1219              		@ Volatile: function does not return.
 1220              		@ args = 0, pretend = 0, frame = 0
 1221              		@ frame_needed = 0, uses_anonymous_args = 0
 1222 0000 08B5     		push	{r3, lr}
 1223              		.cfi_def_cfa_offset 8
 1224              		.cfi_offset 3, -8
 1225              		.cfi_offset 14, -4
 151:Core/Src/main.c **** 
 1226              		.loc 1 151 0
 1227 0002 FFF7FEFF 		bl	HAL_Init
 1228              	.LVL77:
 158:Core/Src/main.c **** 
 1229              		.loc 1 158 0
 1230 0006 FFF7FEFF 		bl	SystemClock_Config
 1231              	.LVL78:
 165:Core/Src/main.c ****   MX_DMA_Init();
 1232              		.loc 1 165 0
 1233 000a FFF7FEFF 		bl	MX_GPIO_Init
 1234              	.LVL79:
 166:Core/Src/main.c ****   MX_CAN1_Init();
ARM GAS  /tmp/cc0lww7A.s 			page 41


 1235              		.loc 1 166 0
 1236 000e FFF7FEFF 		bl	MX_DMA_Init
 1237              	.LVL80:
 167:Core/Src/main.c ****   MX_CAN2_Init();
 1238              		.loc 1 167 0
 1239 0012 FFF7FEFF 		bl	MX_CAN1_Init
 1240              	.LVL81:
 168:Core/Src/main.c ****   MX_CAN3_Init();
 1241              		.loc 1 168 0
 1242 0016 FFF7FEFF 		bl	MX_CAN2_Init
 1243              	.LVL82:
 169:Core/Src/main.c ****   MX_TIM2_Init();
 1244              		.loc 1 169 0
 1245 001a FFF7FEFF 		bl	MX_CAN3_Init
 1246              	.LVL83:
 170:Core/Src/main.c ****   MX_TIM3_Init();
 1247              		.loc 1 170 0
 1248 001e FFF7FEFF 		bl	MX_TIM2_Init
 1249              	.LVL84:
 171:Core/Src/main.c ****   MX_IWDG_Init();
 1250              		.loc 1 171 0
 1251 0022 FFF7FEFF 		bl	MX_TIM3_Init
 1252              	.LVL85:
 172:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1253              		.loc 1 172 0
 1254 0026 FFF7FEFF 		bl	MX_IWDG_Init
 1255              	.LVL86:
 174:Core/Src/main.c ****   visInit();
 1256              		.loc 1 174 0
 1257 002a FFF7FEFF 		bl	canSettings
 1258              	.LVL87:
 175:Core/Src/main.c ****   initBMS();
 1259              		.loc 1 175 0
 1260 002e FFF7FEFF 		bl	visInit
 1261              	.LVL88:
 176:Core/Src/main.c ****   /* USER CODE END 2 */
 1262              		.loc 1 176 0
 1263 0032 FFF7FEFF 		bl	initBMS
 1264              	.LVL89:
 180:Core/Src/main.c **** 
 1265              		.loc 1 180 0
 1266 0036 FFF7FEFF 		bl	osKernelInitialize
 1267              	.LVL90:
 196:Core/Src/main.c **** 
 1268              		.loc 1 196 0
 1269 003a 1A4A     		ldr	r2, .L107
 1270 003c 0221     		movs	r1, #2
 1271 003e 1020     		movs	r0, #16
 1272 0040 FFF7FEFF 		bl	osMessageQueueNew
 1273              	.LVL91:
 1274 0044 184B     		ldr	r3, .L107+4
 1275 0046 1860     		str	r0, [r3]
 204:Core/Src/main.c **** 
 1276              		.loc 1 204 0
 1277 0048 184A     		ldr	r2, .L107+8
 1278 004a 0021     		movs	r1, #0
 1279 004c 1848     		ldr	r0, .L107+12
ARM GAS  /tmp/cc0lww7A.s 			page 42


 1280 004e FFF7FEFF 		bl	osThreadNew
 1281              	.LVL92:
 1282 0052 184B     		ldr	r3, .L107+16
 1283 0054 1860     		str	r0, [r3]
 207:Core/Src/main.c **** 
 1284              		.loc 1 207 0
 1285 0056 184A     		ldr	r2, .L107+20
 1286 0058 0021     		movs	r1, #0
 1287 005a 1848     		ldr	r0, .L107+24
 1288 005c FFF7FEFF 		bl	osThreadNew
 1289              	.LVL93:
 1290 0060 174B     		ldr	r3, .L107+28
 1291 0062 1860     		str	r0, [r3]
 210:Core/Src/main.c **** 
 1292              		.loc 1 210 0
 1293 0064 174A     		ldr	r2, .L107+32
 1294 0066 0021     		movs	r1, #0
 1295 0068 1748     		ldr	r0, .L107+36
 1296 006a FFF7FEFF 		bl	osThreadNew
 1297              	.LVL94:
 1298 006e 174B     		ldr	r3, .L107+40
 1299 0070 1860     		str	r0, [r3]
 213:Core/Src/main.c **** 
 1300              		.loc 1 213 0
 1301 0072 174A     		ldr	r2, .L107+44
 1302 0074 0021     		movs	r1, #0
 1303 0076 1748     		ldr	r0, .L107+48
 1304 0078 FFF7FEFF 		bl	osThreadNew
 1305              	.LVL95:
 1306 007c 164B     		ldr	r3, .L107+52
 1307 007e 1860     		str	r0, [r3]
 216:Core/Src/main.c **** 
 1308              		.loc 1 216 0
 1309 0080 164A     		ldr	r2, .L107+56
 1310 0082 0021     		movs	r1, #0
 1311 0084 1648     		ldr	r0, .L107+60
 1312 0086 FFF7FEFF 		bl	osThreadNew
 1313              	.LVL96:
 1314 008a 164B     		ldr	r3, .L107+64
 1315 008c 1860     		str	r0, [r3]
 219:Core/Src/main.c **** 
 1316              		.loc 1 219 0
 1317 008e 164A     		ldr	r2, .L107+68
 1318 0090 0021     		movs	r1, #0
 1319 0092 1648     		ldr	r0, .L107+72
 1320 0094 FFF7FEFF 		bl	osThreadNew
 1321              	.LVL97:
 1322 0098 154B     		ldr	r3, .L107+76
 1323 009a 1860     		str	r0, [r3]
 230:Core/Src/main.c **** 
 1324              		.loc 1 230 0
 1325 009c FFF7FEFF 		bl	osKernelStart
 1326              	.LVL98:
 1327              	.L105:
 1328 00a0 FEE7     		b	.L105
 1329              	.L108:
 1330 00a2 00BF     		.align	2
ARM GAS  /tmp/cc0lww7A.s 			page 43


 1331              	.L107:
 1332 00a4 00000000 		.word	.LANCHOR0
 1333 00a8 00000000 		.word	canTxQueueHandle
 1334 00ac 00000000 		.word	.LANCHOR1
 1335 00b0 00000000 		.word	StartDefaultTask
 1336 00b4 00000000 		.word	defaultTaskHandle
 1337 00b8 00000000 		.word	.LANCHOR2
 1338 00bc 00000000 		.word	StartsynchCommand
 1339 00c0 00000000 		.word	synchCommandHandle
 1340 00c4 00000000 		.word	.LANCHOR3
 1341 00c8 00000000 		.word	StartbalanceCommand
 1342 00cc 00000000 		.word	balanceCommandHandle
 1343 00d0 00000000 		.word	.LANCHOR4
 1344 00d4 00000000 		.word	StartprocessData
 1345 00d8 00000000 		.word	processDataHandle
 1346 00dc 00000000 		.word	.LANCHOR5
 1347 00e0 00000000 		.word	StartkickTheDog
 1348 00e4 00000000 		.word	kickTheDogHandle
 1349 00e8 00000000 		.word	.LANCHOR6
 1350 00ec 00000000 		.word	StartcanTxTask
 1351 00f0 00000000 		.word	canTxTaskHandle
 1352              		.cfi_endproc
 1353              	.LFE135:
 1355              		.global	canTxQueue_attributes
 1356              		.comm	canTxQueueControlBlock,80,4
 1357              		.comm	canTxQueueBuffer,32,4
 1358              		.comm	canTxQueueHandle,4,4
 1359              		.global	canTxTask_attributes
 1360              		.comm	canTxTaskHandle,4,4
 1361              		.global	kickTheDog_attributes
 1362              		.comm	kickTheDogHandle,4,4
 1363              		.global	processData_attributes
 1364              		.comm	processDataHandle,4,4
 1365              		.global	balanceCommand_attributes
 1366              		.comm	balanceCommandHandle,4,4
 1367              		.global	synchCommand_attributes
 1368              		.comm	synchCommandHandle,4,4
 1369              		.global	defaultTask_attributes
 1370              		.comm	defaultTaskHandle,4,4
 1371              		.comm	hdma_tim2_up_ch3,96,4
 1372              		.comm	hdma_tim2_ch2_ch4,96,4
 1373              		.comm	hdma_tim2_ch1,96,4
 1374              		.comm	htim3,64,4
 1375              		.comm	htim2,64,4
 1376              		.comm	hiwdg,12,4
 1377              		.comm	ws2812b,28,4
 1378              		.comm	timer_reset_pulse_period,4,4
 1379              		.comm	tim_period,4,4
 1380              		.comm	tim2OC2,28,4
 1381              		.comm	tim2OC1,28,4
 1382              		.comm	TIM1_handle,64,4
 1383              		.comm	watchdogBits,1,1
 1384              		.comm	chargerOn,1,1
 1385              		.comm	BMS,492,4
 1386              		.comm	busFault,4,4
 1387              		.comm	txCycle3,4,4
 1388              		.comm	txCycle2,4,4
ARM GAS  /tmp/cc0lww7A.s 			page 44


 1389              		.comm	txCycle,4,4
 1390              		.comm	canMailbox3,4,4
 1391              		.comm	canMailbox2,4,4
 1392              		.comm	canMailbox,4,4
 1393              		.comm	canRx3,8,4
 1394              		.comm	canRx2,8,4
 1395              		.comm	canRx,8,4
 1396              		.comm	txMsgExt3,24,4
 1397              		.comm	txMsg3,24,4
 1398              		.comm	rxMsg3,28,4
 1399              		.comm	txMsgExt2,24,4
 1400              		.comm	txMsg2,24,4
 1401              		.comm	rxMsg2,28,4
 1402              		.comm	txMsgExt,24,4
 1403              		.comm	txMsg,24,4
 1404              		.comm	rxMsg,28,4
 1405              		.comm	sf5,40,4
 1406              		.comm	sf4,40,4
 1407              		.comm	sf3,40,4
 1408              		.comm	sf2,40,4
 1409              		.comm	sf,40,4
 1410              		.comm	hcan3,40,4
 1411              		.comm	hcan2,40,4
 1412              		.comm	hcan1,40,4
 1413              		.section	.rodata.balanceCommand_attributes,"a",%progbits
 1414              		.align	2
 1415              		.set	.LANCHOR3,. + 0
 1418              	balanceCommand_attributes:
 1419 0000 30000000 		.word	.LC4
 1420 0004 00000000 		.space	16
 1420      00000000 
 1420      00000000 
 1420      00000000 
 1421 0014 00020000 		.word	512
 1422 0018 18000000 		.word	24
 1423 001c 00000000 		.space	8
 1423      00000000 
 1424              		.section	.rodata.canTxQueue_attributes,"a",%progbits
 1425              		.align	2
 1426              		.set	.LANCHOR0,. + 0
 1429              	canTxQueue_attributes:
 1430 0000 00000000 		.word	.LC0
 1431 0004 00000000 		.space	4
 1432 0008 00000000 		.word	canTxQueueControlBlock
 1433 000c 50000000 		.word	80
 1434 0010 00000000 		.word	canTxQueueBuffer
 1435 0014 20000000 		.word	32
 1436              		.section	.rodata.canTxTask_attributes,"a",%progbits
 1437              		.align	2
 1438              		.set	.LANCHOR6,. + 0
 1441              	canTxTask_attributes:
 1442 0000 0C000000 		.word	.LC1
 1443 0004 00000000 		.space	16
 1443      00000000 
 1443      00000000 
 1443      00000000 
 1444 0014 00020000 		.word	512
ARM GAS  /tmp/cc0lww7A.s 			page 45


 1445 0018 18000000 		.word	24
 1446 001c 00000000 		.space	8
 1446      00000000 
 1447              		.section	.rodata.defaultTask_attributes,"a",%progbits
 1448              		.align	2
 1449              		.set	.LANCHOR1,. + 0
 1452              	defaultTask_attributes:
 1453 0000 50000000 		.word	.LC6
 1454 0004 00000000 		.space	16
 1454      00000000 
 1454      00000000 
 1454      00000000 
 1455 0014 00020000 		.word	512
 1456 0018 18000000 		.word	24
 1457 001c 00000000 		.space	8
 1457      00000000 
 1458              		.section	.rodata.kickTheDog_attributes,"a",%progbits
 1459              		.align	2
 1460              		.set	.LANCHOR5,. + 0
 1463              	kickTheDog_attributes:
 1464 0000 18000000 		.word	.LC2
 1465 0004 00000000 		.space	16
 1465      00000000 
 1465      00000000 
 1465      00000000 
 1466 0014 00020000 		.word	512
 1467 0018 30000000 		.word	48
 1468 001c 00000000 		.space	8
 1468      00000000 
 1469              		.section	.rodata.processData_attributes,"a",%progbits
 1470              		.align	2
 1471              		.set	.LANCHOR4,. + 0
 1474              	processData_attributes:
 1475 0000 24000000 		.word	.LC3
 1476 0004 00000000 		.space	16
 1476      00000000 
 1476      00000000 
 1476      00000000 
 1477 0014 00020000 		.word	512
 1478 0018 18000000 		.word	24
 1479 001c 00000000 		.space	8
 1479      00000000 
 1480              		.section	.rodata.str1.4,"aMS",%progbits,1
 1481              		.align	2
 1482              	.LC0:
 1483 0000 63616E54 		.ascii	"canTxQueue\000"
 1483      78517565 
 1483      756500
 1484 000b 00       		.space	1
 1485              	.LC1:
 1486 000c 63616E54 		.ascii	"canTxTask\000"
 1486      78546173 
 1486      6B00
 1487 0016 0000     		.space	2
 1488              	.LC2:
 1489 0018 6B69636B 		.ascii	"kickTheDog\000"
 1489      54686544 
ARM GAS  /tmp/cc0lww7A.s 			page 46


 1489      6F6700
 1490 0023 00       		.space	1
 1491              	.LC3:
 1492 0024 70726F63 		.ascii	"processData\000"
 1492      65737344 
 1492      61746100 
 1493              	.LC4:
 1494 0030 62616C61 		.ascii	"balanceCommand\000"
 1494      6E636543 
 1494      6F6D6D61 
 1494      6E6400
 1495 003f 00       		.space	1
 1496              	.LC5:
 1497 0040 73796E63 		.ascii	"synchCommand\000"
 1497      68436F6D 
 1497      6D616E64 
 1497      00
 1498 004d 000000   		.space	3
 1499              	.LC6:
 1500 0050 64656661 		.ascii	"defaultTask\000"
 1500      756C7454 
 1500      61736B00 
 1501              		.section	.rodata.synchCommand_attributes,"a",%progbits
 1502              		.align	2
 1503              		.set	.LANCHOR2,. + 0
 1506              	synchCommand_attributes:
 1507 0000 40000000 		.word	.LC5
 1508 0004 00000000 		.space	16
 1508      00000000 
 1508      00000000 
 1508      00000000 
 1509 0014 00020000 		.word	512
 1510 0018 18000000 		.word	24
 1511 001c 00000000 		.space	8
 1511      00000000 
 1512              		.text
 1513              	.Letext0:
 1514              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1515              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1516              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 1517              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1518              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 1519              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1520              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1521              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1522              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1523              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1524              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1525              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1526              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_iwdg.h"
 1527              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1528              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1529              		.file 18 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 1530              		.file 19 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 1531              		.file 20 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1532              		.file 21 "/usr/include/newlib/sys/lock.h"
 1533              		.file 22 "/usr/include/newlib/sys/_types.h"
ARM GAS  /tmp/cc0lww7A.s 			page 47


 1534              		.file 23 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1535              		.file 24 "/usr/include/newlib/sys/reent.h"
 1536              		.file 25 "Core/Inc/can_setup.h"
 1537              		.file 26 "Core/Inc/bms.h"
 1538              		.file 27 "Core/Inc/ws2812b.h"
 1539              		.file 28 "Core/Inc/visEffect.h"
 1540              		.file 29 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1541              		.file 30 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1542              		.file 31 "Core/Inc/main.h"
ARM GAS  /tmp/cc0lww7A.s 			page 48


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc0lww7A.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc0lww7A.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc0lww7A.s:132    .text.MX_GPIO_Init:000000000000009c $d
     /tmp/cc0lww7A.s:139    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc0lww7A.s:145    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc0lww7A.s:208    .text.MX_DMA_Init:0000000000000050 $d
     /tmp/cc0lww7A.s:213    .text.StartDefaultTask:0000000000000000 $t
     /tmp/cc0lww7A.s:220    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cc0lww7A.s:258    .text.StartDefaultTask:0000000000000024 $d
                            *COM*:00000000000001ec BMS
                            *COM*:000000000000000c hiwdg
     /tmp/cc0lww7A.s:264    .text.StartkickTheDog:0000000000000000 $t
     /tmp/cc0lww7A.s:271    .text.StartkickTheDog:0000000000000000 StartkickTheDog
     /tmp/cc0lww7A.s:297    .text.StartkickTheDog:0000000000000014 $d
     /tmp/cc0lww7A.s:302    .text.StartcanTxTask:0000000000000000 $t
     /tmp/cc0lww7A.s:309    .text.StartcanTxTask:0000000000000000 StartcanTxTask
     /tmp/cc0lww7A.s:332    .text.StartsynchCommand:0000000000000000 $t
     /tmp/cc0lww7A.s:339    .text.StartsynchCommand:0000000000000000 StartsynchCommand
     /tmp/cc0lww7A.s:365    .text.StartbalanceCommand:0000000000000000 $t
     /tmp/cc0lww7A.s:372    .text.StartbalanceCommand:0000000000000000 StartbalanceCommand
     /tmp/cc0lww7A.s:434    .text.StartbalanceCommand:000000000000004c $d
     /tmp/cc0lww7A.s:441    .text.StartprocessData:0000000000000000 $t
     /tmp/cc0lww7A.s:448    .text.StartprocessData:0000000000000000 StartprocessData
     /tmp/cc0lww7A.s:480    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc0lww7A.s:487    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc0lww7A.s:549    .text.HAL_TIM_PeriodElapsedCallback:0000000000000044 $d
                            *COM*:000000000000001c ws2812b
                            *COM*:0000000000000040 TIM1_handle
                            *COM*:0000000000000004 tim_period
     /tmp/cc0lww7A.s:558    .text.Error_Handler:0000000000000000 $t
     /tmp/cc0lww7A.s:565    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc0lww7A.s:591    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/cc0lww7A.s:597    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/cc0lww7A.s:650    .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/cc0lww7A.s:656    .text.MX_CAN2_Init:0000000000000000 $t
     /tmp/cc0lww7A.s:662    .text.MX_CAN2_Init:0000000000000000 MX_CAN2_Init
     /tmp/cc0lww7A.s:715    .text.MX_CAN2_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan2
     /tmp/cc0lww7A.s:721    .text.MX_CAN3_Init:0000000000000000 $t
     /tmp/cc0lww7A.s:727    .text.MX_CAN3_Init:0000000000000000 MX_CAN3_Init
     /tmp/cc0lww7A.s:780    .text.MX_CAN3_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan3
     /tmp/cc0lww7A.s:786    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cc0lww7A.s:792    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cc0lww7A.s:910    .text.MX_TIM2_Init:0000000000000094 $d
                            *COM*:0000000000000040 htim2
     /tmp/cc0lww7A.s:915    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cc0lww7A.s:921    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cc0lww7A.s:1027   .text.MX_TIM3_Init:0000000000000084 $d
                            *COM*:0000000000000040 htim3
     /tmp/cc0lww7A.s:1033   .text.MX_IWDG_Init:0000000000000000 $t
     /tmp/cc0lww7A.s:1039   .text.MX_IWDG_Init:0000000000000000 MX_IWDG_Init
     /tmp/cc0lww7A.s:1071   .text.MX_IWDG_Init:0000000000000020 $d
     /tmp/cc0lww7A.s:1077   .text.SystemClock_Config:0000000000000000 $t
ARM GAS  /tmp/cc0lww7A.s 			page 49


     /tmp/cc0lww7A.s:1084   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc0lww7A.s:1202   .text.SystemClock_Config:000000000000009c $d
     /tmp/cc0lww7A.s:1208   .text.main:0000000000000000 $t
     /tmp/cc0lww7A.s:1215   .text.main:0000000000000000 main
     /tmp/cc0lww7A.s:1332   .text.main:00000000000000a4 $d
                            *COM*:0000000000000004 canTxQueueHandle
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 synchCommandHandle
                            *COM*:0000000000000004 balanceCommandHandle
                            *COM*:0000000000000004 processDataHandle
                            *COM*:0000000000000004 kickTheDogHandle
                            *COM*:0000000000000004 canTxTaskHandle
     /tmp/cc0lww7A.s:1429   .rodata.canTxQueue_attributes:0000000000000000 canTxQueue_attributes
                            *COM*:0000000000000050 canTxQueueControlBlock
                            *COM*:0000000000000020 canTxQueueBuffer
     /tmp/cc0lww7A.s:1441   .rodata.canTxTask_attributes:0000000000000000 canTxTask_attributes
     /tmp/cc0lww7A.s:1463   .rodata.kickTheDog_attributes:0000000000000000 kickTheDog_attributes
     /tmp/cc0lww7A.s:1474   .rodata.processData_attributes:0000000000000000 processData_attributes
     /tmp/cc0lww7A.s:1418   .rodata.balanceCommand_attributes:0000000000000000 balanceCommand_attributes
     /tmp/cc0lww7A.s:1506   .rodata.synchCommand_attributes:0000000000000000 synchCommand_attributes
     /tmp/cc0lww7A.s:1452   .rodata.defaultTask_attributes:0000000000000000 defaultTask_attributes
                            *COM*:0000000000000060 hdma_tim2_up_ch3
                            *COM*:0000000000000060 hdma_tim2_ch2_ch4
                            *COM*:0000000000000060 hdma_tim2_ch1
                            *COM*:0000000000000004 timer_reset_pulse_period
                            *COM*:000000000000001c tim2OC2
                            *COM*:000000000000001c tim2OC1
                            *COM*:0000000000000001 watchdogBits
                            *COM*:0000000000000001 chargerOn
                            *COM*:0000000000000004 busFault
                            *COM*:0000000000000004 txCycle3
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000004 canMailbox3
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx3
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt3
                            *COM*:0000000000000018 txMsg3
                            *COM*:000000000000001c rxMsg3
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
     /tmp/cc0lww7A.s:1414   .rodata.balanceCommand_attributes:0000000000000000 $d
     /tmp/cc0lww7A.s:1425   .rodata.canTxQueue_attributes:0000000000000000 $d
     /tmp/cc0lww7A.s:1437   .rodata.canTxTask_attributes:0000000000000000 $d
     /tmp/cc0lww7A.s:1448   .rodata.defaultTask_attributes:0000000000000000 $d
ARM GAS  /tmp/cc0lww7A.s 			page 50


     /tmp/cc0lww7A.s:1459   .rodata.kickTheDog_attributes:0000000000000000 $d
     /tmp/cc0lww7A.s:1470   .rodata.processData_attributes:0000000000000000 $d
     /tmp/cc0lww7A.s:1481   .rodata.str1.4:0000000000000000 $d
     /tmp/cc0lww7A.s:1502   .rodata.synchCommand_attributes:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
visHandle
bmsStateHandler
HAL_IWDG_Refresh
osDelay
synchChargers
balanceCommand
requestBICMdata
refreshData
tx500kData
acChargeCommand
HAL_IncTick
HAL_CAN_Init
HAL_TIM_OC_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_OC_ConfigChannel
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_IWDG_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
canSettings
visInit
initBMS
osKernelInitialize
osMessageQueueNew
osThreadNew
osKernelStart
