ARM GAS  /tmp/ccEV96rY.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.StartDefaultTask,"ax",%progbits
  18              		.align	1
  19              		.global	StartDefaultTask
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	StartDefaultTask:
  26              	.LFB140:
  27              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Core/Src/main.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Core/Src/main.c ****   * the License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                             www.st.com/SLA0044
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** #include "cmsis_os.h"
  23:Core/Src/main.c **** 
  24:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  25:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  26:Core/Src/main.c **** #include "bms.h"
  27:Core/Src/main.c **** #include "can_setup.h"
  28:Core/Src/main.c **** #include "visEffect.h"
  29:Core/Src/main.c **** #include "ws2812b.h"
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** //#include "visEffect.h"
ARM GAS  /tmp/ccEV96rY.s 			page 2


  32:Core/Src/main.c **** /* USER CODE END Includes */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  35:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PTD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PD */
  41:Core/Src/main.c **** /* USER CODE END PD */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  44:Core/Src/main.c **** /* USER CODE BEGIN PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* USER CODE END PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  49:Core/Src/main.c **** CAN_HandleTypeDef hcan1;
  50:Core/Src/main.c **** CAN_HandleTypeDef hcan2;
  51:Core/Src/main.c **** CAN_HandleTypeDef hcan3;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* Definitions for defaultTask */
  54:Core/Src/main.c **** osThreadId_t defaultTaskHandle;
  55:Core/Src/main.c **** const osThreadAttr_t defaultTask_attributes = {
  56:Core/Src/main.c ****     .name = "defaultTask",
  57:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  58:Core/Src/main.c ****     .stack_size = 128 * 4};
  59:Core/Src/main.c **** /* Definitions for sendCommand */
  60:Core/Src/main.c **** osThreadId_t sendCommandHandle;
  61:Core/Src/main.c **** const osThreadAttr_t sendCommand_attributes = {
  62:Core/Src/main.c ****     .name = "sendCommand",
  63:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityNormal,
  64:Core/Src/main.c ****     .stack_size = 128 * 4};
  65:Core/Src/main.c **** /* Definitions for balanceCommand */
  66:Core/Src/main.c **** osThreadId_t balanceCommandHandle;
  67:Core/Src/main.c **** const osThreadAttr_t balanceCommand_attributes = {
  68:Core/Src/main.c ****     .name = "balanceCommand",
  69:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityLow,
  70:Core/Src/main.c ****     .stack_size = 128 * 4};
  71:Core/Src/main.c **** /* Definitions for processData */
  72:Core/Src/main.c **** osThreadId_t processDataHandle;
  73:Core/Src/main.c **** const osThreadAttr_t processData_attributes = {
  74:Core/Src/main.c ****     .name = "processData",
  75:Core/Src/main.c ****     .priority = (osPriority_t)osPriorityLow,
  76:Core/Src/main.c ****     .stack_size = 128 * 4};
  77:Core/Src/main.c **** /* USER CODE BEGIN PV */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /* USER CODE END PV */
  80:Core/Src/main.c **** 
  81:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  82:Core/Src/main.c **** void SystemClock_Config(void);
  83:Core/Src/main.c **** static void MX_CAN1_Init(void);
  84:Core/Src/main.c **** static void MX_CAN2_Init(void);
  85:Core/Src/main.c **** static void MX_CAN3_Init(void);
  86:Core/Src/main.c **** void StartDefaultTask(void *argument);
  87:Core/Src/main.c **** void StartsendCommand(void *argument);
  88:Core/Src/main.c **** void StartbalanceCommand(void *argument);
ARM GAS  /tmp/ccEV96rY.s 			page 3


  89:Core/Src/main.c **** void StartprocessData(void *argument);
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** /* USER CODE END PFP */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  96:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c **** /* USER CODE END 0 */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** /**
 101:Core/Src/main.c ****   * @brief  The application entry point.
 102:Core/Src/main.c ****   * @retval int
 103:Core/Src/main.c ****   */
 104:Core/Src/main.c **** int main(void)
 105:Core/Src/main.c **** {
 106:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END 1 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 113:Core/Src/main.c ****   HAL_Init();
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE END Init */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* Configure the system clock */
 120:Core/Src/main.c ****   SystemClock_Config();
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* USER CODE END SysInit */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* Initialize all configured peripherals */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   MX_CAN1_Init();
 129:Core/Src/main.c ****   MX_CAN2_Init();
 130:Core/Src/main.c ****   MX_CAN3_Init();
 131:Core/Src/main.c ****   ;
 132:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 133:Core/Src/main.c ****   canSettings();
 134:Core/Src/main.c ****   visInit();
 135:Core/Src/main.c ****   initBMS();
 136:Core/Src/main.c ****   /* USER CODE END 2 */
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* Init scheduler */
 139:Core/Src/main.c ****   osKernelInitialize();
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_MUTEX */
 142:Core/Src/main.c ****   /* add mutexes, ... */
 143:Core/Src/main.c ****   /* USER CODE END RTOS_MUTEX */
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
ARM GAS  /tmp/ccEV96rY.s 			page 4


 146:Core/Src/main.c ****   /* add semaphores, ... */
 147:Core/Src/main.c ****   /* USER CODE END RTOS_SEMAPHORES */
 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_TIMERS */
 150:Core/Src/main.c ****   /* start timers, add new ones, ... */
 151:Core/Src/main.c ****   /* USER CODE END RTOS_TIMERS */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_QUEUES */
 154:Core/Src/main.c ****   /* add queues, ... */
 155:Core/Src/main.c ****   /* USER CODE END RTOS_QUEUES */
 156:Core/Src/main.c **** 
 157:Core/Src/main.c ****   /* Create the thread(s) */
 158:Core/Src/main.c ****   /* creation of defaultTask */
 159:Core/Src/main.c ****   defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 160:Core/Src/main.c **** 
 161:Core/Src/main.c ****   /* creation of sendCommand */
 162:Core/Src/main.c ****   sendCommandHandle = osThreadNew(StartsendCommand, NULL, &sendCommand_attributes);
 163:Core/Src/main.c **** 
 164:Core/Src/main.c ****   /* creation of balanceCommand */
 165:Core/Src/main.c ****   balanceCommandHandle = osThreadNew(StartbalanceCommand, NULL, &balanceCommand_attributes);
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /* creation of processData */
 168:Core/Src/main.c ****   processDataHandle = osThreadNew(StartprocessData, NULL, &processData_attributes);
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_THREADS */
 171:Core/Src/main.c ****   /* add threads, ... */
 172:Core/Src/main.c ****   /* USER CODE END RTOS_THREADS */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /* USER CODE BEGIN RTOS_EVENTS */
 175:Core/Src/main.c ****   /* add events, ... */
 176:Core/Src/main.c ****   /* USER CODE END RTOS_EVENTS */
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   /* Start scheduler */
 179:Core/Src/main.c ****   osKernelStart();
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* We should never get here as control is now taken by the scheduler */
 182:Core/Src/main.c ****   /* Infinite loop */
 183:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 184:Core/Src/main.c ****   while (1)
 185:Core/Src/main.c ****   {
 186:Core/Src/main.c ****     /* USER CODE END WHILE */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 189:Core/Src/main.c ****   }
 190:Core/Src/main.c ****   /* USER CODE END 3 */
 191:Core/Src/main.c **** }
 192:Core/Src/main.c **** 
 193:Core/Src/main.c **** /**
 194:Core/Src/main.c ****   * @brief System Clock Configuration
 195:Core/Src/main.c ****   * @retval None
 196:Core/Src/main.c ****   */
 197:Core/Src/main.c **** void SystemClock_Config(void)
 198:Core/Src/main.c **** {
 199:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 200:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 201:Core/Src/main.c **** 
 202:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
ARM GAS  /tmp/ccEV96rY.s 			page 5


 203:Core/Src/main.c ****   */
 204:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 205:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 206:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 207:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 208:Core/Src/main.c ****   */
 209:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 211:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 218:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 219:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 220:Core/Src/main.c ****   {
 221:Core/Src/main.c ****     Error_Handler();
 222:Core/Src/main.c ****   }
 223:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 224:Core/Src/main.c ****   */
 225:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 226:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 227:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 229:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 232:Core/Src/main.c ****   {
 233:Core/Src/main.c ****     Error_Handler();
 234:Core/Src/main.c ****   }
 235:Core/Src/main.c **** }
 236:Core/Src/main.c **** 
 237:Core/Src/main.c **** /**
 238:Core/Src/main.c ****   * @brief CAN1 Initialization Function
 239:Core/Src/main.c ****   * @param None
 240:Core/Src/main.c ****   * @retval None
 241:Core/Src/main.c ****   */
 242:Core/Src/main.c **** static void MX_CAN1_Init(void)
 243:Core/Src/main.c **** {
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 0 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE END CAN1_Init 0 */
 248:Core/Src/main.c **** 
 249:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 1 */
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****   /* USER CODE END CAN1_Init 1 */
 252:Core/Src/main.c ****   hcan1.Instance = CAN1;
 253:Core/Src/main.c ****   hcan1.Init.Prescaler = 48;
 254:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 255:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 256:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 257:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 258:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 259:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
ARM GAS  /tmp/ccEV96rY.s 			page 6


 260:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 261:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 262:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 263:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 264:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 265:Core/Src/main.c ****   {
 266:Core/Src/main.c ****     Error_Handler();
 267:Core/Src/main.c ****   }
 268:Core/Src/main.c ****   /* USER CODE BEGIN CAN1_Init 2 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE END CAN1_Init 2 */
 271:Core/Src/main.c **** }
 272:Core/Src/main.c **** 
 273:Core/Src/main.c **** /**
 274:Core/Src/main.c ****   * @brief CAN2 Initialization Function
 275:Core/Src/main.c ****   * @param None
 276:Core/Src/main.c ****   * @retval None
 277:Core/Src/main.c ****   */
 278:Core/Src/main.c **** static void MX_CAN2_Init(void)
 279:Core/Src/main.c **** {
 280:Core/Src/main.c **** 
 281:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 0 */
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /* USER CODE END CAN2_Init 0 */
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 1 */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE END CAN2_Init 1 */
 288:Core/Src/main.c ****   hcan2.Instance = CAN2;
 289:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 290:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 291:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 292:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 293:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 294:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 295:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 296:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
 297:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 298:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 299:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 300:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 301:Core/Src/main.c ****   {
 302:Core/Src/main.c ****     Error_Handler();
 303:Core/Src/main.c ****   }
 304:Core/Src/main.c ****   /* USER CODE BEGIN CAN2_Init 2 */
 305:Core/Src/main.c **** 
 306:Core/Src/main.c ****   /* USER CODE END CAN2_Init 2 */
 307:Core/Src/main.c **** }
 308:Core/Src/main.c **** 
 309:Core/Src/main.c **** /**
 310:Core/Src/main.c ****   * @brief CAN3 Initialization Function
 311:Core/Src/main.c ****   * @param None
 312:Core/Src/main.c ****   * @retval None
 313:Core/Src/main.c ****   */
 314:Core/Src/main.c **** static void MX_CAN3_Init(void)
 315:Core/Src/main.c **** {
 316:Core/Src/main.c **** 
ARM GAS  /tmp/ccEV96rY.s 			page 7


 317:Core/Src/main.c ****   /* USER CODE BEGIN CAN3_Init 0 */
 318:Core/Src/main.c **** 
 319:Core/Src/main.c ****   /* USER CODE END CAN3_Init 0 */
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /* USER CODE BEGIN CAN3_Init 1 */
 322:Core/Src/main.c **** 
 323:Core/Src/main.c ****   /* USER CODE END CAN3_Init 1 */
 324:Core/Src/main.c ****   hcan3.Instance = CAN3;
 325:Core/Src/main.c ****   hcan3.Init.Prescaler = 48;
 326:Core/Src/main.c ****   hcan3.Init.Mode = CAN_MODE_NORMAL;
 327:Core/Src/main.c ****   hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 328:Core/Src/main.c ****   hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 329:Core/Src/main.c ****   hcan3.Init.TimeSeg2 = CAN_BS2_3TQ;
 330:Core/Src/main.c ****   hcan3.Init.TimeTriggeredMode = DISABLE;
 331:Core/Src/main.c ****   hcan3.Init.AutoBusOff = DISABLE;
 332:Core/Src/main.c ****   hcan3.Init.AutoWakeUp = DISABLE;
 333:Core/Src/main.c ****   hcan3.Init.AutoRetransmission = DISABLE;
 334:Core/Src/main.c ****   hcan3.Init.ReceiveFifoLocked = DISABLE;
 335:Core/Src/main.c ****   hcan3.Init.TransmitFifoPriority = DISABLE;
 336:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan3) != HAL_OK)
 337:Core/Src/main.c ****   {
 338:Core/Src/main.c ****     Error_Handler();
 339:Core/Src/main.c ****   }
 340:Core/Src/main.c ****   /* USER CODE BEGIN CAN3_Init 2 */
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /* USER CODE END CAN3_Init 2 */
 343:Core/Src/main.c **** }
 344:Core/Src/main.c **** 
 345:Core/Src/main.c **** /* USER CODE BEGIN Header_StartDefaultTask */
 346:Core/Src/main.c **** /**
 347:Core/Src/main.c ****   * @brief  Function implementing the defaultTask thread.
 348:Core/Src/main.c ****   * @param  argument: Not used
 349:Core/Src/main.c ****   * @retval None
 350:Core/Src/main.c ****   */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c **** /* USER CODE END Header_StartDefaultTask */
 353:Core/Src/main.c **** void StartDefaultTask(void *argument)
 354:Core/Src/main.c **** {
  28              		.loc 1 354 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 08B5     		push	{r3, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 3, -8
  38              		.cfi_offset 14, -4
  39              	.LVL1:
  40              	.L2:
 355:Core/Src/main.c ****   /* USER CODE BEGIN 5 */
 356:Core/Src/main.c ****   /* Infinite loop */
 357:Core/Src/main.c ****   for (;;)
 358:Core/Src/main.c ****   {
 359:Core/Src/main.c ****     //bmsStateHandler();
 360:Core/Src/main.c ****     visHandle();
ARM GAS  /tmp/ccEV96rY.s 			page 8


  41              		.loc 1 360 0 discriminator 1
  42 0002 FFF7FEFF 		bl	visHandle
  43              	.LVL2:
 361:Core/Src/main.c ****     acChargeCommand();
  44              		.loc 1 361 0 discriminator 1
  45 0006 FFF7FEFF 		bl	acChargeCommand
  46              	.LVL3:
 362:Core/Src/main.c ****     bmsStateHandler(&BMS[0]);
  47              		.loc 1 362 0 discriminator 1
  48 000a 064C     		ldr	r4, .L4
  49 000c 2046     		mov	r0, r4
  50 000e FFF7FEFF 		bl	bmsStateHandler
  51              	.LVL4:
 363:Core/Src/main.c ****     bmsStateHandler(&BMS[1]);
  52              		.loc 1 363 0 discriminator 1
  53 0012 04F1F600 		add	r0, r4, #246
  54 0016 FFF7FEFF 		bl	bmsStateHandler
  55              	.LVL5:
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****     osDelay(1);
  56              		.loc 1 365 0 discriminator 1
  57 001a 0120     		movs	r0, #1
  58 001c FFF7FEFF 		bl	osDelay
  59              	.LVL6:
  60 0020 EFE7     		b	.L2
  61              	.L5:
  62 0022 00BF     		.align	2
  63              	.L4:
  64 0024 00000000 		.word	BMS
  65              		.cfi_endproc
  66              	.LFE140:
  68              		.section	.text.StartbalanceCommand,"ax",%progbits
  69              		.align	1
  70              		.global	StartbalanceCommand
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu fpv4-sp-d16
  76              	StartbalanceCommand:
  77              	.LFB142:
 366:Core/Src/main.c ****   }
 367:Core/Src/main.c ****   /* USER CODE END 5 */
 368:Core/Src/main.c **** }
 369:Core/Src/main.c **** 
 370:Core/Src/main.c **** /* USER CODE BEGIN Header_StartsendCommand */
 371:Core/Src/main.c **** /**
 372:Core/Src/main.c **** * @brief Function implementing the sendCommand thread.
 373:Core/Src/main.c **** * @param argument: Not used
 374:Core/Src/main.c **** * @retval None
 375:Core/Src/main.c **** */
 376:Core/Src/main.c **** /* USER CODE END Header_StartsendCommand */
 377:Core/Src/main.c **** void StartsendCommand(void *argument)
 378:Core/Src/main.c **** {
 379:Core/Src/main.c ****   /* USER CODE BEGIN StartsendCommand */
 380:Core/Src/main.c ****   /* Infinite loop */
 381:Core/Src/main.c ****   for (;;)
 382:Core/Src/main.c ****   {
ARM GAS  /tmp/ccEV96rY.s 			page 9


 383:Core/Src/main.c ****     sendCommand();
 384:Core/Src/main.c **** 
 385:Core/Src/main.c ****     osDelay(200);
 386:Core/Src/main.c ****   }
 387:Core/Src/main.c ****   /* USER CODE END StartsendCommand */
 388:Core/Src/main.c **** }
 389:Core/Src/main.c **** 
 390:Core/Src/main.c **** /* USER CODE BEGIN Header_StartbalanceCommand */
 391:Core/Src/main.c **** /**
 392:Core/Src/main.c **** * @brief Function implementing the balanceCommand thread.
 393:Core/Src/main.c **** * @param argument: Not used
 394:Core/Src/main.c **** * @retval None
 395:Core/Src/main.c **** */
 396:Core/Src/main.c **** /* USER CODE END Header_StartbalanceCommand */
 397:Core/Src/main.c **** void StartbalanceCommand(void *argument)
 398:Core/Src/main.c **** {
  78              		.loc 1 398 0
  79              		.cfi_startproc
  80              		@ Volatile: function does not return.
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              	.LVL7:
  84 0000 08B5     		push	{r3, lr}
  85              	.LCFI1:
  86              		.cfi_def_cfa_offset 8
  87              		.cfi_offset 3, -8
  88              		.cfi_offset 14, -4
  89              	.LVL8:
  90              	.L7:
 399:Core/Src/main.c ****   /* USER CODE BEGIN StartbalanceCommand */
 400:Core/Src/main.c ****   /* Infinite loop */
 401:Core/Src/main.c ****   for (;;)
 402:Core/Src/main.c ****   {
 403:Core/Src/main.c ****     if (BMS[0].balancecells)
 404:Core/Src/main.c ****     {
 405:Core/Src/main.c ****       //balanceCommand(&BMS[0], 0);
 406:Core/Src/main.c ****     }
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****     if (BMS[1].balancecells)
 409:Core/Src/main.c ****     {
 410:Core/Src/main.c ****       //balanceCommand(&BMS[1], 1);
 411:Core/Src/main.c ****     }
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****     osDelay(15000);
  91              		.loc 1 413 0
  92 0002 43F69820 		movw	r0, #15000
  93 0006 FFF7FEFF 		bl	osDelay
  94              	.LVL9:
  95 000a FAE7     		b	.L7
  96              		.cfi_endproc
  97              	.LFE142:
  99              		.section	.text.StartsendCommand,"ax",%progbits
 100              		.align	1
 101              		.global	StartsendCommand
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
ARM GAS  /tmp/ccEV96rY.s 			page 10


 105              		.fpu fpv4-sp-d16
 107              	StartsendCommand:
 108              	.LFB141:
 378:Core/Src/main.c ****   /* USER CODE BEGIN StartsendCommand */
 109              		.loc 1 378 0
 110              		.cfi_startproc
 111              		@ Volatile: function does not return.
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              	.LVL10:
 115 0000 08B5     		push	{r3, lr}
 116              	.LCFI2:
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 3, -8
 119              		.cfi_offset 14, -4
 120              	.LVL11:
 121              	.L10:
 383:Core/Src/main.c **** 
 122              		.loc 1 383 0 discriminator 1
 123 0002 FFF7FEFF 		bl	sendCommand
 124              	.LVL12:
 385:Core/Src/main.c ****   }
 125              		.loc 1 385 0 discriminator 1
 126 0006 C820     		movs	r0, #200
 127 0008 FFF7FEFF 		bl	osDelay
 128              	.LVL13:
 129 000c F9E7     		b	.L10
 130              		.cfi_endproc
 131              	.LFE141:
 133              		.section	.text.StartprocessData,"ax",%progbits
 134              		.align	1
 135              		.global	StartprocessData
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 139              		.fpu fpv4-sp-d16
 141              	StartprocessData:
 142              	.LFB143:
 414:Core/Src/main.c ****   }
 415:Core/Src/main.c ****   /* USER CODE END StartbalanceCommand */
 416:Core/Src/main.c **** }
 417:Core/Src/main.c **** 
 418:Core/Src/main.c **** /* USER CODE BEGIN Header_StartprocessData */
 419:Core/Src/main.c **** /**
 420:Core/Src/main.c **** * @brief Function implementing the processData thread.
 421:Core/Src/main.c **** * @param argument: Not used
 422:Core/Src/main.c **** * @retval None
 423:Core/Src/main.c **** */
 424:Core/Src/main.c **** /* USER CODE END Header_StartprocessData */
 425:Core/Src/main.c **** void StartprocessData(void *argument)
 426:Core/Src/main.c **** {
 143              		.loc 1 426 0
 144              		.cfi_startproc
 145              		@ Volatile: function does not return.
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              	.LVL14:
ARM GAS  /tmp/ccEV96rY.s 			page 11


 149 0000 08B5     		push	{r3, lr}
 150              	.LCFI3:
 151              		.cfi_def_cfa_offset 8
 152              		.cfi_offset 3, -8
 153              		.cfi_offset 14, -4
 154              	.LVL15:
 155              	.L13:
 427:Core/Src/main.c ****   /* USER CODE BEGIN StartprocessData */
 428:Core/Src/main.c ****   /* Infinite loop */
 429:Core/Src/main.c ****   for (;;)
 430:Core/Src/main.c ****   {
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****     refreshData();
 156              		.loc 1 432 0 discriminator 1
 157 0002 FFF7FEFF 		bl	refreshData
 158              	.LVL16:
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****     osDelay(1000);
 159              		.loc 1 434 0 discriminator 1
 160 0006 4FF47A70 		mov	r0, #1000
 161 000a FFF7FEFF 		bl	osDelay
 162              	.LVL17:
 163 000e F8E7     		b	.L13
 164              		.cfi_endproc
 165              	.LFE143:
 167              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 168              		.align	1
 169              		.global	HAL_TIM_PeriodElapsedCallback
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv4-sp-d16
 175              	HAL_TIM_PeriodElapsedCallback:
 176              	.LFB144:
 435:Core/Src/main.c ****   }
 436:Core/Src/main.c ****   /* USER CODE END StartprocessData */
 437:Core/Src/main.c **** }
 438:Core/Src/main.c **** 
 439:Core/Src/main.c **** /**
 440:Core/Src/main.c ****   * @brief  Period elapsed callback in non blocking mode
 441:Core/Src/main.c ****   * @note   This function is called  when TIM7 interrupt took place, inside
 442:Core/Src/main.c ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 443:Core/Src/main.c ****   * a global variable "uwTick" used as application time base.
 444:Core/Src/main.c ****   * @param  htim : TIM handle
 445:Core/Src/main.c ****   * @retval None
 446:Core/Src/main.c ****   */
 447:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 448:Core/Src/main.c **** {
 177              		.loc 1 448 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              	.LVL18:
 182 0000 10B5     		push	{r4, lr}
 183              	.LCFI4:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
ARM GAS  /tmp/ccEV96rY.s 			page 12


 186              		.cfi_offset 14, -4
 449:Core/Src/main.c ****   /* USER CODE BEGIN Callback 0 */
 450:Core/Src/main.c ****   if (htim->Instance == TIM1)
 187              		.loc 1 450 0
 188 0002 0268     		ldr	r2, [r0]
 189 0004 0F4B     		ldr	r3, .L21
 190 0006 9A42     		cmp	r2, r3
 191 0008 04D0     		beq	.L19
 192              	.L16:
 451:Core/Src/main.c ****   {
 452:Core/Src/main.c ****     ws2812b.timerPeriodCounter = 0;
 453:Core/Src/main.c ****     TIM1->CR1 = 0; // disable timer
 454:Core/Src/main.c **** 
 455:Core/Src/main.c ****     // disable the TIM2 Update IRQ
 456:Core/Src/main.c ****     __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 457:Core/Src/main.c **** 
 458:Core/Src/main.c ****     // Set back 1,25us period
 459:Core/Src/main.c ****     TIM1->ARR = tim_period;
 460:Core/Src/main.c **** 
 461:Core/Src/main.c ****     // Generate an update event to reload the Prescaler value immediatly
 462:Core/Src/main.c ****     TIM1->EGR = TIM_EGR_UG;
 463:Core/Src/main.c ****     __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 464:Core/Src/main.c **** 
 465:Core/Src/main.c ****     // set transfer_complete flag
 466:Core/Src/main.c ****     ws2812b.transferComplete = 1;
 467:Core/Src/main.c ****   }
 468:Core/Src/main.c **** 
 469:Core/Src/main.c ****   /* USER CODE END Callback 0 */
 470:Core/Src/main.c ****   if (htim->Instance == TIM7)
 193              		.loc 1 470 0
 194 000a 0268     		ldr	r2, [r0]
 195 000c 0E4B     		ldr	r3, .L21+4
 196 000e 9A42     		cmp	r2, r3
 197 0010 15D0     		beq	.L20
 198              	.LVL19:
 199              	.L15:
 200 0012 10BD     		pop	{r4, pc}
 201              	.LVL20:
 202              	.L19:
 452:Core/Src/main.c ****     TIM1->CR1 = 0; // disable timer
 203              		.loc 1 452 0
 204 0014 0D4C     		ldr	r4, .L21+8
 205 0016 0023     		movs	r3, #0
 206 0018 6361     		str	r3, [r4, #20]
 453:Core/Src/main.c **** 
 207              		.loc 1 453 0
 208 001a 0A4A     		ldr	r2, .L21
 209 001c 1360     		str	r3, [r2]
 456:Core/Src/main.c **** 
 210              		.loc 1 456 0
 211 001e 0C4B     		ldr	r3, .L21+12
 212 0020 1B68     		ldr	r3, [r3]
 213 0022 D968     		ldr	r1, [r3, #12]
 214 0024 21F00101 		bic	r1, r1, #1
 215 0028 D960     		str	r1, [r3, #12]
 459:Core/Src/main.c **** 
 216              		.loc 1 459 0
ARM GAS  /tmp/ccEV96rY.s 			page 13


 217 002a 0A49     		ldr	r1, .L21+16
 218 002c 0968     		ldr	r1, [r1]
 219 002e D162     		str	r1, [r2, #44]
 462:Core/Src/main.c ****     __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 220              		.loc 1 462 0
 221 0030 0121     		movs	r1, #1
 222 0032 5161     		str	r1, [r2, #20]
 463:Core/Src/main.c **** 
 223              		.loc 1 463 0
 224 0034 6FF00102 		mvn	r2, #1
 225 0038 1A61     		str	r2, [r3, #16]
 466:Core/Src/main.c ****   }
 226              		.loc 1 466 0
 227 003a 2174     		strb	r1, [r4, #16]
 228 003c E5E7     		b	.L16
 229              	.L20:
 471:Core/Src/main.c ****   {
 472:Core/Src/main.c ****     HAL_IncTick();
 230              		.loc 1 472 0
 231 003e FFF7FEFF 		bl	HAL_IncTick
 232              	.LVL21:
 473:Core/Src/main.c ****   }
 474:Core/Src/main.c ****   /* USER CODE BEGIN Callback 1 */
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /* USER CODE END Callback 1 */
 477:Core/Src/main.c **** }
 233              		.loc 1 477 0
 234 0042 E6E7     		b	.L15
 235              	.L22:
 236              		.align	2
 237              	.L21:
 238 0044 00000140 		.word	1073807360
 239 0048 00140040 		.word	1073746944
 240 004c 00000000 		.word	ws2812b
 241 0050 00000000 		.word	TIM1_handle
 242 0054 00000000 		.word	tim_period
 243              		.cfi_endproc
 244              	.LFE144:
 246              		.section	.text.Error_Handler,"ax",%progbits
 247              		.align	1
 248              		.global	Error_Handler
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	Error_Handler:
 255              	.LFB145:
 478:Core/Src/main.c **** 
 479:Core/Src/main.c **** /**
 480:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 481:Core/Src/main.c ****   * @retval None
 482:Core/Src/main.c ****   */
 483:Core/Src/main.c **** void Error_Handler(void)
 484:Core/Src/main.c **** {
 256              		.loc 1 484 0
 257              		.cfi_startproc
 258              		@ Volatile: function does not return.
ARM GAS  /tmp/ccEV96rY.s 			page 14


 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262              	.LBB4:
 263              	.LBB5:
 264              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
ARM GAS  /tmp/ccEV96rY.s 			page 15


  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
ARM GAS  /tmp/ccEV96rY.s 			page 16


 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 265              		.loc 2 142 0
 266              		.syntax unified
 267              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 268 0000 72B6     		cpsid i
 269              	@ 0 "" 2
 270              		.thumb
 271              		.syntax unified
 272              	.L24:
 273 0002 FEE7     		b	.L24
 274              	.LBE5:
 275              	.LBE4:
 276              		.cfi_endproc
 277              	.LFE145:
 279              		.section	.text.MX_CAN1_Init,"ax",%progbits
 280              		.align	1
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu fpv4-sp-d16
 286              	MX_CAN1_Init:
 287              	.LFB137:
 243:Core/Src/main.c **** 
 288              		.loc 1 243 0
ARM GAS  /tmp/ccEV96rY.s 			page 17


 289              		.cfi_startproc
 290              		@ args = 0, pretend = 0, frame = 0
 291              		@ frame_needed = 0, uses_anonymous_args = 0
 292 0000 08B5     		push	{r3, lr}
 293              	.LCFI5:
 294              		.cfi_def_cfa_offset 8
 295              		.cfi_offset 3, -8
 296              		.cfi_offset 14, -4
 252:Core/Src/main.c ****   hcan1.Init.Prescaler = 48;
 297              		.loc 1 252 0
 298 0002 0D48     		ldr	r0, .L29
 299 0004 0D4B     		ldr	r3, .L29+4
 300 0006 0360     		str	r3, [r0]
 253:Core/Src/main.c ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 301              		.loc 1 253 0
 302 0008 3023     		movs	r3, #48
 303 000a 4360     		str	r3, [r0, #4]
 254:Core/Src/main.c ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 304              		.loc 1 254 0
 305 000c 0023     		movs	r3, #0
 306 000e 8360     		str	r3, [r0, #8]
 255:Core/Src/main.c ****   hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 307              		.loc 1 255 0
 308 0010 C360     		str	r3, [r0, #12]
 256:Core/Src/main.c ****   hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 309              		.loc 1 256 0
 310 0012 4FF48032 		mov	r2, #65536
 311 0016 0261     		str	r2, [r0, #16]
 257:Core/Src/main.c ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 312              		.loc 1 257 0
 313 0018 4FF40012 		mov	r2, #2097152
 314 001c 4261     		str	r2, [r0, #20]
 258:Core/Src/main.c ****   hcan1.Init.AutoBusOff = DISABLE;
 315              		.loc 1 258 0
 316 001e 0376     		strb	r3, [r0, #24]
 259:Core/Src/main.c ****   hcan1.Init.AutoWakeUp = DISABLE;
 317              		.loc 1 259 0
 318 0020 4376     		strb	r3, [r0, #25]
 260:Core/Src/main.c ****   hcan1.Init.AutoRetransmission = DISABLE;
 319              		.loc 1 260 0
 320 0022 8376     		strb	r3, [r0, #26]
 261:Core/Src/main.c ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 321              		.loc 1 261 0
 322 0024 C376     		strb	r3, [r0, #27]
 262:Core/Src/main.c ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 323              		.loc 1 262 0
 324 0026 0377     		strb	r3, [r0, #28]
 263:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 325              		.loc 1 263 0
 326 0028 4377     		strb	r3, [r0, #29]
 264:Core/Src/main.c ****   {
 327              		.loc 1 264 0
 328 002a FFF7FEFF 		bl	HAL_CAN_Init
 329              	.LVL22:
 330 002e 00B9     		cbnz	r0, .L28
 331 0030 08BD     		pop	{r3, pc}
 332              	.L28:
ARM GAS  /tmp/ccEV96rY.s 			page 18


 266:Core/Src/main.c ****   }
 333              		.loc 1 266 0
 334 0032 FFF7FEFF 		bl	Error_Handler
 335              	.LVL23:
 336              	.L30:
 337 0036 00BF     		.align	2
 338              	.L29:
 339 0038 00000000 		.word	hcan1
 340 003c 00640040 		.word	1073767424
 341              		.cfi_endproc
 342              	.LFE137:
 344              		.section	.text.MX_CAN2_Init,"ax",%progbits
 345              		.align	1
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 349              		.fpu fpv4-sp-d16
 351              	MX_CAN2_Init:
 352              	.LFB138:
 279:Core/Src/main.c **** 
 353              		.loc 1 279 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 08B5     		push	{r3, lr}
 358              	.LCFI6:
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 3, -8
 361              		.cfi_offset 14, -4
 288:Core/Src/main.c ****   hcan2.Init.Prescaler = 12;
 362              		.loc 1 288 0
 363 0002 0D48     		ldr	r0, .L35
 364 0004 0D4B     		ldr	r3, .L35+4
 365 0006 0360     		str	r3, [r0]
 289:Core/Src/main.c ****   hcan2.Init.Mode = CAN_MODE_NORMAL;
 366              		.loc 1 289 0
 367 0008 0C23     		movs	r3, #12
 368 000a 4360     		str	r3, [r0, #4]
 290:Core/Src/main.c ****   hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 369              		.loc 1 290 0
 370 000c 0023     		movs	r3, #0
 371 000e 8360     		str	r3, [r0, #8]
 291:Core/Src/main.c ****   hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 372              		.loc 1 291 0
 373 0010 C360     		str	r3, [r0, #12]
 292:Core/Src/main.c ****   hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 374              		.loc 1 292 0
 375 0012 4FF48032 		mov	r2, #65536
 376 0016 0261     		str	r2, [r0, #16]
 293:Core/Src/main.c ****   hcan2.Init.TimeTriggeredMode = DISABLE;
 377              		.loc 1 293 0
 378 0018 4FF40012 		mov	r2, #2097152
 379 001c 4261     		str	r2, [r0, #20]
 294:Core/Src/main.c ****   hcan2.Init.AutoBusOff = DISABLE;
 380              		.loc 1 294 0
 381 001e 0376     		strb	r3, [r0, #24]
 295:Core/Src/main.c ****   hcan2.Init.AutoWakeUp = DISABLE;
ARM GAS  /tmp/ccEV96rY.s 			page 19


 382              		.loc 1 295 0
 383 0020 4376     		strb	r3, [r0, #25]
 296:Core/Src/main.c ****   hcan2.Init.AutoRetransmission = DISABLE;
 384              		.loc 1 296 0
 385 0022 8376     		strb	r3, [r0, #26]
 297:Core/Src/main.c ****   hcan2.Init.ReceiveFifoLocked = DISABLE;
 386              		.loc 1 297 0
 387 0024 C376     		strb	r3, [r0, #27]
 298:Core/Src/main.c ****   hcan2.Init.TransmitFifoPriority = DISABLE;
 388              		.loc 1 298 0
 389 0026 0377     		strb	r3, [r0, #28]
 299:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan2) != HAL_OK)
 390              		.loc 1 299 0
 391 0028 4377     		strb	r3, [r0, #29]
 300:Core/Src/main.c ****   {
 392              		.loc 1 300 0
 393 002a FFF7FEFF 		bl	HAL_CAN_Init
 394              	.LVL24:
 395 002e 00B9     		cbnz	r0, .L34
 396 0030 08BD     		pop	{r3, pc}
 397              	.L34:
 302:Core/Src/main.c ****   }
 398              		.loc 1 302 0
 399 0032 FFF7FEFF 		bl	Error_Handler
 400              	.LVL25:
 401              	.L36:
 402 0036 00BF     		.align	2
 403              	.L35:
 404 0038 00000000 		.word	hcan2
 405 003c 00680040 		.word	1073768448
 406              		.cfi_endproc
 407              	.LFE138:
 409              		.section	.text.MX_CAN3_Init,"ax",%progbits
 410              		.align	1
 411              		.syntax unified
 412              		.thumb
 413              		.thumb_func
 414              		.fpu fpv4-sp-d16
 416              	MX_CAN3_Init:
 417              	.LFB139:
 315:Core/Src/main.c **** 
 418              		.loc 1 315 0
 419              		.cfi_startproc
 420              		@ args = 0, pretend = 0, frame = 0
 421              		@ frame_needed = 0, uses_anonymous_args = 0
 422 0000 08B5     		push	{r3, lr}
 423              	.LCFI7:
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 3, -8
 426              		.cfi_offset 14, -4
 324:Core/Src/main.c ****   hcan3.Init.Prescaler = 48;
 427              		.loc 1 324 0
 428 0002 0D48     		ldr	r0, .L41
 429 0004 0D4B     		ldr	r3, .L41+4
 430 0006 0360     		str	r3, [r0]
 325:Core/Src/main.c ****   hcan3.Init.Mode = CAN_MODE_NORMAL;
 431              		.loc 1 325 0
ARM GAS  /tmp/ccEV96rY.s 			page 20


 432 0008 3023     		movs	r3, #48
 433 000a 4360     		str	r3, [r0, #4]
 326:Core/Src/main.c ****   hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 434              		.loc 1 326 0
 435 000c 0023     		movs	r3, #0
 436 000e 8360     		str	r3, [r0, #8]
 327:Core/Src/main.c ****   hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 437              		.loc 1 327 0
 438 0010 C360     		str	r3, [r0, #12]
 328:Core/Src/main.c ****   hcan3.Init.TimeSeg2 = CAN_BS2_3TQ;
 439              		.loc 1 328 0
 440 0012 4FF48032 		mov	r2, #65536
 441 0016 0261     		str	r2, [r0, #16]
 329:Core/Src/main.c ****   hcan3.Init.TimeTriggeredMode = DISABLE;
 442              		.loc 1 329 0
 443 0018 4FF40012 		mov	r2, #2097152
 444 001c 4261     		str	r2, [r0, #20]
 330:Core/Src/main.c ****   hcan3.Init.AutoBusOff = DISABLE;
 445              		.loc 1 330 0
 446 001e 0376     		strb	r3, [r0, #24]
 331:Core/Src/main.c ****   hcan3.Init.AutoWakeUp = DISABLE;
 447              		.loc 1 331 0
 448 0020 4376     		strb	r3, [r0, #25]
 332:Core/Src/main.c ****   hcan3.Init.AutoRetransmission = DISABLE;
 449              		.loc 1 332 0
 450 0022 8376     		strb	r3, [r0, #26]
 333:Core/Src/main.c ****   hcan3.Init.ReceiveFifoLocked = DISABLE;
 451              		.loc 1 333 0
 452 0024 C376     		strb	r3, [r0, #27]
 334:Core/Src/main.c ****   hcan3.Init.TransmitFifoPriority = DISABLE;
 453              		.loc 1 334 0
 454 0026 0377     		strb	r3, [r0, #28]
 335:Core/Src/main.c ****   if (HAL_CAN_Init(&hcan3) != HAL_OK)
 455              		.loc 1 335 0
 456 0028 4377     		strb	r3, [r0, #29]
 336:Core/Src/main.c ****   {
 457              		.loc 1 336 0
 458 002a FFF7FEFF 		bl	HAL_CAN_Init
 459              	.LVL26:
 460 002e 00B9     		cbnz	r0, .L40
 461 0030 08BD     		pop	{r3, pc}
 462              	.L40:
 338:Core/Src/main.c ****   }
 463              		.loc 1 338 0
 464 0032 FFF7FEFF 		bl	Error_Handler
 465              	.LVL27:
 466              	.L42:
 467 0036 00BF     		.align	2
 468              	.L41:
 469 0038 00000000 		.word	hcan3
 470 003c 006C0040 		.word	1073769472
 471              		.cfi_endproc
 472              	.LFE139:
 474              		.section	.text.SystemClock_Config,"ax",%progbits
 475              		.align	1
 476              		.global	SystemClock_Config
 477              		.syntax unified
ARM GAS  /tmp/ccEV96rY.s 			page 21


 478              		.thumb
 479              		.thumb_func
 480              		.fpu fpv4-sp-d16
 482              	SystemClock_Config:
 483              	.LFB136:
 198:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 484              		.loc 1 198 0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 80
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 488 0000 00B5     		push	{lr}
 489              	.LCFI8:
 490              		.cfi_def_cfa_offset 4
 491              		.cfi_offset 14, -4
 492 0002 95B0     		sub	sp, sp, #84
 493              	.LCFI9:
 494              		.cfi_def_cfa_offset 88
 199:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 495              		.loc 1 199 0
 496 0004 3422     		movs	r2, #52
 497 0006 0021     		movs	r1, #0
 498 0008 07A8     		add	r0, sp, #28
 499 000a FFF7FEFF 		bl	memset
 500              	.LVL28:
 200:Core/Src/main.c **** 
 501              		.loc 1 200 0
 502 000e 0023     		movs	r3, #0
 503 0010 0293     		str	r3, [sp, #8]
 504 0012 0393     		str	r3, [sp, #12]
 505 0014 0493     		str	r3, [sp, #16]
 506 0016 0593     		str	r3, [sp, #20]
 507 0018 0693     		str	r3, [sp, #24]
 508              	.LBB6:
 204:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 509              		.loc 1 204 0
 510 001a 0093     		str	r3, [sp]
 511 001c 1E4A     		ldr	r2, .L49
 512 001e 116C     		ldr	r1, [r2, #64]
 513 0020 41F08051 		orr	r1, r1, #268435456
 514 0024 1164     		str	r1, [r2, #64]
 515 0026 126C     		ldr	r2, [r2, #64]
 516 0028 02F08052 		and	r2, r2, #268435456
 517 002c 0092     		str	r2, [sp]
 518 002e 009A     		ldr	r2, [sp]
 519              	.LBE6:
 520              	.LBB7:
 205:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 521              		.loc 1 205 0
 522 0030 0193     		str	r3, [sp, #4]
 523 0032 1A4A     		ldr	r2, .L49+4
 524 0034 1168     		ldr	r1, [r2]
 525 0036 41F44041 		orr	r1, r1, #49152
 526 003a 1160     		str	r1, [r2]
 527 003c 1268     		ldr	r2, [r2]
 528 003e 02F44042 		and	r2, r2, #49152
 529 0042 0192     		str	r2, [sp, #4]
 530 0044 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/ccEV96rY.s 			page 22


 531              	.LBE7:
 209:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 532              		.loc 1 209 0
 533 0046 0222     		movs	r2, #2
 534 0048 0792     		str	r2, [sp, #28]
 210:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 535              		.loc 1 210 0
 536 004a 0121     		movs	r1, #1
 537 004c 0A91     		str	r1, [sp, #40]
 211:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 538              		.loc 1 211 0
 539 004e 1021     		movs	r1, #16
 540 0050 0B91     		str	r1, [sp, #44]
 212:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 541              		.loc 1 212 0
 542 0052 0D92     		str	r2, [sp, #52]
 213:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 8;
 543              		.loc 1 213 0
 544 0054 0E93     		str	r3, [sp, #56]
 214:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 72;
 545              		.loc 1 214 0
 546 0056 0823     		movs	r3, #8
 547 0058 0F93     		str	r3, [sp, #60]
 215:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 548              		.loc 1 215 0
 549 005a 4823     		movs	r3, #72
 550 005c 1093     		str	r3, [sp, #64]
 216:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 551              		.loc 1 216 0
 552 005e 1192     		str	r2, [sp, #68]
 217:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 553              		.loc 1 217 0
 554 0060 1292     		str	r2, [sp, #72]
 218:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 555              		.loc 1 218 0
 556 0062 1392     		str	r2, [sp, #76]
 219:Core/Src/main.c ****   {
 557              		.loc 1 219 0
 558 0064 07A8     		add	r0, sp, #28
 559 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 560              	.LVL29:
 561 006a 80B9     		cbnz	r0, .L47
 225:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 562              		.loc 1 225 0
 563 006c 0F23     		movs	r3, #15
 564 006e 0293     		str	r3, [sp, #8]
 226:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 565              		.loc 1 226 0
 566 0070 0221     		movs	r1, #2
 567 0072 0391     		str	r1, [sp, #12]
 227:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 568              		.loc 1 227 0
 569 0074 0023     		movs	r3, #0
 570 0076 0493     		str	r3, [sp, #16]
 228:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 571              		.loc 1 228 0
 572 0078 4FF48052 		mov	r2, #4096
ARM GAS  /tmp/ccEV96rY.s 			page 23


 573 007c 0592     		str	r2, [sp, #20]
 229:Core/Src/main.c **** 
 574              		.loc 1 229 0
 575 007e 0693     		str	r3, [sp, #24]
 231:Core/Src/main.c ****   {
 576              		.loc 1 231 0
 577 0080 02A8     		add	r0, sp, #8
 578 0082 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 579              	.LVL30:
 580 0086 20B9     		cbnz	r0, .L48
 235:Core/Src/main.c **** 
 581              		.loc 1 235 0
 582 0088 15B0     		add	sp, sp, #84
 583              	.LCFI10:
 584              		.cfi_remember_state
 585              		.cfi_def_cfa_offset 4
 586              		@ sp needed
 587 008a 5DF804FB 		ldr	pc, [sp], #4
 588              	.L47:
 589              	.LCFI11:
 590              		.cfi_restore_state
 221:Core/Src/main.c ****   }
 591              		.loc 1 221 0
 592 008e FFF7FEFF 		bl	Error_Handler
 593              	.LVL31:
 594              	.L48:
 233:Core/Src/main.c ****   }
 595              		.loc 1 233 0
 596 0092 FFF7FEFF 		bl	Error_Handler
 597              	.LVL32:
 598              	.L50:
 599 0096 00BF     		.align	2
 600              	.L49:
 601 0098 00380240 		.word	1073887232
 602 009c 00700040 		.word	1073770496
 603              		.cfi_endproc
 604              	.LFE136:
 606              		.section	.text.main,"ax",%progbits
 607              		.align	1
 608              		.global	main
 609              		.syntax unified
 610              		.thumb
 611              		.thumb_func
 612              		.fpu fpv4-sp-d16
 614              	main:
 615              	.LFB135:
 105:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 616              		.loc 1 105 0
 617              		.cfi_startproc
 618              		@ Volatile: function does not return.
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621 0000 08B5     		push	{r3, lr}
 622              	.LCFI12:
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 3, -8
 625              		.cfi_offset 14, -4
ARM GAS  /tmp/ccEV96rY.s 			page 24


 113:Core/Src/main.c **** 
 626              		.loc 1 113 0
 627 0002 FFF7FEFF 		bl	HAL_Init
 628              	.LVL33:
 120:Core/Src/main.c **** 
 629              		.loc 1 120 0
 630 0006 FFF7FEFF 		bl	SystemClock_Config
 631              	.LVL34:
 128:Core/Src/main.c ****   MX_CAN2_Init();
 632              		.loc 1 128 0
 633 000a FFF7FEFF 		bl	MX_CAN1_Init
 634              	.LVL35:
 129:Core/Src/main.c ****   MX_CAN3_Init();
 635              		.loc 1 129 0
 636 000e FFF7FEFF 		bl	MX_CAN2_Init
 637              	.LVL36:
 130:Core/Src/main.c ****   ;
 638              		.loc 1 130 0
 639 0012 FFF7FEFF 		bl	MX_CAN3_Init
 640              	.LVL37:
 133:Core/Src/main.c ****   visInit();
 641              		.loc 1 133 0
 642 0016 FFF7FEFF 		bl	canSettings
 643              	.LVL38:
 134:Core/Src/main.c ****   initBMS();
 644              		.loc 1 134 0
 645 001a FFF7FEFF 		bl	visInit
 646              	.LVL39:
 135:Core/Src/main.c ****   /* USER CODE END 2 */
 647              		.loc 1 135 0
 648 001e FFF7FEFF 		bl	initBMS
 649              	.LVL40:
 139:Core/Src/main.c **** 
 650              		.loc 1 139 0
 651 0022 FFF7FEFF 		bl	osKernelInitialize
 652              	.LVL41:
 159:Core/Src/main.c **** 
 653              		.loc 1 159 0
 654 0026 0F4A     		ldr	r2, .L54
 655 0028 0021     		movs	r1, #0
 656 002a 0F48     		ldr	r0, .L54+4
 657 002c FFF7FEFF 		bl	osThreadNew
 658              	.LVL42:
 659 0030 0E4B     		ldr	r3, .L54+8
 660 0032 1860     		str	r0, [r3]
 162:Core/Src/main.c **** 
 661              		.loc 1 162 0
 662 0034 0E4A     		ldr	r2, .L54+12
 663 0036 0021     		movs	r1, #0
 664 0038 0E48     		ldr	r0, .L54+16
 665 003a FFF7FEFF 		bl	osThreadNew
 666              	.LVL43:
 667 003e 0E4B     		ldr	r3, .L54+20
 668 0040 1860     		str	r0, [r3]
 165:Core/Src/main.c **** 
 669              		.loc 1 165 0
 670 0042 0E4A     		ldr	r2, .L54+24
ARM GAS  /tmp/ccEV96rY.s 			page 25


 671 0044 0021     		movs	r1, #0
 672 0046 0E48     		ldr	r0, .L54+28
 673 0048 FFF7FEFF 		bl	osThreadNew
 674              	.LVL44:
 675 004c 0D4B     		ldr	r3, .L54+32
 676 004e 1860     		str	r0, [r3]
 168:Core/Src/main.c **** 
 677              		.loc 1 168 0
 678 0050 0D4A     		ldr	r2, .L54+36
 679 0052 0021     		movs	r1, #0
 680 0054 0D48     		ldr	r0, .L54+40
 681 0056 FFF7FEFF 		bl	osThreadNew
 682              	.LVL45:
 683 005a 0D4B     		ldr	r3, .L54+44
 684 005c 1860     		str	r0, [r3]
 179:Core/Src/main.c **** 
 685              		.loc 1 179 0
 686 005e FFF7FEFF 		bl	osKernelStart
 687              	.LVL46:
 688              	.L52:
 689 0062 FEE7     		b	.L52
 690              	.L55:
 691              		.align	2
 692              	.L54:
 693 0064 00000000 		.word	.LANCHOR0
 694 0068 00000000 		.word	StartDefaultTask
 695 006c 00000000 		.word	defaultTaskHandle
 696 0070 00000000 		.word	.LANCHOR1
 697 0074 00000000 		.word	StartsendCommand
 698 0078 00000000 		.word	sendCommandHandle
 699 007c 00000000 		.word	.LANCHOR2
 700 0080 00000000 		.word	StartbalanceCommand
 701 0084 00000000 		.word	balanceCommandHandle
 702 0088 00000000 		.word	.LANCHOR3
 703 008c 00000000 		.word	StartprocessData
 704 0090 00000000 		.word	processDataHandle
 705              		.cfi_endproc
 706              	.LFE135:
 708              		.global	processData_attributes
 709              		.comm	processDataHandle,4,4
 710              		.global	balanceCommand_attributes
 711              		.comm	balanceCommandHandle,4,4
 712              		.global	sendCommand_attributes
 713              		.comm	sendCommandHandle,4,4
 714              		.global	defaultTask_attributes
 715              		.comm	defaultTaskHandle,4,4
 716              		.comm	ws2812b,28,4
 717              		.comm	timer_reset_pulse_period,4,4
 718              		.comm	tim_period,4,4
 719              		.comm	tim2OC2,28,4
 720              		.comm	tim2OC1,28,4
 721              		.comm	TIM1_handle,64,4
 722              		.comm	charged,1,1
 723              		.comm	vechicleState,1,1
 724              		.comm	BMS,492,4
 725              		.comm	txCycle3,4,4
 726              		.comm	txCycle2,4,4
ARM GAS  /tmp/ccEV96rY.s 			page 26


 727              		.comm	txCycle,4,4
 728              		.comm	canTx3,8,4
 729              		.comm	canTx2,8,4
 730              		.comm	canTx,8,4
 731              		.comm	canMailbox2,4,4
 732              		.comm	canMailbox,4,4
 733              		.comm	canRx3,8,4
 734              		.comm	canRx2,8,4
 735              		.comm	canRx,8,4
 736              		.comm	txMsgExt3,24,4
 737              		.comm	txMsg3,24,4
 738              		.comm	rxMsg3,28,4
 739              		.comm	txMsgExt2,24,4
 740              		.comm	txMsg2,24,4
 741              		.comm	rxMsg2,28,4
 742              		.comm	txMsgExt,24,4
 743              		.comm	txMsg,24,4
 744              		.comm	rxMsg,28,4
 745              		.comm	sf5,40,4
 746              		.comm	sf4,40,4
 747              		.comm	sf3,40,4
 748              		.comm	sf2,40,4
 749              		.comm	sf,40,4
 750              		.comm	hcan3,40,4
 751              		.comm	hcan2,40,4
 752              		.comm	hcan1,40,4
 753              		.section	.rodata.balanceCommand_attributes,"a",%progbits
 754              		.align	2
 755              		.set	.LANCHOR2,. + 0
 758              	balanceCommand_attributes:
 759 0000 0C000000 		.word	.LC1
 760 0004 00000000 		.space	16
 760      00000000 
 760      00000000 
 760      00000000 
 761 0014 00020000 		.word	512
 762 0018 08000000 		.word	8
 763 001c 00000000 		.space	8
 763      00000000 
 764              		.section	.rodata.defaultTask_attributes,"a",%progbits
 765              		.align	2
 766              		.set	.LANCHOR0,. + 0
 769              	defaultTask_attributes:
 770 0000 28000000 		.word	.LC3
 771 0004 00000000 		.space	16
 771      00000000 
 771      00000000 
 771      00000000 
 772 0014 00020000 		.word	512
 773 0018 18000000 		.word	24
 774 001c 00000000 		.space	8
 774      00000000 
 775              		.section	.rodata.processData_attributes,"a",%progbits
 776              		.align	2
 777              		.set	.LANCHOR3,. + 0
 780              	processData_attributes:
 781 0000 00000000 		.word	.LC0
ARM GAS  /tmp/ccEV96rY.s 			page 27


 782 0004 00000000 		.space	16
 782      00000000 
 782      00000000 
 782      00000000 
 783 0014 00020000 		.word	512
 784 0018 08000000 		.word	8
 785 001c 00000000 		.space	8
 785      00000000 
 786              		.section	.rodata.sendCommand_attributes,"a",%progbits
 787              		.align	2
 788              		.set	.LANCHOR1,. + 0
 791              	sendCommand_attributes:
 792 0000 1C000000 		.word	.LC2
 793 0004 00000000 		.space	16
 793      00000000 
 793      00000000 
 793      00000000 
 794 0014 00020000 		.word	512
 795 0018 18000000 		.word	24
 796 001c 00000000 		.space	8
 796      00000000 
 797              		.section	.rodata.str1.4,"aMS",%progbits,1
 798              		.align	2
 799              	.LC0:
 800 0000 70726F63 		.ascii	"processData\000"
 800      65737344 
 800      61746100 
 801              	.LC1:
 802 000c 62616C61 		.ascii	"balanceCommand\000"
 802      6E636543 
 802      6F6D6D61 
 802      6E6400
 803 001b 00       		.space	1
 804              	.LC2:
 805 001c 73656E64 		.ascii	"sendCommand\000"
 805      436F6D6D 
 805      616E6400 
 806              	.LC3:
 807 0028 64656661 		.ascii	"defaultTask\000"
 807      756C7454 
 807      61736B00 
 808              		.text
 809              	.Letext0:
 810              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 811              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 812              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 813              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 814              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 815              		.file 8 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 816              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 817              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 818              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 819              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 820              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 821              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 822              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 823              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
ARM GAS  /tmp/ccEV96rY.s 			page 28


 824              		.file 17 "/usr/include/newlib/sys/lock.h"
 825              		.file 18 "/usr/include/newlib/sys/_types.h"
 826              		.file 19 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 827              		.file 20 "/usr/include/newlib/sys/reent.h"
 828              		.file 21 "Core/Inc/can_setup.h"
 829              		.file 22 "Core/Inc/bms.h"
 830              		.file 23 "Core/Inc/ws2812b.h"
 831              		.file 24 "Core/Inc/visEffect.h"
ARM GAS  /tmp/ccEV96rY.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccEV96rY.s:18     .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccEV96rY.s:25     .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccEV96rY.s:64     .text.StartDefaultTask:0000000000000024 $d
                            *COM*:00000000000001ec BMS
     /tmp/ccEV96rY.s:69     .text.StartbalanceCommand:0000000000000000 $t
     /tmp/ccEV96rY.s:76     .text.StartbalanceCommand:0000000000000000 StartbalanceCommand
     /tmp/ccEV96rY.s:100    .text.StartsendCommand:0000000000000000 $t
     /tmp/ccEV96rY.s:107    .text.StartsendCommand:0000000000000000 StartsendCommand
     /tmp/ccEV96rY.s:134    .text.StartprocessData:0000000000000000 $t
     /tmp/ccEV96rY.s:141    .text.StartprocessData:0000000000000000 StartprocessData
     /tmp/ccEV96rY.s:168    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccEV96rY.s:175    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccEV96rY.s:238    .text.HAL_TIM_PeriodElapsedCallback:0000000000000044 $d
                            *COM*:000000000000001c ws2812b
                            *COM*:0000000000000040 TIM1_handle
                            *COM*:0000000000000004 tim_period
     /tmp/ccEV96rY.s:247    .text.Error_Handler:0000000000000000 $t
     /tmp/ccEV96rY.s:254    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccEV96rY.s:280    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccEV96rY.s:286    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccEV96rY.s:339    .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccEV96rY.s:345    .text.MX_CAN2_Init:0000000000000000 $t
     /tmp/ccEV96rY.s:351    .text.MX_CAN2_Init:0000000000000000 MX_CAN2_Init
     /tmp/ccEV96rY.s:404    .text.MX_CAN2_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan2
     /tmp/ccEV96rY.s:410    .text.MX_CAN3_Init:0000000000000000 $t
     /tmp/ccEV96rY.s:416    .text.MX_CAN3_Init:0000000000000000 MX_CAN3_Init
     /tmp/ccEV96rY.s:469    .text.MX_CAN3_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan3
     /tmp/ccEV96rY.s:475    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccEV96rY.s:482    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccEV96rY.s:601    .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccEV96rY.s:607    .text.main:0000000000000000 $t
     /tmp/ccEV96rY.s:614    .text.main:0000000000000000 main
     /tmp/ccEV96rY.s:693    .text.main:0000000000000064 $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 sendCommandHandle
                            *COM*:0000000000000004 balanceCommandHandle
                            *COM*:0000000000000004 processDataHandle
     /tmp/ccEV96rY.s:780    .rodata.processData_attributes:0000000000000000 processData_attributes
     /tmp/ccEV96rY.s:758    .rodata.balanceCommand_attributes:0000000000000000 balanceCommand_attributes
     /tmp/ccEV96rY.s:791    .rodata.sendCommand_attributes:0000000000000000 sendCommand_attributes
     /tmp/ccEV96rY.s:769    .rodata.defaultTask_attributes:0000000000000000 defaultTask_attributes
                            *COM*:0000000000000004 timer_reset_pulse_period
                            *COM*:000000000000001c tim2OC2
                            *COM*:000000000000001c tim2OC1
                            *COM*:0000000000000001 charged
                            *COM*:0000000000000001 vechicleState
                            *COM*:0000000000000004 txCycle3
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000008 canTx3
                            *COM*:0000000000000008 canTx2
                            *COM*:0000000000000008 canTx
ARM GAS  /tmp/ccEV96rY.s 			page 30


                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx3
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt3
                            *COM*:0000000000000018 txMsg3
                            *COM*:000000000000001c rxMsg3
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
     /tmp/ccEV96rY.s:754    .rodata.balanceCommand_attributes:0000000000000000 $d
     /tmp/ccEV96rY.s:765    .rodata.defaultTask_attributes:0000000000000000 $d
     /tmp/ccEV96rY.s:776    .rodata.processData_attributes:0000000000000000 $d
     /tmp/ccEV96rY.s:787    .rodata.sendCommand_attributes:0000000000000000 $d
     /tmp/ccEV96rY.s:798    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
visHandle
acChargeCommand
bmsStateHandler
osDelay
sendCommand
refreshData
HAL_IncTick
HAL_CAN_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
canSettings
visInit
initBMS
osKernelInitialize
osThreadNew
osKernelStart
