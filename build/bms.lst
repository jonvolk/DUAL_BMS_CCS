ARM GAS  /tmp/ccROOoJg.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"bms.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.getSOC,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	getSOC:
  25              	.LFB139:
  26              		.file 1 "Core/Src/bms.c"
   1:Core/Src/bms.c **** #include "bms.h"
   2:Core/Src/bms.c **** #include "settings.h"
   3:Core/Src/bms.c **** #include "my_math.h"
   4:Core/Src/bms.c **** 
   5:Core/Src/bms.c **** static void getPackVolt(bms_t *bms);
   6:Core/Src/bms.c **** static void getAvgCellVolt(bms_t *bms);
   7:Core/Src/bms.c **** static void getLowCellVolt(bms_t *bms);
   8:Core/Src/bms.c **** static void getHighCellVolt(bms_t *bms);
   9:Core/Src/bms.c **** static void getCellDelta(bms_t *bms);
  10:Core/Src/bms.c **** static void getLowCellTemp(bms_t *bms);
  11:Core/Src/bms.c **** static void getHighCellTemp(bms_t *bms);
  12:Core/Src/bms.c **** static void getAvgCellTemp(bms_t *bms);
  13:Core/Src/bms.c **** static void getTempDelta(bms_t *bms);
  14:Core/Src/bms.c **** static void getCellCount(bms_t *bms, int pack);
  15:Core/Src/bms.c **** static void getSOC(bms_t *bms);
  16:Core/Src/bms.c **** 
  17:Core/Src/bms.c **** enum
  18:Core/Src/bms.c **** {
  19:Core/Src/bms.c ****     Boot,
  20:Core/Src/bms.c ****     Ready,
  21:Core/Src/bms.c ****     Drive,
  22:Core/Src/bms.c ****     Charge,
  23:Core/Src/bms.c ****     Error
  24:Core/Src/bms.c **** };
  25:Core/Src/bms.c **** 
  26:Core/Src/bms.c **** enum
  27:Core/Src/bms.c **** {
  28:Core/Src/bms.c ****     off,
  29:Core/Src/bms.c ****     on, //key on, inverter off
  30:Core/Src/bms.c ****     charge_keyOff,
  31:Core/Src/bms.c ****     charge_keyOn, //who even does that
  32:Core/Src/bms.c ****     idle,         //key on, inverter on
ARM GAS  /tmp/ccROOoJg.s 			page 2


  33:Core/Src/bms.c ****     run,          //key on direction selected
  34:Core/Src/bms.c ****     launchMode,   //break shit
  35:Core/Src/bms.c ****     burnout,      //destroy tires
  36:Core/Src/bms.c **** };
  37:Core/Src/bms.c **** 
  38:Core/Src/bms.c **** /*/SOC filtering
  39:Core/Src/bms.c **** static const int numReadings = 10;
  40:Core/Src/bms.c **** static int readings[10];  // the readings from the analog input
  41:Core/Src/bms.c **** static int readIndex = 0; // the index of the current reading
  42:Core/Src/bms.c **** static int total = 0;     // the running total
  43:Core/Src/bms.c **** static int average = 0;   // the average
  44:Core/Src/bms.c **** */
  45:Core/Src/bms.c **** 
  46:Core/Src/bms.c **** static const uint8_t balanceByte[96] =
  47:Core/Src/bms.c ****     {0, 0, 0, 0, 0, 0,
  48:Core/Src/bms.c ****      1, 1, 1, 1, 1, 1, 1, 1,
  49:Core/Src/bms.c ****      2, 2, 2, 2, 2, 2, 2, 2,
  50:Core/Src/bms.c ****      3, 3, 3, 3, 3, 3, 3, 3,
  51:Core/Src/bms.c ****      4, 4, 4, 4, 4, 4, 4, 4,
  52:Core/Src/bms.c ****      5, 5, 5, 5, 5, 5, 5, 5,
  53:Core/Src/bms.c ****      6, 6, 6, 6, 6, 6, 6, 6,
  54:Core/Src/bms.c ****      7, 7, 7, 7, 7, 7, 7, 7,
  55:Core/Src/bms.c ****      0, 0, 0, 0, 0, 0, 0, 0,
  56:Core/Src/bms.c ****      1, 1, 1, 1, 1, 1, 1, 1,
  57:Core/Src/bms.c ****      2, 2, 2, 2, 2, 2,
  58:Core/Src/bms.c ****      3, 3, 3, 3, 3, 3,
  59:Core/Src/bms.c ****      4, 4, 4, 4, 4, 4};
  60:Core/Src/bms.c **** 
  61:Core/Src/bms.c **** static const uint8_t balanceShift[96] =
  62:Core/Src/bms.c ****     {0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
  63:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
  64:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
  65:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
  66:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
  67:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
  68:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
  69:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
  70:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
  71:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
  72:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
  73:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
  74:Core/Src/bms.c ****      0x01, 0x02, 0x04, 0x08, 0x10, 0x20};
  75:Core/Src/bms.c **** 
  76:Core/Src/bms.c **** static int errorCount;
  77:Core/Src/bms.c **** // Initialize BMS //////////////////////////////////////////////////////////////////
  78:Core/Src/bms.c **** void initBMS(void)
  79:Core/Src/bms.c **** {
  80:Core/Src/bms.c ****     for (size_t i = 0; i < 2; i++)
  81:Core/Src/bms.c ****     {
  82:Core/Src/bms.c ****         BMS[i].state = Boot;
  83:Core/Src/bms.c ****         BMS[i].cellDelta = 0;
  84:Core/Src/bms.c ****         BMS[i].highCellTemp = 0;
  85:Core/Src/bms.c ****         BMS[i].chargeRequest = 0;
  86:Core/Src/bms.c ****         BMS[i].highCellVolt = 0;
  87:Core/Src/bms.c ****         BMS[i].lowCellVolt = 0;
  88:Core/Src/bms.c ****         BMS[i].lowCellTemp = 0;
  89:Core/Src/bms.c ****         BMS[i].packVolt = 0;
ARM GAS  /tmp/ccROOoJg.s 			page 3


  90:Core/Src/bms.c ****         BMS[i].SOC = 0;
  91:Core/Src/bms.c ****         BMS[i].tempDelta = 0;
  92:Core/Src/bms.c **** 
  93:Core/Src/bms.c ****         for (size_t j = 0; j < 96; j++)
  94:Core/Src/bms.c ****         {
  95:Core/Src/bms.c ****             BMS[i].cellVolt[j] = 0;
  96:Core/Src/bms.c ****         }
  97:Core/Src/bms.c **** 
  98:Core/Src/bms.c ****         for (size_t j = 0; j < 16; j++)
  99:Core/Src/bms.c ****         {
 100:Core/Src/bms.c ****             BMS[i].tempSensor[j] = 0;
 101:Core/Src/bms.c ****         }
 102:Core/Src/bms.c ****     }
 103:Core/Src/bms.c ****     //vehicleState = off;
 104:Core/Src/bms.c ****     watchdogBits = 0b0000;
 105:Core/Src/bms.c ****     chargerOn = false;
 106:Core/Src/bms.c ****     errorCount = 0;
 107:Core/Src/bms.c **** 
 108:Core/Src/bms.c **** }
 109:Core/Src/bms.c **** 
 110:Core/Src/bms.c **** // Primary State Machine ///////////////////////////////////////////////////////////////
 111:Core/Src/bms.c **** void bmsStateHandler(bms_t *bms)
 112:Core/Src/bms.c **** {
 113:Core/Src/bms.c ****     switch (bms->state)
 114:Core/Src/bms.c ****     {
 115:Core/Src/bms.c ****     case Boot:
 116:Core/Src/bms.c ****         bms->chargeRequest = 0;
 117:Core/Src/bms.c ****         bms->state = Ready;
 118:Core/Src/bms.c **** 
 119:Core/Src/bms.c ****         break;
 120:Core/Src/bms.c **** 
 121:Core/Src/bms.c ****     case Ready:
 122:Core/Src/bms.c ****         bms->chargeRequest = 0;
 123:Core/Src/bms.c ****         if (bms->avgCellVolt > BALANCE_VOLTAGE)
 124:Core/Src/bms.c ****         {
 125:Core/Src/bms.c ****             if ((bms->highCellVolt - bms->lowCellVolt) > (BALANCE_HYS))
 126:Core/Src/bms.c ****             {
 127:Core/Src/bms.c ****                 bms->balancecells = true;
 128:Core/Src/bms.c ****             }
 129:Core/Src/bms.c **** 
 130:Core/Src/bms.c ****             else if ((bms->highCellVolt - bms->lowCellVolt) <= BALANCE_HYS)
 131:Core/Src/bms.c ****             {
 132:Core/Src/bms.c ****                 bms->balancecells = false;
 133:Core/Src/bms.c ****             }
 134:Core/Src/bms.c ****         }
 135:Core/Src/bms.c ****         else
 136:Core/Src/bms.c ****         {
 137:Core/Src/bms.c ****             bms->balancecells = false;
 138:Core/Src/bms.c ****         }
 139:Core/Src/bms.c **** 
 140:Core/Src/bms.c ****         if (bms->highCellVolt < (CHARGE_V_SETPOINT - CHARGE_HYS))
 141:Core/Src/bms.c ****         {
 142:Core/Src/bms.c ****             bms->state = Charge;
 143:Core/Src/bms.c ****         }
 144:Core/Src/bms.c ****         break;
 145:Core/Src/bms.c **** 
 146:Core/Src/bms.c ****     case Charge:
ARM GAS  /tmp/ccROOoJg.s 			page 4


 147:Core/Src/bms.c ****         bms->balancecells = false;
 148:Core/Src/bms.c ****         bms->chargeRequest = 1;        
 149:Core/Src/bms.c **** 
 150:Core/Src/bms.c ****         if (bms->highCellVolt > CHARGE_V_SETPOINT || bms->highCellTemp > OVER_T_SETPOINT)
 151:Core/Src/bms.c ****         {
 152:Core/Src/bms.c ****             bms->state = Ready;
 153:Core/Src/bms.c ****         }
 154:Core/Src/bms.c ****         break;
 155:Core/Src/bms.c **** 
 156:Core/Src/bms.c ****     case Error:
 157:Core/Src/bms.c ****         HAL_NVIC_SystemReset();
 158:Core/Src/bms.c ****         break;
 159:Core/Src/bms.c **** 
 160:Core/Src/bms.c ****     default:
 161:Core/Src/bms.c ****         break;
 162:Core/Src/bms.c ****     }
 163:Core/Src/bms.c **** }
 164:Core/Src/bms.c **** 
 165:Core/Src/bms.c **** // 10kw Tesla Charger /////////////////////////////////////////////////////////////////////
 166:Core/Src/bms.c **** void acChargeCommand(void)
 167:Core/Src/bms.c **** {
 168:Core/Src/bms.c ****     uint8_t canTx2[8];
 169:Core/Src/bms.c ****     if (chargerOn)
 170:Core/Src/bms.c ****     {
 171:Core/Src/bms.c ****         int val = 32;
 172:Core/Src/bms.c ****         canTx2[0] = 0x40;
 173:Core/Src/bms.c ****         canTx2[1] = 0x00;
 174:Core/Src/bms.c ****         canTx2[2] = 0x20;
 175:Core/Src/bms.c ****         canTx2[3] = 9;
 176:Core/Src/bms.c ****         canTx2[4] = val & 0xFF;
 177:Core/Src/bms.c ****         canTx2[5] = (val >> 8) & 0xFF;
 178:Core/Src/bms.c ****         canTx2[6] = (val >> 16) & 0xFF;
 179:Core/Src/bms.c ****         canTx2[7] = (val >> 24) & 0xFF;
 180:Core/Src/bms.c ****         can2tx(0x605, 8, canTx2); 
 181:Core/Src/bms.c ****     }
 182:Core/Src/bms.c ****     else
 183:Core/Src/bms.c ****     {
 184:Core/Src/bms.c ****         int val = 0;
 185:Core/Src/bms.c ****         canTx2[0] = 0x40;
 186:Core/Src/bms.c ****         canTx2[1] = 0x00;
 187:Core/Src/bms.c ****         canTx2[2] = 0x20;
 188:Core/Src/bms.c ****         canTx2[3] = 9;
 189:Core/Src/bms.c ****         canTx2[4] = val & 0xFF;
 190:Core/Src/bms.c ****         canTx2[5] = (val >> 8) & 0xFF;
 191:Core/Src/bms.c ****         canTx2[6] = (val >> 16) & 0xFF;
 192:Core/Src/bms.c ****         canTx2[7] = (val >> 24) & 0xFF;
 193:Core/Src/bms.c ****         can2tx(0x605, 8, canTx2);
 194:Core/Src/bms.c **** 
 195:Core/Src/bms.c ****     }
 196:Core/Src/bms.c **** }
 197:Core/Src/bms.c **** // Send CAN Data /////////////////////////////////////////////////////////////////////
 198:Core/Src/bms.c **** void tx500kData(void)
 199:Core/Src/bms.c **** {
 200:Core/Src/bms.c **** 
 201:Core/Src/bms.c ****     uint8_t bms0[8];
 202:Core/Src/bms.c ****     bms0[0] = BMS[0].packVolt & 0xFF;
 203:Core/Src/bms.c ****     bms0[1] = (BMS[0].packVolt >> 8) & 0xFF;
ARM GAS  /tmp/ccROOoJg.s 			page 5


 204:Core/Src/bms.c ****     bms0[2] = BMS[0].avgCellTemp & 0XFF;
 205:Core/Src/bms.c ****     bms0[3] = (BMS[0].avgCellTemp >> 8) & 0XFF;
 206:Core/Src/bms.c ****     bms0[4] = BMS[0].cellDelta & 0XFF;
 207:Core/Src/bms.c ****     bms0[5] = (BMS[0].cellDelta >> 8) & 0XFF;
 208:Core/Src/bms.c ****     bms0[6] = (BMS[0].SOC);
 209:Core/Src/bms.c ****     bms0[7] = 0;
 210:Core/Src/bms.c ****     can2tx(0x138, 8, bms0);
 211:Core/Src/bms.c **** 
 212:Core/Src/bms.c ****     uint8_t bms1[8];
 213:Core/Src/bms.c ****     bms1[0] = BMS[1].packVolt & 0xFF;
 214:Core/Src/bms.c ****     bms1[1] = (BMS[1].packVolt >> 8) & 0xFF;
 215:Core/Src/bms.c ****     bms1[2] = BMS[1].avgCellTemp & 0XFF;
 216:Core/Src/bms.c ****     bms1[3] = (BMS[1].avgCellTemp >> 8) & 0XFF;
 217:Core/Src/bms.c ****     bms1[4] = BMS[1].cellDelta & 0XFF;
 218:Core/Src/bms.c ****     bms1[5] = (BMS[1].cellDelta >> 8) & 0XFF;
 219:Core/Src/bms.c ****     bms1[6] = (BMS[1].SOC);
 220:Core/Src/bms.c ****     bms1[7] = 0;
 221:Core/Src/bms.c ****     can2tx(0x139, 8, bms1);
 222:Core/Src/bms.c **** }
 223:Core/Src/bms.c **** 
 224:Core/Src/bms.c **** void refreshData(void)
 225:Core/Src/bms.c **** {
 226:Core/Src/bms.c **** 
 227:Core/Src/bms.c ****     for (size_t i = 0; i < 2; i++)
 228:Core/Src/bms.c ****     {
 229:Core/Src/bms.c ****         //requestBICMdata(&BMS[i], i);
 230:Core/Src/bms.c ****         getPackVolt(&BMS[i]);
 231:Core/Src/bms.c ****         getAvgCellVolt(&BMS[i]);
 232:Core/Src/bms.c ****         getLowCellVolt(&BMS[i]);
 233:Core/Src/bms.c ****         getHighCellVolt(&BMS[i]);
 234:Core/Src/bms.c ****         getCellDelta(&BMS[i]);
 235:Core/Src/bms.c ****         getLowCellTemp(&BMS[i]);
 236:Core/Src/bms.c ****         getHighCellTemp(&BMS[i]);
 237:Core/Src/bms.c ****         getAvgCellTemp(&BMS[i]);
 238:Core/Src/bms.c ****         getTempDelta(&BMS[i]);
 239:Core/Src/bms.c ****         getCellCount(&BMS[i], i);
 240:Core/Src/bms.c ****         getSOC(&BMS[i]);
 241:Core/Src/bms.c ****     }
 242:Core/Src/bms.c **** }
 243:Core/Src/bms.c **** 
 244:Core/Src/bms.c **** // send every 200ms //////////////////////////////////////////////////////////////////
 245:Core/Src/bms.c **** void sendCommand(int pack)
 246:Core/Src/bms.c **** {
 247:Core/Src/bms.c ****     uint8_t canTx[3];
 248:Core/Src/bms.c ****     canTx[0] = 0x02;
 249:Core/Src/bms.c ****     canTx[1] = 0x00;
 250:Core/Src/bms.c ****     canTx[2] = 0x00;
 251:Core/Src/bms.c **** 
 252:Core/Src/bms.c ****     switch (pack)
 253:Core/Src/bms.c ****     {
 254:Core/Src/bms.c ****     case 0:
 255:Core/Src/bms.c ****         can1tx(0x200, 3, canTx);
 256:Core/Src/bms.c ****         break;
 257:Core/Src/bms.c **** 
 258:Core/Src/bms.c ****     case 1:
 259:Core/Src/bms.c ****         can3tx(0x200, 3, canTx);
 260:Core/Src/bms.c ****         break;
ARM GAS  /tmp/ccROOoJg.s 			page 6


 261:Core/Src/bms.c **** 
 262:Core/Src/bms.c ****     default:
 263:Core/Src/bms.c ****         break;
 264:Core/Src/bms.c ****     }
 265:Core/Src/bms.c **** }
 266:Core/Src/bms.c **** 
 267:Core/Src/bms.c **** void requestBICMdata(bms_t *bms, int pack)
 268:Core/Src/bms.c **** {
 269:Core/Src/bms.c **** 
 270:Core/Src/bms.c ****     uint8_t canTx[8];
 271:Core/Src/bms.c ****     if (!bms->balancecells)
 272:Core/Src/bms.c ****     {
 273:Core/Src/bms.c ****         sendCommand(pack);
 274:Core/Src/bms.c ****         for (size_t i = 0; i < 8; i++)
 275:Core/Src/bms.c ****         {
 276:Core/Src/bms.c ****             canTx[i] = 0x00;
 277:Core/Src/bms.c ****         }
 278:Core/Src/bms.c ****         switch (pack)
 279:Core/Src/bms.c ****         {
 280:Core/Src/bms.c ****         case 0:
 281:Core/Src/bms.c ****             can1tx(0x300, 8, canTx);
 282:Core/Src/bms.c ****             break;
 283:Core/Src/bms.c **** 
 284:Core/Src/bms.c ****         case 1:
 285:Core/Src/bms.c ****             can3tx(0x300, 8, canTx);
 286:Core/Src/bms.c ****             break;
 287:Core/Src/bms.c **** 
 288:Core/Src/bms.c ****         default:
 289:Core/Src/bms.c ****             break;
 290:Core/Src/bms.c ****         }
 291:Core/Src/bms.c **** 
 292:Core/Src/bms.c ****         for (size_t i = 0; i < 5; i++)
 293:Core/Src/bms.c ****         {
 294:Core/Src/bms.c ****             canTx[i] = 0x00;
 295:Core/Src/bms.c ****         }
 296:Core/Src/bms.c **** 
 297:Core/Src/bms.c ****         switch (pack)
 298:Core/Src/bms.c ****         {
 299:Core/Src/bms.c ****         case 0:
 300:Core/Src/bms.c ****             can1tx(0x310, 5, canTx);
 301:Core/Src/bms.c ****             break;
 302:Core/Src/bms.c **** 
 303:Core/Src/bms.c ****         case 1:
 304:Core/Src/bms.c ****             can3tx(0x310, 5, canTx);
 305:Core/Src/bms.c ****             break;
 306:Core/Src/bms.c **** 
 307:Core/Src/bms.c ****         default:
 308:Core/Src/bms.c ****             break;
 309:Core/Src/bms.c ****         }
 310:Core/Src/bms.c ****     }
 311:Core/Src/bms.c **** }
 312:Core/Src/bms.c **** 
 313:Core/Src/bms.c **** // send every 200ms //////////////////////////////////////////////////////////////////
 314:Core/Src/bms.c **** void balanceCommand(bms_t *bms, int pack)
 315:Core/Src/bms.c **** {
 316:Core/Src/bms.c ****     sendCommand(pack);
 317:Core/Src/bms.c ****     uint8_t balance[8];
ARM GAS  /tmp/ccROOoJg.s 			page 7


 318:Core/Src/bms.c **** 
 319:Core/Src/bms.c ****     switch (pack)
 320:Core/Src/bms.c ****     {
 321:Core/Src/bms.c ****     case 0:
 322:Core/Src/bms.c ****         for (size_t i = 0; i < 8; i++)
 323:Core/Src/bms.c ****         {
 324:Core/Src/bms.c ****             balance[i] = 0;
 325:Core/Src/bms.c ****         }
 326:Core/Src/bms.c **** 
 327:Core/Src/bms.c ****         for (size_t i = 0; i < 62; i++)
 328:Core/Src/bms.c ****         {
 329:Core/Src/bms.c ****             if (bms->avgCellVolt < bms->cellVolt[i])
 330:Core/Src/bms.c ****             {
 331:Core/Src/bms.c ****                 balance[balanceByte[i]] |= balanceShift[i];
 332:Core/Src/bms.c ****             }
 333:Core/Src/bms.c ****         }
 334:Core/Src/bms.c ****         can1tx(0x300, 8, balance);
 335:Core/Src/bms.c **** 
 336:Core/Src/bms.c ****         for (size_t i = 0; i < 8; i++)
 337:Core/Src/bms.c ****         {
 338:Core/Src/bms.c ****             balance[i] = 0;
 339:Core/Src/bms.c ****         }
 340:Core/Src/bms.c **** 
 341:Core/Src/bms.c ****         for (size_t i = 62; i < 96; i++)
 342:Core/Src/bms.c ****         {
 343:Core/Src/bms.c ****             if (bms->avgCellVolt < bms->cellVolt[i])
 344:Core/Src/bms.c ****             {
 345:Core/Src/bms.c ****                 balance[balanceByte[i]] |= balanceShift[i];
 346:Core/Src/bms.c ****             }
 347:Core/Src/bms.c ****         }
 348:Core/Src/bms.c ****         can1tx(0x310, 5, balance);
 349:Core/Src/bms.c ****         break;
 350:Core/Src/bms.c **** 
 351:Core/Src/bms.c ****     case 1:
 352:Core/Src/bms.c **** 
 353:Core/Src/bms.c ****         for (size_t i = 0; i < 8; i++)
 354:Core/Src/bms.c ****         {
 355:Core/Src/bms.c ****             balance[i] = 0;
 356:Core/Src/bms.c ****         }
 357:Core/Src/bms.c ****         for (size_t i = 0; i < 62; i++)
 358:Core/Src/bms.c ****         {
 359:Core/Src/bms.c ****             if (bms->avgCellVolt < bms->cellVolt[i])
 360:Core/Src/bms.c ****             {
 361:Core/Src/bms.c ****                 balance[balanceByte[i]] |= balanceShift[i];
 362:Core/Src/bms.c ****             }
 363:Core/Src/bms.c ****         }
 364:Core/Src/bms.c ****         can3tx(0x300, 8, balance);
 365:Core/Src/bms.c **** 
 366:Core/Src/bms.c ****         for (size_t i = 0; i < 8; i++)
 367:Core/Src/bms.c ****         {
 368:Core/Src/bms.c ****             balance[i] = 0;
 369:Core/Src/bms.c ****         }
 370:Core/Src/bms.c ****         for (size_t i = 62; i < 96; i++)
 371:Core/Src/bms.c ****         {
 372:Core/Src/bms.c ****             if (bms->avgCellVolt < bms->cellVolt[i])
 373:Core/Src/bms.c ****             {
 374:Core/Src/bms.c ****                 balance[balanceByte[i]] |= balanceShift[i];
ARM GAS  /tmp/ccROOoJg.s 			page 8


 375:Core/Src/bms.c ****             }
 376:Core/Src/bms.c ****         }
 377:Core/Src/bms.c ****         can3tx(0x310, 5, balance);
 378:Core/Src/bms.c ****         break;
 379:Core/Src/bms.c **** 
 380:Core/Src/bms.c ****     default:
 381:Core/Src/bms.c ****         break;
 382:Core/Src/bms.c ****     }
 383:Core/Src/bms.c **** }
 384:Core/Src/bms.c **** 
 385:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 386:Core/Src/bms.c **** void getSOC(bms_t *bms)
 387:Core/Src/bms.c **** {
  27              		.loc 1 387 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 388:Core/Src/bms.c ****     bms->SOC = MAP(bms->avgCellVolt, SOC_VOLT_10, SOC_VOLT_90, 10, 90);
  33              		.loc 1 388 0
  34 0000 B0F8E620 		ldrh	r2, [r0, #230]
  35 0004 A2F61C42 		subw	r2, r2, #3100
  36 0008 02EB8202 		add	r2, r2, r2, lsl #2
  37 000c 1301     		lsls	r3, r2, #4
  38 000e 054A     		ldr	r2, .L2
  39 0010 82FB0312 		smull	r1, r2, r2, r3
  40 0014 DB17     		asrs	r3, r3, #31
  41 0016 C3EBA213 		rsb	r3, r3, r2, asr #6
  42 001a 0A33     		adds	r3, r3, #10
  43 001c 80F8F330 		strb	r3, [r0, #243]
  44 0020 7047     		bx	lr
  45              	.L3:
  46 0022 00BF     		.align	2
  47              	.L2:
  48 0024 D34D6210 		.word	274877907
  49              		.cfi_endproc
  50              	.LFE139:
  52              		.section	.text.getHighCellVolt,"ax",%progbits
  53              		.align	1
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	getHighCellVolt:
  60              	.LFB140:
 389:Core/Src/bms.c ****     /*
 390:Core/Src/bms.c ****     // subtract the last reading:
 391:Core/Src/bms.c ****     total = total - readings[readIndex];
 392:Core/Src/bms.c ****     // read from the sensor:
 393:Core/Src/bms.c ****     readings[readIndex] = bms->SOC;
 394:Core/Src/bms.c ****     // add the reading to the total:
 395:Core/Src/bms.c ****     total = total + readings[readIndex];
 396:Core/Src/bms.c ****     // advance to the next position in the array:
 397:Core/Src/bms.c ****     readIndex = readIndex + 1;
 398:Core/Src/bms.c ****     // if we're at the end of the array...
 399:Core/Src/bms.c ****     if (readIndex >= numReadings)
ARM GAS  /tmp/ccROOoJg.s 			page 9


 400:Core/Src/bms.c ****     {
 401:Core/Src/bms.c ****         // ...wrap around to the beginning:
 402:Core/Src/bms.c ****         readIndex = 0;
 403:Core/Src/bms.c ****     }
 404:Core/Src/bms.c ****     // calculate the average:
 405:Core/Src/bms.c ****     average = total / numReadings;
 406:Core/Src/bms.c ****     */
 407:Core/Src/bms.c **** }
 408:Core/Src/bms.c **** 
 409:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 410:Core/Src/bms.c **** void getHighCellVolt(bms_t *bms)
 411:Core/Src/bms.c **** {
  61              		.loc 1 411 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL1:
 412:Core/Src/bms.c ****     bms->highCellVolt = 0;
  67              		.loc 1 412 0
  68 0000 0023     		movs	r3, #0
  69 0002 A0F8E430 		strh	r3, [r0, #228]	@ movhi
  70              	.LVL2:
  71              	.LBB2:
 413:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
  72              		.loc 1 413 0
  73 0006 00E0     		b	.L5
  74              	.LVL3:
  75              	.L6:
  76              		.loc 1 413 0 is_stmt 0 discriminator 2
  77 0008 0133     		adds	r3, r3, #1
  78              	.LVL4:
  79              	.L5:
  80              		.loc 1 413 0 discriminator 1
  81 000a 5F2B     		cmp	r3, #95
  82 000c 08D8     		bhi	.L8
 414:Core/Src/bms.c ****     {
 415:Core/Src/bms.c ****         if (bms->cellVolt[i] > bms->highCellVolt)
  83              		.loc 1 415 0 is_stmt 1
  84 000e 30F81320 		ldrh	r2, [r0, r3, lsl #1]
  85 0012 B0F8E410 		ldrh	r1, [r0, #228]
  86 0016 8A42     		cmp	r2, r1
  87 0018 F6D9     		bls	.L6
 416:Core/Src/bms.c ****         {
 417:Core/Src/bms.c ****             bms->highCellVolt = bms->cellVolt[i];
  88              		.loc 1 417 0
  89 001a A0F8E420 		strh	r2, [r0, #228]	@ movhi
  90 001e F3E7     		b	.L6
  91              	.L8:
  92              	.LBE2:
 418:Core/Src/bms.c ****         }
 419:Core/Src/bms.c ****     }
 420:Core/Src/bms.c **** }
  93              		.loc 1 420 0
  94 0020 7047     		bx	lr
  95              		.cfi_endproc
  96              	.LFE140:
ARM GAS  /tmp/ccROOoJg.s 			page 10


  98              		.section	.text.getHighCellTemp,"ax",%progbits
  99              		.align	1
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 103              		.fpu fpv4-sp-d16
 105              	getHighCellTemp:
 106              	.LFB141:
 421:Core/Src/bms.c **** 
 422:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 423:Core/Src/bms.c **** void getHighCellTemp(bms_t *bms)
 424:Core/Src/bms.c **** {
 107              		.loc 1 424 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 112              	.LVL5:
 425:Core/Src/bms.c ****     bms->highCellTemp = 0;
 113              		.loc 1 425 0
 114 0000 0023     		movs	r3, #0
 115 0002 A0F8EA30 		strh	r3, [r0, #234]	@ movhi
 116              	.LVL6:
 117              	.LBB3:
 426:Core/Src/bms.c ****     for (size_t i = 0; i < 16; i++)
 118              		.loc 1 426 0
 119 0006 00E0     		b	.L10
 120              	.LVL7:
 121              	.L11:
 122              		.loc 1 426 0 is_stmt 0 discriminator 2
 123 0008 0133     		adds	r3, r3, #1
 124              	.LVL8:
 125              	.L10:
 126              		.loc 1 426 0 discriminator 1
 127 000a 0F2B     		cmp	r3, #15
 128 000c 0AD8     		bhi	.L13
 427:Core/Src/bms.c ****     {
 428:Core/Src/bms.c ****         if (bms->tempSensor[i] > bms->highCellTemp)
 129              		.loc 1 428 0 is_stmt 1
 130 000e 03F16002 		add	r2, r3, #96
 131 0012 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 132 0016 B0F8EA10 		ldrh	r1, [r0, #234]
 133 001a 8A42     		cmp	r2, r1
 134 001c F4D9     		bls	.L11
 429:Core/Src/bms.c ****         {
 430:Core/Src/bms.c ****             bms->highCellTemp = bms->tempSensor[i];
 135              		.loc 1 430 0
 136 001e A0F8EA20 		strh	r2, [r0, #234]	@ movhi
 137 0022 F1E7     		b	.L11
 138              	.L13:
 139              	.LBE3:
 431:Core/Src/bms.c ****         }
 432:Core/Src/bms.c ****     }
 433:Core/Src/bms.c **** }
 140              		.loc 1 433 0
 141 0024 7047     		bx	lr
 142              		.cfi_endproc
ARM GAS  /tmp/ccROOoJg.s 			page 11


 143              	.LFE141:
 145              		.section	.text.getLowCellTemp,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv4-sp-d16
 152              	getLowCellTemp:
 153              	.LFB142:
 434:Core/Src/bms.c **** 
 435:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 436:Core/Src/bms.c **** void getLowCellTemp(bms_t *bms)
 437:Core/Src/bms.c **** {
 154              		.loc 1 437 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		@ link register save eliminated.
 159              	.LVL9:
 438:Core/Src/bms.c ****     bms->lowCellTemp = 20000;
 160              		.loc 1 438 0
 161 0000 44F62063 		movw	r3, #20000
 162 0004 A0F8EC30 		strh	r3, [r0, #236]	@ movhi
 163              	.LVL10:
 164              	.LBB4:
 439:Core/Src/bms.c ****     for (size_t i = 0; i < 16; i++)
 165              		.loc 1 439 0
 166 0008 0023     		movs	r3, #0
 167 000a 00E0     		b	.L15
 168              	.LVL11:
 169              	.L16:
 170              		.loc 1 439 0 is_stmt 0 discriminator 2
 171 000c 0133     		adds	r3, r3, #1
 172              	.LVL12:
 173              	.L15:
 174              		.loc 1 439 0 discriminator 1
 175 000e 0F2B     		cmp	r3, #15
 176 0010 0CD8     		bhi	.L18
 440:Core/Src/bms.c ****     {
 441:Core/Src/bms.c ****         if (bms->tempSensor[i] > 0)
 177              		.loc 1 441 0 is_stmt 1
 178 0012 03F16002 		add	r2, r3, #96
 179 0016 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 180 001a 002A     		cmp	r2, #0
 181 001c F6D0     		beq	.L16
 442:Core/Src/bms.c ****         {
 443:Core/Src/bms.c ****             if (bms->tempSensor[i] < bms->lowCellTemp)
 182              		.loc 1 443 0
 183 001e B0F8EC10 		ldrh	r1, [r0, #236]
 184 0022 8A42     		cmp	r2, r1
 185 0024 F2D2     		bcs	.L16
 444:Core/Src/bms.c ****             {
 445:Core/Src/bms.c ****                 bms->lowCellTemp = bms->tempSensor[i];
 186              		.loc 1 445 0
 187 0026 A0F8EC20 		strh	r2, [r0, #236]	@ movhi
 188 002a EFE7     		b	.L16
 189              	.L18:
ARM GAS  /tmp/ccROOoJg.s 			page 12


 190              	.LBE4:
 446:Core/Src/bms.c ****             }
 447:Core/Src/bms.c ****         }
 448:Core/Src/bms.c ****     }
 449:Core/Src/bms.c **** }
 191              		.loc 1 449 0
 192 002c 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE142:
 196              		.section	.text.getAvgCellTemp,"ax",%progbits
 197              		.align	1
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
 203              	getAvgCellTemp:
 204              	.LFB143:
 450:Core/Src/bms.c **** 
 451:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 452:Core/Src/bms.c **** void getAvgCellTemp(bms_t *bms)
 453:Core/Src/bms.c **** {
 205              		.loc 1 453 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              		@ link register save eliminated.
 210              	.LVL13:
 211 0000 10B4     		push	{r4}
 212              	.LCFI0:
 213              		.cfi_def_cfa_offset 4
 214              		.cfi_offset 4, -4
 215              	.LVL14:
 216              	.LBB5:
 454:Core/Src/bms.c ****     int zeroCounter = 0;
 455:Core/Src/bms.c ****     int sumTemp = 0;
 456:Core/Src/bms.c ****     for (size_t i = 0; i < 16; i++)
 217              		.loc 1 456 0
 218 0002 0023     		movs	r3, #0
 219              	.LBE5:
 455:Core/Src/bms.c ****     for (size_t i = 0; i < 16; i++)
 220              		.loc 1 455 0
 221 0004 1946     		mov	r1, r3
 454:Core/Src/bms.c ****     int zeroCounter = 0;
 222              		.loc 1 454 0
 223 0006 1C46     		mov	r4, r3
 224              	.LBB6:
 225              		.loc 1 456 0
 226 0008 01E0     		b	.L20
 227              	.LVL15:
 228              	.L21:
 457:Core/Src/bms.c ****     {
 458:Core/Src/bms.c ****         if (bms->tempSensor[i] == 0) //IGNORE_TEMP)
 459:Core/Src/bms.c ****         {
 460:Core/Src/bms.c ****             zeroCounter++;
 461:Core/Src/bms.c ****         }
 462:Core/Src/bms.c **** 
 463:Core/Src/bms.c ****         sumTemp += bms->tempSensor[i];
ARM GAS  /tmp/ccROOoJg.s 			page 13


 229              		.loc 1 463 0 discriminator 2
 230 000a 1144     		add	r1, r1, r2
 231              	.LVL16:
 456:Core/Src/bms.c ****     {
 232              		.loc 1 456 0 discriminator 2
 233 000c 0133     		adds	r3, r3, #1
 234              	.LVL17:
 235              	.L20:
 456:Core/Src/bms.c ****     {
 236              		.loc 1 456 0 is_stmt 0 discriminator 1
 237 000e 0F2B     		cmp	r3, #15
 238 0010 07D8     		bhi	.L24
 458:Core/Src/bms.c ****         {
 239              		.loc 1 458 0 is_stmt 1
 240 0012 03F16002 		add	r2, r3, #96
 241 0016 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 242 001a 002A     		cmp	r2, #0
 243 001c F5D1     		bne	.L21
 460:Core/Src/bms.c ****         }
 244              		.loc 1 460 0
 245 001e 0134     		adds	r4, r4, #1
 246              	.LVL18:
 247 0020 F3E7     		b	.L21
 248              	.L24:
 249              	.LBE6:
 464:Core/Src/bms.c ****     }
 465:Core/Src/bms.c ****     bms->avgCellTemp = (sumTemp / (16 - zeroCounter));
 250              		.loc 1 465 0
 251 0022 C4F11004 		rsb	r4, r4, #16
 252              	.LVL19:
 253 0026 91FBF4F1 		sdiv	r1, r1, r4
 254              	.LVL20:
 255 002a A0F8EE10 		strh	r1, [r0, #238]	@ movhi
 466:Core/Src/bms.c **** }
 256              		.loc 1 466 0
 257 002e 5DF8044B 		ldr	r4, [sp], #4
 258              	.LCFI1:
 259              		.cfi_restore 4
 260              		.cfi_def_cfa_offset 0
 261 0032 7047     		bx	lr
 262              		.cfi_endproc
 263              	.LFE143:
 265              		.section	.text.getTempDelta,"ax",%progbits
 266              		.align	1
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 270              		.fpu fpv4-sp-d16
 272              	getTempDelta:
 273              	.LFB144:
 467:Core/Src/bms.c **** 
 468:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 469:Core/Src/bms.c **** void getTempDelta(bms_t *bms)
 470:Core/Src/bms.c **** {
 274              		.loc 1 470 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccROOoJg.s 			page 14


 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 279              	.LVL21:
 471:Core/Src/bms.c ****     bms->tempDelta = bms->highCellTemp - bms->lowCellTemp;
 280              		.loc 1 471 0
 281 0000 B0F8EA30 		ldrh	r3, [r0, #234]
 282 0004 B0F8EC20 		ldrh	r2, [r0, #236]
 283 0008 9B1A     		subs	r3, r3, r2
 284 000a A0F8F030 		strh	r3, [r0, #240]	@ movhi
 285 000e 7047     		bx	lr
 286              		.cfi_endproc
 287              	.LFE144:
 289              		.section	.text.getCellDelta,"ax",%progbits
 290              		.align	1
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	getCellDelta:
 297              	.LFB145:
 472:Core/Src/bms.c **** }
 473:Core/Src/bms.c **** 
 474:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 475:Core/Src/bms.c **** void getCellDelta(bms_t *bms)
 476:Core/Src/bms.c **** {
 298              		.loc 1 476 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 303              	.LVL22:
 477:Core/Src/bms.c ****     bms->cellDelta = bms->highCellVolt - bms->lowCellVolt;
 304              		.loc 1 477 0
 305 0000 B0F8E430 		ldrh	r3, [r0, #228]
 306 0004 B0F8E220 		ldrh	r2, [r0, #226]
 307 0008 9B1A     		subs	r3, r3, r2
 308 000a A0F8E830 		strh	r3, [r0, #232]	@ movhi
 309 000e 7047     		bx	lr
 310              		.cfi_endproc
 311              	.LFE145:
 313              		.section	.text.getLowCellVolt,"ax",%progbits
 314              		.align	1
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu fpv4-sp-d16
 320              	getLowCellVolt:
 321              	.LFB146:
 478:Core/Src/bms.c **** }
 479:Core/Src/bms.c **** 
 480:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 481:Core/Src/bms.c **** void getLowCellVolt(bms_t *bms)
 482:Core/Src/bms.c **** {
 322              		.loc 1 482 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccROOoJg.s 			page 15


 326              		@ link register save eliminated.
 327              	.LVL23:
 483:Core/Src/bms.c ****     bms->lowCellVolt = 5000;
 328              		.loc 1 483 0
 329 0000 41F28833 		movw	r3, #5000
 330 0004 A0F8E230 		strh	r3, [r0, #226]	@ movhi
 331              	.LVL24:
 332              	.LBB7:
 484:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
 333              		.loc 1 484 0
 334 0008 0023     		movs	r3, #0
 335 000a 00E0     		b	.L28
 336              	.LVL25:
 337              	.L29:
 338              		.loc 1 484 0 is_stmt 0 discriminator 2
 339 000c 0133     		adds	r3, r3, #1
 340              	.LVL26:
 341              	.L28:
 342              		.loc 1 484 0 discriminator 1
 343 000e 5F2B     		cmp	r3, #95
 344 0010 08D8     		bhi	.L31
 485:Core/Src/bms.c ****     {
 486:Core/Src/bms.c ****         if (bms->cellVolt[i] < bms->lowCellVolt)
 345              		.loc 1 486 0 is_stmt 1
 346 0012 30F81320 		ldrh	r2, [r0, r3, lsl #1]
 347 0016 B0F8E210 		ldrh	r1, [r0, #226]
 348 001a 8A42     		cmp	r2, r1
 349 001c F6D2     		bcs	.L29
 487:Core/Src/bms.c ****         {
 488:Core/Src/bms.c ****             bms->lowCellVolt = bms->cellVolt[i];
 350              		.loc 1 488 0
 351 001e A0F8E220 		strh	r2, [r0, #226]	@ movhi
 352 0022 F3E7     		b	.L29
 353              	.L31:
 354              	.LBE7:
 489:Core/Src/bms.c ****         }
 490:Core/Src/bms.c ****     }
 491:Core/Src/bms.c **** }
 355              		.loc 1 491 0
 356 0024 7047     		bx	lr
 357              		.cfi_endproc
 358              	.LFE146:
 360              		.section	.text.getAvgCellVolt,"ax",%progbits
 361              		.align	1
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 365              		.fpu fpv4-sp-d16
 367              	getAvgCellVolt:
 368              	.LFB147:
 492:Core/Src/bms.c **** 
 493:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 494:Core/Src/bms.c **** void getAvgCellVolt(bms_t *bms)
 495:Core/Src/bms.c **** {
 369              		.loc 1 495 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccROOoJg.s 			page 16


 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 374              	.LVL27:
 375              	.LBB8:
 496:Core/Src/bms.c **** 
 497:Core/Src/bms.c ****     int cellSum = 0;
 498:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
 376              		.loc 1 498 0
 377 0000 0023     		movs	r3, #0
 378              	.LBE8:
 497:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
 379              		.loc 1 497 0
 380 0002 1A46     		mov	r2, r3
 381              	.LBB9:
 382              		.loc 1 498 0
 383 0004 03E0     		b	.L33
 384              	.LVL28:
 385              	.L34:
 499:Core/Src/bms.c ****     {
 500:Core/Src/bms.c **** 
 501:Core/Src/bms.c ****         cellSum += bms->cellVolt[i];
 386              		.loc 1 501 0 discriminator 3
 387 0006 30F81310 		ldrh	r1, [r0, r3, lsl #1]
 388 000a 0A44     		add	r2, r2, r1
 389              	.LVL29:
 498:Core/Src/bms.c ****     {
 390              		.loc 1 498 0 discriminator 3
 391 000c 0133     		adds	r3, r3, #1
 392              	.LVL30:
 393              	.L33:
 498:Core/Src/bms.c ****     {
 394              		.loc 1 498 0 is_stmt 0 discriminator 1
 395 000e 5F2B     		cmp	r3, #95
 396 0010 F9D9     		bls	.L34
 397              	.LBE9:
 502:Core/Src/bms.c ****     }
 503:Core/Src/bms.c ****     bms->avgCellVolt = (cellSum / 96);
 398              		.loc 1 503 0 is_stmt 1
 399 0012 0449     		ldr	r1, .L35
 400 0014 81FB0231 		smull	r3, r1, r1, r2
 401              	.LVL31:
 402 0018 D317     		asrs	r3, r2, #31
 403 001a C3EB2113 		rsb	r3, r3, r1, asr #4
 404 001e A0F8E630 		strh	r3, [r0, #230]	@ movhi
 405 0022 7047     		bx	lr
 406              	.L36:
 407              		.align	2
 408              	.L35:
 409 0024 ABAAAA2A 		.word	715827883
 410              		.cfi_endproc
 411              	.LFE147:
 413              		.section	.text.getPackVolt,"ax",%progbits
 414              		.align	1
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 418              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccROOoJg.s 			page 17


 420              	getPackVolt:
 421              	.LFB148:
 504:Core/Src/bms.c **** }
 505:Core/Src/bms.c **** 
 506:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 507:Core/Src/bms.c **** void getPackVolt(bms_t *bms)
 508:Core/Src/bms.c **** {
 422              		.loc 1 508 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              		@ link register save eliminated.
 427              	.LVL32:
 428              	.LBB10:
 509:Core/Src/bms.c ****     uint32_t packSum = 0;
 510:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
 429              		.loc 1 510 0
 430 0000 0023     		movs	r3, #0
 431              	.LBE10:
 509:Core/Src/bms.c ****     uint32_t packSum = 0;
 432              		.loc 1 509 0
 433 0002 1A46     		mov	r2, r3
 434              	.LBB11:
 435              		.loc 1 510 0
 436 0004 03E0     		b	.L38
 437              	.LVL33:
 438              	.L39:
 511:Core/Src/bms.c ****     {
 512:Core/Src/bms.c ****         packSum += bms->cellVolt[i];
 439              		.loc 1 512 0 discriminator 3
 440 0006 30F81310 		ldrh	r1, [r0, r3, lsl #1]
 441 000a 0A44     		add	r2, r2, r1
 442              	.LVL34:
 510:Core/Src/bms.c ****     {
 443              		.loc 1 510 0 discriminator 3
 444 000c 0133     		adds	r3, r3, #1
 445              	.LVL35:
 446              	.L38:
 510:Core/Src/bms.c ****     {
 447              		.loc 1 510 0 is_stmt 0 discriminator 1
 448 000e 5F2B     		cmp	r3, #95
 449 0010 F9D9     		bls	.L39
 450              	.LBE11:
 513:Core/Src/bms.c ****     }
 514:Core/Src/bms.c ****     bms->packVolt = packSum / 10;
 451              		.loc 1 514 0 is_stmt 1
 452 0012 034B     		ldr	r3, .L40
 453              	.LVL36:
 454 0014 A3FB0223 		umull	r2, r3, r3, r2
 455              	.LVL37:
 456 0018 DB08     		lsrs	r3, r3, #3
 457 001a A0F8E030 		strh	r3, [r0, #224]	@ movhi
 458 001e 7047     		bx	lr
 459              	.L41:
 460              		.align	2
 461              	.L40:
 462 0020 CDCCCCCC 		.word	-858993459
ARM GAS  /tmp/ccROOoJg.s 			page 18


 463              		.cfi_endproc
 464              	.LFE148:
 466              		.section	.text.getCellCount,"ax",%progbits
 467              		.align	1
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu fpv4-sp-d16
 473              	getCellCount:
 474              	.LFB149:
 515:Core/Src/bms.c **** }
 516:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 517:Core/Src/bms.c **** void getCellCount(bms_t *bms, int pack)
 518:Core/Src/bms.c **** {
 475              		.loc 1 518 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 480              	.LVL38:
 481 0000 10B4     		push	{r4}
 482              	.LCFI2:
 483              		.cfi_def_cfa_offset 4
 484              		.cfi_offset 4, -4
 485              	.LVL39:
 486              	.LBB12:
 519:Core/Src/bms.c ****     uint16_t cellCount = 0;
 520:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
 487              		.loc 1 520 0
 488 0002 0023     		movs	r3, #0
 489              	.LBE12:
 519:Core/Src/bms.c ****     uint16_t cellCount = 0;
 490              		.loc 1 519 0
 491 0004 1A46     		mov	r2, r3
 492              	.LBB13:
 493              		.loc 1 520 0
 494 0006 00E0     		b	.L43
 495              	.LVL40:
 496              	.L44:
 497              		.loc 1 520 0 is_stmt 0 discriminator 2
 498 0008 0133     		adds	r3, r3, #1
 499              	.LVL41:
 500              	.L43:
 501              		.loc 1 520 0 discriminator 1
 502 000a 5F2B     		cmp	r3, #95
 503 000c 07D8     		bhi	.L48
 521:Core/Src/bms.c ****     {
 522:Core/Src/bms.c ****         if (bms->cellVolt[i] > IGNORE_VOLT)
 504              		.loc 1 522 0 is_stmt 1
 505 000e 30F81340 		ldrh	r4, [r0, r3, lsl #1]
 506 0012 B4F5FA7F 		cmp	r4, #500
 507 0016 F7D9     		bls	.L44
 523:Core/Src/bms.c ****         {
 524:Core/Src/bms.c ****             cellCount++;
 508              		.loc 1 524 0
 509 0018 0132     		adds	r2, r2, #1
 510              	.LVL42:
ARM GAS  /tmp/ccROOoJg.s 			page 19


 511 001a 92B2     		uxth	r2, r2
 512              	.LVL43:
 513 001c F4E7     		b	.L44
 514              	.L48:
 515              	.LBE13:
 525:Core/Src/bms.c ****         }
 526:Core/Src/bms.c ****     }
 527:Core/Src/bms.c ****     if (cellCount != 96)
 516              		.loc 1 527 0
 517 001e 602A     		cmp	r2, #96
 518 0020 0CD0     		beq	.L42
 528:Core/Src/bms.c ****     {
 529:Core/Src/bms.c ****         //BMS[pack].state = Error;
 530:Core/Src/bms.c ****         errorCount++;
 519              		.loc 1 530 0
 520 0022 084A     		ldr	r2, .L49
 521              	.LVL44:
 522 0024 1368     		ldr	r3, [r2]
 523              	.LVL45:
 524 0026 0133     		adds	r3, r3, #1
 525 0028 1360     		str	r3, [r2]
 531:Core/Src/bms.c ****         if (errorCount > 5)
 526              		.loc 1 531 0
 527 002a 052B     		cmp	r3, #5
 528 002c 06DD     		ble	.L42
 532:Core/Src/bms.c ****         {
 533:Core/Src/bms.c ****             BMS[pack].state = Error;
 529              		.loc 1 533 0
 530 002e F622     		movs	r2, #246
 531 0030 054B     		ldr	r3, .L49+4
 532 0032 02FB0131 		mla	r1, r2, r1, r3
 533              	.LVL46:
 534 0036 0423     		movs	r3, #4
 535 0038 81F8F230 		strb	r3, [r1, #242]
 536              	.L42:
 534:Core/Src/bms.c ****         }
 535:Core/Src/bms.c ****     }
 536:Core/Src/bms.c **** }
 537              		.loc 1 536 0
 538 003c 5DF8044B 		ldr	r4, [sp], #4
 539              	.LCFI3:
 540              		.cfi_restore 4
 541              		.cfi_def_cfa_offset 0
 542 0040 7047     		bx	lr
 543              	.L50:
 544 0042 00BF     		.align	2
 545              	.L49:
 546 0044 00000000 		.word	.LANCHOR0
 547 0048 00000000 		.word	BMS
 548              		.cfi_endproc
 549              	.LFE149:
 551              		.section	.text.initBMS,"ax",%progbits
 552              		.align	1
 553              		.global	initBMS
 554              		.syntax unified
 555              		.thumb
 556              		.thumb_func
ARM GAS  /tmp/ccROOoJg.s 			page 20


 557              		.fpu fpv4-sp-d16
 559              	initBMS:
 560              	.LFB131:
  79:Core/Src/bms.c ****     for (size_t i = 0; i < 2; i++)
 561              		.loc 1 79 0
 562              		.cfi_startproc
 563              		@ args = 0, pretend = 0, frame = 0
 564              		@ frame_needed = 0, uses_anonymous_args = 0
 565              		@ link register save eliminated.
 566 0000 10B4     		push	{r4}
 567              	.LCFI4:
 568              		.cfi_def_cfa_offset 4
 569              		.cfi_offset 4, -4
 570              	.LVL47:
 571              	.LBB14:
  80:Core/Src/bms.c ****     {
 572              		.loc 1 80 0
 573 0002 0021     		movs	r1, #0
 574 0004 1BE0     		b	.L52
 575              	.LVL48:
 576              	.L54:
 577              	.LBB15:
  95:Core/Src/bms.c ****         }
 578              		.loc 1 95 0 discriminator 3
 579 0006 C1EB4113 		rsb	r3, r1, r1, lsl #5
 580 000a C1EB8303 		rsb	r3, r1, r3, lsl #2
 581 000e 1344     		add	r3, r3, r2
 582 0010 0024     		movs	r4, #0
 583 0012 1E48     		ldr	r0, .L60
 584 0014 20F81340 		strh	r4, [r0, r3, lsl #1]	@ movhi
  93:Core/Src/bms.c ****         {
 585              		.loc 1 93 0 discriminator 3
 586 0018 0132     		adds	r2, r2, #1
 587              	.LVL49:
 588              	.L53:
  93:Core/Src/bms.c ****         {
 589              		.loc 1 93 0 is_stmt 0 discriminator 1
 590 001a 5F2A     		cmp	r2, #95
 591 001c F3D9     		bls	.L54
 592 001e 0022     		movs	r2, #0
 593              	.LVL50:
 594 0020 0AE0     		b	.L55
 595              	.LVL51:
 596              	.L56:
 597              	.LBE15:
 598              	.LBB16:
 100:Core/Src/bms.c ****         }
 599              		.loc 1 100 0 is_stmt 1 discriminator 3
 600 0022 C1EB4113 		rsb	r3, r1, r1, lsl #5
 601 0026 C1EB8303 		rsb	r3, r1, r3, lsl #2
 602 002a 1344     		add	r3, r3, r2
 603 002c 6033     		adds	r3, r3, #96
 604 002e 0024     		movs	r4, #0
 605 0030 1648     		ldr	r0, .L60
 606 0032 20F81340 		strh	r4, [r0, r3, lsl #1]	@ movhi
  98:Core/Src/bms.c ****         {
 607              		.loc 1 98 0 discriminator 3
ARM GAS  /tmp/ccROOoJg.s 			page 21


 608 0036 0132     		adds	r2, r2, #1
 609              	.LVL52:
 610              	.L55:
  98:Core/Src/bms.c ****         {
 611              		.loc 1 98 0 is_stmt 0 discriminator 1
 612 0038 0F2A     		cmp	r2, #15
 613 003a F2D9     		bls	.L56
 614              	.LBE16:
  80:Core/Src/bms.c ****     {
 615              		.loc 1 80 0 is_stmt 1 discriminator 2
 616 003c 0131     		adds	r1, r1, #1
 617              	.LVL53:
 618              	.L52:
  80:Core/Src/bms.c ****     {
 619              		.loc 1 80 0 is_stmt 0 discriminator 1
 620 003e 0129     		cmp	r1, #1
 621 0040 19D8     		bhi	.L59
  82:Core/Src/bms.c ****         BMS[i].cellDelta = 0;
 622              		.loc 1 82 0 is_stmt 1
 623 0042 F623     		movs	r3, #246
 624 0044 114A     		ldr	r2, .L60
 625 0046 03FB0123 		mla	r3, r3, r1, r2
 626 004a 0022     		movs	r2, #0
 627 004c 83F8F220 		strb	r2, [r3, #242]
  83:Core/Src/bms.c ****         BMS[i].highCellTemp = 0;
 628              		.loc 1 83 0
 629 0050 A3F8E820 		strh	r2, [r3, #232]	@ movhi
  84:Core/Src/bms.c ****         BMS[i].chargeRequest = 0;
 630              		.loc 1 84 0
 631 0054 A3F8EA20 		strh	r2, [r3, #234]	@ movhi
  85:Core/Src/bms.c ****         BMS[i].highCellVolt = 0;
 632              		.loc 1 85 0
 633 0058 83F8F420 		strb	r2, [r3, #244]
  86:Core/Src/bms.c ****         BMS[i].lowCellVolt = 0;
 634              		.loc 1 86 0
 635 005c A3F8E420 		strh	r2, [r3, #228]	@ movhi
  87:Core/Src/bms.c ****         BMS[i].lowCellTemp = 0;
 636              		.loc 1 87 0
 637 0060 A3F8E220 		strh	r2, [r3, #226]	@ movhi
  88:Core/Src/bms.c ****         BMS[i].packVolt = 0;
 638              		.loc 1 88 0
 639 0064 A3F8EC20 		strh	r2, [r3, #236]	@ movhi
  89:Core/Src/bms.c ****         BMS[i].SOC = 0;
 640              		.loc 1 89 0
 641 0068 A3F8E020 		strh	r2, [r3, #224]	@ movhi
  90:Core/Src/bms.c ****         BMS[i].tempDelta = 0;
 642              		.loc 1 90 0
 643 006c 83F8F320 		strb	r2, [r3, #243]
  91:Core/Src/bms.c **** 
 644              		.loc 1 91 0
 645 0070 A3F8F020 		strh	r2, [r3, #240]	@ movhi
 646              	.LVL54:
 647              	.LBB17:
  93:Core/Src/bms.c ****         {
 648              		.loc 1 93 0
 649 0074 D1E7     		b	.L53
 650              	.LVL55:
ARM GAS  /tmp/ccROOoJg.s 			page 22


 651              	.L59:
 652              	.LBE17:
 653              	.LBE14:
 104:Core/Src/bms.c ****     chargerOn = false;
 654              		.loc 1 104 0
 655 0076 0023     		movs	r3, #0
 656 0078 054A     		ldr	r2, .L60+4
 657 007a 1370     		strb	r3, [r2]
 105:Core/Src/bms.c ****     errorCount = 0;
 658              		.loc 1 105 0
 659 007c 054A     		ldr	r2, .L60+8
 660 007e 1370     		strb	r3, [r2]
 106:Core/Src/bms.c **** 
 661              		.loc 1 106 0
 662 0080 054A     		ldr	r2, .L60+12
 663 0082 1360     		str	r3, [r2]
 108:Core/Src/bms.c **** 
 664              		.loc 1 108 0
 665 0084 5DF8044B 		ldr	r4, [sp], #4
 666              	.LCFI5:
 667              		.cfi_restore 4
 668              		.cfi_def_cfa_offset 0
 669 0088 7047     		bx	lr
 670              	.L61:
 671 008a 00BF     		.align	2
 672              	.L60:
 673 008c 00000000 		.word	BMS
 674 0090 00000000 		.word	watchdogBits
 675 0094 00000000 		.word	chargerOn
 676 0098 00000000 		.word	.LANCHOR0
 677              		.cfi_endproc
 678              	.LFE131:
 680              		.section	.text.bmsStateHandler,"ax",%progbits
 681              		.align	1
 682              		.global	bmsStateHandler
 683              		.syntax unified
 684              		.thumb
 685              		.thumb_func
 686              		.fpu fpv4-sp-d16
 688              	bmsStateHandler:
 689              	.LFB132:
 112:Core/Src/bms.c ****     switch (bms->state)
 690              		.loc 1 112 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 0
 693              		@ frame_needed = 0, uses_anonymous_args = 0
 694              	.LVL56:
 695 0000 08B5     		push	{r3, lr}
 696              	.LCFI6:
 697              		.cfi_def_cfa_offset 8
 698              		.cfi_offset 3, -8
 699              		.cfi_offset 14, -4
 113:Core/Src/bms.c ****     {
 700              		.loc 1 113 0
 701 0002 90F8F230 		ldrb	r3, [r0, #242]	@ zero_extendqisi2
 702 0006 042B     		cmp	r3, #4
 703 0008 48D8     		bhi	.L62
ARM GAS  /tmp/ccROOoJg.s 			page 23


 704 000a DFE803F0 		tbb	[pc, r3]
 705              	.L65:
 706 000e 03       		.byte	(.L64-.L65)/2
 707 000f 0A       		.byte	(.L66-.L65)/2
 708 0010 47       		.byte	(.L62-.L65)/2
 709 0011 2F       		.byte	(.L67-.L65)/2
 710 0012 45       		.byte	(.L68-.L65)/2
 711 0013 00       		.p2align 1
 712              	.L64:
 116:Core/Src/bms.c ****         bms->state = Ready;
 713              		.loc 1 116 0
 714 0014 0023     		movs	r3, #0
 715 0016 80F8F430 		strb	r3, [r0, #244]
 117:Core/Src/bms.c **** 
 716              		.loc 1 117 0
 717 001a 0123     		movs	r3, #1
 718 001c 80F8F230 		strb	r3, [r0, #242]
 119:Core/Src/bms.c **** 
 719              		.loc 1 119 0
 720 0020 08BD     		pop	{r3, pc}
 721              	.L66:
 122:Core/Src/bms.c ****         if (bms->avgCellVolt > BALANCE_VOLTAGE)
 722              		.loc 1 122 0
 723 0022 0023     		movs	r3, #0
 724 0024 80F8F430 		strb	r3, [r0, #244]
 123:Core/Src/bms.c ****         {
 725              		.loc 1 123 0
 726 0028 B0F8E620 		ldrh	r2, [r0, #230]
 727 002c 40F60A73 		movw	r3, #3850
 728 0030 9A42     		cmp	r2, r3
 729 0032 0ED9     		bls	.L69
 125:Core/Src/bms.c ****             {
 730              		.loc 1 125 0
 731 0034 B0F8E430 		ldrh	r3, [r0, #228]
 732 0038 B0F8E220 		ldrh	r2, [r0, #226]
 733 003c 9B1A     		subs	r3, r3, r2
 734 003e 052B     		cmp	r3, #5
 735 0040 03DD     		ble	.L70
 127:Core/Src/bms.c ****             }
 736              		.loc 1 127 0
 737 0042 0123     		movs	r3, #1
 738 0044 80F8F530 		strb	r3, [r0, #245]
 739 0048 06E0     		b	.L71
 740              	.L70:
 132:Core/Src/bms.c ****             }
 741              		.loc 1 132 0
 742 004a 0023     		movs	r3, #0
 743 004c 80F8F530 		strb	r3, [r0, #245]
 744 0050 02E0     		b	.L71
 745              	.L69:
 137:Core/Src/bms.c ****         }
 746              		.loc 1 137 0
 747 0052 0023     		movs	r3, #0
 748 0054 80F8F530 		strb	r3, [r0, #245]
 749              	.L71:
 140:Core/Src/bms.c ****         {
 750              		.loc 1 140 0
ARM GAS  /tmp/ccROOoJg.s 			page 24


 751 0058 B0F8E420 		ldrh	r2, [r0, #228]
 752 005c 40F6B373 		movw	r3, #4019
 753 0060 9A42     		cmp	r2, r3
 754 0062 1BD8     		bhi	.L62
 142:Core/Src/bms.c ****         }
 755              		.loc 1 142 0
 756 0064 0323     		movs	r3, #3
 757 0066 80F8F230 		strb	r3, [r0, #242]
 758 006a 08BD     		pop	{r3, pc}
 759              	.L67:
 147:Core/Src/bms.c ****         bms->chargeRequest = 1;        
 760              		.loc 1 147 0
 761 006c 0023     		movs	r3, #0
 762 006e 80F8F530 		strb	r3, [r0, #245]
 148:Core/Src/bms.c **** 
 763              		.loc 1 148 0
 764 0072 0123     		movs	r3, #1
 765 0074 80F8F430 		strb	r3, [r0, #244]
 150:Core/Src/bms.c ****         {
 766              		.loc 1 150 0
 767 0078 B0F8E420 		ldrh	r2, [r0, #228]
 768 007c 41F25403 		movw	r3, #4180
 769 0080 9A42     		cmp	r2, r3
 770 0082 05D8     		bhi	.L72
 150:Core/Src/bms.c ****         {
 771              		.loc 1 150 0 is_stmt 0 discriminator 1
 772 0084 B0F8EA20 		ldrh	r2, [r0, #234]
 773 0088 43F2B063 		movw	r3, #14000
 774 008c 9A42     		cmp	r2, r3
 775 008e 05D9     		bls	.L62
 776              	.L72:
 152:Core/Src/bms.c ****         }
 777              		.loc 1 152 0 is_stmt 1
 778 0090 0123     		movs	r3, #1
 779 0092 80F8F230 		strb	r3, [r0, #242]
 780 0096 08BD     		pop	{r3, pc}
 781              	.L68:
 157:Core/Src/bms.c ****         break;
 782              		.loc 1 157 0
 783 0098 FFF7FEFF 		bl	HAL_NVIC_SystemReset
 784              	.LVL57:
 785              	.L62:
 786 009c 08BD     		pop	{r3, pc}
 787              		.cfi_endproc
 788              	.LFE132:
 790              		.section	.text.acChargeCommand,"ax",%progbits
 791              		.align	1
 792              		.global	acChargeCommand
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv4-sp-d16
 798              	acChargeCommand:
 799              	.LFB133:
 167:Core/Src/bms.c ****     uint8_t canTx2[8];
 800              		.loc 1 167 0
 801              		.cfi_startproc
ARM GAS  /tmp/ccROOoJg.s 			page 25


 802              		@ args = 0, pretend = 0, frame = 8
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804 0000 00B5     		push	{lr}
 805              	.LCFI7:
 806              		.cfi_def_cfa_offset 4
 807              		.cfi_offset 14, -4
 808 0002 83B0     		sub	sp, sp, #12
 809              	.LCFI8:
 810              		.cfi_def_cfa_offset 16
 169:Core/Src/bms.c ****     {
 811              		.loc 1 169 0
 812 0004 1D4B     		ldr	r3, .L79
 813 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 814 0008 E3B9     		cbnz	r3, .L78
 815              	.LVL58:
 816              	.LBB18:
 185:Core/Src/bms.c ****         canTx2[1] = 0x00;
 817              		.loc 1 185 0
 818 000a 4023     		movs	r3, #64
 819 000c 8DF80030 		strb	r3, [sp]
 186:Core/Src/bms.c ****         canTx2[2] = 0x20;
 820              		.loc 1 186 0
 821 0010 0023     		movs	r3, #0
 822 0012 8DF80130 		strb	r3, [sp, #1]
 187:Core/Src/bms.c ****         canTx2[3] = 9;
 823              		.loc 1 187 0
 824 0016 2022     		movs	r2, #32
 825 0018 8DF80220 		strb	r2, [sp, #2]
 188:Core/Src/bms.c ****         canTx2[4] = val & 0xFF;
 826              		.loc 1 188 0
 827 001c 0922     		movs	r2, #9
 828 001e 8DF80320 		strb	r2, [sp, #3]
 189:Core/Src/bms.c ****         canTx2[5] = (val >> 8) & 0xFF;
 829              		.loc 1 189 0
 830 0022 8DF80430 		strb	r3, [sp, #4]
 190:Core/Src/bms.c ****         canTx2[6] = (val >> 16) & 0xFF;
 831              		.loc 1 190 0
 832 0026 8DF80530 		strb	r3, [sp, #5]
 191:Core/Src/bms.c ****         canTx2[7] = (val >> 24) & 0xFF;
 833              		.loc 1 191 0
 834 002a 8DF80630 		strb	r3, [sp, #6]
 192:Core/Src/bms.c ****         can2tx(0x605, 8, canTx2);
 835              		.loc 1 192 0
 836 002e 8DF80730 		strb	r3, [sp, #7]
 193:Core/Src/bms.c **** 
 837              		.loc 1 193 0
 838 0032 6A46     		mov	r2, sp
 839 0034 0821     		movs	r1, #8
 840 0036 40F20560 		movw	r0, #1541
 841 003a FFF7FEFF 		bl	can2tx
 842              	.LVL59:
 843              	.L74:
 844              	.LBE18:
 196:Core/Src/bms.c **** // Send CAN Data /////////////////////////////////////////////////////////////////////
 845              		.loc 1 196 0
 846 003e 03B0     		add	sp, sp, #12
 847              	.LCFI9:
ARM GAS  /tmp/ccROOoJg.s 			page 26


 848              		.cfi_remember_state
 849              		.cfi_def_cfa_offset 4
 850              		@ sp needed
 851 0040 5DF804FB 		ldr	pc, [sp], #4
 852              	.L78:
 853              	.LCFI10:
 854              		.cfi_restore_state
 855              	.LVL60:
 856              	.LBB19:
 172:Core/Src/bms.c ****         canTx2[1] = 0x00;
 857              		.loc 1 172 0
 858 0044 4023     		movs	r3, #64
 859 0046 8DF80030 		strb	r3, [sp]
 173:Core/Src/bms.c ****         canTx2[2] = 0x20;
 860              		.loc 1 173 0
 861 004a 0023     		movs	r3, #0
 862 004c 8DF80130 		strb	r3, [sp, #1]
 174:Core/Src/bms.c ****         canTx2[3] = 9;
 863              		.loc 1 174 0
 864 0050 2022     		movs	r2, #32
 865 0052 8DF80220 		strb	r2, [sp, #2]
 175:Core/Src/bms.c ****         canTx2[4] = val & 0xFF;
 866              		.loc 1 175 0
 867 0056 0921     		movs	r1, #9
 868 0058 8DF80310 		strb	r1, [sp, #3]
 176:Core/Src/bms.c ****         canTx2[5] = (val >> 8) & 0xFF;
 869              		.loc 1 176 0
 870 005c 8DF80420 		strb	r2, [sp, #4]
 177:Core/Src/bms.c ****         canTx2[6] = (val >> 16) & 0xFF;
 871              		.loc 1 177 0
 872 0060 8DF80530 		strb	r3, [sp, #5]
 178:Core/Src/bms.c ****         canTx2[7] = (val >> 24) & 0xFF;
 873              		.loc 1 178 0
 874 0064 8DF80630 		strb	r3, [sp, #6]
 179:Core/Src/bms.c ****         can2tx(0x605, 8, canTx2); 
 875              		.loc 1 179 0
 876 0068 8DF80730 		strb	r3, [sp, #7]
 180:Core/Src/bms.c ****     }
 877              		.loc 1 180 0
 878 006c 6A46     		mov	r2, sp
 879 006e 0821     		movs	r1, #8
 880 0070 40F20560 		movw	r0, #1541
 881 0074 FFF7FEFF 		bl	can2tx
 882              	.LVL61:
 883              	.LBE19:
 884 0078 E1E7     		b	.L74
 885              	.L80:
 886 007a 00BF     		.align	2
 887              	.L79:
 888 007c 00000000 		.word	chargerOn
 889              		.cfi_endproc
 890              	.LFE133:
 892              		.section	.text.tx500kData,"ax",%progbits
 893              		.align	1
 894              		.global	tx500kData
 895              		.syntax unified
 896              		.thumb
ARM GAS  /tmp/ccROOoJg.s 			page 27


 897              		.thumb_func
 898              		.fpu fpv4-sp-d16
 900              	tx500kData:
 901              	.LFB134:
 199:Core/Src/bms.c **** 
 902              		.loc 1 199 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 16
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906 0000 30B5     		push	{r4, r5, lr}
 907              	.LCFI11:
 908              		.cfi_def_cfa_offset 12
 909              		.cfi_offset 4, -12
 910              		.cfi_offset 5, -8
 911              		.cfi_offset 14, -4
 912 0002 85B0     		sub	sp, sp, #20
 913              	.LCFI12:
 914              		.cfi_def_cfa_offset 32
 202:Core/Src/bms.c ****     bms0[1] = (BMS[0].packVolt >> 8) & 0xFF;
 915              		.loc 1 202 0
 916 0004 224C     		ldr	r4, .L83
 917 0006 B4F8E030 		ldrh	r3, [r4, #224]
 918 000a 8DF80830 		strb	r3, [sp, #8]
 203:Core/Src/bms.c ****     bms0[2] = BMS[0].avgCellTemp & 0XFF;
 919              		.loc 1 203 0
 920 000e 1B0A     		lsrs	r3, r3, #8
 921 0010 8DF80930 		strb	r3, [sp, #9]
 204:Core/Src/bms.c ****     bms0[3] = (BMS[0].avgCellTemp >> 8) & 0XFF;
 922              		.loc 1 204 0
 923 0014 B4F8EE30 		ldrh	r3, [r4, #238]
 924 0018 8DF80A30 		strb	r3, [sp, #10]
 205:Core/Src/bms.c ****     bms0[4] = BMS[0].cellDelta & 0XFF;
 925              		.loc 1 205 0
 926 001c 1B0A     		lsrs	r3, r3, #8
 927 001e 8DF80B30 		strb	r3, [sp, #11]
 206:Core/Src/bms.c ****     bms0[5] = (BMS[0].cellDelta >> 8) & 0XFF;
 928              		.loc 1 206 0
 929 0022 B4F8E830 		ldrh	r3, [r4, #232]
 930 0026 8DF80C30 		strb	r3, [sp, #12]
 207:Core/Src/bms.c ****     bms0[6] = (BMS[0].SOC);
 931              		.loc 1 207 0
 932 002a 1B0A     		lsrs	r3, r3, #8
 933 002c 8DF80D30 		strb	r3, [sp, #13]
 208:Core/Src/bms.c ****     bms0[7] = 0;
 934              		.loc 1 208 0
 935 0030 94F8F330 		ldrb	r3, [r4, #243]	@ zero_extendqisi2
 936 0034 8DF80E30 		strb	r3, [sp, #14]
 209:Core/Src/bms.c ****     can2tx(0x138, 8, bms0);
 937              		.loc 1 209 0
 938 0038 0025     		movs	r5, #0
 939 003a 8DF80F50 		strb	r5, [sp, #15]
 210:Core/Src/bms.c **** 
 940              		.loc 1 210 0
 941 003e 02AA     		add	r2, sp, #8
 942 0040 0821     		movs	r1, #8
 943 0042 4FF49C70 		mov	r0, #312
 944 0046 FFF7FEFF 		bl	can2tx
ARM GAS  /tmp/ccROOoJg.s 			page 28


 945              	.LVL62:
 213:Core/Src/bms.c ****     bms1[1] = (BMS[1].packVolt >> 8) & 0xFF;
 946              		.loc 1 213 0
 947 004a B4F8D631 		ldrh	r3, [r4, #470]
 948 004e 8DF80030 		strb	r3, [sp]
 214:Core/Src/bms.c ****     bms1[2] = BMS[1].avgCellTemp & 0XFF;
 949              		.loc 1 214 0
 950 0052 1B0A     		lsrs	r3, r3, #8
 951 0054 8DF80130 		strb	r3, [sp, #1]
 215:Core/Src/bms.c ****     bms1[3] = (BMS[1].avgCellTemp >> 8) & 0XFF;
 952              		.loc 1 215 0
 953 0058 B4F8E431 		ldrh	r3, [r4, #484]
 954 005c 8DF80230 		strb	r3, [sp, #2]
 216:Core/Src/bms.c ****     bms1[4] = BMS[1].cellDelta & 0XFF;
 955              		.loc 1 216 0
 956 0060 1B0A     		lsrs	r3, r3, #8
 957 0062 8DF80330 		strb	r3, [sp, #3]
 217:Core/Src/bms.c ****     bms1[5] = (BMS[1].cellDelta >> 8) & 0XFF;
 958              		.loc 1 217 0
 959 0066 B4F8DE31 		ldrh	r3, [r4, #478]
 960 006a 8DF80430 		strb	r3, [sp, #4]
 218:Core/Src/bms.c ****     bms1[6] = (BMS[1].SOC);
 961              		.loc 1 218 0
 962 006e 1B0A     		lsrs	r3, r3, #8
 963 0070 8DF80530 		strb	r3, [sp, #5]
 219:Core/Src/bms.c ****     bms1[7] = 0;
 964              		.loc 1 219 0
 965 0074 94F8E931 		ldrb	r3, [r4, #489]	@ zero_extendqisi2
 966 0078 8DF80630 		strb	r3, [sp, #6]
 220:Core/Src/bms.c ****     can2tx(0x139, 8, bms1);
 967              		.loc 1 220 0
 968 007c 8DF80750 		strb	r5, [sp, #7]
 221:Core/Src/bms.c **** }
 969              		.loc 1 221 0
 970 0080 6A46     		mov	r2, sp
 971 0082 0821     		movs	r1, #8
 972 0084 40F23910 		movw	r0, #313
 973 0088 FFF7FEFF 		bl	can2tx
 974              	.LVL63:
 222:Core/Src/bms.c **** 
 975              		.loc 1 222 0
 976 008c 05B0     		add	sp, sp, #20
 977              	.LCFI13:
 978              		.cfi_def_cfa_offset 12
 979              		@ sp needed
 980 008e 30BD     		pop	{r4, r5, pc}
 981              	.L84:
 982              		.align	2
 983              	.L83:
 984 0090 00000000 		.word	BMS
 985              		.cfi_endproc
 986              	.LFE134:
 988              		.section	.text.refreshData,"ax",%progbits
 989              		.align	1
 990              		.global	refreshData
 991              		.syntax unified
 992              		.thumb
ARM GAS  /tmp/ccROOoJg.s 			page 29


 993              		.thumb_func
 994              		.fpu fpv4-sp-d16
 996              	refreshData:
 997              	.LFB135:
 225:Core/Src/bms.c **** 
 998              		.loc 1 225 0
 999              		.cfi_startproc
 1000              		@ args = 0, pretend = 0, frame = 0
 1001              		@ frame_needed = 0, uses_anonymous_args = 0
 1002 0000 38B5     		push	{r3, r4, r5, lr}
 1003              	.LCFI14:
 1004              		.cfi_def_cfa_offset 16
 1005              		.cfi_offset 3, -16
 1006              		.cfi_offset 4, -12
 1007              		.cfi_offset 5, -8
 1008              		.cfi_offset 14, -4
 1009              	.LVL64:
 1010              	.LBB20:
 227:Core/Src/bms.c ****     {
 1011              		.loc 1 227 0
 1012 0002 0025     		movs	r5, #0
 1013 0004 26E0     		b	.L86
 1014              	.LVL65:
 1015              	.L87:
 230:Core/Src/bms.c ****         getAvgCellVolt(&BMS[i]);
 1016              		.loc 1 230 0 discriminator 3
 1017 0006 154B     		ldr	r3, .L89
 1018 0008 F624     		movs	r4, #246
 1019 000a 04FB0534 		mla	r4, r4, r5, r3
 1020 000e 2046     		mov	r0, r4
 1021 0010 FFF7FEFF 		bl	getPackVolt
 1022              	.LVL66:
 231:Core/Src/bms.c ****         getLowCellVolt(&BMS[i]);
 1023              		.loc 1 231 0 discriminator 3
 1024 0014 2046     		mov	r0, r4
 1025 0016 FFF7FEFF 		bl	getAvgCellVolt
 1026              	.LVL67:
 232:Core/Src/bms.c ****         getHighCellVolt(&BMS[i]);
 1027              		.loc 1 232 0 discriminator 3
 1028 001a 2046     		mov	r0, r4
 1029 001c FFF7FEFF 		bl	getLowCellVolt
 1030              	.LVL68:
 233:Core/Src/bms.c ****         getCellDelta(&BMS[i]);
 1031              		.loc 1 233 0 discriminator 3
 1032 0020 2046     		mov	r0, r4
 1033 0022 FFF7FEFF 		bl	getHighCellVolt
 1034              	.LVL69:
 234:Core/Src/bms.c ****         getLowCellTemp(&BMS[i]);
 1035              		.loc 1 234 0 discriminator 3
 1036 0026 2046     		mov	r0, r4
 1037 0028 FFF7FEFF 		bl	getCellDelta
 1038              	.LVL70:
 235:Core/Src/bms.c ****         getHighCellTemp(&BMS[i]);
 1039              		.loc 1 235 0 discriminator 3
 1040 002c 2046     		mov	r0, r4
 1041 002e FFF7FEFF 		bl	getLowCellTemp
 1042              	.LVL71:
ARM GAS  /tmp/ccROOoJg.s 			page 30


 236:Core/Src/bms.c ****         getAvgCellTemp(&BMS[i]);
 1043              		.loc 1 236 0 discriminator 3
 1044 0032 2046     		mov	r0, r4
 1045 0034 FFF7FEFF 		bl	getHighCellTemp
 1046              	.LVL72:
 237:Core/Src/bms.c ****         getTempDelta(&BMS[i]);
 1047              		.loc 1 237 0 discriminator 3
 1048 0038 2046     		mov	r0, r4
 1049 003a FFF7FEFF 		bl	getAvgCellTemp
 1050              	.LVL73:
 238:Core/Src/bms.c ****         getCellCount(&BMS[i], i);
 1051              		.loc 1 238 0 discriminator 3
 1052 003e 2046     		mov	r0, r4
 1053 0040 FFF7FEFF 		bl	getTempDelta
 1054              	.LVL74:
 239:Core/Src/bms.c ****         getSOC(&BMS[i]);
 1055              		.loc 1 239 0 discriminator 3
 1056 0044 2946     		mov	r1, r5
 1057 0046 2046     		mov	r0, r4
 1058 0048 FFF7FEFF 		bl	getCellCount
 1059              	.LVL75:
 240:Core/Src/bms.c ****     }
 1060              		.loc 1 240 0 discriminator 3
 1061 004c 2046     		mov	r0, r4
 1062 004e FFF7FEFF 		bl	getSOC
 1063              	.LVL76:
 227:Core/Src/bms.c ****     {
 1064              		.loc 1 227 0 discriminator 3
 1065 0052 0135     		adds	r5, r5, #1
 1066              	.LVL77:
 1067              	.L86:
 227:Core/Src/bms.c ****     {
 1068              		.loc 1 227 0 is_stmt 0 discriminator 1
 1069 0054 012D     		cmp	r5, #1
 1070 0056 D6D9     		bls	.L87
 1071              	.LBE20:
 242:Core/Src/bms.c **** 
 1072              		.loc 1 242 0 is_stmt 1
 1073 0058 38BD     		pop	{r3, r4, r5, pc}
 1074              	.LVL78:
 1075              	.L90:
 1076 005a 00BF     		.align	2
 1077              	.L89:
 1078 005c 00000000 		.word	BMS
 1079              		.cfi_endproc
 1080              	.LFE135:
 1082              		.section	.text.sendCommand,"ax",%progbits
 1083              		.align	1
 1084              		.global	sendCommand
 1085              		.syntax unified
 1086              		.thumb
 1087              		.thumb_func
 1088              		.fpu fpv4-sp-d16
 1090              	sendCommand:
 1091              	.LFB136:
 246:Core/Src/bms.c ****     uint8_t canTx[3];
 1092              		.loc 1 246 0
ARM GAS  /tmp/ccROOoJg.s 			page 31


 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 8
 1095              		@ frame_needed = 0, uses_anonymous_args = 0
 1096              	.LVL79:
 1097 0000 00B5     		push	{lr}
 1098              	.LCFI15:
 1099              		.cfi_def_cfa_offset 4
 1100              		.cfi_offset 14, -4
 1101 0002 83B0     		sub	sp, sp, #12
 1102              	.LCFI16:
 1103              		.cfi_def_cfa_offset 16
 248:Core/Src/bms.c ****     canTx[1] = 0x00;
 1104              		.loc 1 248 0
 1105 0004 0223     		movs	r3, #2
 1106 0006 8DF80430 		strb	r3, [sp, #4]
 249:Core/Src/bms.c ****     canTx[2] = 0x00;
 1107              		.loc 1 249 0
 1108 000a 0023     		movs	r3, #0
 1109 000c 8DF80530 		strb	r3, [sp, #5]
 250:Core/Src/bms.c **** 
 1110              		.loc 1 250 0
 1111 0010 8DF80630 		strb	r3, [sp, #6]
 252:Core/Src/bms.c ****     {
 1112              		.loc 1 252 0
 1113 0014 20B1     		cbz	r0, .L93
 1114 0016 0128     		cmp	r0, #1
 1115 0018 09D0     		beq	.L94
 1116              	.LVL80:
 1117              	.L91:
 265:Core/Src/bms.c **** 
 1118              		.loc 1 265 0
 1119 001a 03B0     		add	sp, sp, #12
 1120              	.LCFI17:
 1121              		.cfi_remember_state
 1122              		.cfi_def_cfa_offset 4
 1123              		@ sp needed
 1124 001c 5DF804FB 		ldr	pc, [sp], #4
 1125              	.LVL81:
 1126              	.L93:
 1127              	.LCFI18:
 1128              		.cfi_restore_state
 255:Core/Src/bms.c ****         break;
 1129              		.loc 1 255 0
 1130 0020 01AA     		add	r2, sp, #4
 1131 0022 0321     		movs	r1, #3
 1132 0024 4FF40070 		mov	r0, #512
 1133              	.LVL82:
 1134 0028 FFF7FEFF 		bl	can1tx
 1135              	.LVL83:
 256:Core/Src/bms.c **** 
 1136              		.loc 1 256 0
 1137 002c F5E7     		b	.L91
 1138              	.LVL84:
 1139              	.L94:
 259:Core/Src/bms.c ****         break;
 1140              		.loc 1 259 0
 1141 002e 01AA     		add	r2, sp, #4
ARM GAS  /tmp/ccROOoJg.s 			page 32


 1142 0030 0321     		movs	r1, #3
 1143 0032 4FF40070 		mov	r0, #512
 1144              	.LVL85:
 1145 0036 FFF7FEFF 		bl	can3tx
 1146              	.LVL86:
 265:Core/Src/bms.c **** 
 1147              		.loc 1 265 0
 1148 003a EEE7     		b	.L91
 1149              		.cfi_endproc
 1150              	.LFE136:
 1152              		.section	.text.requestBICMdata,"ax",%progbits
 1153              		.align	1
 1154              		.global	requestBICMdata
 1155              		.syntax unified
 1156              		.thumb
 1157              		.thumb_func
 1158              		.fpu fpv4-sp-d16
 1160              	requestBICMdata:
 1161              	.LFB137:
 268:Core/Src/bms.c **** 
 1162              		.loc 1 268 0
 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 8
 1165              		@ frame_needed = 0, uses_anonymous_args = 0
 1166              	.LVL87:
 271:Core/Src/bms.c ****     {
 1167              		.loc 1 271 0
 1168 0000 90F8F530 		ldrb	r3, [r0, #245]	@ zero_extendqisi2
 1169 0004 03B1     		cbz	r3, .L111
 1170 0006 7047     		bx	lr
 1171              	.L111:
 268:Core/Src/bms.c **** 
 1172              		.loc 1 268 0
 1173 0008 10B5     		push	{r4, lr}
 1174              	.LCFI19:
 1175              		.cfi_def_cfa_offset 8
 1176              		.cfi_offset 4, -8
 1177              		.cfi_offset 14, -4
 1178 000a 82B0     		sub	sp, sp, #8
 1179              	.LCFI20:
 1180              		.cfi_def_cfa_offset 16
 1181 000c 0C46     		mov	r4, r1
 273:Core/Src/bms.c ****         for (size_t i = 0; i < 8; i++)
 1182              		.loc 1 273 0
 1183 000e 0846     		mov	r0, r1
 1184              	.LVL88:
 1185 0010 FFF7FEFF 		bl	sendCommand
 1186              	.LVL89:
 1187              	.LBB21:
 274:Core/Src/bms.c ****         {
 1188              		.loc 1 274 0
 1189 0014 0023     		movs	r3, #0
 1190 0016 05E0     		b	.L98
 1191              	.LVL90:
 1192              	.L99:
 276:Core/Src/bms.c ****         }
 1193              		.loc 1 276 0 discriminator 3
ARM GAS  /tmp/ccROOoJg.s 			page 33


 1194 0018 02AA     		add	r2, sp, #8
 1195 001a 1A44     		add	r2, r2, r3
 1196 001c 0020     		movs	r0, #0
 1197 001e 02F8080C 		strb	r0, [r2, #-8]
 274:Core/Src/bms.c ****         {
 1198              		.loc 1 274 0 discriminator 3
 1199 0022 0133     		adds	r3, r3, #1
 1200              	.LVL91:
 1201              	.L98:
 274:Core/Src/bms.c ****         {
 1202              		.loc 1 274 0 is_stmt 0 discriminator 1
 1203 0024 072B     		cmp	r3, #7
 1204 0026 F7D9     		bls	.L99
 1205              	.LBE21:
 278:Core/Src/bms.c ****         {
 1206              		.loc 1 278 0 is_stmt 1
 1207 0028 1CB1     		cbz	r4, .L101
 1208 002a 012C     		cmp	r4, #1
 1209 002c 08D0     		beq	.L102
 1210              	.LVL92:
 1211              	.L100:
 1212              	.LBB22:
 274:Core/Src/bms.c ****         {
 1213              		.loc 1 274 0 discriminator 1
 1214 002e 0023     		movs	r3, #0
 1215 0030 13E0     		b	.L103
 1216              	.LVL93:
 1217              	.L101:
 1218              	.LBE22:
 281:Core/Src/bms.c ****             break;
 1219              		.loc 1 281 0
 1220 0032 6A46     		mov	r2, sp
 1221 0034 0821     		movs	r1, #8
 1222 0036 4FF44070 		mov	r0, #768
 1223 003a FFF7FEFF 		bl	can1tx
 1224              	.LVL94:
 282:Core/Src/bms.c **** 
 1225              		.loc 1 282 0
 1226 003e F6E7     		b	.L100
 1227              	.LVL95:
 1228              	.L102:
 285:Core/Src/bms.c ****             break;
 1229              		.loc 1 285 0
 1230 0040 6A46     		mov	r2, sp
 1231 0042 0821     		movs	r1, #8
 1232 0044 4FF44070 		mov	r0, #768
 1233 0048 FFF7FEFF 		bl	can3tx
 1234              	.LVL96:
 286:Core/Src/bms.c **** 
 1235              		.loc 1 286 0
 1236 004c EFE7     		b	.L100
 1237              	.LVL97:
 1238              	.L104:
 1239              	.LBB23:
 294:Core/Src/bms.c ****         }
 1240              		.loc 1 294 0 discriminator 3
 1241 004e 02AA     		add	r2, sp, #8
ARM GAS  /tmp/ccROOoJg.s 			page 34


 1242 0050 1A44     		add	r2, r2, r3
 1243 0052 0020     		movs	r0, #0
 1244 0054 02F8080C 		strb	r0, [r2, #-8]
 292:Core/Src/bms.c ****         {
 1245              		.loc 1 292 0 discriminator 3
 1246 0058 0133     		adds	r3, r3, #1
 1247              	.LVL98:
 1248              	.L103:
 292:Core/Src/bms.c ****         {
 1249              		.loc 1 292 0 is_stmt 0 discriminator 1
 1250 005a 042B     		cmp	r3, #4
 1251 005c F7D9     		bls	.L104
 1252              	.LBE23:
 297:Core/Src/bms.c ****         {
 1253              		.loc 1 297 0 is_stmt 1
 1254 005e 1CB1     		cbz	r4, .L105
 1255 0060 012C     		cmp	r4, #1
 1256 0062 08D0     		beq	.L106
 1257              	.LVL99:
 1258              	.L96:
 311:Core/Src/bms.c **** 
 1259              		.loc 1 311 0
 1260 0064 02B0     		add	sp, sp, #8
 1261              	.LCFI21:
 1262              		.cfi_remember_state
 1263              		.cfi_def_cfa_offset 8
 1264              		@ sp needed
 1265 0066 10BD     		pop	{r4, pc}
 1266              	.LVL100:
 1267              	.L105:
 1268              	.LCFI22:
 1269              		.cfi_restore_state
 300:Core/Src/bms.c ****             break;
 1270              		.loc 1 300 0
 1271 0068 6A46     		mov	r2, sp
 1272 006a 0521     		movs	r1, #5
 1273 006c 4FF44470 		mov	r0, #784
 1274 0070 FFF7FEFF 		bl	can1tx
 1275              	.LVL101:
 301:Core/Src/bms.c **** 
 1276              		.loc 1 301 0
 1277 0074 F6E7     		b	.L96
 1278              	.LVL102:
 1279              	.L106:
 304:Core/Src/bms.c ****             break;
 1280              		.loc 1 304 0
 1281 0076 6A46     		mov	r2, sp
 1282 0078 0521     		movs	r1, #5
 1283 007a 4FF44470 		mov	r0, #784
 1284 007e FFF7FEFF 		bl	can3tx
 1285              	.LVL103:
 311:Core/Src/bms.c **** 
 1286              		.loc 1 311 0
 1287 0082 EFE7     		b	.L96
 1288              		.cfi_endproc
 1289              	.LFE137:
 1291              		.section	.text.balanceCommand,"ax",%progbits
ARM GAS  /tmp/ccROOoJg.s 			page 35


 1292              		.align	1
 1293              		.global	balanceCommand
 1294              		.syntax unified
 1295              		.thumb
 1296              		.thumb_func
 1297              		.fpu fpv4-sp-d16
 1299              	balanceCommand:
 1300              	.LFB138:
 315:Core/Src/bms.c ****     sendCommand(pack);
 1301              		.loc 1 315 0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 8
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 1305              	.LVL104:
 1306 0000 30B5     		push	{r4, r5, lr}
 1307              	.LCFI23:
 1308              		.cfi_def_cfa_offset 12
 1309              		.cfi_offset 4, -12
 1310              		.cfi_offset 5, -8
 1311              		.cfi_offset 14, -4
 1312 0002 83B0     		sub	sp, sp, #12
 1313              	.LCFI24:
 1314              		.cfi_def_cfa_offset 24
 1315 0004 0446     		mov	r4, r0
 1316 0006 0D46     		mov	r5, r1
 316:Core/Src/bms.c ****     uint8_t balance[8];
 1317              		.loc 1 316 0
 1318 0008 0846     		mov	r0, r1
 1319              	.LVL105:
 1320 000a FFF7FEFF 		bl	sendCommand
 1321              	.LVL106:
 319:Core/Src/bms.c ****     {
 1322              		.loc 1 319 0
 1323 000e 6DB1     		cbz	r5, .L134
 1324 0010 012D     		cmp	r5, #1
 1325 0012 5AD0     		beq	.L135
 1326              	.L112:
 383:Core/Src/bms.c **** 
 1327              		.loc 1 383 0
 1328 0014 03B0     		add	sp, sp, #12
 1329              	.LCFI25:
 1330              		.cfi_remember_state
 1331              		.cfi_def_cfa_offset 12
 1332              		@ sp needed
 1333 0016 30BD     		pop	{r4, r5, pc}
 1334              	.LVL107:
 1335              	.L116:
 1336              	.LCFI26:
 1337              		.cfi_restore_state
 1338              	.LBB24:
 324:Core/Src/bms.c ****         }
 1339              		.loc 1 324 0 discriminator 3
 1340 0018 02AA     		add	r2, sp, #8
 1341 001a 1A44     		add	r2, r2, r3
 1342 001c 0021     		movs	r1, #0
 1343 001e 02F8081C 		strb	r1, [r2, #-8]
 322:Core/Src/bms.c ****         {
ARM GAS  /tmp/ccROOoJg.s 			page 36


 1344              		.loc 1 322 0 discriminator 3
 1345 0022 0133     		adds	r3, r3, #1
 1346              	.LVL108:
 1347              	.L114:
 322:Core/Src/bms.c ****         {
 1348              		.loc 1 322 0 is_stmt 0 discriminator 1
 1349 0024 072B     		cmp	r3, #7
 1350 0026 F7D9     		bls	.L116
 1351 0028 0023     		movs	r3, #0
 1352              	.LVL109:
 1353 002a 02E0     		b	.L117
 1354              	.L134:
 1355              	.LBE24:
 319:Core/Src/bms.c ****     {
 1356              		.loc 1 319 0 is_stmt 1
 1357 002c 0023     		movs	r3, #0
 1358 002e F9E7     		b	.L114
 1359              	.LVL110:
 1360              	.L118:
 1361              	.LBB25:
 327:Core/Src/bms.c ****         {
 1362              		.loc 1 327 0 discriminator 2
 1363 0030 0133     		adds	r3, r3, #1
 1364              	.LVL111:
 1365              	.L117:
 327:Core/Src/bms.c ****         {
 1366              		.loc 1 327 0 is_stmt 0 discriminator 1
 1367 0032 3D2B     		cmp	r3, #61
 1368 0034 11D8     		bhi	.L137
 329:Core/Src/bms.c ****             {
 1369              		.loc 1 329 0 is_stmt 1
 1370 0036 B4F8E610 		ldrh	r1, [r4, #230]
 1371 003a 34F81320 		ldrh	r2, [r4, r3, lsl #1]
 1372 003e 9142     		cmp	r1, r2
 1373 0040 F6D2     		bcs	.L118
 331:Core/Src/bms.c ****             }
 1374              		.loc 1 331 0
 1375 0042 444A     		ldr	r2, .L141
 1376 0044 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1377 0046 4449     		ldr	r1, .L141+4
 1378 0048 C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1379 004a 02A8     		add	r0, sp, #8
 1380 004c 0244     		add	r2, r2, r0
 1381 004e 12F8080C 		ldrb	r0, [r2, #-8]	@ zero_extendqisi2
 1382 0052 0143     		orrs	r1, r1, r0
 1383 0054 02F8081C 		strb	r1, [r2, #-8]
 1384 0058 EAE7     		b	.L118
 1385              	.L137:
 1386              	.LBE25:
 334:Core/Src/bms.c **** 
 1387              		.loc 1 334 0
 1388 005a 6A46     		mov	r2, sp
 1389 005c 0821     		movs	r1, #8
 1390 005e 4FF44070 		mov	r0, #768
 1391 0062 FFF7FEFF 		bl	can1tx
 1392              	.LVL112:
 1393              	.LBB26:
ARM GAS  /tmp/ccROOoJg.s 			page 37


 336:Core/Src/bms.c ****         {
 1394              		.loc 1 336 0
 1395 0066 0023     		movs	r3, #0
 1396 0068 05E0     		b	.L120
 1397              	.LVL113:
 1398              	.L121:
 338:Core/Src/bms.c ****         }
 1399              		.loc 1 338 0 discriminator 3
 1400 006a 02AA     		add	r2, sp, #8
 1401 006c 1A44     		add	r2, r2, r3
 1402 006e 0021     		movs	r1, #0
 1403 0070 02F8081C 		strb	r1, [r2, #-8]
 336:Core/Src/bms.c ****         {
 1404              		.loc 1 336 0 discriminator 3
 1405 0074 0133     		adds	r3, r3, #1
 1406              	.LVL114:
 1407              	.L120:
 336:Core/Src/bms.c ****         {
 1408              		.loc 1 336 0 is_stmt 0 discriminator 1
 1409 0076 072B     		cmp	r3, #7
 1410 0078 F7D9     		bls	.L121
 1411 007a 3E23     		movs	r3, #62
 1412              	.LVL115:
 1413 007c 00E0     		b	.L122
 1414              	.LVL116:
 1415              	.L123:
 1416              	.LBE26:
 1417              	.LBB27:
 341:Core/Src/bms.c ****         {
 1418              		.loc 1 341 0 is_stmt 1 discriminator 2
 1419 007e 0133     		adds	r3, r3, #1
 1420              	.LVL117:
 1421              	.L122:
 341:Core/Src/bms.c ****         {
 1422              		.loc 1 341 0 is_stmt 0 discriminator 1
 1423 0080 5F2B     		cmp	r3, #95
 1424 0082 11D8     		bhi	.L138
 343:Core/Src/bms.c ****             {
 1425              		.loc 1 343 0 is_stmt 1
 1426 0084 B4F8E610 		ldrh	r1, [r4, #230]
 1427 0088 34F81320 		ldrh	r2, [r4, r3, lsl #1]
 1428 008c 9142     		cmp	r1, r2
 1429 008e F6D2     		bcs	.L123
 345:Core/Src/bms.c ****             }
 1430              		.loc 1 345 0
 1431 0090 304A     		ldr	r2, .L141
 1432 0092 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1433 0094 3049     		ldr	r1, .L141+4
 1434 0096 C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1435 0098 02A8     		add	r0, sp, #8
 1436 009a 0244     		add	r2, r2, r0
 1437 009c 12F8080C 		ldrb	r0, [r2, #-8]	@ zero_extendqisi2
 1438 00a0 0143     		orrs	r1, r1, r0
 1439 00a2 02F8081C 		strb	r1, [r2, #-8]
 1440 00a6 EAE7     		b	.L123
 1441              	.L138:
 1442              	.LBE27:
ARM GAS  /tmp/ccROOoJg.s 			page 38


 348:Core/Src/bms.c ****         break;
 1443              		.loc 1 348 0
 1444 00a8 6A46     		mov	r2, sp
 1445 00aa 0521     		movs	r1, #5
 1446 00ac 4FF44470 		mov	r0, #784
 1447 00b0 FFF7FEFF 		bl	can1tx
 1448              	.LVL118:
 349:Core/Src/bms.c **** 
 1449              		.loc 1 349 0
 1450 00b4 AEE7     		b	.L112
 1451              	.LVL119:
 1452              	.L125:
 1453              	.LBB28:
 355:Core/Src/bms.c ****         }
 1454              		.loc 1 355 0 discriminator 3
 1455 00b6 02AA     		add	r2, sp, #8
 1456 00b8 1A44     		add	r2, r2, r3
 1457 00ba 0021     		movs	r1, #0
 1458 00bc 02F8081C 		strb	r1, [r2, #-8]
 353:Core/Src/bms.c ****         {
 1459              		.loc 1 353 0 discriminator 3
 1460 00c0 0133     		adds	r3, r3, #1
 1461              	.LVL120:
 1462              	.L115:
 353:Core/Src/bms.c ****         {
 1463              		.loc 1 353 0 is_stmt 0 discriminator 1
 1464 00c2 072B     		cmp	r3, #7
 1465 00c4 F7D9     		bls	.L125
 1466 00c6 0023     		movs	r3, #0
 1467              	.LVL121:
 1468 00c8 02E0     		b	.L126
 1469              	.L135:
 1470              	.LBE28:
 319:Core/Src/bms.c ****     {
 1471              		.loc 1 319 0 is_stmt 1
 1472 00ca 0023     		movs	r3, #0
 1473 00cc F9E7     		b	.L115
 1474              	.LVL122:
 1475              	.L127:
 1476              	.LBB29:
 357:Core/Src/bms.c ****         {
 1477              		.loc 1 357 0 discriminator 2
 1478 00ce 0133     		adds	r3, r3, #1
 1479              	.LVL123:
 1480              	.L126:
 357:Core/Src/bms.c ****         {
 1481              		.loc 1 357 0 is_stmt 0 discriminator 1
 1482 00d0 3D2B     		cmp	r3, #61
 1483 00d2 11D8     		bhi	.L139
 359:Core/Src/bms.c ****             {
 1484              		.loc 1 359 0 is_stmt 1
 1485 00d4 B4F8E610 		ldrh	r1, [r4, #230]
 1486 00d8 34F81320 		ldrh	r2, [r4, r3, lsl #1]
 1487 00dc 9142     		cmp	r1, r2
 1488 00de F6D2     		bcs	.L127
 361:Core/Src/bms.c ****             }
 1489              		.loc 1 361 0
ARM GAS  /tmp/ccROOoJg.s 			page 39


 1490 00e0 1C4A     		ldr	r2, .L141
 1491 00e2 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1492 00e4 1C49     		ldr	r1, .L141+4
 1493 00e6 C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1494 00e8 02A8     		add	r0, sp, #8
 1495 00ea 0244     		add	r2, r2, r0
 1496 00ec 12F8080C 		ldrb	r0, [r2, #-8]	@ zero_extendqisi2
 1497 00f0 0143     		orrs	r1, r1, r0
 1498 00f2 02F8081C 		strb	r1, [r2, #-8]
 1499 00f6 EAE7     		b	.L127
 1500              	.L139:
 1501              	.LBE29:
 364:Core/Src/bms.c **** 
 1502              		.loc 1 364 0
 1503 00f8 6A46     		mov	r2, sp
 1504 00fa 0821     		movs	r1, #8
 1505 00fc 4FF44070 		mov	r0, #768
 1506 0100 FFF7FEFF 		bl	can3tx
 1507              	.LVL124:
 1508              	.LBB30:
 366:Core/Src/bms.c ****         {
 1509              		.loc 1 366 0
 1510 0104 0023     		movs	r3, #0
 1511 0106 05E0     		b	.L129
 1512              	.LVL125:
 1513              	.L130:
 368:Core/Src/bms.c ****         }
 1514              		.loc 1 368 0 discriminator 3
 1515 0108 02AA     		add	r2, sp, #8
 1516 010a 1A44     		add	r2, r2, r3
 1517 010c 0021     		movs	r1, #0
 1518 010e 02F8081C 		strb	r1, [r2, #-8]
 366:Core/Src/bms.c ****         {
 1519              		.loc 1 366 0 discriminator 3
 1520 0112 0133     		adds	r3, r3, #1
 1521              	.LVL126:
 1522              	.L129:
 366:Core/Src/bms.c ****         {
 1523              		.loc 1 366 0 is_stmt 0 discriminator 1
 1524 0114 072B     		cmp	r3, #7
 1525 0116 F7D9     		bls	.L130
 1526 0118 3E23     		movs	r3, #62
 1527              	.LVL127:
 1528 011a 00E0     		b	.L131
 1529              	.LVL128:
 1530              	.L132:
 1531              	.LBE30:
 1532              	.LBB31:
 370:Core/Src/bms.c ****         {
 1533              		.loc 1 370 0 is_stmt 1 discriminator 2
 1534 011c 0133     		adds	r3, r3, #1
 1535              	.LVL129:
 1536              	.L131:
 370:Core/Src/bms.c ****         {
 1537              		.loc 1 370 0 is_stmt 0 discriminator 1
 1538 011e 5F2B     		cmp	r3, #95
 1539 0120 11D8     		bhi	.L140
ARM GAS  /tmp/ccROOoJg.s 			page 40


 372:Core/Src/bms.c ****             {
 1540              		.loc 1 372 0 is_stmt 1
 1541 0122 B4F8E610 		ldrh	r1, [r4, #230]
 1542 0126 34F81320 		ldrh	r2, [r4, r3, lsl #1]
 1543 012a 9142     		cmp	r1, r2
 1544 012c F6D2     		bcs	.L132
 374:Core/Src/bms.c ****             }
 1545              		.loc 1 374 0
 1546 012e 094A     		ldr	r2, .L141
 1547 0130 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1548 0132 0949     		ldr	r1, .L141+4
 1549 0134 C95C     		ldrb	r1, [r1, r3]	@ zero_extendqisi2
 1550 0136 02A8     		add	r0, sp, #8
 1551 0138 0244     		add	r2, r2, r0
 1552 013a 12F8080C 		ldrb	r0, [r2, #-8]	@ zero_extendqisi2
 1553 013e 0143     		orrs	r1, r1, r0
 1554 0140 02F8081C 		strb	r1, [r2, #-8]
 1555 0144 EAE7     		b	.L132
 1556              	.L140:
 1557              	.LBE31:
 377:Core/Src/bms.c ****         break;
 1558              		.loc 1 377 0
 1559 0146 6A46     		mov	r2, sp
 1560 0148 0521     		movs	r1, #5
 1561 014a 4FF44470 		mov	r0, #784
 1562 014e FFF7FEFF 		bl	can3tx
 1563              	.LVL130:
 383:Core/Src/bms.c **** 
 1564              		.loc 1 383 0
 1565 0152 5FE7     		b	.L112
 1566              	.L142:
 1567              		.align	2
 1568              	.L141:
 1569 0154 00000000 		.word	.LANCHOR1
 1570 0158 00000000 		.word	.LANCHOR2
 1571              		.cfi_endproc
 1572              	.LFE138:
 1574              		.section	.text.vehicleComms,"ax",%progbits
 1575              		.align	1
 1576              		.global	vehicleComms
 1577              		.syntax unified
 1578              		.thumb
 1579              		.thumb_func
 1580              		.fpu fpv4-sp-d16
 1582              	vehicleComms:
 1583              	.LFB150:
 537:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 538:Core/Src/bms.c **** void vehicleComms(CAN_RxHeaderTypeDef *rxMsg, uint8_t *canRx)
 539:Core/Src/bms.c **** {
 1584              		.loc 1 539 0
 1585              		.cfi_startproc
 1586              		@ args = 0, pretend = 0, frame = 0
 1587              		@ frame_needed = 0, uses_anonymous_args = 0
 1588              		@ link register save eliminated.
 1589              	.LVL131:
 1590 0000 7047     		bx	lr
 1591              		.cfi_endproc
ARM GAS  /tmp/ccROOoJg.s 			page 41


 1592              	.LFE150:
 1594              		.section	.text.synchChargers,"ax",%progbits
 1595              		.align	1
 1596              		.global	synchChargers
 1597              		.syntax unified
 1598              		.thumb
 1599              		.thumb_func
 1600              		.fpu fpv4-sp-d16
 1602              	synchChargers:
 1603              	.LFB151:
 540:Core/Src/bms.c ****     switch (rxMsg->StdId)
 541:Core/Src/bms.c ****     {
 542:Core/Src/bms.c ****     case 0x313:
 543:Core/Src/bms.c ****         //vehicleState = canRx[0];
 544:Core/Src/bms.c ****         break;
 545:Core/Src/bms.c **** 
 546:Core/Src/bms.c ****     default:
 547:Core/Src/bms.c ****         break;
 548:Core/Src/bms.c ****     }
 549:Core/Src/bms.c **** }
 550:Core/Src/bms.c **** 
 551:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 552:Core/Src/bms.c **** void synchChargers(void)
 553:Core/Src/bms.c **** {
 1604              		.loc 1 553 0
 1605              		.cfi_startproc
 1606              		@ args = 0, pretend = 0, frame = 0
 1607              		@ frame_needed = 0, uses_anonymous_args = 0
 1608              		@ link register save eliminated.
 554:Core/Src/bms.c **** 
 555:Core/Src/bms.c ****     if (BMS[0].chargeRequest && BMS[1].chargeRequest)
 1609              		.loc 1 555 0
 1610 0000 0E4B     		ldr	r3, .L148
 1611 0002 93F8F430 		ldrb	r3, [r3, #244]	@ zero_extendqisi2
 1612 0006 33B1     		cbz	r3, .L145
 1613              		.loc 1 555 0 is_stmt 0 discriminator 1
 1614 0008 0C4A     		ldr	r2, .L148
 1615 000a 92F8EA21 		ldrb	r2, [r2, #490]	@ zero_extendqisi2
 1616 000e 12B1     		cbz	r2, .L145
 556:Core/Src/bms.c ****     {
 557:Core/Src/bms.c ****         chargerOn = true;
 1617              		.loc 1 557 0 is_stmt 1
 1618 0010 0121     		movs	r1, #1
 1619 0012 0B4A     		ldr	r2, .L148+4
 1620 0014 1170     		strb	r1, [r2]
 1621              	.L145:
 558:Core/Src/bms.c ****     }
 559:Core/Src/bms.c **** 
 560:Core/Src/bms.c ****     if (chargerOn)
 1622              		.loc 1 560 0
 1623 0016 0A4A     		ldr	r2, .L148+4
 1624 0018 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1625 001a 6AB1     		cbz	r2, .L144
 561:Core/Src/bms.c ****     {
 562:Core/Src/bms.c ****         if ((!BMS[0].chargeRequest) || (!BMS[1].chargeRequest))
 1626              		.loc 1 562 0
 1627 001c 1BB1     		cbz	r3, .L147
ARM GAS  /tmp/ccROOoJg.s 			page 42


 1628              		.loc 1 562 0 is_stmt 0 discriminator 1
 1629 001e 074B     		ldr	r3, .L148
 1630 0020 93F8EA31 		ldrb	r3, [r3, #490]	@ zero_extendqisi2
 1631 0024 43B9     		cbnz	r3, .L144
 1632              	.L147:
 563:Core/Src/bms.c ****         {
 564:Core/Src/bms.c ****             chargerOn = false;
 1633              		.loc 1 564 0 is_stmt 1
 1634 0026 0022     		movs	r2, #0
 1635 0028 054B     		ldr	r3, .L148+4
 1636 002a 1A70     		strb	r2, [r3]
 565:Core/Src/bms.c ****             BMS[0].state = Ready;
 1637              		.loc 1 565 0
 1638 002c 034B     		ldr	r3, .L148
 1639 002e 0122     		movs	r2, #1
 1640 0030 83F8F220 		strb	r2, [r3, #242]
 566:Core/Src/bms.c ****             BMS[1].state = Ready;
 1641              		.loc 1 566 0
 1642 0034 83F8E821 		strb	r2, [r3, #488]
 1643              	.L144:
 1644 0038 7047     		bx	lr
 1645              	.L149:
 1646 003a 00BF     		.align	2
 1647              	.L148:
 1648 003c 00000000 		.word	BMS
 1649 0040 00000000 		.word	chargerOn
 1650              		.cfi_endproc
 1651              	.LFE151:
 1653              		.global	__aeabi_i2d
 1654              		.global	__aeabi_dmul
 1655              		.global	__aeabi_d2uiz
 1656              		.section	.text.decodeVolt,"ax",%progbits
 1657              		.align	1
 1658              		.global	decodeVolt
 1659              		.syntax unified
 1660              		.thumb
 1661              		.thumb_func
 1662              		.fpu fpv4-sp-d16
 1664              	decodeVolt:
 1665              	.LFB152:
 567:Core/Src/bms.c ****         }
 568:Core/Src/bms.c ****     }
 569:Core/Src/bms.c **** }
 570:Core/Src/bms.c **** 
 571:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 572:Core/Src/bms.c **** void decodeVolt(bms_t *bms, CAN_RxHeaderTypeDef *rxMsg, uint8_t *canRx) // cell voltage in millivol
 573:Core/Src/bms.c **** {
 1666              		.loc 1 573 0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 1670              	.LVL132:
 1671 0000 38B5     		push	{r3, r4, r5, lr}
 1672              	.LCFI27:
 1673              		.cfi_def_cfa_offset 16
 1674              		.cfi_offset 3, -16
 1675              		.cfi_offset 4, -12
ARM GAS  /tmp/ccROOoJg.s 			page 43


 1676              		.cfi_offset 5, -8
 1677              		.cfi_offset 14, -4
 1678 0002 0546     		mov	r5, r0
 1679 0004 1446     		mov	r4, r2
 574:Core/Src/bms.c ****     switch (rxMsg->StdId)
 1680              		.loc 1 574 0
 1681 0006 0B68     		ldr	r3, [r1]
 1682 0008 A3F58C63 		sub	r3, r3, #1120
 1683 000c 1E2B     		cmp	r3, #30
 1684 000e 00F22186 		bhi	.L150
 1685 0012 DFE813F0 		tbh	[pc, r3, lsl #1]
 1686              	.LVL133:
 1687              	.L153:
 1688 0016 1F00     		.2byte	(.L152-.L153)/2
 1689 0018 7B00     		.2byte	(.L154-.L153)/2
 1690 001a F500     		.2byte	(.L155-.L153)/2
 1691 001c 6F01     		.2byte	(.L156-.L153)/2
 1692 001e EC01     		.2byte	(.L157-.L153)/2
 1693 0020 6C02     		.2byte	(.L158-.L153)/2
 1694 0022 EE02     		.2byte	(.L159-.L153)/2
 1695 0024 1F06     		.2byte	(.L150-.L153)/2
 1696 0026 7203     		.2byte	(.L160-.L153)/2
 1697 0028 F403     		.2byte	(.L161-.L153)/2
 1698 002a 7604     		.2byte	(.L162-.L153)/2
 1699 002c 1F06     		.2byte	(.L150-.L153)/2
 1700 002e FA04     		.2byte	(.L163-.L153)/2
 1701 0030 5C05     		.2byte	(.L164-.L153)/2
 1702 0032 BE05     		.2byte	(.L165-.L153)/2
 1703 0034 1F06     		.2byte	(.L150-.L153)/2
 1704 0036 4D00     		.2byte	(.L166-.L153)/2
 1705 0038 B800     		.2byte	(.L167-.L153)/2
 1706 003a 3201     		.2byte	(.L168-.L153)/2
 1707 003c AF01     		.2byte	(.L169-.L153)/2
 1708 003e 2B02     		.2byte	(.L170-.L153)/2
 1709 0040 AD02     		.2byte	(.L171-.L153)/2
 1710 0042 3103     		.2byte	(.L172-.L153)/2
 1711 0044 1F06     		.2byte	(.L150-.L153)/2
 1712 0046 B303     		.2byte	(.L173-.L153)/2
 1713 0048 3504     		.2byte	(.L174-.L153)/2
 1714 004a B904     		.2byte	(.L175-.L153)/2
 1715 004c 1F06     		.2byte	(.L150-.L153)/2
 1716 004e 2B05     		.2byte	(.L176-.L153)/2
 1717 0050 8D05     		.2byte	(.L177-.L153)/2
 1718 0052 EF05     		.2byte	(.L178-.L153)/2
 1719              		.p2align 1
 1720              	.L152:
 575:Core/Src/bms.c ****     {
 576:Core/Src/bms.c ****     case 0x460: // Begin module 1
 577:Core/Src/bms.c ****         bms->cellVolt[0] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 1721              		.loc 1 577 0
 1722 0054 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1723 0056 1B02     		lsls	r3, r3, #8
 1724 0058 03F47063 		and	r3, r3, #3840
 1725 005c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1726              	.LVL134:
 1727 005e 1844     		add	r0, r0, r3
 1728 0060 FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  /tmp/ccROOoJg.s 			page 44


 1729              	.LVL135:
 1730 0064 0022     		movs	r2, #0
 1731 0066 C24B     		ldr	r3, .L180
 1732 0068 FFF7FEFF 		bl	__aeabi_dmul
 1733              	.LVL136:
 1734 006c FFF7FEFF 		bl	__aeabi_d2uiz
 1735              	.LVL137:
 1736 0070 2880     		strh	r0, [r5]	@ movhi
 578:Core/Src/bms.c ****         bms->cellVolt[1] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 1737              		.loc 1 578 0
 1738 0072 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1739 0074 1B02     		lsls	r3, r3, #8
 1740 0076 03F47063 		and	r3, r3, #3840
 1741 007a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1742 007c 1844     		add	r0, r0, r3
 1743 007e FFF7FEFF 		bl	__aeabi_i2d
 1744              	.LVL138:
 1745 0082 0022     		movs	r2, #0
 1746 0084 BA4B     		ldr	r3, .L180
 1747 0086 FFF7FEFF 		bl	__aeabi_dmul
 1748              	.LVL139:
 1749 008a FFF7FEFF 		bl	__aeabi_d2uiz
 1750              	.LVL140:
 1751 008e 6880     		strh	r0, [r5, #2]	@ movhi
 579:Core/Src/bms.c ****         bms->cellVolt[2] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 1752              		.loc 1 579 0
 1753 0090 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1754 0092 1B02     		lsls	r3, r3, #8
 1755 0094 03F47063 		and	r3, r3, #3840
 1756 0098 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 1757 009a 1844     		add	r0, r0, r3
 1758 009c FFF7FEFF 		bl	__aeabi_i2d
 1759              	.LVL141:
 1760 00a0 0022     		movs	r2, #0
 1761 00a2 B34B     		ldr	r3, .L180
 1762 00a4 FFF7FEFF 		bl	__aeabi_dmul
 1763              	.LVL142:
 1764 00a8 FFF7FEFF 		bl	__aeabi_d2uiz
 1765              	.LVL143:
 1766 00ac A880     		strh	r0, [r5, #4]	@ movhi
 580:Core/Src/bms.c ****         break;
 1767              		.loc 1 580 0
 1768 00ae 38BD     		pop	{r3, r4, r5, pc}
 1769              	.LVL144:
 1770              	.L166:
 581:Core/Src/bms.c **** 
 582:Core/Src/bms.c ****     case 0x470:
 583:Core/Src/bms.c ****         bms->cellVolt[3] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 1771              		.loc 1 583 0
 1772 00b0 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1773 00b2 1B02     		lsls	r3, r3, #8
 1774 00b4 03F47063 		and	r3, r3, #3840
 1775 00b8 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1776              	.LVL145:
 1777 00ba 1844     		add	r0, r0, r3
 1778 00bc FFF7FEFF 		bl	__aeabi_i2d
 1779              	.LVL146:
ARM GAS  /tmp/ccROOoJg.s 			page 45


 1780 00c0 0022     		movs	r2, #0
 1781 00c2 AB4B     		ldr	r3, .L180
 1782 00c4 FFF7FEFF 		bl	__aeabi_dmul
 1783              	.LVL147:
 1784 00c8 FFF7FEFF 		bl	__aeabi_d2uiz
 1785              	.LVL148:
 1786 00cc E880     		strh	r0, [r5, #6]	@ movhi
 584:Core/Src/bms.c ****         bms->cellVolt[4] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 1787              		.loc 1 584 0
 1788 00ce A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1789 00d0 1B02     		lsls	r3, r3, #8
 1790 00d2 03F47063 		and	r3, r3, #3840
 1791 00d6 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1792 00d8 1844     		add	r0, r0, r3
 1793 00da FFF7FEFF 		bl	__aeabi_i2d
 1794              	.LVL149:
 1795 00de 0022     		movs	r2, #0
 1796 00e0 A34B     		ldr	r3, .L180
 1797 00e2 FFF7FEFF 		bl	__aeabi_dmul
 1798              	.LVL150:
 1799 00e6 FFF7FEFF 		bl	__aeabi_d2uiz
 1800              	.LVL151:
 1801 00ea 2881     		strh	r0, [r5, #8]	@ movhi
 585:Core/Src/bms.c ****         bms->cellVolt[5] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 1802              		.loc 1 585 0
 1803 00ec 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1804 00ee 1B02     		lsls	r3, r3, #8
 1805 00f0 03F47063 		and	r3, r3, #3840
 1806 00f4 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 1807 00f6 1844     		add	r0, r0, r3
 1808 00f8 FFF7FEFF 		bl	__aeabi_i2d
 1809              	.LVL152:
 1810 00fc 0022     		movs	r2, #0
 1811 00fe 9C4B     		ldr	r3, .L180
 1812 0100 FFF7FEFF 		bl	__aeabi_dmul
 1813              	.LVL153:
 1814 0104 FFF7FEFF 		bl	__aeabi_d2uiz
 1815              	.LVL154:
 1816 0108 6881     		strh	r0, [r5, #10]	@ movhi
 586:Core/Src/bms.c ****         break;
 1817              		.loc 1 586 0
 1818 010a 38BD     		pop	{r3, r4, r5, pc}
 1819              	.LVL155:
 1820              	.L154:
 587:Core/Src/bms.c **** 
 588:Core/Src/bms.c ****     case 0x461:
 589:Core/Src/bms.c ****         bms->cellVolt[6] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 1821              		.loc 1 589 0
 1822 010c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1823 010e 1B02     		lsls	r3, r3, #8
 1824 0110 03F47063 		and	r3, r3, #3840
 1825 0114 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1826              	.LVL156:
 1827 0116 1844     		add	r0, r0, r3
 1828 0118 FFF7FEFF 		bl	__aeabi_i2d
 1829              	.LVL157:
 1830 011c 0022     		movs	r2, #0
ARM GAS  /tmp/ccROOoJg.s 			page 46


 1831 011e 944B     		ldr	r3, .L180
 1832 0120 FFF7FEFF 		bl	__aeabi_dmul
 1833              	.LVL158:
 1834 0124 FFF7FEFF 		bl	__aeabi_d2uiz
 1835              	.LVL159:
 1836 0128 A881     		strh	r0, [r5, #12]	@ movhi
 590:Core/Src/bms.c ****         bms->cellVolt[7] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 1837              		.loc 1 590 0
 1838 012a A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1839 012c 1B02     		lsls	r3, r3, #8
 1840 012e 03F47063 		and	r3, r3, #3840
 1841 0132 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1842 0134 1844     		add	r0, r0, r3
 1843 0136 FFF7FEFF 		bl	__aeabi_i2d
 1844              	.LVL160:
 1845 013a 0022     		movs	r2, #0
 1846 013c 8C4B     		ldr	r3, .L180
 1847 013e FFF7FEFF 		bl	__aeabi_dmul
 1848              	.LVL161:
 1849 0142 FFF7FEFF 		bl	__aeabi_d2uiz
 1850              	.LVL162:
 1851 0146 E881     		strh	r0, [r5, #14]	@ movhi
 591:Core/Src/bms.c ****         bms->cellVolt[8] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 1852              		.loc 1 591 0
 1853 0148 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1854 014a 1B02     		lsls	r3, r3, #8
 1855 014c 03F47063 		and	r3, r3, #3840
 1856 0150 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 1857 0152 1844     		add	r0, r0, r3
 1858 0154 FFF7FEFF 		bl	__aeabi_i2d
 1859              	.LVL163:
 1860 0158 0022     		movs	r2, #0
 1861 015a 854B     		ldr	r3, .L180
 1862 015c FFF7FEFF 		bl	__aeabi_dmul
 1863              	.LVL164:
 1864 0160 FFF7FEFF 		bl	__aeabi_d2uiz
 1865              	.LVL165:
 1866 0164 2882     		strh	r0, [r5, #16]	@ movhi
 592:Core/Src/bms.c ****         bms->cellVolt[9] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 1867              		.loc 1 592 0
 1868 0166 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1869 0168 1B02     		lsls	r3, r3, #8
 1870 016a 03F47063 		and	r3, r3, #3840
 1871 016e E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 1872 0170 1844     		add	r0, r0, r3
 1873 0172 FFF7FEFF 		bl	__aeabi_i2d
 1874              	.LVL166:
 1875 0176 0022     		movs	r2, #0
 1876 0178 7D4B     		ldr	r3, .L180
 1877 017a FFF7FEFF 		bl	__aeabi_dmul
 1878              	.LVL167:
 1879 017e FFF7FEFF 		bl	__aeabi_d2uiz
 1880              	.LVL168:
 1881 0182 6882     		strh	r0, [r5, #18]	@ movhi
 593:Core/Src/bms.c ****         break;
 1882              		.loc 1 593 0
 1883 0184 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccROOoJg.s 			page 47


 1884              	.LVL169:
 1885              	.L167:
 594:Core/Src/bms.c **** 
 595:Core/Src/bms.c ****     case 0x471:
 596:Core/Src/bms.c ****         bms->cellVolt[10] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 1886              		.loc 1 596 0
 1887 0186 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1888 0188 1B02     		lsls	r3, r3, #8
 1889 018a 03F47063 		and	r3, r3, #3840
 1890 018e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1891              	.LVL170:
 1892 0190 1844     		add	r0, r0, r3
 1893 0192 FFF7FEFF 		bl	__aeabi_i2d
 1894              	.LVL171:
 1895 0196 0022     		movs	r2, #0
 1896 0198 754B     		ldr	r3, .L180
 1897 019a FFF7FEFF 		bl	__aeabi_dmul
 1898              	.LVL172:
 1899 019e FFF7FEFF 		bl	__aeabi_d2uiz
 1900              	.LVL173:
 1901 01a2 A882     		strh	r0, [r5, #20]	@ movhi
 597:Core/Src/bms.c ****         bms->cellVolt[11] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 1902              		.loc 1 597 0
 1903 01a4 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1904 01a6 1B02     		lsls	r3, r3, #8
 1905 01a8 03F47063 		and	r3, r3, #3840
 1906 01ac E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1907 01ae 1844     		add	r0, r0, r3
 1908 01b0 FFF7FEFF 		bl	__aeabi_i2d
 1909              	.LVL174:
 1910 01b4 0022     		movs	r2, #0
 1911 01b6 6E4B     		ldr	r3, .L180
 1912 01b8 FFF7FEFF 		bl	__aeabi_dmul
 1913              	.LVL175:
 1914 01bc FFF7FEFF 		bl	__aeabi_d2uiz
 1915              	.LVL176:
 1916 01c0 E882     		strh	r0, [r5, #22]	@ movhi
 598:Core/Src/bms.c ****         bms->cellVolt[12] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 1917              		.loc 1 598 0
 1918 01c2 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1919 01c4 1B02     		lsls	r3, r3, #8
 1920 01c6 03F47063 		and	r3, r3, #3840
 1921 01ca 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 1922 01cc 1844     		add	r0, r0, r3
 1923 01ce FFF7FEFF 		bl	__aeabi_i2d
 1924              	.LVL177:
 1925 01d2 0022     		movs	r2, #0
 1926 01d4 664B     		ldr	r3, .L180
 1927 01d6 FFF7FEFF 		bl	__aeabi_dmul
 1928              	.LVL178:
 1929 01da FFF7FEFF 		bl	__aeabi_d2uiz
 1930              	.LVL179:
 1931 01de 2883     		strh	r0, [r5, #24]	@ movhi
 599:Core/Src/bms.c ****         bms->cellVolt[13] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 1932              		.loc 1 599 0
 1933 01e0 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1934 01e2 1B02     		lsls	r3, r3, #8
ARM GAS  /tmp/ccROOoJg.s 			page 48


 1935 01e4 03F47063 		and	r3, r3, #3840
 1936 01e8 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 1937 01ea 1844     		add	r0, r0, r3
 1938 01ec FFF7FEFF 		bl	__aeabi_i2d
 1939              	.LVL180:
 1940 01f0 0022     		movs	r2, #0
 1941 01f2 5F4B     		ldr	r3, .L180
 1942 01f4 FFF7FEFF 		bl	__aeabi_dmul
 1943              	.LVL181:
 1944 01f8 FFF7FEFF 		bl	__aeabi_d2uiz
 1945              	.LVL182:
 1946 01fc 6883     		strh	r0, [r5, #26]	@ movhi
 600:Core/Src/bms.c ****         break;
 1947              		.loc 1 600 0
 1948 01fe 38BD     		pop	{r3, r4, r5, pc}
 1949              	.LVL183:
 1950              	.L155:
 601:Core/Src/bms.c **** 
 602:Core/Src/bms.c ****     case 0x462:
 603:Core/Src/bms.c ****         bms->cellVolt[14] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 1951              		.loc 1 603 0
 1952 0200 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1953 0202 1B02     		lsls	r3, r3, #8
 1954 0204 03F47063 		and	r3, r3, #3840
 1955 0208 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1956              	.LVL184:
 1957 020a 1844     		add	r0, r0, r3
 1958 020c FFF7FEFF 		bl	__aeabi_i2d
 1959              	.LVL185:
 1960 0210 0022     		movs	r2, #0
 1961 0212 574B     		ldr	r3, .L180
 1962 0214 FFF7FEFF 		bl	__aeabi_dmul
 1963              	.LVL186:
 1964 0218 FFF7FEFF 		bl	__aeabi_d2uiz
 1965              	.LVL187:
 1966 021c A883     		strh	r0, [r5, #28]	@ movhi
 604:Core/Src/bms.c ****         bms->cellVolt[15] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 1967              		.loc 1 604 0
 1968 021e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1969 0220 1B02     		lsls	r3, r3, #8
 1970 0222 03F47063 		and	r3, r3, #3840
 1971 0226 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1972 0228 1844     		add	r0, r0, r3
 1973 022a FFF7FEFF 		bl	__aeabi_i2d
 1974              	.LVL188:
 1975 022e 0022     		movs	r2, #0
 1976 0230 4F4B     		ldr	r3, .L180
 1977 0232 FFF7FEFF 		bl	__aeabi_dmul
 1978              	.LVL189:
 1979 0236 FFF7FEFF 		bl	__aeabi_d2uiz
 1980              	.LVL190:
 1981 023a E883     		strh	r0, [r5, #30]	@ movhi
 605:Core/Src/bms.c ****         bms->cellVolt[16] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 1982              		.loc 1 605 0
 1983 023c 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1984 023e 1B02     		lsls	r3, r3, #8
 1985 0240 03F47063 		and	r3, r3, #3840
ARM GAS  /tmp/ccROOoJg.s 			page 49


 1986 0244 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 1987 0246 1844     		add	r0, r0, r3
 1988 0248 FFF7FEFF 		bl	__aeabi_i2d
 1989              	.LVL191:
 1990 024c 0022     		movs	r2, #0
 1991 024e 484B     		ldr	r3, .L180
 1992 0250 FFF7FEFF 		bl	__aeabi_dmul
 1993              	.LVL192:
 1994 0254 FFF7FEFF 		bl	__aeabi_d2uiz
 1995              	.LVL193:
 1996 0258 2884     		strh	r0, [r5, #32]	@ movhi
 606:Core/Src/bms.c ****         bms->cellVolt[17] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 1997              		.loc 1 606 0
 1998 025a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1999 025c 1B02     		lsls	r3, r3, #8
 2000 025e 03F47063 		and	r3, r3, #3840
 2001 0262 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2002 0264 1844     		add	r0, r0, r3
 2003 0266 FFF7FEFF 		bl	__aeabi_i2d
 2004              	.LVL194:
 2005 026a 0022     		movs	r2, #0
 2006 026c 404B     		ldr	r3, .L180
 2007 026e FFF7FEFF 		bl	__aeabi_dmul
 2008              	.LVL195:
 2009 0272 FFF7FEFF 		bl	__aeabi_d2uiz
 2010              	.LVL196:
 2011 0276 6884     		strh	r0, [r5, #34]	@ movhi
 607:Core/Src/bms.c ****         break;
 2012              		.loc 1 607 0
 2013 0278 38BD     		pop	{r3, r4, r5, pc}
 2014              	.LVL197:
 2015              	.L168:
 608:Core/Src/bms.c **** 
 609:Core/Src/bms.c ****     case 0x472:
 610:Core/Src/bms.c ****         bms->cellVolt[18] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2016              		.loc 1 610 0
 2017 027a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2018 027c 1B02     		lsls	r3, r3, #8
 2019 027e 03F47063 		and	r3, r3, #3840
 2020 0282 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2021              	.LVL198:
 2022 0284 1844     		add	r0, r0, r3
 2023 0286 FFF7FEFF 		bl	__aeabi_i2d
 2024              	.LVL199:
 2025 028a 0022     		movs	r2, #0
 2026 028c 384B     		ldr	r3, .L180
 2027 028e FFF7FEFF 		bl	__aeabi_dmul
 2028              	.LVL200:
 2029 0292 FFF7FEFF 		bl	__aeabi_d2uiz
 2030              	.LVL201:
 2031 0296 A884     		strh	r0, [r5, #36]	@ movhi
 611:Core/Src/bms.c ****         bms->cellVolt[19] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2032              		.loc 1 611 0
 2033 0298 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2034 029a 1B02     		lsls	r3, r3, #8
 2035 029c 03F47063 		and	r3, r3, #3840
 2036 02a0 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccROOoJg.s 			page 50


 2037 02a2 1844     		add	r0, r0, r3
 2038 02a4 FFF7FEFF 		bl	__aeabi_i2d
 2039              	.LVL202:
 2040 02a8 0022     		movs	r2, #0
 2041 02aa 314B     		ldr	r3, .L180
 2042 02ac FFF7FEFF 		bl	__aeabi_dmul
 2043              	.LVL203:
 2044 02b0 FFF7FEFF 		bl	__aeabi_d2uiz
 2045              	.LVL204:
 2046 02b4 E884     		strh	r0, [r5, #38]	@ movhi
 612:Core/Src/bms.c ****         bms->cellVolt[20] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2047              		.loc 1 612 0
 2048 02b6 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2049 02b8 1B02     		lsls	r3, r3, #8
 2050 02ba 03F47063 		and	r3, r3, #3840
 2051 02be 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2052 02c0 1844     		add	r0, r0, r3
 2053 02c2 FFF7FEFF 		bl	__aeabi_i2d
 2054              	.LVL205:
 2055 02c6 0022     		movs	r2, #0
 2056 02c8 294B     		ldr	r3, .L180
 2057 02ca FFF7FEFF 		bl	__aeabi_dmul
 2058              	.LVL206:
 2059 02ce FFF7FEFF 		bl	__aeabi_d2uiz
 2060              	.LVL207:
 2061 02d2 2885     		strh	r0, [r5, #40]	@ movhi
 613:Core/Src/bms.c ****         bms->cellVolt[21] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2062              		.loc 1 613 0
 2063 02d4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2064 02d6 1B02     		lsls	r3, r3, #8
 2065 02d8 03F47063 		and	r3, r3, #3840
 2066 02dc E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2067 02de 1844     		add	r0, r0, r3
 2068 02e0 FFF7FEFF 		bl	__aeabi_i2d
 2069              	.LVL208:
 2070 02e4 0022     		movs	r2, #0
 2071 02e6 224B     		ldr	r3, .L180
 2072 02e8 FFF7FEFF 		bl	__aeabi_dmul
 2073              	.LVL209:
 2074 02ec FFF7FEFF 		bl	__aeabi_d2uiz
 2075              	.LVL210:
 2076 02f0 6885     		strh	r0, [r5, #42]	@ movhi
 614:Core/Src/bms.c ****         break;
 2077              		.loc 1 614 0
 2078 02f2 38BD     		pop	{r3, r4, r5, pc}
 2079              	.LVL211:
 2080              	.L156:
 615:Core/Src/bms.c ****     case 0x463:
 616:Core/Src/bms.c ****         bms->cellVolt[22] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2081              		.loc 1 616 0
 2082 02f4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2083 02f6 1B02     		lsls	r3, r3, #8
 2084 02f8 03F47063 		and	r3, r3, #3840
 2085 02fc 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2086              	.LVL212:
 2087 02fe 1844     		add	r0, r0, r3
 2088 0300 FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  /tmp/ccROOoJg.s 			page 51


 2089              	.LVL213:
 2090 0304 0022     		movs	r2, #0
 2091 0306 1A4B     		ldr	r3, .L180
 2092 0308 FFF7FEFF 		bl	__aeabi_dmul
 2093              	.LVL214:
 2094 030c FFF7FEFF 		bl	__aeabi_d2uiz
 2095              	.LVL215:
 2096 0310 A885     		strh	r0, [r5, #44]	@ movhi
 617:Core/Src/bms.c ****         bms->cellVolt[23] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2097              		.loc 1 617 0
 2098 0312 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2099 0314 1B02     		lsls	r3, r3, #8
 2100 0316 03F47063 		and	r3, r3, #3840
 2101 031a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2102 031c 1844     		add	r0, r0, r3
 2103 031e FFF7FEFF 		bl	__aeabi_i2d
 2104              	.LVL216:
 2105 0322 0022     		movs	r2, #0
 2106 0324 124B     		ldr	r3, .L180
 2107 0326 FFF7FEFF 		bl	__aeabi_dmul
 2108              	.LVL217:
 2109 032a FFF7FEFF 		bl	__aeabi_d2uiz
 2110              	.LVL218:
 2111 032e E885     		strh	r0, [r5, #46]	@ movhi
 618:Core/Src/bms.c ****         bms->cellVolt[24] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2112              		.loc 1 618 0
 2113 0330 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2114 0332 1B02     		lsls	r3, r3, #8
 2115 0334 03F47063 		and	r3, r3, #3840
 2116 0338 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2117 033a 1844     		add	r0, r0, r3
 2118 033c FFF7FEFF 		bl	__aeabi_i2d
 2119              	.LVL219:
 2120 0340 0022     		movs	r2, #0
 2121 0342 0B4B     		ldr	r3, .L180
 2122 0344 FFF7FEFF 		bl	__aeabi_dmul
 2123              	.LVL220:
 2124 0348 FFF7FEFF 		bl	__aeabi_d2uiz
 2125              	.LVL221:
 2126 034c 2886     		strh	r0, [r5, #48]	@ movhi
 619:Core/Src/bms.c ****         bms->cellVolt[25] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2127              		.loc 1 619 0
 2128 034e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2129 0350 1B02     		lsls	r3, r3, #8
 2130 0352 03F47063 		and	r3, r3, #3840
 2131 0356 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2132 0358 1844     		add	r0, r0, r3
 2133 035a FFF7FEFF 		bl	__aeabi_i2d
 2134              	.LVL222:
 2135 035e 0022     		movs	r2, #0
 2136 0360 034B     		ldr	r3, .L180
 2137 0362 FFF7FEFF 		bl	__aeabi_dmul
 2138              	.LVL223:
 2139 0366 FFF7FEFF 		bl	__aeabi_d2uiz
 2140              	.LVL224:
 2141 036a 6886     		strh	r0, [r5, #50]	@ movhi
 620:Core/Src/bms.c ****         break;
ARM GAS  /tmp/ccROOoJg.s 			page 52


 2142              		.loc 1 620 0
 2143 036c 38BD     		pop	{r3, r4, r5, pc}
 2144              	.LVL225:
 2145              	.L181:
 2146 036e 00BF     		.align	2
 2147              	.L180:
 2148 0370 0000F43F 		.word	1072955392
 2149              	.LVL226:
 2150              	.L169:
 621:Core/Src/bms.c **** 
 622:Core/Src/bms.c ****     case 0x473:
 623:Core/Src/bms.c ****         bms->cellVolt[26] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2151              		.loc 1 623 0
 2152 0374 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2153 0376 1B02     		lsls	r3, r3, #8
 2154 0378 03F47063 		and	r3, r3, #3840
 2155 037c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2156              	.LVL227:
 2157 037e 1844     		add	r0, r0, r3
 2158 0380 FFF7FEFF 		bl	__aeabi_i2d
 2159              	.LVL228:
 2160 0384 0022     		movs	r2, #0
 2161 0386 BB4B     		ldr	r3, .L182
 2162 0388 FFF7FEFF 		bl	__aeabi_dmul
 2163              	.LVL229:
 2164 038c FFF7FEFF 		bl	__aeabi_d2uiz
 2165              	.LVL230:
 2166 0390 A886     		strh	r0, [r5, #52]	@ movhi
 624:Core/Src/bms.c ****         bms->cellVolt[27] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2167              		.loc 1 624 0
 2168 0392 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2169 0394 1B02     		lsls	r3, r3, #8
 2170 0396 03F47063 		and	r3, r3, #3840
 2171 039a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2172 039c 1844     		add	r0, r0, r3
 2173 039e FFF7FEFF 		bl	__aeabi_i2d
 2174              	.LVL231:
 2175 03a2 0022     		movs	r2, #0
 2176 03a4 B34B     		ldr	r3, .L182
 2177 03a6 FFF7FEFF 		bl	__aeabi_dmul
 2178              	.LVL232:
 2179 03aa FFF7FEFF 		bl	__aeabi_d2uiz
 2180              	.LVL233:
 2181 03ae E886     		strh	r0, [r5, #54]	@ movhi
 625:Core/Src/bms.c ****         bms->cellVolt[28] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2182              		.loc 1 625 0
 2183 03b0 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2184 03b2 1B02     		lsls	r3, r3, #8
 2185 03b4 03F47063 		and	r3, r3, #3840
 2186 03b8 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2187 03ba 1844     		add	r0, r0, r3
 2188 03bc FFF7FEFF 		bl	__aeabi_i2d
 2189              	.LVL234:
 2190 03c0 0022     		movs	r2, #0
 2191 03c2 AC4B     		ldr	r3, .L182
 2192 03c4 FFF7FEFF 		bl	__aeabi_dmul
 2193              	.LVL235:
ARM GAS  /tmp/ccROOoJg.s 			page 53


 2194 03c8 FFF7FEFF 		bl	__aeabi_d2uiz
 2195              	.LVL236:
 2196 03cc 2887     		strh	r0, [r5, #56]	@ movhi
 626:Core/Src/bms.c ****         bms->cellVolt[29] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2197              		.loc 1 626 0
 2198 03ce A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2199 03d0 1B02     		lsls	r3, r3, #8
 2200 03d2 03F47063 		and	r3, r3, #3840
 2201 03d6 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2202 03d8 1844     		add	r0, r0, r3
 2203 03da FFF7FEFF 		bl	__aeabi_i2d
 2204              	.LVL237:
 2205 03de 0022     		movs	r2, #0
 2206 03e0 A44B     		ldr	r3, .L182
 2207 03e2 FFF7FEFF 		bl	__aeabi_dmul
 2208              	.LVL238:
 2209 03e6 FFF7FEFF 		bl	__aeabi_d2uiz
 2210              	.LVL239:
 2211 03ea 6887     		strh	r0, [r5, #58]	@ movhi
 627:Core/Src/bms.c ****         break;
 2212              		.loc 1 627 0
 2213 03ec 38BD     		pop	{r3, r4, r5, pc}
 2214              	.LVL240:
 2215              	.L157:
 628:Core/Src/bms.c **** 
 629:Core/Src/bms.c ****     case 0x464:
 630:Core/Src/bms.c ****         bms->cellVolt[30] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25); // Begin module 2
 2216              		.loc 1 630 0
 2217 03ee 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2218 03f0 1B02     		lsls	r3, r3, #8
 2219 03f2 03F47063 		and	r3, r3, #3840
 2220 03f6 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2221              	.LVL241:
 2222 03f8 1844     		add	r0, r0, r3
 2223 03fa FFF7FEFF 		bl	__aeabi_i2d
 2224              	.LVL242:
 2225 03fe 0022     		movs	r2, #0
 2226 0400 9C4B     		ldr	r3, .L182
 2227 0402 FFF7FEFF 		bl	__aeabi_dmul
 2228              	.LVL243:
 2229 0406 FFF7FEFF 		bl	__aeabi_d2uiz
 2230              	.LVL244:
 2231 040a A887     		strh	r0, [r5, #60]	@ movhi
 631:Core/Src/bms.c ****         bms->cellVolt[31] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2232              		.loc 1 631 0
 2233 040c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2234 040e 1B02     		lsls	r3, r3, #8
 2235 0410 03F47063 		and	r3, r3, #3840
 2236 0414 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2237 0416 1844     		add	r0, r0, r3
 2238 0418 FFF7FEFF 		bl	__aeabi_i2d
 2239              	.LVL245:
 2240 041c 0022     		movs	r2, #0
 2241 041e 954B     		ldr	r3, .L182
 2242 0420 FFF7FEFF 		bl	__aeabi_dmul
 2243              	.LVL246:
 2244 0424 FFF7FEFF 		bl	__aeabi_d2uiz
ARM GAS  /tmp/ccROOoJg.s 			page 54


 2245              	.LVL247:
 2246 0428 E887     		strh	r0, [r5, #62]	@ movhi
 632:Core/Src/bms.c ****         bms->cellVolt[32] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2247              		.loc 1 632 0
 2248 042a 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2249 042c 1B02     		lsls	r3, r3, #8
 2250 042e 03F47063 		and	r3, r3, #3840
 2251 0432 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2252 0434 1844     		add	r0, r0, r3
 2253 0436 FFF7FEFF 		bl	__aeabi_i2d
 2254              	.LVL248:
 2255 043a 0022     		movs	r2, #0
 2256 043c 8D4B     		ldr	r3, .L182
 2257 043e FFF7FEFF 		bl	__aeabi_dmul
 2258              	.LVL249:
 2259 0442 FFF7FEFF 		bl	__aeabi_d2uiz
 2260              	.LVL250:
 2261 0446 A5F84000 		strh	r0, [r5, #64]	@ movhi
 633:Core/Src/bms.c ****         bms->cellVolt[33] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2262              		.loc 1 633 0
 2263 044a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2264 044c 1B02     		lsls	r3, r3, #8
 2265 044e 03F47063 		and	r3, r3, #3840
 2266 0452 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2267 0454 1844     		add	r0, r0, r3
 2268 0456 FFF7FEFF 		bl	__aeabi_i2d
 2269              	.LVL251:
 2270 045a 0022     		movs	r2, #0
 2271 045c 854B     		ldr	r3, .L182
 2272 045e FFF7FEFF 		bl	__aeabi_dmul
 2273              	.LVL252:
 2274 0462 FFF7FEFF 		bl	__aeabi_d2uiz
 2275              	.LVL253:
 2276 0466 A5F84200 		strh	r0, [r5, #66]	@ movhi
 634:Core/Src/bms.c ****         break;
 2277              		.loc 1 634 0
 2278 046a 38BD     		pop	{r3, r4, r5, pc}
 2279              	.LVL254:
 2280              	.L170:
 635:Core/Src/bms.c **** 
 636:Core/Src/bms.c ****     case 0x474:
 637:Core/Src/bms.c ****         bms->cellVolt[34] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2281              		.loc 1 637 0
 2282 046c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2283 046e 1B02     		lsls	r3, r3, #8
 2284 0470 03F47063 		and	r3, r3, #3840
 2285 0474 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2286              	.LVL255:
 2287 0476 1844     		add	r0, r0, r3
 2288 0478 FFF7FEFF 		bl	__aeabi_i2d
 2289              	.LVL256:
 2290 047c 0022     		movs	r2, #0
 2291 047e 7D4B     		ldr	r3, .L182
 2292 0480 FFF7FEFF 		bl	__aeabi_dmul
 2293              	.LVL257:
 2294 0484 FFF7FEFF 		bl	__aeabi_d2uiz
 2295              	.LVL258:
ARM GAS  /tmp/ccROOoJg.s 			page 55


 2296 0488 A5F84400 		strh	r0, [r5, #68]	@ movhi
 638:Core/Src/bms.c ****         bms->cellVolt[35] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2297              		.loc 1 638 0
 2298 048c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2299 048e 1B02     		lsls	r3, r3, #8
 2300 0490 03F47063 		and	r3, r3, #3840
 2301 0494 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2302 0496 1844     		add	r0, r0, r3
 2303 0498 FFF7FEFF 		bl	__aeabi_i2d
 2304              	.LVL259:
 2305 049c 0022     		movs	r2, #0
 2306 049e 754B     		ldr	r3, .L182
 2307 04a0 FFF7FEFF 		bl	__aeabi_dmul
 2308              	.LVL260:
 2309 04a4 FFF7FEFF 		bl	__aeabi_d2uiz
 2310              	.LVL261:
 2311 04a8 A5F84600 		strh	r0, [r5, #70]	@ movhi
 639:Core/Src/bms.c ****         bms->cellVolt[36] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2312              		.loc 1 639 0
 2313 04ac 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2314 04ae 1B02     		lsls	r3, r3, #8
 2315 04b0 03F47063 		and	r3, r3, #3840
 2316 04b4 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2317 04b6 1844     		add	r0, r0, r3
 2318 04b8 FFF7FEFF 		bl	__aeabi_i2d
 2319              	.LVL262:
 2320 04bc 0022     		movs	r2, #0
 2321 04be 6D4B     		ldr	r3, .L182
 2322 04c0 FFF7FEFF 		bl	__aeabi_dmul
 2323              	.LVL263:
 2324 04c4 FFF7FEFF 		bl	__aeabi_d2uiz
 2325              	.LVL264:
 2326 04c8 A5F84800 		strh	r0, [r5, #72]	@ movhi
 640:Core/Src/bms.c ****         bms->cellVolt[37] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2327              		.loc 1 640 0
 2328 04cc A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2329 04ce 1B02     		lsls	r3, r3, #8
 2330 04d0 03F47063 		and	r3, r3, #3840
 2331 04d4 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2332 04d6 1844     		add	r0, r0, r3
 2333 04d8 FFF7FEFF 		bl	__aeabi_i2d
 2334              	.LVL265:
 2335 04dc 0022     		movs	r2, #0
 2336 04de 654B     		ldr	r3, .L182
 2337 04e0 FFF7FEFF 		bl	__aeabi_dmul
 2338              	.LVL266:
 2339 04e4 FFF7FEFF 		bl	__aeabi_d2uiz
 2340              	.LVL267:
 2341 04e8 A5F84A00 		strh	r0, [r5, #74]	@ movhi
 641:Core/Src/bms.c ****         break;
 2342              		.loc 1 641 0
 2343 04ec 38BD     		pop	{r3, r4, r5, pc}
 2344              	.LVL268:
 2345              	.L158:
 642:Core/Src/bms.c **** 
 643:Core/Src/bms.c ****     case 0x465:
 644:Core/Src/bms.c ****         bms->cellVolt[38] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
ARM GAS  /tmp/ccROOoJg.s 			page 56


 2346              		.loc 1 644 0
 2347 04ee 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2348 04f0 1B02     		lsls	r3, r3, #8
 2349 04f2 03F47063 		and	r3, r3, #3840
 2350 04f6 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2351              	.LVL269:
 2352 04f8 1844     		add	r0, r0, r3
 2353 04fa FFF7FEFF 		bl	__aeabi_i2d
 2354              	.LVL270:
 2355 04fe 0022     		movs	r2, #0
 2356 0500 5C4B     		ldr	r3, .L182
 2357 0502 FFF7FEFF 		bl	__aeabi_dmul
 2358              	.LVL271:
 2359 0506 FFF7FEFF 		bl	__aeabi_d2uiz
 2360              	.LVL272:
 2361 050a A5F84C00 		strh	r0, [r5, #76]	@ movhi
 645:Core/Src/bms.c ****         bms->cellVolt[39] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2362              		.loc 1 645 0
 2363 050e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2364 0510 1B02     		lsls	r3, r3, #8
 2365 0512 03F47063 		and	r3, r3, #3840
 2366 0516 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2367 0518 1844     		add	r0, r0, r3
 2368 051a FFF7FEFF 		bl	__aeabi_i2d
 2369              	.LVL273:
 2370 051e 0022     		movs	r2, #0
 2371 0520 544B     		ldr	r3, .L182
 2372 0522 FFF7FEFF 		bl	__aeabi_dmul
 2373              	.LVL274:
 2374 0526 FFF7FEFF 		bl	__aeabi_d2uiz
 2375              	.LVL275:
 2376 052a A5F84E00 		strh	r0, [r5, #78]	@ movhi
 646:Core/Src/bms.c ****         bms->cellVolt[40] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2377              		.loc 1 646 0
 2378 052e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2379 0530 1B02     		lsls	r3, r3, #8
 2380 0532 03F47063 		and	r3, r3, #3840
 2381 0536 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2382 0538 1844     		add	r0, r0, r3
 2383 053a FFF7FEFF 		bl	__aeabi_i2d
 2384              	.LVL276:
 2385 053e 0022     		movs	r2, #0
 2386 0540 4C4B     		ldr	r3, .L182
 2387 0542 FFF7FEFF 		bl	__aeabi_dmul
 2388              	.LVL277:
 2389 0546 FFF7FEFF 		bl	__aeabi_d2uiz
 2390              	.LVL278:
 2391 054a A5F85000 		strh	r0, [r5, #80]	@ movhi
 647:Core/Src/bms.c ****         bms->cellVolt[41] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2392              		.loc 1 647 0
 2393 054e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2394 0550 1B02     		lsls	r3, r3, #8
 2395 0552 03F47063 		and	r3, r3, #3840
 2396 0556 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2397 0558 1844     		add	r0, r0, r3
 2398 055a FFF7FEFF 		bl	__aeabi_i2d
 2399              	.LVL279:
ARM GAS  /tmp/ccROOoJg.s 			page 57


 2400 055e 0022     		movs	r2, #0
 2401 0560 444B     		ldr	r3, .L182
 2402 0562 FFF7FEFF 		bl	__aeabi_dmul
 2403              	.LVL280:
 2404 0566 FFF7FEFF 		bl	__aeabi_d2uiz
 2405              	.LVL281:
 2406 056a A5F85200 		strh	r0, [r5, #82]	@ movhi
 648:Core/Src/bms.c ****         break;
 2407              		.loc 1 648 0
 2408 056e 38BD     		pop	{r3, r4, r5, pc}
 2409              	.LVL282:
 2410              	.L171:
 649:Core/Src/bms.c **** 
 650:Core/Src/bms.c ****     case 0x475:
 651:Core/Src/bms.c ****         bms->cellVolt[42] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2411              		.loc 1 651 0
 2412 0570 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2413 0572 1B02     		lsls	r3, r3, #8
 2414 0574 03F47063 		and	r3, r3, #3840
 2415 0578 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2416              	.LVL283:
 2417 057a 1844     		add	r0, r0, r3
 2418 057c FFF7FEFF 		bl	__aeabi_i2d
 2419              	.LVL284:
 2420 0580 0022     		movs	r2, #0
 2421 0582 3C4B     		ldr	r3, .L182
 2422 0584 FFF7FEFF 		bl	__aeabi_dmul
 2423              	.LVL285:
 2424 0588 FFF7FEFF 		bl	__aeabi_d2uiz
 2425              	.LVL286:
 2426 058c A5F85400 		strh	r0, [r5, #84]	@ movhi
 652:Core/Src/bms.c ****         bms->cellVolt[43] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2427              		.loc 1 652 0
 2428 0590 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2429 0592 1B02     		lsls	r3, r3, #8
 2430 0594 03F47063 		and	r3, r3, #3840
 2431 0598 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2432 059a 1844     		add	r0, r0, r3
 2433 059c FFF7FEFF 		bl	__aeabi_i2d
 2434              	.LVL287:
 2435 05a0 0022     		movs	r2, #0
 2436 05a2 344B     		ldr	r3, .L182
 2437 05a4 FFF7FEFF 		bl	__aeabi_dmul
 2438              	.LVL288:
 2439 05a8 FFF7FEFF 		bl	__aeabi_d2uiz
 2440              	.LVL289:
 2441 05ac A5F85600 		strh	r0, [r5, #86]	@ movhi
 653:Core/Src/bms.c ****         bms->cellVolt[44] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2442              		.loc 1 653 0
 2443 05b0 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2444 05b2 1B02     		lsls	r3, r3, #8
 2445 05b4 03F47063 		and	r3, r3, #3840
 2446 05b8 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2447 05ba 1844     		add	r0, r0, r3
 2448 05bc FFF7FEFF 		bl	__aeabi_i2d
 2449              	.LVL290:
 2450 05c0 0022     		movs	r2, #0
ARM GAS  /tmp/ccROOoJg.s 			page 58


 2451 05c2 2C4B     		ldr	r3, .L182
 2452 05c4 FFF7FEFF 		bl	__aeabi_dmul
 2453              	.LVL291:
 2454 05c8 FFF7FEFF 		bl	__aeabi_d2uiz
 2455              	.LVL292:
 2456 05cc A5F85800 		strh	r0, [r5, #88]	@ movhi
 654:Core/Src/bms.c ****         bms->cellVolt[45] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2457              		.loc 1 654 0
 2458 05d0 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2459 05d2 1B02     		lsls	r3, r3, #8
 2460 05d4 03F47063 		and	r3, r3, #3840
 2461 05d8 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2462 05da 1844     		add	r0, r0, r3
 2463 05dc FFF7FEFF 		bl	__aeabi_i2d
 2464              	.LVL293:
 2465 05e0 0022     		movs	r2, #0
 2466 05e2 244B     		ldr	r3, .L182
 2467 05e4 FFF7FEFF 		bl	__aeabi_dmul
 2468              	.LVL294:
 2469 05e8 FFF7FEFF 		bl	__aeabi_d2uiz
 2470              	.LVL295:
 2471 05ec A5F85A00 		strh	r0, [r5, #90]	@ movhi
 655:Core/Src/bms.c ****         break;
 2472              		.loc 1 655 0
 2473 05f0 38BD     		pop	{r3, r4, r5, pc}
 2474              	.LVL296:
 2475              	.L159:
 656:Core/Src/bms.c **** 
 657:Core/Src/bms.c ****     case 0x466:
 658:Core/Src/bms.c ****         bms->cellVolt[46] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2476              		.loc 1 658 0
 2477 05f2 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2478 05f4 1B02     		lsls	r3, r3, #8
 2479 05f6 03F47063 		and	r3, r3, #3840
 2480 05fa 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2481              	.LVL297:
 2482 05fc 1844     		add	r0, r0, r3
 2483 05fe FFF7FEFF 		bl	__aeabi_i2d
 2484              	.LVL298:
 2485 0602 0022     		movs	r2, #0
 2486 0604 1B4B     		ldr	r3, .L182
 2487 0606 FFF7FEFF 		bl	__aeabi_dmul
 2488              	.LVL299:
 2489 060a FFF7FEFF 		bl	__aeabi_d2uiz
 2490              	.LVL300:
 2491 060e A5F85C00 		strh	r0, [r5, #92]	@ movhi
 659:Core/Src/bms.c ****         bms->cellVolt[47] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2492              		.loc 1 659 0
 2493 0612 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2494 0614 1B02     		lsls	r3, r3, #8
 2495 0616 03F47063 		and	r3, r3, #3840
 2496 061a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2497 061c 1844     		add	r0, r0, r3
 2498 061e FFF7FEFF 		bl	__aeabi_i2d
 2499              	.LVL301:
 2500 0622 0022     		movs	r2, #0
 2501 0624 134B     		ldr	r3, .L182
ARM GAS  /tmp/ccROOoJg.s 			page 59


 2502 0626 FFF7FEFF 		bl	__aeabi_dmul
 2503              	.LVL302:
 2504 062a FFF7FEFF 		bl	__aeabi_d2uiz
 2505              	.LVL303:
 2506 062e A5F85E00 		strh	r0, [r5, #94]	@ movhi
 660:Core/Src/bms.c ****         bms->cellVolt[48] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2507              		.loc 1 660 0
 2508 0632 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2509 0634 1B02     		lsls	r3, r3, #8
 2510 0636 03F47063 		and	r3, r3, #3840
 2511 063a 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2512 063c 1844     		add	r0, r0, r3
 2513 063e FFF7FEFF 		bl	__aeabi_i2d
 2514              	.LVL304:
 2515 0642 0022     		movs	r2, #0
 2516 0644 0B4B     		ldr	r3, .L182
 2517 0646 FFF7FEFF 		bl	__aeabi_dmul
 2518              	.LVL305:
 2519 064a FFF7FEFF 		bl	__aeabi_d2uiz
 2520              	.LVL306:
 2521 064e A5F86000 		strh	r0, [r5, #96]	@ movhi
 661:Core/Src/bms.c ****         bms->cellVolt[49] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2522              		.loc 1 661 0
 2523 0652 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2524 0654 1B02     		lsls	r3, r3, #8
 2525 0656 03F47063 		and	r3, r3, #3840
 2526 065a E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2527 065c 1844     		add	r0, r0, r3
 2528 065e FFF7FEFF 		bl	__aeabi_i2d
 2529              	.LVL307:
 2530 0662 0022     		movs	r2, #0
 2531 0664 034B     		ldr	r3, .L182
 2532 0666 FFF7FEFF 		bl	__aeabi_dmul
 2533              	.LVL308:
 2534 066a FFF7FEFF 		bl	__aeabi_d2uiz
 2535              	.LVL309:
 2536 066e A5F86200 		strh	r0, [r5, #98]	@ movhi
 662:Core/Src/bms.c ****         break;
 2537              		.loc 1 662 0
 2538 0672 38BD     		pop	{r3, r4, r5, pc}
 2539              	.LVL310:
 2540              	.L183:
 2541              		.align	2
 2542              	.L182:
 2543 0674 0000F43F 		.word	1072955392
 2544              	.LVL311:
 2545              	.L172:
 663:Core/Src/bms.c **** 
 664:Core/Src/bms.c ****     case 0x476:
 665:Core/Src/bms.c ****         bms->cellVolt[50] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2546              		.loc 1 665 0
 2547 0678 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2548 067a 1B02     		lsls	r3, r3, #8
 2549 067c 03F47063 		and	r3, r3, #3840
 2550 0680 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2551              	.LVL312:
 2552 0682 1844     		add	r0, r0, r3
ARM GAS  /tmp/ccROOoJg.s 			page 60


 2553 0684 FFF7FEFF 		bl	__aeabi_i2d
 2554              	.LVL313:
 2555 0688 0022     		movs	r2, #0
 2556 068a BE4B     		ldr	r3, .L184
 2557 068c FFF7FEFF 		bl	__aeabi_dmul
 2558              	.LVL314:
 2559 0690 FFF7FEFF 		bl	__aeabi_d2uiz
 2560              	.LVL315:
 2561 0694 A5F86400 		strh	r0, [r5, #100]	@ movhi
 666:Core/Src/bms.c ****         bms->cellVolt[51] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2562              		.loc 1 666 0
 2563 0698 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2564 069a 1B02     		lsls	r3, r3, #8
 2565 069c 03F47063 		and	r3, r3, #3840
 2566 06a0 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2567 06a2 1844     		add	r0, r0, r3
 2568 06a4 FFF7FEFF 		bl	__aeabi_i2d
 2569              	.LVL316:
 2570 06a8 0022     		movs	r2, #0
 2571 06aa B64B     		ldr	r3, .L184
 2572 06ac FFF7FEFF 		bl	__aeabi_dmul
 2573              	.LVL317:
 2574 06b0 FFF7FEFF 		bl	__aeabi_d2uiz
 2575              	.LVL318:
 2576 06b4 A5F86600 		strh	r0, [r5, #102]	@ movhi
 667:Core/Src/bms.c ****         bms->cellVolt[52] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2577              		.loc 1 667 0
 2578 06b8 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2579 06ba 1B02     		lsls	r3, r3, #8
 2580 06bc 03F47063 		and	r3, r3, #3840
 2581 06c0 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2582 06c2 1844     		add	r0, r0, r3
 2583 06c4 FFF7FEFF 		bl	__aeabi_i2d
 2584              	.LVL319:
 2585 06c8 0022     		movs	r2, #0
 2586 06ca AE4B     		ldr	r3, .L184
 2587 06cc FFF7FEFF 		bl	__aeabi_dmul
 2588              	.LVL320:
 2589 06d0 FFF7FEFF 		bl	__aeabi_d2uiz
 2590              	.LVL321:
 2591 06d4 A5F86800 		strh	r0, [r5, #104]	@ movhi
 668:Core/Src/bms.c ****         bms->cellVolt[53] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2592              		.loc 1 668 0
 2593 06d8 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2594 06da 1B02     		lsls	r3, r3, #8
 2595 06dc 03F47063 		and	r3, r3, #3840
 2596 06e0 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2597 06e2 1844     		add	r0, r0, r3
 2598 06e4 FFF7FEFF 		bl	__aeabi_i2d
 2599              	.LVL322:
 2600 06e8 0022     		movs	r2, #0
 2601 06ea A64B     		ldr	r3, .L184
 2602 06ec FFF7FEFF 		bl	__aeabi_dmul
 2603              	.LVL323:
 2604 06f0 FFF7FEFF 		bl	__aeabi_d2uiz
 2605              	.LVL324:
 2606 06f4 A5F86A00 		strh	r0, [r5, #106]	@ movhi
ARM GAS  /tmp/ccROOoJg.s 			page 61


 669:Core/Src/bms.c ****         break;
 2607              		.loc 1 669 0
 2608 06f8 38BD     		pop	{r3, r4, r5, pc}
 2609              	.LVL325:
 2610              	.L160:
 670:Core/Src/bms.c **** 
 671:Core/Src/bms.c ****     case 0x468:
 672:Core/Src/bms.c ****         bms->cellVolt[54] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25); //Begin module 3
 2611              		.loc 1 672 0
 2612 06fa 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2613 06fc 1B02     		lsls	r3, r3, #8
 2614 06fe 03F47063 		and	r3, r3, #3840
 2615 0702 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2616              	.LVL326:
 2617 0704 1844     		add	r0, r0, r3
 2618 0706 FFF7FEFF 		bl	__aeabi_i2d
 2619              	.LVL327:
 2620 070a 0022     		movs	r2, #0
 2621 070c 9D4B     		ldr	r3, .L184
 2622 070e FFF7FEFF 		bl	__aeabi_dmul
 2623              	.LVL328:
 2624 0712 FFF7FEFF 		bl	__aeabi_d2uiz
 2625              	.LVL329:
 2626 0716 A5F86C00 		strh	r0, [r5, #108]	@ movhi
 673:Core/Src/bms.c ****         bms->cellVolt[55] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2627              		.loc 1 673 0
 2628 071a A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2629 071c 1B02     		lsls	r3, r3, #8
 2630 071e 03F47063 		and	r3, r3, #3840
 2631 0722 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2632 0724 1844     		add	r0, r0, r3
 2633 0726 FFF7FEFF 		bl	__aeabi_i2d
 2634              	.LVL330:
 2635 072a 0022     		movs	r2, #0
 2636 072c 954B     		ldr	r3, .L184
 2637 072e FFF7FEFF 		bl	__aeabi_dmul
 2638              	.LVL331:
 2639 0732 FFF7FEFF 		bl	__aeabi_d2uiz
 2640              	.LVL332:
 2641 0736 A5F86E00 		strh	r0, [r5, #110]	@ movhi
 674:Core/Src/bms.c ****         bms->cellVolt[56] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2642              		.loc 1 674 0
 2643 073a 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2644 073c 1B02     		lsls	r3, r3, #8
 2645 073e 03F47063 		and	r3, r3, #3840
 2646 0742 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2647 0744 1844     		add	r0, r0, r3
 2648 0746 FFF7FEFF 		bl	__aeabi_i2d
 2649              	.LVL333:
 2650 074a 0022     		movs	r2, #0
 2651 074c 8D4B     		ldr	r3, .L184
 2652 074e FFF7FEFF 		bl	__aeabi_dmul
 2653              	.LVL334:
 2654 0752 FFF7FEFF 		bl	__aeabi_d2uiz
 2655              	.LVL335:
 2656 0756 A5F87000 		strh	r0, [r5, #112]	@ movhi
 675:Core/Src/bms.c ****         bms->cellVolt[57] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
ARM GAS  /tmp/ccROOoJg.s 			page 62


 2657              		.loc 1 675 0
 2658 075a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2659 075c 1B02     		lsls	r3, r3, #8
 2660 075e 03F47063 		and	r3, r3, #3840
 2661 0762 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2662 0764 1844     		add	r0, r0, r3
 2663 0766 FFF7FEFF 		bl	__aeabi_i2d
 2664              	.LVL336:
 2665 076a 0022     		movs	r2, #0
 2666 076c 854B     		ldr	r3, .L184
 2667 076e FFF7FEFF 		bl	__aeabi_dmul
 2668              	.LVL337:
 2669 0772 FFF7FEFF 		bl	__aeabi_d2uiz
 2670              	.LVL338:
 2671 0776 A5F87200 		strh	r0, [r5, #114]	@ movhi
 676:Core/Src/bms.c ****         break;
 2672              		.loc 1 676 0
 2673 077a 38BD     		pop	{r3, r4, r5, pc}
 2674              	.LVL339:
 2675              	.L173:
 677:Core/Src/bms.c **** 
 678:Core/Src/bms.c ****     case 0x478:
 679:Core/Src/bms.c ****         bms->cellVolt[58] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2676              		.loc 1 679 0
 2677 077c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2678 077e 1B02     		lsls	r3, r3, #8
 2679 0780 03F47063 		and	r3, r3, #3840
 2680 0784 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2681              	.LVL340:
 2682 0786 1844     		add	r0, r0, r3
 2683 0788 FFF7FEFF 		bl	__aeabi_i2d
 2684              	.LVL341:
 2685 078c 0022     		movs	r2, #0
 2686 078e 7D4B     		ldr	r3, .L184
 2687 0790 FFF7FEFF 		bl	__aeabi_dmul
 2688              	.LVL342:
 2689 0794 FFF7FEFF 		bl	__aeabi_d2uiz
 2690              	.LVL343:
 2691 0798 A5F87400 		strh	r0, [r5, #116]	@ movhi
 680:Core/Src/bms.c ****         bms->cellVolt[59] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2692              		.loc 1 680 0
 2693 079c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2694 079e 1B02     		lsls	r3, r3, #8
 2695 07a0 03F47063 		and	r3, r3, #3840
 2696 07a4 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2697 07a6 1844     		add	r0, r0, r3
 2698 07a8 FFF7FEFF 		bl	__aeabi_i2d
 2699              	.LVL344:
 2700 07ac 0022     		movs	r2, #0
 2701 07ae 754B     		ldr	r3, .L184
 2702 07b0 FFF7FEFF 		bl	__aeabi_dmul
 2703              	.LVL345:
 2704 07b4 FFF7FEFF 		bl	__aeabi_d2uiz
 2705              	.LVL346:
 2706 07b8 A5F87600 		strh	r0, [r5, #118]	@ movhi
 681:Core/Src/bms.c ****         bms->cellVolt[60] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2707              		.loc 1 681 0
ARM GAS  /tmp/ccROOoJg.s 			page 63


 2708 07bc 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2709 07be 1B02     		lsls	r3, r3, #8
 2710 07c0 03F47063 		and	r3, r3, #3840
 2711 07c4 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2712 07c6 1844     		add	r0, r0, r3
 2713 07c8 FFF7FEFF 		bl	__aeabi_i2d
 2714              	.LVL347:
 2715 07cc 0022     		movs	r2, #0
 2716 07ce 6D4B     		ldr	r3, .L184
 2717 07d0 FFF7FEFF 		bl	__aeabi_dmul
 2718              	.LVL348:
 2719 07d4 FFF7FEFF 		bl	__aeabi_d2uiz
 2720              	.LVL349:
 2721 07d8 A5F87800 		strh	r0, [r5, #120]	@ movhi
 682:Core/Src/bms.c ****         bms->cellVolt[61] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2722              		.loc 1 682 0
 2723 07dc A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2724 07de 1B02     		lsls	r3, r3, #8
 2725 07e0 03F47063 		and	r3, r3, #3840
 2726 07e4 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2727 07e6 1844     		add	r0, r0, r3
 2728 07e8 FFF7FEFF 		bl	__aeabi_i2d
 2729              	.LVL350:
 2730 07ec 0022     		movs	r2, #0
 2731 07ee 654B     		ldr	r3, .L184
 2732 07f0 FFF7FEFF 		bl	__aeabi_dmul
 2733              	.LVL351:
 2734 07f4 FFF7FEFF 		bl	__aeabi_d2uiz
 2735              	.LVL352:
 2736 07f8 A5F87A00 		strh	r0, [r5, #122]	@ movhi
 683:Core/Src/bms.c ****         break;
 2737              		.loc 1 683 0
 2738 07fc 38BD     		pop	{r3, r4, r5, pc}
 2739              	.LVL353:
 2740              	.L161:
 684:Core/Src/bms.c **** 
 685:Core/Src/bms.c ****     case 0x469:
 686:Core/Src/bms.c ****         bms->cellVolt[62] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2741              		.loc 1 686 0
 2742 07fe 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2743 0800 1B02     		lsls	r3, r3, #8
 2744 0802 03F47063 		and	r3, r3, #3840
 2745 0806 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2746              	.LVL354:
 2747 0808 1844     		add	r0, r0, r3
 2748 080a FFF7FEFF 		bl	__aeabi_i2d
 2749              	.LVL355:
 2750 080e 0022     		movs	r2, #0
 2751 0810 5C4B     		ldr	r3, .L184
 2752 0812 FFF7FEFF 		bl	__aeabi_dmul
 2753              	.LVL356:
 2754 0816 FFF7FEFF 		bl	__aeabi_d2uiz
 2755              	.LVL357:
 2756 081a A5F87C00 		strh	r0, [r5, #124]	@ movhi
 687:Core/Src/bms.c ****         bms->cellVolt[63] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2757              		.loc 1 687 0
 2758 081e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccROOoJg.s 			page 64


 2759 0820 1B02     		lsls	r3, r3, #8
 2760 0822 03F47063 		and	r3, r3, #3840
 2761 0826 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2762 0828 1844     		add	r0, r0, r3
 2763 082a FFF7FEFF 		bl	__aeabi_i2d
 2764              	.LVL358:
 2765 082e 0022     		movs	r2, #0
 2766 0830 544B     		ldr	r3, .L184
 2767 0832 FFF7FEFF 		bl	__aeabi_dmul
 2768              	.LVL359:
 2769 0836 FFF7FEFF 		bl	__aeabi_d2uiz
 2770              	.LVL360:
 2771 083a A5F87E00 		strh	r0, [r5, #126]	@ movhi
 688:Core/Src/bms.c ****         bms->cellVolt[64] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2772              		.loc 1 688 0
 2773 083e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2774 0840 1B02     		lsls	r3, r3, #8
 2775 0842 03F47063 		and	r3, r3, #3840
 2776 0846 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2777 0848 1844     		add	r0, r0, r3
 2778 084a FFF7FEFF 		bl	__aeabi_i2d
 2779              	.LVL361:
 2780 084e 0022     		movs	r2, #0
 2781 0850 4C4B     		ldr	r3, .L184
 2782 0852 FFF7FEFF 		bl	__aeabi_dmul
 2783              	.LVL362:
 2784 0856 FFF7FEFF 		bl	__aeabi_d2uiz
 2785              	.LVL363:
 2786 085a A5F88000 		strh	r0, [r5, #128]	@ movhi
 689:Core/Src/bms.c ****         bms->cellVolt[65] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2787              		.loc 1 689 0
 2788 085e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2789 0860 1B02     		lsls	r3, r3, #8
 2790 0862 03F47063 		and	r3, r3, #3840
 2791 0866 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2792 0868 1844     		add	r0, r0, r3
 2793 086a FFF7FEFF 		bl	__aeabi_i2d
 2794              	.LVL364:
 2795 086e 0022     		movs	r2, #0
 2796 0870 444B     		ldr	r3, .L184
 2797 0872 FFF7FEFF 		bl	__aeabi_dmul
 2798              	.LVL365:
 2799 0876 FFF7FEFF 		bl	__aeabi_d2uiz
 2800              	.LVL366:
 2801 087a A5F88200 		strh	r0, [r5, #130]	@ movhi
 690:Core/Src/bms.c ****         break;
 2802              		.loc 1 690 0
 2803 087e 38BD     		pop	{r3, r4, r5, pc}
 2804              	.LVL367:
 2805              	.L174:
 691:Core/Src/bms.c **** 
 692:Core/Src/bms.c ****     case 0x479:
 693:Core/Src/bms.c ****         bms->cellVolt[66] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2806              		.loc 1 693 0
 2807 0880 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2808 0882 1B02     		lsls	r3, r3, #8
 2809 0884 03F47063 		and	r3, r3, #3840
ARM GAS  /tmp/ccROOoJg.s 			page 65


 2810 0888 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2811              	.LVL368:
 2812 088a 1844     		add	r0, r0, r3
 2813 088c FFF7FEFF 		bl	__aeabi_i2d
 2814              	.LVL369:
 2815 0890 0022     		movs	r2, #0
 2816 0892 3C4B     		ldr	r3, .L184
 2817 0894 FFF7FEFF 		bl	__aeabi_dmul
 2818              	.LVL370:
 2819 0898 FFF7FEFF 		bl	__aeabi_d2uiz
 2820              	.LVL371:
 2821 089c A5F88400 		strh	r0, [r5, #132]	@ movhi
 694:Core/Src/bms.c ****         bms->cellVolt[67] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2822              		.loc 1 694 0
 2823 08a0 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2824 08a2 1B02     		lsls	r3, r3, #8
 2825 08a4 03F47063 		and	r3, r3, #3840
 2826 08a8 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2827 08aa 1844     		add	r0, r0, r3
 2828 08ac FFF7FEFF 		bl	__aeabi_i2d
 2829              	.LVL372:
 2830 08b0 0022     		movs	r2, #0
 2831 08b2 344B     		ldr	r3, .L184
 2832 08b4 FFF7FEFF 		bl	__aeabi_dmul
 2833              	.LVL373:
 2834 08b8 FFF7FEFF 		bl	__aeabi_d2uiz
 2835              	.LVL374:
 2836 08bc A5F88600 		strh	r0, [r5, #134]	@ movhi
 695:Core/Src/bms.c ****         bms->cellVolt[68] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2837              		.loc 1 695 0
 2838 08c0 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2839 08c2 1B02     		lsls	r3, r3, #8
 2840 08c4 03F47063 		and	r3, r3, #3840
 2841 08c8 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2842 08ca 1844     		add	r0, r0, r3
 2843 08cc FFF7FEFF 		bl	__aeabi_i2d
 2844              	.LVL375:
 2845 08d0 0022     		movs	r2, #0
 2846 08d2 2C4B     		ldr	r3, .L184
 2847 08d4 FFF7FEFF 		bl	__aeabi_dmul
 2848              	.LVL376:
 2849 08d8 FFF7FEFF 		bl	__aeabi_d2uiz
 2850              	.LVL377:
 2851 08dc A5F88800 		strh	r0, [r5, #136]	@ movhi
 696:Core/Src/bms.c ****         bms->cellVolt[69] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2852              		.loc 1 696 0
 2853 08e0 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2854 08e2 1B02     		lsls	r3, r3, #8
 2855 08e4 03F47063 		and	r3, r3, #3840
 2856 08e8 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2857 08ea 1844     		add	r0, r0, r3
 2858 08ec FFF7FEFF 		bl	__aeabi_i2d
 2859              	.LVL378:
 2860 08f0 0022     		movs	r2, #0
 2861 08f2 244B     		ldr	r3, .L184
 2862 08f4 FFF7FEFF 		bl	__aeabi_dmul
 2863              	.LVL379:
ARM GAS  /tmp/ccROOoJg.s 			page 66


 2864 08f8 FFF7FEFF 		bl	__aeabi_d2uiz
 2865              	.LVL380:
 2866 08fc A5F88A00 		strh	r0, [r5, #138]	@ movhi
 697:Core/Src/bms.c ****         break;
 2867              		.loc 1 697 0
 2868 0900 38BD     		pop	{r3, r4, r5, pc}
 2869              	.LVL381:
 2870              	.L162:
 698:Core/Src/bms.c **** 
 699:Core/Src/bms.c ****     case 0x46A:
 700:Core/Src/bms.c ****         bms->cellVolt[70] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2871              		.loc 1 700 0
 2872 0902 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2873 0904 1B02     		lsls	r3, r3, #8
 2874 0906 03F47063 		and	r3, r3, #3840
 2875 090a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2876              	.LVL382:
 2877 090c 1844     		add	r0, r0, r3
 2878 090e FFF7FEFF 		bl	__aeabi_i2d
 2879              	.LVL383:
 2880 0912 0022     		movs	r2, #0
 2881 0914 1B4B     		ldr	r3, .L184
 2882 0916 FFF7FEFF 		bl	__aeabi_dmul
 2883              	.LVL384:
 2884 091a FFF7FEFF 		bl	__aeabi_d2uiz
 2885              	.LVL385:
 2886 091e A5F88C00 		strh	r0, [r5, #140]	@ movhi
 701:Core/Src/bms.c ****         bms->cellVolt[71] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2887              		.loc 1 701 0
 2888 0922 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2889 0924 1B02     		lsls	r3, r3, #8
 2890 0926 03F47063 		and	r3, r3, #3840
 2891 092a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2892 092c 1844     		add	r0, r0, r3
 2893 092e FFF7FEFF 		bl	__aeabi_i2d
 2894              	.LVL386:
 2895 0932 0022     		movs	r2, #0
 2896 0934 134B     		ldr	r3, .L184
 2897 0936 FFF7FEFF 		bl	__aeabi_dmul
 2898              	.LVL387:
 2899 093a FFF7FEFF 		bl	__aeabi_d2uiz
 2900              	.LVL388:
 2901 093e A5F88E00 		strh	r0, [r5, #142]	@ movhi
 702:Core/Src/bms.c ****         bms->cellVolt[72] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2902              		.loc 1 702 0
 2903 0942 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2904 0944 1B02     		lsls	r3, r3, #8
 2905 0946 03F47063 		and	r3, r3, #3840
 2906 094a 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2907 094c 1844     		add	r0, r0, r3
 2908 094e FFF7FEFF 		bl	__aeabi_i2d
 2909              	.LVL389:
 2910 0952 0022     		movs	r2, #0
 2911 0954 0B4B     		ldr	r3, .L184
 2912 0956 FFF7FEFF 		bl	__aeabi_dmul
 2913              	.LVL390:
 2914 095a FFF7FEFF 		bl	__aeabi_d2uiz
ARM GAS  /tmp/ccROOoJg.s 			page 67


 2915              	.LVL391:
 2916 095e A5F89000 		strh	r0, [r5, #144]	@ movhi
 703:Core/Src/bms.c ****         bms->cellVolt[73] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2917              		.loc 1 703 0
 2918 0962 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2919 0964 1B02     		lsls	r3, r3, #8
 2920 0966 03F47063 		and	r3, r3, #3840
 2921 096a E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2922 096c 1844     		add	r0, r0, r3
 2923 096e FFF7FEFF 		bl	__aeabi_i2d
 2924              	.LVL392:
 2925 0972 0022     		movs	r2, #0
 2926 0974 034B     		ldr	r3, .L184
 2927 0976 FFF7FEFF 		bl	__aeabi_dmul
 2928              	.LVL393:
 2929 097a FFF7FEFF 		bl	__aeabi_d2uiz
 2930              	.LVL394:
 2931 097e A5F89200 		strh	r0, [r5, #146]	@ movhi
 704:Core/Src/bms.c ****         break;
 2932              		.loc 1 704 0
 2933 0982 38BD     		pop	{r3, r4, r5, pc}
 2934              	.LVL395:
 2935              	.L185:
 2936              		.align	2
 2937              	.L184:
 2938 0984 0000F43F 		.word	1072955392
 2939              	.LVL396:
 2940              	.L175:
 705:Core/Src/bms.c **** 
 706:Core/Src/bms.c ****     case 0x47A:
 707:Core/Src/bms.c ****         bms->cellVolt[74] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2941              		.loc 1 707 0
 2942 0988 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2943 098a 1B02     		lsls	r3, r3, #8
 2944 098c 03F47063 		and	r3, r3, #3840
 2945 0990 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2946              	.LVL397:
 2947 0992 1844     		add	r0, r0, r3
 2948 0994 FFF7FEFF 		bl	__aeabi_i2d
 2949              	.LVL398:
 2950 0998 0022     		movs	r2, #0
 2951 099a AF4B     		ldr	r3, .L186
 2952 099c FFF7FEFF 		bl	__aeabi_dmul
 2953              	.LVL399:
 2954 09a0 FFF7FEFF 		bl	__aeabi_d2uiz
 2955              	.LVL400:
 2956 09a4 A5F89400 		strh	r0, [r5, #148]	@ movhi
 708:Core/Src/bms.c ****         bms->cellVolt[75] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2957              		.loc 1 708 0
 2958 09a8 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2959 09aa 1B02     		lsls	r3, r3, #8
 2960 09ac 03F47063 		and	r3, r3, #3840
 2961 09b0 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2962 09b2 1844     		add	r0, r0, r3
 2963 09b4 FFF7FEFF 		bl	__aeabi_i2d
 2964              	.LVL401:
 2965 09b8 0022     		movs	r2, #0
ARM GAS  /tmp/ccROOoJg.s 			page 68


 2966 09ba A74B     		ldr	r3, .L186
 2967 09bc FFF7FEFF 		bl	__aeabi_dmul
 2968              	.LVL402:
 2969 09c0 FFF7FEFF 		bl	__aeabi_d2uiz
 2970              	.LVL403:
 2971 09c4 A5F89600 		strh	r0, [r5, #150]	@ movhi
 709:Core/Src/bms.c ****         bms->cellVolt[76] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2972              		.loc 1 709 0
 2973 09c8 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2974 09ca 1B02     		lsls	r3, r3, #8
 2975 09cc 03F47063 		and	r3, r3, #3840
 2976 09d0 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2977 09d2 1844     		add	r0, r0, r3
 2978 09d4 FFF7FEFF 		bl	__aeabi_i2d
 2979              	.LVL404:
 2980 09d8 0022     		movs	r2, #0
 2981 09da 9F4B     		ldr	r3, .L186
 2982 09dc FFF7FEFF 		bl	__aeabi_dmul
 2983              	.LVL405:
 2984 09e0 FFF7FEFF 		bl	__aeabi_d2uiz
 2985              	.LVL406:
 2986 09e4 A5F89800 		strh	r0, [r5, #152]	@ movhi
 710:Core/Src/bms.c ****         bms->cellVolt[77] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2987              		.loc 1 710 0
 2988 09e8 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2989 09ea 1B02     		lsls	r3, r3, #8
 2990 09ec 03F47063 		and	r3, r3, #3840
 2991 09f0 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2992 09f2 1844     		add	r0, r0, r3
 2993 09f4 FFF7FEFF 		bl	__aeabi_i2d
 2994              	.LVL407:
 2995 09f8 0022     		movs	r2, #0
 2996 09fa 974B     		ldr	r3, .L186
 2997 09fc FFF7FEFF 		bl	__aeabi_dmul
 2998              	.LVL408:
 2999 0a00 FFF7FEFF 		bl	__aeabi_d2uiz
 3000              	.LVL409:
 3001 0a04 A5F89A00 		strh	r0, [r5, #154]	@ movhi
 711:Core/Src/bms.c ****         break;
 3002              		.loc 1 711 0
 3003 0a08 38BD     		pop	{r3, r4, r5, pc}
 3004              	.LVL410:
 3005              	.L163:
 712:Core/Src/bms.c **** 
 713:Core/Src/bms.c ****     case 0x46C:
 714:Core/Src/bms.c ****         bms->cellVolt[78] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25); //Begin module 4
 3006              		.loc 1 714 0
 3007 0a0a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3008 0a0c 1B02     		lsls	r3, r3, #8
 3009 0a0e 03F47063 		and	r3, r3, #3840
 3010 0a12 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3011              	.LVL411:
 3012 0a14 1844     		add	r0, r0, r3
 3013 0a16 FFF7FEFF 		bl	__aeabi_i2d
 3014              	.LVL412:
 3015 0a1a 0022     		movs	r2, #0
 3016 0a1c 8E4B     		ldr	r3, .L186
ARM GAS  /tmp/ccROOoJg.s 			page 69


 3017 0a1e FFF7FEFF 		bl	__aeabi_dmul
 3018              	.LVL413:
 3019 0a22 FFF7FEFF 		bl	__aeabi_d2uiz
 3020              	.LVL414:
 3021 0a26 A5F89C00 		strh	r0, [r5, #156]	@ movhi
 715:Core/Src/bms.c ****         bms->cellVolt[79] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3022              		.loc 1 715 0
 3023 0a2a A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3024 0a2c 1B02     		lsls	r3, r3, #8
 3025 0a2e 03F47063 		and	r3, r3, #3840
 3026 0a32 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3027 0a34 1844     		add	r0, r0, r3
 3028 0a36 FFF7FEFF 		bl	__aeabi_i2d
 3029              	.LVL415:
 3030 0a3a 0022     		movs	r2, #0
 3031 0a3c 864B     		ldr	r3, .L186
 3032 0a3e FFF7FEFF 		bl	__aeabi_dmul
 3033              	.LVL416:
 3034 0a42 FFF7FEFF 		bl	__aeabi_d2uiz
 3035              	.LVL417:
 3036 0a46 A5F89E00 		strh	r0, [r5, #158]	@ movhi
 716:Core/Src/bms.c ****         bms->cellVolt[80] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3037              		.loc 1 716 0
 3038 0a4a 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3039 0a4c 1B02     		lsls	r3, r3, #8
 3040 0a4e 03F47063 		and	r3, r3, #3840
 3041 0a52 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3042 0a54 1844     		add	r0, r0, r3
 3043 0a56 FFF7FEFF 		bl	__aeabi_i2d
 3044              	.LVL418:
 3045 0a5a 0022     		movs	r2, #0
 3046 0a5c 7E4B     		ldr	r3, .L186
 3047 0a5e FFF7FEFF 		bl	__aeabi_dmul
 3048              	.LVL419:
 3049 0a62 FFF7FEFF 		bl	__aeabi_d2uiz
 3050              	.LVL420:
 3051 0a66 A5F8A000 		strh	r0, [r5, #160]	@ movhi
 717:Core/Src/bms.c ****         break;
 3052              		.loc 1 717 0
 3053 0a6a 38BD     		pop	{r3, r4, r5, pc}
 3054              	.LVL421:
 3055              	.L176:
 718:Core/Src/bms.c **** 
 719:Core/Src/bms.c ****     case 0x47C:
 720:Core/Src/bms.c ****         bms->cellVolt[81] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 3056              		.loc 1 720 0
 3057 0a6c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3058 0a6e 1B02     		lsls	r3, r3, #8
 3059 0a70 03F47063 		and	r3, r3, #3840
 3060 0a74 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3061              	.LVL422:
 3062 0a76 1844     		add	r0, r0, r3
 3063 0a78 FFF7FEFF 		bl	__aeabi_i2d
 3064              	.LVL423:
 3065 0a7c 0022     		movs	r2, #0
 3066 0a7e 764B     		ldr	r3, .L186
 3067 0a80 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccROOoJg.s 			page 70


 3068              	.LVL424:
 3069 0a84 FFF7FEFF 		bl	__aeabi_d2uiz
 3070              	.LVL425:
 3071 0a88 A5F8A200 		strh	r0, [r5, #162]	@ movhi
 721:Core/Src/bms.c ****         bms->cellVolt[82] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3072              		.loc 1 721 0
 3073 0a8c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3074 0a8e 1B02     		lsls	r3, r3, #8
 3075 0a90 03F47063 		and	r3, r3, #3840
 3076 0a94 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3077 0a96 1844     		add	r0, r0, r3
 3078 0a98 FFF7FEFF 		bl	__aeabi_i2d
 3079              	.LVL426:
 3080 0a9c 0022     		movs	r2, #0
 3081 0a9e 6E4B     		ldr	r3, .L186
 3082 0aa0 FFF7FEFF 		bl	__aeabi_dmul
 3083              	.LVL427:
 3084 0aa4 FFF7FEFF 		bl	__aeabi_d2uiz
 3085              	.LVL428:
 3086 0aa8 A5F8A400 		strh	r0, [r5, #164]	@ movhi
 722:Core/Src/bms.c ****         bms->cellVolt[83] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3087              		.loc 1 722 0
 3088 0aac 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3089 0aae 1B02     		lsls	r3, r3, #8
 3090 0ab0 03F47063 		and	r3, r3, #3840
 3091 0ab4 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3092 0ab6 1844     		add	r0, r0, r3
 3093 0ab8 FFF7FEFF 		bl	__aeabi_i2d
 3094              	.LVL429:
 3095 0abc 0022     		movs	r2, #0
 3096 0abe 664B     		ldr	r3, .L186
 3097 0ac0 FFF7FEFF 		bl	__aeabi_dmul
 3098              	.LVL430:
 3099 0ac4 FFF7FEFF 		bl	__aeabi_d2uiz
 3100              	.LVL431:
 3101 0ac8 A5F8A600 		strh	r0, [r5, #166]	@ movhi
 723:Core/Src/bms.c ****         break;
 3102              		.loc 1 723 0
 3103 0acc 38BD     		pop	{r3, r4, r5, pc}
 3104              	.LVL432:
 3105              	.L164:
 724:Core/Src/bms.c **** 
 725:Core/Src/bms.c ****     case 0x46D:
 726:Core/Src/bms.c ****         bms->cellVolt[84] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 3106              		.loc 1 726 0
 3107 0ace 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3108 0ad0 1B02     		lsls	r3, r3, #8
 3109 0ad2 03F47063 		and	r3, r3, #3840
 3110 0ad6 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3111              	.LVL433:
 3112 0ad8 1844     		add	r0, r0, r3
 3113 0ada FFF7FEFF 		bl	__aeabi_i2d
 3114              	.LVL434:
 3115 0ade 0022     		movs	r2, #0
 3116 0ae0 5D4B     		ldr	r3, .L186
 3117 0ae2 FFF7FEFF 		bl	__aeabi_dmul
 3118              	.LVL435:
ARM GAS  /tmp/ccROOoJg.s 			page 71


 3119 0ae6 FFF7FEFF 		bl	__aeabi_d2uiz
 3120              	.LVL436:
 3121 0aea A5F8A800 		strh	r0, [r5, #168]	@ movhi
 727:Core/Src/bms.c ****         bms->cellVolt[85] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3122              		.loc 1 727 0
 3123 0aee A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3124 0af0 1B02     		lsls	r3, r3, #8
 3125 0af2 03F47063 		and	r3, r3, #3840
 3126 0af6 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3127 0af8 1844     		add	r0, r0, r3
 3128 0afa FFF7FEFF 		bl	__aeabi_i2d
 3129              	.LVL437:
 3130 0afe 0022     		movs	r2, #0
 3131 0b00 554B     		ldr	r3, .L186
 3132 0b02 FFF7FEFF 		bl	__aeabi_dmul
 3133              	.LVL438:
 3134 0b06 FFF7FEFF 		bl	__aeabi_d2uiz
 3135              	.LVL439:
 3136 0b0a A5F8AA00 		strh	r0, [r5, #170]	@ movhi
 728:Core/Src/bms.c ****         bms->cellVolt[86] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3137              		.loc 1 728 0
 3138 0b0e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3139 0b10 1B02     		lsls	r3, r3, #8
 3140 0b12 03F47063 		and	r3, r3, #3840
 3141 0b16 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3142 0b18 1844     		add	r0, r0, r3
 3143 0b1a FFF7FEFF 		bl	__aeabi_i2d
 3144              	.LVL440:
 3145 0b1e 0022     		movs	r2, #0
 3146 0b20 4D4B     		ldr	r3, .L186
 3147 0b22 FFF7FEFF 		bl	__aeabi_dmul
 3148              	.LVL441:
 3149 0b26 FFF7FEFF 		bl	__aeabi_d2uiz
 3150              	.LVL442:
 3151 0b2a A5F8AC00 		strh	r0, [r5, #172]	@ movhi
 729:Core/Src/bms.c ****         break;
 3152              		.loc 1 729 0
 3153 0b2e 38BD     		pop	{r3, r4, r5, pc}
 3154              	.LVL443:
 3155              	.L177:
 730:Core/Src/bms.c **** 
 731:Core/Src/bms.c ****     case 0x47D:
 732:Core/Src/bms.c ****         bms->cellVolt[87] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 3156              		.loc 1 732 0
 3157 0b30 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3158 0b32 1B02     		lsls	r3, r3, #8
 3159 0b34 03F47063 		and	r3, r3, #3840
 3160 0b38 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3161              	.LVL444:
 3162 0b3a 1844     		add	r0, r0, r3
 3163 0b3c FFF7FEFF 		bl	__aeabi_i2d
 3164              	.LVL445:
 3165 0b40 0022     		movs	r2, #0
 3166 0b42 454B     		ldr	r3, .L186
 3167 0b44 FFF7FEFF 		bl	__aeabi_dmul
 3168              	.LVL446:
 3169 0b48 FFF7FEFF 		bl	__aeabi_d2uiz
ARM GAS  /tmp/ccROOoJg.s 			page 72


 3170              	.LVL447:
 3171 0b4c A5F8AE00 		strh	r0, [r5, #174]	@ movhi
 733:Core/Src/bms.c ****         bms->cellVolt[88] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3172              		.loc 1 733 0
 3173 0b50 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3174 0b52 1B02     		lsls	r3, r3, #8
 3175 0b54 03F47063 		and	r3, r3, #3840
 3176 0b58 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3177 0b5a 1844     		add	r0, r0, r3
 3178 0b5c FFF7FEFF 		bl	__aeabi_i2d
 3179              	.LVL448:
 3180 0b60 0022     		movs	r2, #0
 3181 0b62 3D4B     		ldr	r3, .L186
 3182 0b64 FFF7FEFF 		bl	__aeabi_dmul
 3183              	.LVL449:
 3184 0b68 FFF7FEFF 		bl	__aeabi_d2uiz
 3185              	.LVL450:
 3186 0b6c A5F8B000 		strh	r0, [r5, #176]	@ movhi
 734:Core/Src/bms.c ****         bms->cellVolt[89] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3187              		.loc 1 734 0
 3188 0b70 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3189 0b72 1B02     		lsls	r3, r3, #8
 3190 0b74 03F47063 		and	r3, r3, #3840
 3191 0b78 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3192 0b7a 1844     		add	r0, r0, r3
 3193 0b7c FFF7FEFF 		bl	__aeabi_i2d
 3194              	.LVL451:
 3195 0b80 0022     		movs	r2, #0
 3196 0b82 354B     		ldr	r3, .L186
 3197 0b84 FFF7FEFF 		bl	__aeabi_dmul
 3198              	.LVL452:
 3199 0b88 FFF7FEFF 		bl	__aeabi_d2uiz
 3200              	.LVL453:
 3201 0b8c A5F8B200 		strh	r0, [r5, #178]	@ movhi
 735:Core/Src/bms.c ****         break;
 3202              		.loc 1 735 0
 3203 0b90 38BD     		pop	{r3, r4, r5, pc}
 3204              	.LVL454:
 3205              	.L165:
 736:Core/Src/bms.c **** 
 737:Core/Src/bms.c ****     case 0x46E:
 738:Core/Src/bms.c ****         bms->cellVolt[90] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 3206              		.loc 1 738 0
 3207 0b92 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3208 0b94 1B02     		lsls	r3, r3, #8
 3209 0b96 03F47063 		and	r3, r3, #3840
 3210 0b9a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3211              	.LVL455:
 3212 0b9c 1844     		add	r0, r0, r3
 3213 0b9e FFF7FEFF 		bl	__aeabi_i2d
 3214              	.LVL456:
 3215 0ba2 0022     		movs	r2, #0
 3216 0ba4 2C4B     		ldr	r3, .L186
 3217 0ba6 FFF7FEFF 		bl	__aeabi_dmul
 3218              	.LVL457:
 3219 0baa FFF7FEFF 		bl	__aeabi_d2uiz
 3220              	.LVL458:
ARM GAS  /tmp/ccROOoJg.s 			page 73


 3221 0bae A5F8B400 		strh	r0, [r5, #180]	@ movhi
 739:Core/Src/bms.c ****         bms->cellVolt[91] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3222              		.loc 1 739 0
 3223 0bb2 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3224 0bb4 1B02     		lsls	r3, r3, #8
 3225 0bb6 03F47063 		and	r3, r3, #3840
 3226 0bba E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3227 0bbc 1844     		add	r0, r0, r3
 3228 0bbe FFF7FEFF 		bl	__aeabi_i2d
 3229              	.LVL459:
 3230 0bc2 0022     		movs	r2, #0
 3231 0bc4 244B     		ldr	r3, .L186
 3232 0bc6 FFF7FEFF 		bl	__aeabi_dmul
 3233              	.LVL460:
 3234 0bca FFF7FEFF 		bl	__aeabi_d2uiz
 3235              	.LVL461:
 3236 0bce A5F8B600 		strh	r0, [r5, #182]	@ movhi
 740:Core/Src/bms.c ****         bms->cellVolt[92] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3237              		.loc 1 740 0
 3238 0bd2 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3239 0bd4 1B02     		lsls	r3, r3, #8
 3240 0bd6 03F47063 		and	r3, r3, #3840
 3241 0bda 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3242 0bdc 1844     		add	r0, r0, r3
 3243 0bde FFF7FEFF 		bl	__aeabi_i2d
 3244              	.LVL462:
 3245 0be2 0022     		movs	r2, #0
 3246 0be4 1C4B     		ldr	r3, .L186
 3247 0be6 FFF7FEFF 		bl	__aeabi_dmul
 3248              	.LVL463:
 3249 0bea FFF7FEFF 		bl	__aeabi_d2uiz
 3250              	.LVL464:
 3251 0bee A5F8B800 		strh	r0, [r5, #184]	@ movhi
 741:Core/Src/bms.c ****         break;
 3252              		.loc 1 741 0
 3253 0bf2 38BD     		pop	{r3, r4, r5, pc}
 3254              	.LVL465:
 3255              	.L178:
 742:Core/Src/bms.c **** 
 743:Core/Src/bms.c ****     case 0x47E:
 744:Core/Src/bms.c ****         bms->cellVolt[93] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 3256              		.loc 1 744 0
 3257 0bf4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3258 0bf6 1B02     		lsls	r3, r3, #8
 3259 0bf8 03F47063 		and	r3, r3, #3840
 3260 0bfc 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3261              	.LVL466:
 3262 0bfe 1844     		add	r0, r0, r3
 3263 0c00 FFF7FEFF 		bl	__aeabi_i2d
 3264              	.LVL467:
 3265 0c04 0022     		movs	r2, #0
 3266 0c06 144B     		ldr	r3, .L186
 3267 0c08 FFF7FEFF 		bl	__aeabi_dmul
 3268              	.LVL468:
 3269 0c0c FFF7FEFF 		bl	__aeabi_d2uiz
 3270              	.LVL469:
 3271 0c10 A5F8BA00 		strh	r0, [r5, #186]	@ movhi
ARM GAS  /tmp/ccROOoJg.s 			page 74


 745:Core/Src/bms.c ****         bms->cellVolt[94] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3272              		.loc 1 745 0
 3273 0c14 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3274 0c16 1B02     		lsls	r3, r3, #8
 3275 0c18 03F47063 		and	r3, r3, #3840
 3276 0c1c E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3277 0c1e 1844     		add	r0, r0, r3
 3278 0c20 FFF7FEFF 		bl	__aeabi_i2d
 3279              	.LVL470:
 3280 0c24 0022     		movs	r2, #0
 3281 0c26 0C4B     		ldr	r3, .L186
 3282 0c28 FFF7FEFF 		bl	__aeabi_dmul
 3283              	.LVL471:
 3284 0c2c FFF7FEFF 		bl	__aeabi_d2uiz
 3285              	.LVL472:
 3286 0c30 A5F8BC00 		strh	r0, [r5, #188]	@ movhi
 746:Core/Src/bms.c ****         bms->cellVolt[95] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3287              		.loc 1 746 0
 3288 0c34 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3289 0c36 1B02     		lsls	r3, r3, #8
 3290 0c38 03F47063 		and	r3, r3, #3840
 3291 0c3c 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3292 0c3e 1844     		add	r0, r0, r3
 3293 0c40 FFF7FEFF 		bl	__aeabi_i2d
 3294              	.LVL473:
 3295 0c44 0022     		movs	r2, #0
 3296 0c46 044B     		ldr	r3, .L186
 3297 0c48 FFF7FEFF 		bl	__aeabi_dmul
 3298              	.LVL474:
 3299 0c4c FFF7FEFF 		bl	__aeabi_d2uiz
 3300              	.LVL475:
 3301 0c50 A5F8BE00 		strh	r0, [r5, #190]	@ movhi
 3302              	.L150:
 3303 0c54 38BD     		pop	{r3, r4, r5, pc}
 3304              	.LVL476:
 3305              	.L187:
 3306 0c56 00BF     		.align	2
 3307              	.L186:
 3308 0c58 0000F43F 		.word	1072955392
 3309              		.cfi_endproc
 3310              	.LFE152:
 3312              		.section	.text.decodeTemp,"ax",%progbits
 3313              		.align	1
 3314              		.global	decodeTemp
 3315              		.syntax unified
 3316              		.thumb
 3317              		.thumb_func
 3318              		.fpu fpv4-sp-d16
 3320              	decodeTemp:
 3321              	.LFB153:
 747:Core/Src/bms.c ****         break;
 748:Core/Src/bms.c **** 
 749:Core/Src/bms.c ****     default:
 750:Core/Src/bms.c ****         break;
 751:Core/Src/bms.c ****     }
 752:Core/Src/bms.c **** }
 753:Core/Src/bms.c **** 
ARM GAS  /tmp/ccROOoJg.s 			page 75


 754:Core/Src/bms.c **** void decodeTemp(bms_t *bms, CAN_RxHeaderTypeDef *rxMsg, uint8_t *canRx) // in degrees F x 100
 755:Core/Src/bms.c **** {
 3322              		.loc 1 755 0
 3323              		.cfi_startproc
 3324              		@ args = 0, pretend = 0, frame = 0
 3325              		@ frame_needed = 0, uses_anonymous_args = 0
 3326              		@ link register save eliminated.
 3327              	.LVL477:
 756:Core/Src/bms.c ****     switch (rxMsg->StdId)
 3328              		.loc 1 756 0
 3329 0000 0B68     		ldr	r3, [r1]
 3330 0002 A3F5FC63 		sub	r3, r3, #2016
 3331 0006 0E2B     		cmp	r3, #14
 3332 0008 00F28E80 		bhi	.L188
 3333 000c DFE803F0 		tbb	[pc, r3]
 3334              	.LVL478:
 3335              	.L191:
 3336 0010 08       		.byte	(.L190-.L191)/2
 3337 0011 14       		.byte	(.L192-.L191)/2
 3338 0012 20       		.byte	(.L193-.L191)/2
 3339 0013 2F       		.byte	(.L194-.L191)/2
 3340 0014 33       		.byte	(.L195-.L191)/2
 3341 0015 3F       		.byte	(.L196-.L191)/2
 3342 0016 4E       		.byte	(.L197-.L191)/2
 3343 0017 8C       		.byte	(.L188-.L191)/2
 3344 0018 52       		.byte	(.L198-.L191)/2
 3345 0019 5E       		.byte	(.L199-.L191)/2
 3346 001a 6D       		.byte	(.L200-.L191)/2
 3347 001b 8C       		.byte	(.L188-.L191)/2
 3348 001c 71       		.byte	(.L201-.L191)/2
 3349 001d 7D       		.byte	(.L202-.L191)/2
 3350 001e 89       		.byte	(.L203-.L191)/2
 3351 001f 00       		.p2align 1
 3352              	.L190:
 757:Core/Src/bms.c ****     {
 758:Core/Src/bms.c ****     case 0x7E0: //Begin module 1 temp sensors
 759:Core/Src/bms.c ****         bms->tempSensor[0] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3353              		.loc 1 759 0
 3354 0020 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3355 0022 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3356 0024 03EB0123 		add	r3, r3, r1, lsl #8
 3357 0028 A3EBC303 		sub	r3, r3, r3, lsl #3
 3358 002c 03F5E043 		add	r3, r3, #28672
 3359 0030 1C33     		adds	r3, r3, #28
 3360 0032 A0F8C030 		strh	r3, [r0, #192]	@ movhi
 760:Core/Src/bms.c ****         break;
 3361              		.loc 1 760 0
 3362 0036 7047     		bx	lr
 3363              	.L192:
 761:Core/Src/bms.c **** 
 762:Core/Src/bms.c ****     case 0x7E1:
 763:Core/Src/bms.c ****         bms->tempSensor[1] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3364              		.loc 1 763 0
 3365 0038 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3366 003a 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3367 003c 03EB0123 		add	r3, r3, r1, lsl #8
 3368 0040 A3EBC303 		sub	r3, r3, r3, lsl #3
ARM GAS  /tmp/ccROOoJg.s 			page 76


 3369 0044 03F5E043 		add	r3, r3, #28672
 3370 0048 1C33     		adds	r3, r3, #28
 3371 004a A0F8C230 		strh	r3, [r0, #194]	@ movhi
 764:Core/Src/bms.c ****         break;
 3372              		.loc 1 764 0
 3373 004e 7047     		bx	lr
 3374              	.L193:
 765:Core/Src/bms.c **** 
 766:Core/Src/bms.c ****     case 0x7E2:
 767:Core/Src/bms.c ****         bms->tempSensor[2] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3375              		.loc 1 767 0
 3376 0050 0023     		movs	r3, #0
 3377 0052 A0F8C430 		strh	r3, [r0, #196]	@ movhi
 768:Core/Src/bms.c ****         bms->tempSensor[3] = -((((canRx[2] << 8) + canRx[3]) * 7) - 28700);
 3378              		.loc 1 768 0
 3379 0056 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 3380 0058 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 3381 005a 03EB0123 		add	r3, r3, r1, lsl #8
 3382 005e A3EBC303 		sub	r3, r3, r3, lsl #3
 3383 0062 03F5E043 		add	r3, r3, #28672
 3384 0066 1C33     		adds	r3, r3, #28
 3385 0068 A0F8C630 		strh	r3, [r0, #198]	@ movhi
 769:Core/Src/bms.c ****         break;
 3386              		.loc 1 769 0
 3387 006c 7047     		bx	lr
 3388              	.L194:
 770:Core/Src/bms.c **** 
 771:Core/Src/bms.c ****     case 0x7E3:
 772:Core/Src/bms.c ****         bms->tempSensor[4] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3389              		.loc 1 772 0
 3390 006e 0023     		movs	r3, #0
 3391 0070 A0F8C830 		strh	r3, [r0, #200]	@ movhi
 773:Core/Src/bms.c ****         break;
 3392              		.loc 1 773 0
 3393 0074 7047     		bx	lr
 3394              	.L195:
 774:Core/Src/bms.c **** 
 775:Core/Src/bms.c ****     case 0x7E4: //Begin module 2 temp sensors
 776:Core/Src/bms.c ****         bms->tempSensor[5] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3395              		.loc 1 776 0
 3396 0076 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3397 0078 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3398 007a 03EB0123 		add	r3, r3, r1, lsl #8
 3399 007e A3EBC303 		sub	r3, r3, r3, lsl #3
 3400 0082 03F5E043 		add	r3, r3, #28672
 3401 0086 1C33     		adds	r3, r3, #28
 3402 0088 A0F8CA30 		strh	r3, [r0, #202]	@ movhi
 777:Core/Src/bms.c ****         break;
 3403              		.loc 1 777 0
 3404 008c 7047     		bx	lr
 3405              	.L196:
 778:Core/Src/bms.c **** 
 779:Core/Src/bms.c ****     case 0x7E5:
 780:Core/Src/bms.c ****         bms->tempSensor[6] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3406              		.loc 1 780 0
 3407 008e 0023     		movs	r3, #0
 3408 0090 A0F8CC30 		strh	r3, [r0, #204]	@ movhi
ARM GAS  /tmp/ccROOoJg.s 			page 77


 781:Core/Src/bms.c ****         bms->tempSensor[7] = -((((canRx[2] << 8) + canRx[3]) * 7) - 28700);
 3409              		.loc 1 781 0
 3410 0094 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 3411 0096 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 3412 0098 03EB0123 		add	r3, r3, r1, lsl #8
 3413 009c A3EBC303 		sub	r3, r3, r3, lsl #3
 3414 00a0 03F5E043 		add	r3, r3, #28672
 3415 00a4 1C33     		adds	r3, r3, #28
 3416 00a6 A0F8CE30 		strh	r3, [r0, #206]	@ movhi
 782:Core/Src/bms.c ****         break;
 3417              		.loc 1 782 0
 3418 00aa 7047     		bx	lr
 3419              	.L197:
 783:Core/Src/bms.c **** 
 784:Core/Src/bms.c ****     case 0x7E6:
 785:Core/Src/bms.c ****         bms->tempSensor[8] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3420              		.loc 1 785 0
 3421 00ac 0023     		movs	r3, #0
 3422 00ae A0F8D030 		strh	r3, [r0, #208]	@ movhi
 786:Core/Src/bms.c ****         break;
 3423              		.loc 1 786 0
 3424 00b2 7047     		bx	lr
 3425              	.L198:
 787:Core/Src/bms.c **** 
 788:Core/Src/bms.c ****     case 0x7E8: //Begin module 3 temp sensors
 789:Core/Src/bms.c ****         bms->tempSensor[9] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3426              		.loc 1 789 0
 3427 00b4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3428 00b6 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3429 00b8 03EB0123 		add	r3, r3, r1, lsl #8
 3430 00bc A3EBC303 		sub	r3, r3, r3, lsl #3
 3431 00c0 03F5E043 		add	r3, r3, #28672
 3432 00c4 1C33     		adds	r3, r3, #28
 3433 00c6 A0F8D230 		strh	r3, [r0, #210]	@ movhi
 790:Core/Src/bms.c ****         break;
 3434              		.loc 1 790 0
 3435 00ca 7047     		bx	lr
 3436              	.L199:
 791:Core/Src/bms.c **** 
 792:Core/Src/bms.c ****     case 0x7E9:
 793:Core/Src/bms.c ****         bms->tempSensor[10] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3437              		.loc 1 793 0
 3438 00cc 0023     		movs	r3, #0
 3439 00ce A0F8D430 		strh	r3, [r0, #212]	@ movhi
 794:Core/Src/bms.c ****         bms->tempSensor[11] = -((((canRx[2] << 8) + canRx[3]) * 7) - 28700);
 3440              		.loc 1 794 0
 3441 00d2 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 3442 00d4 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 3443 00d6 03EB0123 		add	r3, r3, r1, lsl #8
 3444 00da A3EBC303 		sub	r3, r3, r3, lsl #3
 3445 00de 03F5E043 		add	r3, r3, #28672
 3446 00e2 1C33     		adds	r3, r3, #28
 3447 00e4 A0F8D630 		strh	r3, [r0, #214]	@ movhi
 795:Core/Src/bms.c ****         break;
 3448              		.loc 1 795 0
 3449 00e8 7047     		bx	lr
 3450              	.L200:
ARM GAS  /tmp/ccROOoJg.s 			page 78


 796:Core/Src/bms.c **** 
 797:Core/Src/bms.c ****     case 0x7EA:
 798:Core/Src/bms.c ****         bms->tempSensor[12] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3451              		.loc 1 798 0
 3452 00ea 0023     		movs	r3, #0
 3453 00ec A0F8D830 		strh	r3, [r0, #216]	@ movhi
 799:Core/Src/bms.c ****         break;
 3454              		.loc 1 799 0
 3455 00f0 7047     		bx	lr
 3456              	.L201:
 800:Core/Src/bms.c **** 
 801:Core/Src/bms.c ****     case 0x7EC: //Begin module 4 temp sensors
 802:Core/Src/bms.c ****         bms->tempSensor[13] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3457              		.loc 1 802 0
 3458 00f2 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3459 00f4 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3460 00f6 03EB0123 		add	r3, r3, r1, lsl #8
 3461 00fa A3EBC303 		sub	r3, r3, r3, lsl #3
 3462 00fe 03F5E043 		add	r3, r3, #28672
 3463 0102 1C33     		adds	r3, r3, #28
 3464 0104 A0F8DA30 		strh	r3, [r0, #218]	@ movhi
 803:Core/Src/bms.c ****         break;
 3465              		.loc 1 803 0
 3466 0108 7047     		bx	lr
 3467              	.L202:
 804:Core/Src/bms.c **** 
 805:Core/Src/bms.c ****     case 0x7ED:
 806:Core/Src/bms.c ****         bms->tempSensor[14] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3468              		.loc 1 806 0
 3469 010a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3470 010c 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3471 010e 03EB0123 		add	r3, r3, r1, lsl #8
 3472 0112 A3EBC303 		sub	r3, r3, r3, lsl #3
 3473 0116 03F5E043 		add	r3, r3, #28672
 3474 011a 1C33     		adds	r3, r3, #28
 3475 011c A0F8DC30 		strh	r3, [r0, #220]	@ movhi
 807:Core/Src/bms.c ****         break;
 3476              		.loc 1 807 0
 3477 0120 7047     		bx	lr
 3478              	.L203:
 808:Core/Src/bms.c **** 
 809:Core/Src/bms.c ****     case 0x7EE:
 810:Core/Src/bms.c ****         bms->tempSensor[15] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3479              		.loc 1 810 0
 3480 0122 0023     		movs	r3, #0
 3481 0124 A0F8DE30 		strh	r3, [r0, #222]	@ movhi
 3482              	.L188:
 3483 0128 7047     		bx	lr
 3484              		.cfi_endproc
 3485              	.LFE153:
 3487              		.comm	watchdogBits,1,1
 3488              		.comm	chargerOn,1,1
 3489              		.comm	BMS,492,4
 3490              		.comm	txCycle3,4,4
 3491              		.comm	txCycle2,4,4
 3492              		.comm	txCycle,4,4
 3493              		.comm	canMailbox3,4,4
ARM GAS  /tmp/ccROOoJg.s 			page 79


 3494              		.comm	canMailbox2,4,4
 3495              		.comm	canMailbox,4,4
 3496              		.comm	canRx3,8,4
 3497              		.comm	canRx2,8,4
 3498              		.comm	canRx,8,4
 3499              		.comm	txMsgExt3,24,4
 3500              		.comm	txMsg3,24,4
 3501              		.comm	rxMsg3,28,4
 3502              		.comm	txMsgExt2,24,4
 3503              		.comm	txMsg2,24,4
 3504              		.comm	rxMsg2,28,4
 3505              		.comm	txMsgExt,24,4
 3506              		.comm	txMsg,24,4
 3507              		.comm	rxMsg,28,4
 3508              		.comm	sf5,40,4
 3509              		.comm	sf4,40,4
 3510              		.comm	sf3,40,4
 3511              		.comm	sf2,40,4
 3512              		.comm	sf,40,4
 3513              		.comm	hcan3,40,4
 3514              		.comm	hcan2,40,4
 3515              		.comm	hcan1,40,4
 3516              		.section	.bss.errorCount,"aw",%nobits
 3517              		.align	2
 3518              		.set	.LANCHOR0,. + 0
 3521              	errorCount:
 3522 0000 00000000 		.space	4
 3523              		.section	.rodata.balanceByte,"a",%progbits
 3524              		.align	2
 3525              		.set	.LANCHOR1,. + 0
 3528              	balanceByte:
 3529 0000 00       		.byte	0
 3530 0001 00       		.byte	0
 3531 0002 00       		.byte	0
 3532 0003 00       		.byte	0
 3533 0004 00       		.byte	0
 3534 0005 00       		.byte	0
 3535 0006 01       		.byte	1
 3536 0007 01       		.byte	1
 3537 0008 01       		.byte	1
 3538 0009 01       		.byte	1
 3539 000a 01       		.byte	1
 3540 000b 01       		.byte	1
 3541 000c 01       		.byte	1
 3542 000d 01       		.byte	1
 3543 000e 02       		.byte	2
 3544 000f 02       		.byte	2
 3545 0010 02       		.byte	2
 3546 0011 02       		.byte	2
 3547 0012 02       		.byte	2
 3548 0013 02       		.byte	2
 3549 0014 02       		.byte	2
 3550 0015 02       		.byte	2
 3551 0016 03       		.byte	3
 3552 0017 03       		.byte	3
 3553 0018 03       		.byte	3
 3554 0019 03       		.byte	3
ARM GAS  /tmp/ccROOoJg.s 			page 80


 3555 001a 03       		.byte	3
 3556 001b 03       		.byte	3
 3557 001c 03       		.byte	3
 3558 001d 03       		.byte	3
 3559 001e 04       		.byte	4
 3560 001f 04       		.byte	4
 3561 0020 04       		.byte	4
 3562 0021 04       		.byte	4
 3563 0022 04       		.byte	4
 3564 0023 04       		.byte	4
 3565 0024 04       		.byte	4
 3566 0025 04       		.byte	4
 3567 0026 05       		.byte	5
 3568 0027 05       		.byte	5
 3569 0028 05       		.byte	5
 3570 0029 05       		.byte	5
 3571 002a 05       		.byte	5
 3572 002b 05       		.byte	5
 3573 002c 05       		.byte	5
 3574 002d 05       		.byte	5
 3575 002e 06       		.byte	6
 3576 002f 06       		.byte	6
 3577 0030 06       		.byte	6
 3578 0031 06       		.byte	6
 3579 0032 06       		.byte	6
 3580 0033 06       		.byte	6
 3581 0034 06       		.byte	6
 3582 0035 06       		.byte	6
 3583 0036 07       		.byte	7
 3584 0037 07       		.byte	7
 3585 0038 07       		.byte	7
 3586 0039 07       		.byte	7
 3587 003a 07       		.byte	7
 3588 003b 07       		.byte	7
 3589 003c 07       		.byte	7
 3590 003d 07       		.byte	7
 3591 003e 00       		.byte	0
 3592 003f 00       		.byte	0
 3593 0040 00       		.byte	0
 3594 0041 00       		.byte	0
 3595 0042 00       		.byte	0
 3596 0043 00       		.byte	0
 3597 0044 00       		.byte	0
 3598 0045 00       		.byte	0
 3599 0046 01       		.byte	1
 3600 0047 01       		.byte	1
 3601 0048 01       		.byte	1
 3602 0049 01       		.byte	1
 3603 004a 01       		.byte	1
 3604 004b 01       		.byte	1
 3605 004c 01       		.byte	1
 3606 004d 01       		.byte	1
 3607 004e 02       		.byte	2
 3608 004f 02       		.byte	2
 3609 0050 02       		.byte	2
 3610 0051 02       		.byte	2
 3611 0052 02       		.byte	2
ARM GAS  /tmp/ccROOoJg.s 			page 81


 3612 0053 02       		.byte	2
 3613 0054 03       		.byte	3
 3614 0055 03       		.byte	3
 3615 0056 03       		.byte	3
 3616 0057 03       		.byte	3
 3617 0058 03       		.byte	3
 3618 0059 03       		.byte	3
 3619 005a 04       		.byte	4
 3620 005b 04       		.byte	4
 3621 005c 04       		.byte	4
 3622 005d 04       		.byte	4
 3623 005e 04       		.byte	4
 3624 005f 04       		.byte	4
 3625              		.section	.rodata.balanceShift,"a",%progbits
 3626              		.align	2
 3627              		.set	.LANCHOR2,. + 0
 3630              	balanceShift:
 3631 0000 01       		.byte	1
 3632 0001 02       		.byte	2
 3633 0002 04       		.byte	4
 3634 0003 08       		.byte	8
 3635 0004 10       		.byte	16
 3636 0005 20       		.byte	32
 3637 0006 01       		.byte	1
 3638 0007 02       		.byte	2
 3639 0008 04       		.byte	4
 3640 0009 08       		.byte	8
 3641 000a 10       		.byte	16
 3642 000b 20       		.byte	32
 3643 000c 40       		.byte	64
 3644 000d 80       		.byte	-128
 3645 000e 01       		.byte	1
 3646 000f 02       		.byte	2
 3647 0010 04       		.byte	4
 3648 0011 08       		.byte	8
 3649 0012 10       		.byte	16
 3650 0013 20       		.byte	32
 3651 0014 40       		.byte	64
 3652 0015 80       		.byte	-128
 3653 0016 01       		.byte	1
 3654 0017 02       		.byte	2
 3655 0018 04       		.byte	4
 3656 0019 08       		.byte	8
 3657 001a 10       		.byte	16
 3658 001b 20       		.byte	32
 3659 001c 40       		.byte	64
 3660 001d 80       		.byte	-128
 3661 001e 01       		.byte	1
 3662 001f 02       		.byte	2
 3663 0020 04       		.byte	4
 3664 0021 08       		.byte	8
 3665 0022 10       		.byte	16
 3666 0023 20       		.byte	32
 3667 0024 40       		.byte	64
 3668 0025 80       		.byte	-128
 3669 0026 01       		.byte	1
 3670 0027 02       		.byte	2
ARM GAS  /tmp/ccROOoJg.s 			page 82


 3671 0028 04       		.byte	4
 3672 0029 08       		.byte	8
 3673 002a 10       		.byte	16
 3674 002b 20       		.byte	32
 3675 002c 40       		.byte	64
 3676 002d 80       		.byte	-128
 3677 002e 01       		.byte	1
 3678 002f 02       		.byte	2
 3679 0030 04       		.byte	4
 3680 0031 08       		.byte	8
 3681 0032 10       		.byte	16
 3682 0033 20       		.byte	32
 3683 0034 40       		.byte	64
 3684 0035 80       		.byte	-128
 3685 0036 01       		.byte	1
 3686 0037 02       		.byte	2
 3687 0038 04       		.byte	4
 3688 0039 08       		.byte	8
 3689 003a 10       		.byte	16
 3690 003b 20       		.byte	32
 3691 003c 40       		.byte	64
 3692 003d 80       		.byte	-128
 3693 003e 01       		.byte	1
 3694 003f 02       		.byte	2
 3695 0040 04       		.byte	4
 3696 0041 08       		.byte	8
 3697 0042 10       		.byte	16
 3698 0043 20       		.byte	32
 3699 0044 40       		.byte	64
 3700 0045 80       		.byte	-128
 3701 0046 01       		.byte	1
 3702 0047 02       		.byte	2
 3703 0048 04       		.byte	4
 3704 0049 08       		.byte	8
 3705 004a 10       		.byte	16
 3706 004b 20       		.byte	32
 3707 004c 40       		.byte	64
 3708 004d 80       		.byte	-128
 3709 004e 01       		.byte	1
 3710 004f 02       		.byte	2
 3711 0050 04       		.byte	4
 3712 0051 08       		.byte	8
 3713 0052 10       		.byte	16
 3714 0053 20       		.byte	32
 3715 0054 01       		.byte	1
 3716 0055 02       		.byte	2
 3717 0056 04       		.byte	4
 3718 0057 08       		.byte	8
 3719 0058 10       		.byte	16
 3720 0059 20       		.byte	32
 3721 005a 01       		.byte	1
 3722 005b 02       		.byte	2
 3723 005c 04       		.byte	4
 3724 005d 08       		.byte	8
 3725 005e 10       		.byte	16
 3726 005f 20       		.byte	32
 3727              		.text
ARM GAS  /tmp/ccROOoJg.s 			page 83


 3728              	.Letext0:
 3729              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3730              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3731              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 3732              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3733              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 3734              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3735              		.file 8 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3736              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 3737              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 3738              		.file 11 "/usr/include/newlib/sys/lock.h"
 3739              		.file 12 "/usr/include/newlib/sys/_types.h"
 3740              		.file 13 "/usr/include/newlib/sys/reent.h"
 3741              		.file 14 "Core/Inc/can_setup.h"
 3742              		.file 15 "Core/Inc/bms.h"
 3743              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/ccROOoJg.s 			page 84


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bms.c
     /tmp/ccROOoJg.s:18     .text.getSOC:0000000000000000 $t
     /tmp/ccROOoJg.s:24     .text.getSOC:0000000000000000 getSOC
     /tmp/ccROOoJg.s:48     .text.getSOC:0000000000000024 $d
     /tmp/ccROOoJg.s:53     .text.getHighCellVolt:0000000000000000 $t
     /tmp/ccROOoJg.s:59     .text.getHighCellVolt:0000000000000000 getHighCellVolt
     /tmp/ccROOoJg.s:99     .text.getHighCellTemp:0000000000000000 $t
     /tmp/ccROOoJg.s:105    .text.getHighCellTemp:0000000000000000 getHighCellTemp
     /tmp/ccROOoJg.s:146    .text.getLowCellTemp:0000000000000000 $t
     /tmp/ccROOoJg.s:152    .text.getLowCellTemp:0000000000000000 getLowCellTemp
     /tmp/ccROOoJg.s:197    .text.getAvgCellTemp:0000000000000000 $t
     /tmp/ccROOoJg.s:203    .text.getAvgCellTemp:0000000000000000 getAvgCellTemp
     /tmp/ccROOoJg.s:266    .text.getTempDelta:0000000000000000 $t
     /tmp/ccROOoJg.s:272    .text.getTempDelta:0000000000000000 getTempDelta
     /tmp/ccROOoJg.s:290    .text.getCellDelta:0000000000000000 $t
     /tmp/ccROOoJg.s:296    .text.getCellDelta:0000000000000000 getCellDelta
     /tmp/ccROOoJg.s:314    .text.getLowCellVolt:0000000000000000 $t
     /tmp/ccROOoJg.s:320    .text.getLowCellVolt:0000000000000000 getLowCellVolt
     /tmp/ccROOoJg.s:361    .text.getAvgCellVolt:0000000000000000 $t
     /tmp/ccROOoJg.s:367    .text.getAvgCellVolt:0000000000000000 getAvgCellVolt
     /tmp/ccROOoJg.s:409    .text.getAvgCellVolt:0000000000000024 $d
     /tmp/ccROOoJg.s:414    .text.getPackVolt:0000000000000000 $t
     /tmp/ccROOoJg.s:420    .text.getPackVolt:0000000000000000 getPackVolt
     /tmp/ccROOoJg.s:462    .text.getPackVolt:0000000000000020 $d
     /tmp/ccROOoJg.s:467    .text.getCellCount:0000000000000000 $t
     /tmp/ccROOoJg.s:473    .text.getCellCount:0000000000000000 getCellCount
     /tmp/ccROOoJg.s:546    .text.getCellCount:0000000000000044 $d
                            *COM*:00000000000001ec BMS
     /tmp/ccROOoJg.s:552    .text.initBMS:0000000000000000 $t
     /tmp/ccROOoJg.s:559    .text.initBMS:0000000000000000 initBMS
     /tmp/ccROOoJg.s:673    .text.initBMS:000000000000008c $d
                            *COM*:0000000000000001 watchdogBits
                            *COM*:0000000000000001 chargerOn
     /tmp/ccROOoJg.s:681    .text.bmsStateHandler:0000000000000000 $t
     /tmp/ccROOoJg.s:688    .text.bmsStateHandler:0000000000000000 bmsStateHandler
     /tmp/ccROOoJg.s:706    .text.bmsStateHandler:000000000000000e $d
     /tmp/ccROOoJg.s:791    .text.acChargeCommand:0000000000000000 $t
     /tmp/ccROOoJg.s:798    .text.acChargeCommand:0000000000000000 acChargeCommand
     /tmp/ccROOoJg.s:888    .text.acChargeCommand:000000000000007c $d
     /tmp/ccROOoJg.s:893    .text.tx500kData:0000000000000000 $t
     /tmp/ccROOoJg.s:900    .text.tx500kData:0000000000000000 tx500kData
     /tmp/ccROOoJg.s:984    .text.tx500kData:0000000000000090 $d
     /tmp/ccROOoJg.s:989    .text.refreshData:0000000000000000 $t
     /tmp/ccROOoJg.s:996    .text.refreshData:0000000000000000 refreshData
     /tmp/ccROOoJg.s:1078   .text.refreshData:000000000000005c $d
     /tmp/ccROOoJg.s:1083   .text.sendCommand:0000000000000000 $t
     /tmp/ccROOoJg.s:1090   .text.sendCommand:0000000000000000 sendCommand
     /tmp/ccROOoJg.s:1153   .text.requestBICMdata:0000000000000000 $t
     /tmp/ccROOoJg.s:1160   .text.requestBICMdata:0000000000000000 requestBICMdata
     /tmp/ccROOoJg.s:1292   .text.balanceCommand:0000000000000000 $t
     /tmp/ccROOoJg.s:1299   .text.balanceCommand:0000000000000000 balanceCommand
     /tmp/ccROOoJg.s:1569   .text.balanceCommand:0000000000000154 $d
     /tmp/ccROOoJg.s:1575   .text.vehicleComms:0000000000000000 $t
     /tmp/ccROOoJg.s:1582   .text.vehicleComms:0000000000000000 vehicleComms
     /tmp/ccROOoJg.s:1595   .text.synchChargers:0000000000000000 $t
     /tmp/ccROOoJg.s:1602   .text.synchChargers:0000000000000000 synchChargers
ARM GAS  /tmp/ccROOoJg.s 			page 85


     /tmp/ccROOoJg.s:1648   .text.synchChargers:000000000000003c $d
     /tmp/ccROOoJg.s:1657   .text.decodeVolt:0000000000000000 $t
     /tmp/ccROOoJg.s:1664   .text.decodeVolt:0000000000000000 decodeVolt
     /tmp/ccROOoJg.s:1688   .text.decodeVolt:0000000000000016 $d
     /tmp/ccROOoJg.s:1719   .text.decodeVolt:0000000000000054 $t
     /tmp/ccROOoJg.s:2148   .text.decodeVolt:0000000000000370 $d
     /tmp/ccROOoJg.s:2152   .text.decodeVolt:0000000000000374 $t
     /tmp/ccROOoJg.s:2543   .text.decodeVolt:0000000000000674 $d
     /tmp/ccROOoJg.s:2547   .text.decodeVolt:0000000000000678 $t
     /tmp/ccROOoJg.s:2938   .text.decodeVolt:0000000000000984 $d
     /tmp/ccROOoJg.s:2942   .text.decodeVolt:0000000000000988 $t
     /tmp/ccROOoJg.s:3308   .text.decodeVolt:0000000000000c58 $d
     /tmp/ccROOoJg.s:3313   .text.decodeTemp:0000000000000000 $t
     /tmp/ccROOoJg.s:3320   .text.decodeTemp:0000000000000000 decodeTemp
     /tmp/ccROOoJg.s:3336   .text.decodeTemp:0000000000000010 $d
                            *COM*:0000000000000004 txCycle3
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000004 canMailbox3
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx3
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt3
                            *COM*:0000000000000018 txMsg3
                            *COM*:000000000000001c rxMsg3
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:0000000000000018 txMsg2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:0000000000000018 txMsg
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
                            *COM*:0000000000000028 hcan3
                            *COM*:0000000000000028 hcan2
                            *COM*:0000000000000028 hcan1
     /tmp/ccROOoJg.s:3517   .bss.errorCount:0000000000000000 $d
     /tmp/ccROOoJg.s:3521   .bss.errorCount:0000000000000000 errorCount
     /tmp/ccROOoJg.s:3524   .rodata.balanceByte:0000000000000000 $d
     /tmp/ccROOoJg.s:3528   .rodata.balanceByte:0000000000000000 balanceByte
     /tmp/ccROOoJg.s:3626   .rodata.balanceShift:0000000000000000 $d
     /tmp/ccROOoJg.s:3630   .rodata.balanceShift:0000000000000000 balanceShift
                     .debug_frame:0000000000000010 $d
     /tmp/ccROOoJg.s:711    .text.bmsStateHandler:0000000000000013 $d
     /tmp/ccROOoJg.s:711    .text.bmsStateHandler:0000000000000014 $t
     /tmp/ccROOoJg.s:3351   .text.decodeTemp:000000000000001f $d
     /tmp/ccROOoJg.s:3351   .text.decodeTemp:0000000000000020 $t

UNDEFINED SYMBOLS
HAL_NVIC_SystemReset
can2tx
can1tx
ARM GAS  /tmp/ccROOoJg.s 			page 86


can3tx
__aeabi_i2d
__aeabi_dmul
__aeabi_d2uiz
