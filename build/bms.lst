ARM GAS  /tmp/ccBwmWIp.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"bms.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.getSOC,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	getSOC:
  25              	.LFB139:
  26              		.file 1 "Core/Src/bms.c"
   1:Core/Src/bms.c **** #include "bms.h"
   2:Core/Src/bms.c **** #include "settings.h"
   3:Core/Src/bms.c **** #include "my_math.h"
   4:Core/Src/bms.c **** 
   5:Core/Src/bms.c **** static void getPackVolt(bms_t *bms);
   6:Core/Src/bms.c **** static void getAvgCellVolt(bms_t *bms);
   7:Core/Src/bms.c **** static void getLowCellVolt(bms_t *bms);
   8:Core/Src/bms.c **** static void getHighCellVolt(bms_t *bms);
   9:Core/Src/bms.c **** static void getCellDelta(bms_t *bms);
  10:Core/Src/bms.c **** static void getLowCellTemp(bms_t *bms);
  11:Core/Src/bms.c **** static void getHighCellTemp(bms_t *bms);
  12:Core/Src/bms.c **** static void getAvgCellTemp(bms_t *bms);
  13:Core/Src/bms.c **** static void getTempDelta(bms_t *bms);
  14:Core/Src/bms.c **** static void getCellCount(bms_t *bms, int pack);
  15:Core/Src/bms.c **** static void getSOC(bms_t *bms);
  16:Core/Src/bms.c **** 
  17:Core/Src/bms.c **** enum
  18:Core/Src/bms.c **** {
  19:Core/Src/bms.c ****     Boot,
  20:Core/Src/bms.c ****     Ready,
  21:Core/Src/bms.c ****     Drive,
  22:Core/Src/bms.c ****     Charge,
  23:Core/Src/bms.c ****     Error
  24:Core/Src/bms.c **** };
  25:Core/Src/bms.c **** 
  26:Core/Src/bms.c **** enum
  27:Core/Src/bms.c **** {
  28:Core/Src/bms.c ****     off,
  29:Core/Src/bms.c ****     on, //key on, inverter off
  30:Core/Src/bms.c ****     charge_keyOff,
  31:Core/Src/bms.c ****     charge_keyOn, //who even does that
  32:Core/Src/bms.c ****     idle,         //key on, inverter on
ARM GAS  /tmp/ccBwmWIp.s 			page 2


  33:Core/Src/bms.c ****     run,          //key on direction selected
  34:Core/Src/bms.c ****     launchMode,   //break shit
  35:Core/Src/bms.c ****     burnout,      //destroy tires
  36:Core/Src/bms.c **** };
  37:Core/Src/bms.c **** 
  38:Core/Src/bms.c **** /*/SOC filtering
  39:Core/Src/bms.c **** static const int numReadings = 10;
  40:Core/Src/bms.c **** static int readings[10];  // the readings from the analog input
  41:Core/Src/bms.c **** static int readIndex = 0; // the index of the current reading
  42:Core/Src/bms.c **** static int total = 0;     // the running total
  43:Core/Src/bms.c **** static int average = 0;   // the average
  44:Core/Src/bms.c **** */
  45:Core/Src/bms.c **** 
  46:Core/Src/bms.c **** static const uint8_t balanceByte[96] =
  47:Core/Src/bms.c ****     {0, 0, 0, 0, 0, 0,
  48:Core/Src/bms.c ****      1, 1, 1, 1, 1, 1, 1, 1,
  49:Core/Src/bms.c ****      2, 2, 2, 2, 2, 2, 2, 2,
  50:Core/Src/bms.c ****      3, 3, 3, 3, 3, 3, 3, 3,
  51:Core/Src/bms.c ****      4, 4, 4, 4, 4, 4, 4, 4,
  52:Core/Src/bms.c ****      5, 5, 5, 5, 5, 5, 5, 5,
  53:Core/Src/bms.c ****      6, 6, 6, 6, 6, 6, 6, 6,
  54:Core/Src/bms.c ****      7, 7, 7, 7, 7, 7, 7, 7,
  55:Core/Src/bms.c ****      0, 0, 0, 0, 0, 0, 0, 0,
  56:Core/Src/bms.c ****      1, 1, 1, 1, 1, 1, 1, 1,
  57:Core/Src/bms.c ****      2, 2, 2, 2, 2, 2,
  58:Core/Src/bms.c ****      3, 3, 3, 3, 3, 3,
  59:Core/Src/bms.c ****      4, 4, 4, 4, 4, 4};
  60:Core/Src/bms.c **** 
  61:Core/Src/bms.c **** static const uint8_t balanceShift[96] =
  62:Core/Src/bms.c ****     {1, 2, 4, 8, 10, 20,
  63:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20, 40, 80,
  64:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20, 40, 80,
  65:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20, 40, 80,
  66:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20, 40, 80,
  67:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20, 40, 80,
  68:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20, 40, 80,
  69:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20, 40, 80,
  70:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20, 40, 80,
  71:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20, 40, 80,
  72:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20,
  73:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20,
  74:Core/Src/bms.c ****      1, 2, 4, 8, 10, 20};
  75:Core/Src/bms.c **** 
  76:Core/Src/bms.c **** // Initialize BMS //////////////////////////////////////////////////////////////////
  77:Core/Src/bms.c **** void initBMS(void)
  78:Core/Src/bms.c **** {
  79:Core/Src/bms.c ****     for (size_t i = 0; i < 2; i++)
  80:Core/Src/bms.c ****     {
  81:Core/Src/bms.c ****         BMS[i].state = Boot;
  82:Core/Src/bms.c ****         BMS[i].cellDelta = 0;
  83:Core/Src/bms.c ****         BMS[i].highCellTemp = 0;
  84:Core/Src/bms.c ****         BMS[i].chargeRequest = 0;
  85:Core/Src/bms.c ****         BMS[i].highCellVolt = 0;
  86:Core/Src/bms.c ****         BMS[i].lowCellVolt = 0;
  87:Core/Src/bms.c ****         BMS[i].lowCellTemp = 0;
  88:Core/Src/bms.c ****         BMS[i].packVolt = 0;
  89:Core/Src/bms.c ****         BMS[i].SOC = 0;
ARM GAS  /tmp/ccBwmWIp.s 			page 3


  90:Core/Src/bms.c ****         BMS[i].tempDelta = 0;
  91:Core/Src/bms.c **** 
  92:Core/Src/bms.c ****         for (size_t j = 0; j < 96; j++)
  93:Core/Src/bms.c ****         {
  94:Core/Src/bms.c ****             BMS[i].cellVolt[j] = 0; /* code */
  95:Core/Src/bms.c ****         }
  96:Core/Src/bms.c **** 
  97:Core/Src/bms.c ****         for (size_t j = 0; j < 16; j++)
  98:Core/Src/bms.c ****         {
  99:Core/Src/bms.c ****             BMS[i].tempSensor[j] = 0; /* code */
 100:Core/Src/bms.c ****         }
 101:Core/Src/bms.c ****     }
 102:Core/Src/bms.c ****     vechicleState = off;
 103:Core/Src/bms.c ****     charged = false;
 104:Core/Src/bms.c **** }
 105:Core/Src/bms.c **** 
 106:Core/Src/bms.c **** // Primary State Machine ///////////////////////////////////////////////////////////////
 107:Core/Src/bms.c **** void bmsStateHandler(bms_t *bms)
 108:Core/Src/bms.c **** {
 109:Core/Src/bms.c ****     switch (bms->state)
 110:Core/Src/bms.c ****     {
 111:Core/Src/bms.c ****     case Boot:
 112:Core/Src/bms.c ****         bms->chargeRequest = 0;
 113:Core/Src/bms.c ****         bms->state = Ready;
 114:Core/Src/bms.c ****         break;
 115:Core/Src/bms.c **** 
 116:Core/Src/bms.c ****     case Ready:
 117:Core/Src/bms.c ****         bms->chargeRequest = 0;
 118:Core/Src/bms.c **** 
 119:Core/Src/bms.c ****         if (bms->avgCellVolt > BALANCE_VOLTAGE)
 120:Core/Src/bms.c ****         {
 121:Core/Src/bms.c ****             if ((bms->highCellVolt - bms->lowCellVolt) > (BALANCE_HYS * 1.5)) // was 2.5
 122:Core/Src/bms.c ****             {
 123:Core/Src/bms.c ****                 bms->balancecells = true;
 124:Core/Src/bms.c ****             }
 125:Core/Src/bms.c **** 
 126:Core/Src/bms.c ****             else if ((bms->highCellVolt - bms->lowCellVolt) <= BALANCE_HYS)
 127:Core/Src/bms.c ****             {
 128:Core/Src/bms.c ****                 bms->balancecells = false;
 129:Core/Src/bms.c ****             }
 130:Core/Src/bms.c ****         }
 131:Core/Src/bms.c ****         else
 132:Core/Src/bms.c ****         {
 133:Core/Src/bms.c ****             bms->balancecells = false;
 134:Core/Src/bms.c ****         }
 135:Core/Src/bms.c **** 
 136:Core/Src/bms.c ****         if (bms->highCellVolt < (CHARGE_V_SETPOINT - CHARGE_HYS))
 137:Core/Src/bms.c ****         {
 138:Core/Src/bms.c ****             bms->state = Charge;
 139:Core/Src/bms.c ****         }
 140:Core/Src/bms.c **** 
 141:Core/Src/bms.c ****         if (vechicleState == idle || run)
 142:Core/Src/bms.c ****         {
 143:Core/Src/bms.c ****             bms->balancecells = false;
 144:Core/Src/bms.c ****             bms->state = Drive;
 145:Core/Src/bms.c ****         }
 146:Core/Src/bms.c ****         break;
ARM GAS  /tmp/ccBwmWIp.s 			page 4


 147:Core/Src/bms.c **** 
 148:Core/Src/bms.c ****     case Drive:
 149:Core/Src/bms.c **** 
 150:Core/Src/bms.c ****         if (vechicleState == off)
 151:Core/Src/bms.c ****         {
 152:Core/Src/bms.c ****             bms->state = Ready;
 153:Core/Src/bms.c ****         }
 154:Core/Src/bms.c ****         break;
 155:Core/Src/bms.c **** 
 156:Core/Src/bms.c ****     case Charge:
 157:Core/Src/bms.c ****         bms->balancecells = false;
 158:Core/Src/bms.c ****         bms->chargeRequest = 1;
 159:Core/Src/bms.c **** 
 160:Core/Src/bms.c ****         if (bms->highCellVolt > CHARGE_V_SETPOINT || bms->highCellTemp > OVER_T_SETPOINT)
 161:Core/Src/bms.c ****         {
 162:Core/Src/bms.c ****             if (bms->avgCellVolt > CHARGE_V_SETPOINT - BALANCE_HYS)
 163:Core/Src/bms.c ****             {
 164:Core/Src/bms.c ****                 //SOC charged func
 165:Core/Src/bms.c ****             }
 166:Core/Src/bms.c ****             else
 167:Core/Src/bms.c ****             {
 168:Core/Src/bms.c ****                 //SOC charged func
 169:Core/Src/bms.c ****             }
 170:Core/Src/bms.c ****             bms->chargeRequest = 0;
 171:Core/Src/bms.c ****             bms->state = Ready;
 172:Core/Src/bms.c ****         }
 173:Core/Src/bms.c **** 
 174:Core/Src/bms.c ****         if (charged)
 175:Core/Src/bms.c ****         {
 176:Core/Src/bms.c ****             bms->chargeRequest = 0;
 177:Core/Src/bms.c ****             bms->state = Ready;
 178:Core/Src/bms.c ****         }
 179:Core/Src/bms.c **** 
 180:Core/Src/bms.c ****         break;
 181:Core/Src/bms.c **** 
 182:Core/Src/bms.c ****     case Error:
 183:Core/Src/bms.c ****         bms->chargeRequest = 0;
 184:Core/Src/bms.c **** 
 185:Core/Src/bms.c ****         if (bms->lowCellVolt > UNDER_V_SETPOINT && bms->highCellVolt < OVER_V_SETPOINT)
 186:Core/Src/bms.c ****         {
 187:Core/Src/bms.c ****             bms->state = Ready;
 188:Core/Src/bms.c ****         }
 189:Core/Src/bms.c ****         break;
 190:Core/Src/bms.c **** 
 191:Core/Src/bms.c ****     default:
 192:Core/Src/bms.c ****         break;
 193:Core/Src/bms.c ****     }
 194:Core/Src/bms.c **** }
 195:Core/Src/bms.c **** 
 196:Core/Src/bms.c **** // 10kw Tesla Charger /////////////////////////////////////////////////////////////////////
 197:Core/Src/bms.c **** void acChargeCommand(void)
 198:Core/Src/bms.c **** {
 199:Core/Src/bms.c **** 
 200:Core/Src/bms.c ****     if (BMS[0].chargeRequest && BMS[1].chargeRequest)
 201:Core/Src/bms.c ****     {
 202:Core/Src/bms.c ****         charged = false;
 203:Core/Src/bms.c ****         int val = 32;
ARM GAS  /tmp/ccBwmWIp.s 			page 5


 204:Core/Src/bms.c ****         txMsg2.StdId = 0x605; //set parameter ID
 205:Core/Src/bms.c ****         txMsg2.DLC = 8;
 206:Core/Src/bms.c ****         canTx2[0] = 0x40;
 207:Core/Src/bms.c ****         canTx2[1] = 0x00;
 208:Core/Src/bms.c ****         canTx2[2] = 0x20;
 209:Core/Src/bms.c ****         canTx2[3] = 9;
 210:Core/Src/bms.c ****         canTx2[4] = val & 0xFF;
 211:Core/Src/bms.c ****         canTx2[5] = (val >> 8) & 0xFF;
 212:Core/Src/bms.c ****         canTx2[6] = (val >> 16) & 0xFF;
 213:Core/Src/bms.c ****         canTx2[7] = (val >> 24) & 0xFF;
 214:Core/Src/bms.c ****         c2tx(&txMsg2, canTx2);
 215:Core/Src/bms.c ****     }
 216:Core/Src/bms.c **** 
 217:Core/Src/bms.c ****     if (!BMS[0].chargeRequest || !BMS[1].chargeRequest)
 218:Core/Src/bms.c ****     {
 219:Core/Src/bms.c ****         int val = 0;
 220:Core/Src/bms.c ****         txMsg2.StdId = 0x605; //set parameter ID
 221:Core/Src/bms.c ****         txMsg2.DLC = 8;
 222:Core/Src/bms.c ****         canTx2[0] = 0x40;
 223:Core/Src/bms.c ****         canTx2[1] = 0x00;
 224:Core/Src/bms.c ****         canTx2[2] = 0x20;
 225:Core/Src/bms.c ****         canTx2[3] = 9;
 226:Core/Src/bms.c ****         canTx2[4] = val & 0xFF;
 227:Core/Src/bms.c ****         canTx2[5] = (val >> 8) & 0xFF;
 228:Core/Src/bms.c ****         canTx2[6] = (val >> 16) & 0xFF;
 229:Core/Src/bms.c ****         canTx2[7] = (val >> 24) & 0xFF;
 230:Core/Src/bms.c ****         c2tx(&txMsg2, canTx2);
 231:Core/Src/bms.c ****         charged = true;
 232:Core/Src/bms.c ****     }
 233:Core/Src/bms.c **** }
 234:Core/Src/bms.c **** // Send CAN Data /////////////////////////////////////////////////////////////////////
 235:Core/Src/bms.c **** void tx500kData(void)
 236:Core/Src/bms.c **** {
 237:Core/Src/bms.c **** 
 238:Core/Src/bms.c ****     //txMsg2.StdId = 0x138; //BMS1
 239:Core/Src/bms.c ****     //txMsg2.DLC = 8;
 240:Core/Src/bms.c ****     uint8_t bytes[8];
 241:Core/Src/bms.c ****     bytes[0] = BMS[0].packVolt & 0xFF;
 242:Core/Src/bms.c ****     bytes[1] = (BMS[0].packVolt >> 8) & 0xFF;
 243:Core/Src/bms.c ****     bytes[2] = BMS[0].avgCellTemp & 0XFF;
 244:Core/Src/bms.c ****     bytes[3] = (BMS[0].avgCellTemp >> 8) & 0XFF;
 245:Core/Src/bms.c ****     bytes[4] = BMS[0].cellDelta & 0XFF;
 246:Core/Src/bms.c ****     bytes[5] = (BMS[0].cellDelta >> 8) & 0XFF;
 247:Core/Src/bms.c ****     bytes[6] = (BMS[0].SOC);
 248:Core/Src/bms.c ****     bytes[7] = 0;
 249:Core/Src/bms.c ****     can2tx(0x138, 8, bytes);
 250:Core/Src/bms.c **** 
 251:Core/Src/bms.c ****     //txMsg2.StdId = 0x139; //BMS2
 252:Core/Src/bms.c ****     //txMsg2.DLC = 8;
 253:Core/Src/bms.c ****     bytes[0] = BMS[1].packVolt & 0xFF;
 254:Core/Src/bms.c ****     bytes[1] = (BMS[1].packVolt >> 8) & 0xFF;
 255:Core/Src/bms.c ****     bytes[2] = BMS[1].avgCellTemp & 0XFF;
 256:Core/Src/bms.c ****     bytes[3] = (BMS[1].avgCellTemp >> 8) & 0XFF;
 257:Core/Src/bms.c ****     bytes[4] = BMS[1].cellDelta & 0XFF;
 258:Core/Src/bms.c ****     bytes[5] = (BMS[1].cellDelta >> 8) & 0XFF;
 259:Core/Src/bms.c ****     bytes[6] = (BMS[1].SOC);
 260:Core/Src/bms.c ****     bytes[7] = 0;
ARM GAS  /tmp/ccBwmWIp.s 			page 6


 261:Core/Src/bms.c ****     can2tx(0x139, 8, bytes);
 262:Core/Src/bms.c ****     //c2tx(&txMsg2, canTx2);
 263:Core/Src/bms.c **** }
 264:Core/Src/bms.c **** 
 265:Core/Src/bms.c **** void refreshData(void)
 266:Core/Src/bms.c **** {
 267:Core/Src/bms.c **** 
 268:Core/Src/bms.c ****     for (size_t i = 0; i < 2; i++)
 269:Core/Src/bms.c ****     {
 270:Core/Src/bms.c ****         requestBICMdata(&BMS[i]);
 271:Core/Src/bms.c ****         getPackVolt(&BMS[i]);
 272:Core/Src/bms.c ****         getAvgCellVolt(&BMS[i]);
 273:Core/Src/bms.c ****         getLowCellVolt(&BMS[i]);
 274:Core/Src/bms.c ****         getHighCellVolt(&BMS[i]);
 275:Core/Src/bms.c ****         getCellDelta(&BMS[i]);
 276:Core/Src/bms.c ****         getLowCellTemp(&BMS[i]);
 277:Core/Src/bms.c ****         getHighCellTemp(&BMS[i]);
 278:Core/Src/bms.c ****         getAvgCellTemp(&BMS[i]);
 279:Core/Src/bms.c ****         getTempDelta(&BMS[i]);
 280:Core/Src/bms.c ****         getCellCount(&BMS[i], i);
 281:Core/Src/bms.c ****         getSOC(&BMS[i]);
 282:Core/Src/bms.c ****         acChargeCommand();
 283:Core/Src/bms.c ****     }
 284:Core/Src/bms.c **** }
 285:Core/Src/bms.c **** 
 286:Core/Src/bms.c **** // send every 200ms //////////////////////////////////////////////////////////////////
 287:Core/Src/bms.c **** void sendCommand(void)
 288:Core/Src/bms.c **** {
 289:Core/Src/bms.c ****     txMsg.StdId = 0x200;
 290:Core/Src/bms.c ****     txMsg.DLC = 3;
 291:Core/Src/bms.c ****     canTx[0] = 0x02;
 292:Core/Src/bms.c ****     canTx[1] = 0x00;
 293:Core/Src/bms.c ****     canTx[2] = 0x00;
 294:Core/Src/bms.c ****     c1tx(&txMsg, canTx); //pack 1
 295:Core/Src/bms.c ****     txMsg3.StdId = 0x200;
 296:Core/Src/bms.c ****     txMsg3.DLC = 3;
 297:Core/Src/bms.c ****     canTx3[0] = 0x02;
 298:Core/Src/bms.c ****     canTx3[1] = 0x00;
 299:Core/Src/bms.c ****     canTx3[2] = 0x00;
 300:Core/Src/bms.c ****     c3tx(&txMsg3, canTx3); // pack 2
 301:Core/Src/bms.c **** }
 302:Core/Src/bms.c **** 
 303:Core/Src/bms.c **** void requestBICMdata(bms_t *bms)
 304:Core/Src/bms.c **** {
 305:Core/Src/bms.c ****     sendCommand();
 306:Core/Src/bms.c **** 
 307:Core/Src/bms.c ****     if (!bms->balancecells)
 308:Core/Src/bms.c ****     {
 309:Core/Src/bms.c **** 
 310:Core/Src/bms.c ****         txMsg.StdId = 0x300;
 311:Core/Src/bms.c ****         txMsg.DLC = 8;
 312:Core/Src/bms.c ****         for (size_t i = 0; i < 8; i++)
 313:Core/Src/bms.c ****         {
 314:Core/Src/bms.c ****             canTx[i] = 0x00;
 315:Core/Src/bms.c ****         }
 316:Core/Src/bms.c ****         c1tx(&txMsg, canTx); //pack 1
 317:Core/Src/bms.c **** 
ARM GAS  /tmp/ccBwmWIp.s 			page 7


 318:Core/Src/bms.c ****         txMsg.StdId = 0x310;
 319:Core/Src/bms.c ****         txMsg.DLC = 5;
 320:Core/Src/bms.c ****         for (size_t i = 0; i < 5; i++)
 321:Core/Src/bms.c ****         {
 322:Core/Src/bms.c ****             canTx[i] = 0x00;
 323:Core/Src/bms.c ****         }
 324:Core/Src/bms.c ****         c1tx(&txMsg, canTx); //pack 1
 325:Core/Src/bms.c ****     }
 326:Core/Src/bms.c **** 
 327:Core/Src/bms.c ****     if (!bms->balancecells)
 328:Core/Src/bms.c ****     {
 329:Core/Src/bms.c ****         txMsg3.StdId = 0x300;
 330:Core/Src/bms.c ****         txMsg3.DLC = 8;
 331:Core/Src/bms.c ****         for (size_t i = 0; i < 8; i++)
 332:Core/Src/bms.c ****         {
 333:Core/Src/bms.c ****             canTx3[i] = 0x00;
 334:Core/Src/bms.c ****         }
 335:Core/Src/bms.c ****         c3tx(&txMsg3, canTx3); //pack 2
 336:Core/Src/bms.c **** 
 337:Core/Src/bms.c ****         txMsg3.StdId = 0x310;
 338:Core/Src/bms.c ****         txMsg3.DLC = 5;
 339:Core/Src/bms.c ****         for (size_t i = 0; i < 5; i++)
 340:Core/Src/bms.c ****         {
 341:Core/Src/bms.c ****             canTx3[i] = 0x00;
 342:Core/Src/bms.c ****         }
 343:Core/Src/bms.c ****         c3tx(&txMsg3, canTx3); //pack 2
 344:Core/Src/bms.c ****     }
 345:Core/Src/bms.c **** }
 346:Core/Src/bms.c **** 
 347:Core/Src/bms.c **** // send every 200ms //////////////////////////////////////////////////////////////////
 348:Core/Src/bms.c **** void balanceCommand(bms_t *bms, int pack)
 349:Core/Src/bms.c **** {
 350:Core/Src/bms.c ****     if (pack == 0)
 351:Core/Src/bms.c ****     {
 352:Core/Src/bms.c ****         txMsg.StdId = 0x300;
 353:Core/Src/bms.c ****         txMsg.DLC = 8;
 354:Core/Src/bms.c ****         for (size_t i = 0; i < 62; i++)
 355:Core/Src/bms.c ****         {
 356:Core/Src/bms.c ****             if (bms->avgCellVolt < bms->cellVolt[i])
 357:Core/Src/bms.c ****             {
 358:Core/Src/bms.c ****                 canTx[balanceByte[i]] |= balanceShift[i];
 359:Core/Src/bms.c ****             }
 360:Core/Src/bms.c ****         }
 361:Core/Src/bms.c ****         c1tx(&txMsg, canTx);
 362:Core/Src/bms.c **** 
 363:Core/Src/bms.c ****         txMsg.StdId = 0x310;
 364:Core/Src/bms.c ****         txMsg.DLC = 5;
 365:Core/Src/bms.c ****         for (size_t i = 62; i < 96; i++)
 366:Core/Src/bms.c ****         {
 367:Core/Src/bms.c ****             if (bms->avgCellVolt < bms->cellVolt[i])
 368:Core/Src/bms.c ****             {
 369:Core/Src/bms.c ****                 canTx[balanceByte[i]] |= balanceShift[i];
 370:Core/Src/bms.c ****             }
 371:Core/Src/bms.c ****         }
 372:Core/Src/bms.c ****         c1tx(&txMsg, canTx);
 373:Core/Src/bms.c ****     }
 374:Core/Src/bms.c **** 
ARM GAS  /tmp/ccBwmWIp.s 			page 8


 375:Core/Src/bms.c ****     if (pack == 1)
 376:Core/Src/bms.c ****     {
 377:Core/Src/bms.c ****         txMsg3.StdId = 0x300;
 378:Core/Src/bms.c ****         txMsg3.DLC = 8;
 379:Core/Src/bms.c ****         for (size_t i = 0; i < 62; i++)
 380:Core/Src/bms.c ****         {
 381:Core/Src/bms.c ****             if (bms->avgCellVolt < bms->cellVolt[i])
 382:Core/Src/bms.c ****             {
 383:Core/Src/bms.c ****                 canTx3[balanceByte[i]] |= balanceShift[i];
 384:Core/Src/bms.c ****             }
 385:Core/Src/bms.c ****         }
 386:Core/Src/bms.c ****         c3tx(&txMsg3, canTx3);
 387:Core/Src/bms.c **** 
 388:Core/Src/bms.c ****         txMsg3.StdId = 0x310;
 389:Core/Src/bms.c ****         txMsg3.DLC = 5;
 390:Core/Src/bms.c ****         for (size_t i = 62; i < 96; i++)
 391:Core/Src/bms.c ****         {
 392:Core/Src/bms.c ****             if (bms->avgCellVolt < bms->cellVolt[i])
 393:Core/Src/bms.c ****             {
 394:Core/Src/bms.c ****                 canTx3[balanceByte[i]] |= balanceShift[i];
 395:Core/Src/bms.c ****             }
 396:Core/Src/bms.c ****         }
 397:Core/Src/bms.c ****         c3tx(&txMsg3, canTx3);
 398:Core/Src/bms.c ****     }
 399:Core/Src/bms.c **** }
 400:Core/Src/bms.c **** 
 401:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 402:Core/Src/bms.c **** void getSOC(bms_t *bms)
 403:Core/Src/bms.c **** {
  27              		.loc 1 403 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 404:Core/Src/bms.c ****     bms->SOC = MAP(bms->avgCellVolt, SOC_VOLT_10, SOC_VOLT_90, 10, 90);
  33              		.loc 1 404 0
  34 0000 B0F8E620 		ldrh	r2, [r0, #230]
  35 0004 A2F61C42 		subw	r2, r2, #3100
  36 0008 02EB8202 		add	r2, r2, r2, lsl #2
  37 000c 1301     		lsls	r3, r2, #4
  38 000e 054A     		ldr	r2, .L2
  39 0010 82FB0312 		smull	r1, r2, r2, r3
  40 0014 DB17     		asrs	r3, r3, #31
  41 0016 C3EBA213 		rsb	r3, r3, r2, asr #6
  42 001a 0A33     		adds	r3, r3, #10
  43 001c 80F8F330 		strb	r3, [r0, #243]
  44 0020 7047     		bx	lr
  45              	.L3:
  46 0022 00BF     		.align	2
  47              	.L2:
  48 0024 D34D6210 		.word	274877907
  49              		.cfi_endproc
  50              	.LFE139:
  52              		.section	.text.getHighCellVolt,"ax",%progbits
  53              		.align	1
  54              		.syntax unified
ARM GAS  /tmp/ccBwmWIp.s 			page 9


  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	getHighCellVolt:
  60              	.LFB140:
 405:Core/Src/bms.c ****     /*
 406:Core/Src/bms.c ****     // subtract the last reading:
 407:Core/Src/bms.c ****     total = total - readings[readIndex];
 408:Core/Src/bms.c ****     // read from the sensor:
 409:Core/Src/bms.c ****     readings[readIndex] = bms->SOC;
 410:Core/Src/bms.c ****     // add the reading to the total:
 411:Core/Src/bms.c ****     total = total + readings[readIndex];
 412:Core/Src/bms.c ****     // advance to the next position in the array:
 413:Core/Src/bms.c ****     readIndex = readIndex + 1;
 414:Core/Src/bms.c ****     // if we're at the end of the array...
 415:Core/Src/bms.c ****     if (readIndex >= numReadings)
 416:Core/Src/bms.c ****     {
 417:Core/Src/bms.c ****         // ...wrap around to the beginning:
 418:Core/Src/bms.c ****         readIndex = 0;
 419:Core/Src/bms.c ****     }
 420:Core/Src/bms.c ****     // calculate the average:
 421:Core/Src/bms.c ****     average = total / numReadings;
 422:Core/Src/bms.c ****     */
 423:Core/Src/bms.c **** }
 424:Core/Src/bms.c **** 
 425:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 426:Core/Src/bms.c **** void getHighCellVolt(bms_t *bms)
 427:Core/Src/bms.c **** {
  61              		.loc 1 427 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66              	.LVL1:
 428:Core/Src/bms.c ****     bms->highCellVolt = 0;
  67              		.loc 1 428 0
  68 0000 0023     		movs	r3, #0
  69 0002 A0F8E430 		strh	r3, [r0, #228]	@ movhi
  70              	.LVL2:
  71              	.LBB2:
 429:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
  72              		.loc 1 429 0
  73 0006 00E0     		b	.L5
  74              	.LVL3:
  75              	.L6:
  76              		.loc 1 429 0 is_stmt 0 discriminator 2
  77 0008 0133     		adds	r3, r3, #1
  78              	.LVL4:
  79              	.L5:
  80              		.loc 1 429 0 discriminator 1
  81 000a 5F2B     		cmp	r3, #95
  82 000c 08D8     		bhi	.L8
 430:Core/Src/bms.c ****     {
 431:Core/Src/bms.c ****         if (bms->cellVolt[i] > bms->highCellVolt)
  83              		.loc 1 431 0 is_stmt 1
  84 000e 30F81320 		ldrh	r2, [r0, r3, lsl #1]
  85 0012 B0F8E410 		ldrh	r1, [r0, #228]
ARM GAS  /tmp/ccBwmWIp.s 			page 10


  86 0016 8A42     		cmp	r2, r1
  87 0018 F6D9     		bls	.L6
 432:Core/Src/bms.c ****         {
 433:Core/Src/bms.c ****             bms->highCellVolt = bms->cellVolt[i];
  88              		.loc 1 433 0
  89 001a A0F8E420 		strh	r2, [r0, #228]	@ movhi
  90 001e F3E7     		b	.L6
  91              	.L8:
  92              	.LBE2:
 434:Core/Src/bms.c ****         }
 435:Core/Src/bms.c ****     }
 436:Core/Src/bms.c **** }
  93              		.loc 1 436 0
  94 0020 7047     		bx	lr
  95              		.cfi_endproc
  96              	.LFE140:
  98              		.section	.text.getHighCellTemp,"ax",%progbits
  99              		.align	1
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 103              		.fpu fpv4-sp-d16
 105              	getHighCellTemp:
 106              	.LFB141:
 437:Core/Src/bms.c **** 
 438:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 439:Core/Src/bms.c **** void getHighCellTemp(bms_t *bms)
 440:Core/Src/bms.c **** {
 107              		.loc 1 440 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 112              	.LVL5:
 441:Core/Src/bms.c ****     bms->highCellTemp = 0;
 113              		.loc 1 441 0
 114 0000 0023     		movs	r3, #0
 115 0002 A0F8EA30 		strh	r3, [r0, #234]	@ movhi
 116              	.LVL6:
 117              	.LBB3:
 442:Core/Src/bms.c ****     for (size_t i = 0; i < 16; i++)
 118              		.loc 1 442 0
 119 0006 00E0     		b	.L10
 120              	.LVL7:
 121              	.L11:
 122              		.loc 1 442 0 is_stmt 0 discriminator 2
 123 0008 0133     		adds	r3, r3, #1
 124              	.LVL8:
 125              	.L10:
 126              		.loc 1 442 0 discriminator 1
 127 000a 0F2B     		cmp	r3, #15
 128 000c 0AD8     		bhi	.L13
 443:Core/Src/bms.c ****     {
 444:Core/Src/bms.c ****         if (bms->tempSensor[i] > bms->highCellTemp)
 129              		.loc 1 444 0 is_stmt 1
 130 000e 03F16002 		add	r2, r3, #96
 131 0012 30F81220 		ldrh	r2, [r0, r2, lsl #1]
ARM GAS  /tmp/ccBwmWIp.s 			page 11


 132 0016 B0F8EA10 		ldrh	r1, [r0, #234]
 133 001a 8A42     		cmp	r2, r1
 134 001c F4D9     		bls	.L11
 445:Core/Src/bms.c ****         {
 446:Core/Src/bms.c ****             bms->highCellTemp = bms->tempSensor[i];
 135              		.loc 1 446 0
 136 001e A0F8EA20 		strh	r2, [r0, #234]	@ movhi
 137 0022 F1E7     		b	.L11
 138              	.L13:
 139              	.LBE3:
 447:Core/Src/bms.c ****         }
 448:Core/Src/bms.c ****     }
 449:Core/Src/bms.c **** }
 140              		.loc 1 449 0
 141 0024 7047     		bx	lr
 142              		.cfi_endproc
 143              	.LFE141:
 145              		.section	.text.getLowCellTemp,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv4-sp-d16
 152              	getLowCellTemp:
 153              	.LFB142:
 450:Core/Src/bms.c **** 
 451:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 452:Core/Src/bms.c **** void getLowCellTemp(bms_t *bms)
 453:Core/Src/bms.c **** {
 154              		.loc 1 453 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              		@ link register save eliminated.
 159              	.LVL9:
 454:Core/Src/bms.c ****     bms->lowCellTemp = 20000;
 160              		.loc 1 454 0
 161 0000 44F62063 		movw	r3, #20000
 162 0004 A0F8EC30 		strh	r3, [r0, #236]	@ movhi
 163              	.LVL10:
 164              	.LBB4:
 455:Core/Src/bms.c ****     for (size_t i = 0; i < 16; i++)
 165              		.loc 1 455 0
 166 0008 0023     		movs	r3, #0
 167 000a 00E0     		b	.L15
 168              	.LVL11:
 169              	.L16:
 170              		.loc 1 455 0 is_stmt 0 discriminator 2
 171 000c 0133     		adds	r3, r3, #1
 172              	.LVL12:
 173              	.L15:
 174              		.loc 1 455 0 discriminator 1
 175 000e 0F2B     		cmp	r3, #15
 176 0010 0CD8     		bhi	.L18
 456:Core/Src/bms.c ****     {
 457:Core/Src/bms.c ****         if (bms->tempSensor[i] > 0)
 177              		.loc 1 457 0 is_stmt 1
ARM GAS  /tmp/ccBwmWIp.s 			page 12


 178 0012 03F16002 		add	r2, r3, #96
 179 0016 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 180 001a 002A     		cmp	r2, #0
 181 001c F6D0     		beq	.L16
 458:Core/Src/bms.c ****         {
 459:Core/Src/bms.c ****             if (bms->tempSensor[i] < bms->lowCellTemp)
 182              		.loc 1 459 0
 183 001e B0F8EC10 		ldrh	r1, [r0, #236]
 184 0022 8A42     		cmp	r2, r1
 185 0024 F2D2     		bcs	.L16
 460:Core/Src/bms.c ****             {
 461:Core/Src/bms.c ****                 bms->lowCellTemp = bms->tempSensor[i];
 186              		.loc 1 461 0
 187 0026 A0F8EC20 		strh	r2, [r0, #236]	@ movhi
 188 002a EFE7     		b	.L16
 189              	.L18:
 190              	.LBE4:
 462:Core/Src/bms.c ****             }
 463:Core/Src/bms.c ****         }
 464:Core/Src/bms.c ****     }
 465:Core/Src/bms.c **** }
 191              		.loc 1 465 0
 192 002c 7047     		bx	lr
 193              		.cfi_endproc
 194              	.LFE142:
 196              		.section	.text.getAvgCellTemp,"ax",%progbits
 197              		.align	1
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
 203              	getAvgCellTemp:
 204              	.LFB143:
 466:Core/Src/bms.c **** 
 467:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 468:Core/Src/bms.c **** void getAvgCellTemp(bms_t *bms)
 469:Core/Src/bms.c **** {
 205              		.loc 1 469 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              		@ link register save eliminated.
 210              	.LVL13:
 211 0000 10B4     		push	{r4}
 212              	.LCFI0:
 213              		.cfi_def_cfa_offset 4
 214              		.cfi_offset 4, -4
 215              	.LVL14:
 216              	.LBB5:
 470:Core/Src/bms.c ****     int zeroCounter = 0;
 471:Core/Src/bms.c ****     int sumTemp = 0;
 472:Core/Src/bms.c ****     for (size_t i = 0; i < 16; i++)
 217              		.loc 1 472 0
 218 0002 0023     		movs	r3, #0
 219              	.LBE5:
 471:Core/Src/bms.c ****     for (size_t i = 0; i < 16; i++)
 220              		.loc 1 471 0
ARM GAS  /tmp/ccBwmWIp.s 			page 13


 221 0004 1946     		mov	r1, r3
 470:Core/Src/bms.c ****     int zeroCounter = 0;
 222              		.loc 1 470 0
 223 0006 1C46     		mov	r4, r3
 224              	.LBB6:
 225              		.loc 1 472 0
 226 0008 01E0     		b	.L20
 227              	.LVL15:
 228              	.L21:
 473:Core/Src/bms.c ****     {
 474:Core/Src/bms.c ****         if (bms->tempSensor[i] == 0) //IGNORE_TEMP)
 475:Core/Src/bms.c ****         {
 476:Core/Src/bms.c ****             zeroCounter++;
 477:Core/Src/bms.c ****         }
 478:Core/Src/bms.c **** 
 479:Core/Src/bms.c ****         sumTemp += bms->tempSensor[i];
 229              		.loc 1 479 0 discriminator 2
 230 000a 1144     		add	r1, r1, r2
 231              	.LVL16:
 472:Core/Src/bms.c ****     {
 232              		.loc 1 472 0 discriminator 2
 233 000c 0133     		adds	r3, r3, #1
 234              	.LVL17:
 235              	.L20:
 472:Core/Src/bms.c ****     {
 236              		.loc 1 472 0 is_stmt 0 discriminator 1
 237 000e 0F2B     		cmp	r3, #15
 238 0010 07D8     		bhi	.L24
 474:Core/Src/bms.c ****         {
 239              		.loc 1 474 0 is_stmt 1
 240 0012 03F16002 		add	r2, r3, #96
 241 0016 30F81220 		ldrh	r2, [r0, r2, lsl #1]
 242 001a 002A     		cmp	r2, #0
 243 001c F5D1     		bne	.L21
 476:Core/Src/bms.c ****         }
 244              		.loc 1 476 0
 245 001e 0134     		adds	r4, r4, #1
 246              	.LVL18:
 247 0020 F3E7     		b	.L21
 248              	.L24:
 249              	.LBE6:
 480:Core/Src/bms.c ****     }
 481:Core/Src/bms.c ****     bms->avgCellTemp = (sumTemp / (16 - zeroCounter));
 250              		.loc 1 481 0
 251 0022 C4F11004 		rsb	r4, r4, #16
 252              	.LVL19:
 253 0026 91FBF4F1 		sdiv	r1, r1, r4
 254              	.LVL20:
 255 002a A0F8EE10 		strh	r1, [r0, #238]	@ movhi
 482:Core/Src/bms.c **** }
 256              		.loc 1 482 0
 257 002e 5DF8044B 		ldr	r4, [sp], #4
 258              	.LCFI1:
 259              		.cfi_restore 4
 260              		.cfi_def_cfa_offset 0
 261 0032 7047     		bx	lr
 262              		.cfi_endproc
ARM GAS  /tmp/ccBwmWIp.s 			page 14


 263              	.LFE143:
 265              		.section	.text.getTempDelta,"ax",%progbits
 266              		.align	1
 267              		.syntax unified
 268              		.thumb
 269              		.thumb_func
 270              		.fpu fpv4-sp-d16
 272              	getTempDelta:
 273              	.LFB144:
 483:Core/Src/bms.c **** 
 484:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 485:Core/Src/bms.c **** void getTempDelta(bms_t *bms)
 486:Core/Src/bms.c **** {
 274              		.loc 1 486 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 279              	.LVL21:
 487:Core/Src/bms.c ****     bms->tempDelta = bms->highCellTemp - bms->lowCellTemp;
 280              		.loc 1 487 0
 281 0000 B0F8EA30 		ldrh	r3, [r0, #234]
 282 0004 B0F8EC20 		ldrh	r2, [r0, #236]
 283 0008 9B1A     		subs	r3, r3, r2
 284 000a A0F8F030 		strh	r3, [r0, #240]	@ movhi
 285 000e 7047     		bx	lr
 286              		.cfi_endproc
 287              	.LFE144:
 289              		.section	.text.getCellDelta,"ax",%progbits
 290              		.align	1
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	getCellDelta:
 297              	.LFB145:
 488:Core/Src/bms.c **** }
 489:Core/Src/bms.c **** 
 490:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 491:Core/Src/bms.c **** void getCellDelta(bms_t *bms)
 492:Core/Src/bms.c **** {
 298              		.loc 1 492 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 303              	.LVL22:
 493:Core/Src/bms.c ****     bms->cellDelta = bms->highCellVolt - bms->lowCellVolt;
 304              		.loc 1 493 0
 305 0000 B0F8E430 		ldrh	r3, [r0, #228]
 306 0004 B0F8E220 		ldrh	r2, [r0, #226]
 307 0008 9B1A     		subs	r3, r3, r2
 308 000a A0F8E830 		strh	r3, [r0, #232]	@ movhi
 309 000e 7047     		bx	lr
 310              		.cfi_endproc
 311              	.LFE145:
 313              		.section	.text.getLowCellVolt,"ax",%progbits
ARM GAS  /tmp/ccBwmWIp.s 			page 15


 314              		.align	1
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu fpv4-sp-d16
 320              	getLowCellVolt:
 321              	.LFB146:
 494:Core/Src/bms.c **** }
 495:Core/Src/bms.c **** 
 496:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 497:Core/Src/bms.c **** void getLowCellVolt(bms_t *bms)
 498:Core/Src/bms.c **** {
 322              		.loc 1 498 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327              	.LVL23:
 499:Core/Src/bms.c ****     bms->lowCellVolt = 5000;
 328              		.loc 1 499 0
 329 0000 41F28833 		movw	r3, #5000
 330 0004 A0F8E230 		strh	r3, [r0, #226]	@ movhi
 331              	.LVL24:
 332              	.LBB7:
 500:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
 333              		.loc 1 500 0
 334 0008 0023     		movs	r3, #0
 335 000a 00E0     		b	.L28
 336              	.LVL25:
 337              	.L29:
 338              		.loc 1 500 0 is_stmt 0 discriminator 2
 339 000c 0133     		adds	r3, r3, #1
 340              	.LVL26:
 341              	.L28:
 342              		.loc 1 500 0 discriminator 1
 343 000e 5F2B     		cmp	r3, #95
 344 0010 08D8     		bhi	.L31
 501:Core/Src/bms.c ****     {
 502:Core/Src/bms.c ****         if (bms->cellVolt[i] < bms->lowCellVolt)
 345              		.loc 1 502 0 is_stmt 1
 346 0012 30F81320 		ldrh	r2, [r0, r3, lsl #1]
 347 0016 B0F8E210 		ldrh	r1, [r0, #226]
 348 001a 8A42     		cmp	r2, r1
 349 001c F6D2     		bcs	.L29
 503:Core/Src/bms.c ****         {
 504:Core/Src/bms.c ****             bms->lowCellVolt = bms->cellVolt[i];
 350              		.loc 1 504 0
 351 001e A0F8E220 		strh	r2, [r0, #226]	@ movhi
 352 0022 F3E7     		b	.L29
 353              	.L31:
 354              	.LBE7:
 505:Core/Src/bms.c ****         }
 506:Core/Src/bms.c ****     }
 507:Core/Src/bms.c **** }
 355              		.loc 1 507 0
 356 0024 7047     		bx	lr
 357              		.cfi_endproc
ARM GAS  /tmp/ccBwmWIp.s 			page 16


 358              	.LFE146:
 360              		.section	.text.getAvgCellVolt,"ax",%progbits
 361              		.align	1
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 365              		.fpu fpv4-sp-d16
 367              	getAvgCellVolt:
 368              	.LFB147:
 508:Core/Src/bms.c **** 
 509:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 510:Core/Src/bms.c **** void getAvgCellVolt(bms_t *bms)
 511:Core/Src/bms.c **** {
 369              		.loc 1 511 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 374              	.LVL27:
 375              	.LBB8:
 512:Core/Src/bms.c **** 
 513:Core/Src/bms.c ****     int cellSum = 0;
 514:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
 376              		.loc 1 514 0
 377 0000 0023     		movs	r3, #0
 378              	.LBE8:
 513:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
 379              		.loc 1 513 0
 380 0002 1A46     		mov	r2, r3
 381              	.LBB9:
 382              		.loc 1 514 0
 383 0004 03E0     		b	.L33
 384              	.LVL28:
 385              	.L34:
 515:Core/Src/bms.c ****     {
 516:Core/Src/bms.c **** 
 517:Core/Src/bms.c ****         cellSum += bms->cellVolt[i];
 386              		.loc 1 517 0 discriminator 3
 387 0006 30F81310 		ldrh	r1, [r0, r3, lsl #1]
 388 000a 0A44     		add	r2, r2, r1
 389              	.LVL29:
 514:Core/Src/bms.c ****     {
 390              		.loc 1 514 0 discriminator 3
 391 000c 0133     		adds	r3, r3, #1
 392              	.LVL30:
 393              	.L33:
 514:Core/Src/bms.c ****     {
 394              		.loc 1 514 0 is_stmt 0 discriminator 1
 395 000e 5F2B     		cmp	r3, #95
 396 0010 F9D9     		bls	.L34
 397              	.LBE9:
 518:Core/Src/bms.c ****     }
 519:Core/Src/bms.c ****     bms->avgCellVolt = (cellSum / 96);
 398              		.loc 1 519 0 is_stmt 1
 399 0012 0449     		ldr	r1, .L35
 400 0014 81FB0231 		smull	r3, r1, r1, r2
 401              	.LVL31:
ARM GAS  /tmp/ccBwmWIp.s 			page 17


 402 0018 D317     		asrs	r3, r2, #31
 403 001a C3EB2113 		rsb	r3, r3, r1, asr #4
 404 001e A0F8E630 		strh	r3, [r0, #230]	@ movhi
 405 0022 7047     		bx	lr
 406              	.L36:
 407              		.align	2
 408              	.L35:
 409 0024 ABAAAA2A 		.word	715827883
 410              		.cfi_endproc
 411              	.LFE147:
 413              		.section	.text.getPackVolt,"ax",%progbits
 414              		.align	1
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 418              		.fpu fpv4-sp-d16
 420              	getPackVolt:
 421              	.LFB148:
 520:Core/Src/bms.c **** }
 521:Core/Src/bms.c **** 
 522:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 523:Core/Src/bms.c **** void getPackVolt(bms_t *bms)
 524:Core/Src/bms.c **** {
 422              		.loc 1 524 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              		@ link register save eliminated.
 427              	.LVL32:
 428              	.LBB10:
 525:Core/Src/bms.c ****     uint32_t packSum = 0;
 526:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
 429              		.loc 1 526 0
 430 0000 0023     		movs	r3, #0
 431              	.LBE10:
 525:Core/Src/bms.c ****     uint32_t packSum = 0;
 432              		.loc 1 525 0
 433 0002 1A46     		mov	r2, r3
 434              	.LBB11:
 435              		.loc 1 526 0
 436 0004 03E0     		b	.L38
 437              	.LVL33:
 438              	.L39:
 527:Core/Src/bms.c ****     {
 528:Core/Src/bms.c ****         packSum += bms->cellVolt[i];
 439              		.loc 1 528 0 discriminator 3
 440 0006 30F81310 		ldrh	r1, [r0, r3, lsl #1]
 441 000a 0A44     		add	r2, r2, r1
 442              	.LVL34:
 526:Core/Src/bms.c ****     {
 443              		.loc 1 526 0 discriminator 3
 444 000c 0133     		adds	r3, r3, #1
 445              	.LVL35:
 446              	.L38:
 526:Core/Src/bms.c ****     {
 447              		.loc 1 526 0 is_stmt 0 discriminator 1
 448 000e 5F2B     		cmp	r3, #95
ARM GAS  /tmp/ccBwmWIp.s 			page 18


 449 0010 F9D9     		bls	.L39
 450              	.LBE11:
 529:Core/Src/bms.c ****     }
 530:Core/Src/bms.c ****     bms->packVolt = packSum / 10;
 451              		.loc 1 530 0 is_stmt 1
 452 0012 034B     		ldr	r3, .L40
 453              	.LVL36:
 454 0014 A3FB0223 		umull	r2, r3, r3, r2
 455              	.LVL37:
 456 0018 DB08     		lsrs	r3, r3, #3
 457 001a A0F8E030 		strh	r3, [r0, #224]	@ movhi
 458 001e 7047     		bx	lr
 459              	.L41:
 460              		.align	2
 461              	.L40:
 462 0020 CDCCCCCC 		.word	-858993459
 463              		.cfi_endproc
 464              	.LFE148:
 466              		.section	.text.getCellCount,"ax",%progbits
 467              		.align	1
 468              		.syntax unified
 469              		.thumb
 470              		.thumb_func
 471              		.fpu fpv4-sp-d16
 473              	getCellCount:
 474              	.LFB149:
 531:Core/Src/bms.c **** }
 532:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 533:Core/Src/bms.c **** void getCellCount(bms_t *bms, int pack)
 534:Core/Src/bms.c **** {
 475              		.loc 1 534 0
 476              		.cfi_startproc
 477              		@ args = 0, pretend = 0, frame = 0
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		@ link register save eliminated.
 480              	.LVL38:
 481 0000 10B4     		push	{r4}
 482              	.LCFI2:
 483              		.cfi_def_cfa_offset 4
 484              		.cfi_offset 4, -4
 485              	.LVL39:
 486              	.LBB12:
 535:Core/Src/bms.c ****     uint16_t cellCount = 0;
 536:Core/Src/bms.c ****     for (size_t i = 0; i < 96; i++)
 487              		.loc 1 536 0
 488 0002 0023     		movs	r3, #0
 489              	.LBE12:
 535:Core/Src/bms.c ****     uint16_t cellCount = 0;
 490              		.loc 1 535 0
 491 0004 1A46     		mov	r2, r3
 492              	.LBB13:
 493              		.loc 1 536 0
 494 0006 00E0     		b	.L43
 495              	.LVL40:
 496              	.L44:
 497              		.loc 1 536 0 is_stmt 0 discriminator 2
 498 0008 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccBwmWIp.s 			page 19


 499              	.LVL41:
 500              	.L43:
 501              		.loc 1 536 0 discriminator 1
 502 000a 5F2B     		cmp	r3, #95
 503 000c 07D8     		bhi	.L48
 537:Core/Src/bms.c ****     {
 538:Core/Src/bms.c ****         if (bms->cellVolt[i] > IGNORE_VOLT)
 504              		.loc 1 538 0 is_stmt 1
 505 000e 30F81340 		ldrh	r4, [r0, r3, lsl #1]
 506 0012 B4F5FA7F 		cmp	r4, #500
 507 0016 F7D9     		bls	.L44
 539:Core/Src/bms.c ****         {
 540:Core/Src/bms.c ****             cellCount++;
 508              		.loc 1 540 0
 509 0018 0132     		adds	r2, r2, #1
 510              	.LVL42:
 511 001a 92B2     		uxth	r2, r2
 512              	.LVL43:
 513 001c F4E7     		b	.L44
 514              	.L48:
 515              	.LBE13:
 541:Core/Src/bms.c ****         }
 542:Core/Src/bms.c ****     }
 543:Core/Src/bms.c ****     if (cellCount != 96)
 516              		.loc 1 543 0
 517 001e 602A     		cmp	r2, #96
 518 0020 06D0     		beq	.L42
 544:Core/Src/bms.c ****     {
 545:Core/Src/bms.c ****         BMS[pack].state = Error;
 519              		.loc 1 545 0
 520 0022 F622     		movs	r2, #246
 521              	.LVL44:
 522 0024 044B     		ldr	r3, .L49
 523              	.LVL45:
 524 0026 02FB0131 		mla	r1, r2, r1, r3
 525              	.LVL46:
 526 002a 0423     		movs	r3, #4
 527 002c 81F8F230 		strb	r3, [r1, #242]
 528              	.L42:
 546:Core/Src/bms.c ****     }
 547:Core/Src/bms.c **** }
 529              		.loc 1 547 0
 530 0030 5DF8044B 		ldr	r4, [sp], #4
 531              	.LCFI3:
 532              		.cfi_restore 4
 533              		.cfi_def_cfa_offset 0
 534 0034 7047     		bx	lr
 535              	.L50:
 536 0036 00BF     		.align	2
 537              	.L49:
 538 0038 00000000 		.word	BMS
 539              		.cfi_endproc
 540              	.LFE149:
 542              		.section	.text.initBMS,"ax",%progbits
 543              		.align	1
 544              		.global	initBMS
 545              		.syntax unified
ARM GAS  /tmp/ccBwmWIp.s 			page 20


 546              		.thumb
 547              		.thumb_func
 548              		.fpu fpv4-sp-d16
 550              	initBMS:
 551              	.LFB131:
  78:Core/Src/bms.c ****     for (size_t i = 0; i < 2; i++)
 552              		.loc 1 78 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556              		@ link register save eliminated.
 557              	.LVL47:
 558              	.LBB14:
  79:Core/Src/bms.c ****     {
 559              		.loc 1 79 0
 560 0000 0021     		movs	r1, #0
 561              	.LVL48:
 562 0002 0129     		cmp	r1, #1
 563 0004 41D8     		bhi	.L62
 564              	.LBE14:
  78:Core/Src/bms.c ****     for (size_t i = 0; i < 2; i++)
 565              		.loc 1 78 0
 566 0006 10B4     		push	{r4}
 567              	.LCFI4:
 568              		.cfi_def_cfa_offset 4
 569              		.cfi_offset 4, -4
 570 0008 1DE0     		b	.L57
 571              	.LVL49:
 572              	.L54:
 573              	.LBB18:
 574              	.LBB15:
  94:Core/Src/bms.c ****         }
 575              		.loc 1 94 0 discriminator 3
 576 000a C1EB4113 		rsb	r3, r1, r1, lsl #5
 577 000e C1EB8303 		rsb	r3, r1, r3, lsl #2
 578 0012 1344     		add	r3, r3, r2
 579 0014 0024     		movs	r4, #0
 580 0016 2048     		ldr	r0, .L64
 581 0018 20F81340 		strh	r4, [r0, r3, lsl #1]	@ movhi
  92:Core/Src/bms.c ****         {
 582              		.loc 1 92 0 discriminator 3
 583 001c 0132     		adds	r2, r2, #1
 584              	.LVL50:
 585              	.L53:
  92:Core/Src/bms.c ****         {
 586              		.loc 1 92 0 is_stmt 0 discriminator 1
 587 001e 5F2A     		cmp	r2, #95
 588 0020 F3D9     		bls	.L54
 589 0022 0022     		movs	r2, #0
 590              	.LVL51:
 591 0024 0AE0     		b	.L55
 592              	.LVL52:
 593              	.L56:
 594              	.LBE15:
 595              	.LBB16:
  99:Core/Src/bms.c ****         }
 596              		.loc 1 99 0 is_stmt 1 discriminator 3
ARM GAS  /tmp/ccBwmWIp.s 			page 21


 597 0026 C1EB4113 		rsb	r3, r1, r1, lsl #5
 598 002a C1EB8303 		rsb	r3, r1, r3, lsl #2
 599 002e 1344     		add	r3, r3, r2
 600 0030 6033     		adds	r3, r3, #96
 601 0032 0024     		movs	r4, #0
 602 0034 1848     		ldr	r0, .L64
 603 0036 20F81340 		strh	r4, [r0, r3, lsl #1]	@ movhi
  97:Core/Src/bms.c ****         {
 604              		.loc 1 97 0 discriminator 3
 605 003a 0132     		adds	r2, r2, #1
 606              	.LVL53:
 607              	.L55:
  97:Core/Src/bms.c ****         {
 608              		.loc 1 97 0 is_stmt 0 discriminator 1
 609 003c 0F2A     		cmp	r2, #15
 610 003e F2D9     		bls	.L56
 611              	.LBE16:
  79:Core/Src/bms.c ****     {
 612              		.loc 1 79 0 is_stmt 1 discriminator 2
 613 0040 0131     		adds	r1, r1, #1
 614              	.LVL54:
 615 0042 0129     		cmp	r1, #1
 616 0044 19D8     		bhi	.L63
 617              	.LVL55:
 618              	.L57:
  81:Core/Src/bms.c ****         BMS[i].cellDelta = 0;
 619              		.loc 1 81 0
 620 0046 F623     		movs	r3, #246
 621 0048 134A     		ldr	r2, .L64
 622 004a 03FB0123 		mla	r3, r3, r1, r2
 623 004e 0022     		movs	r2, #0
 624 0050 83F8F220 		strb	r2, [r3, #242]
  82:Core/Src/bms.c ****         BMS[i].highCellTemp = 0;
 625              		.loc 1 82 0
 626 0054 A3F8E820 		strh	r2, [r3, #232]	@ movhi
  83:Core/Src/bms.c ****         BMS[i].chargeRequest = 0;
 627              		.loc 1 83 0
 628 0058 A3F8EA20 		strh	r2, [r3, #234]	@ movhi
  84:Core/Src/bms.c ****         BMS[i].highCellVolt = 0;
 629              		.loc 1 84 0
 630 005c 83F8F420 		strb	r2, [r3, #244]
  85:Core/Src/bms.c ****         BMS[i].lowCellVolt = 0;
 631              		.loc 1 85 0
 632 0060 A3F8E420 		strh	r2, [r3, #228]	@ movhi
  86:Core/Src/bms.c ****         BMS[i].lowCellTemp = 0;
 633              		.loc 1 86 0
 634 0064 A3F8E220 		strh	r2, [r3, #226]	@ movhi
  87:Core/Src/bms.c ****         BMS[i].packVolt = 0;
 635              		.loc 1 87 0
 636 0068 A3F8EC20 		strh	r2, [r3, #236]	@ movhi
  88:Core/Src/bms.c ****         BMS[i].SOC = 0;
 637              		.loc 1 88 0
 638 006c A3F8E020 		strh	r2, [r3, #224]	@ movhi
  89:Core/Src/bms.c ****         BMS[i].tempDelta = 0;
 639              		.loc 1 89 0
 640 0070 83F8F320 		strb	r2, [r3, #243]
  90:Core/Src/bms.c **** 
ARM GAS  /tmp/ccBwmWIp.s 			page 22


 641              		.loc 1 90 0
 642 0074 A3F8F020 		strh	r2, [r3, #240]	@ movhi
 643              	.LVL56:
 644              	.LBB17:
  92:Core/Src/bms.c ****         {
 645              		.loc 1 92 0
 646 0078 D1E7     		b	.L53
 647              	.LVL57:
 648              	.L63:
 649              	.LBE17:
 650              	.LBE18:
 102:Core/Src/bms.c ****     charged = false;
 651              		.loc 1 102 0
 652 007a 0023     		movs	r3, #0
 653 007c 074A     		ldr	r2, .L64+4
 654              	.LVL58:
 655 007e 1370     		strb	r3, [r2]
 103:Core/Src/bms.c **** }
 656              		.loc 1 103 0
 657 0080 074A     		ldr	r2, .L64+8
 658 0082 1370     		strb	r3, [r2]
 104:Core/Src/bms.c **** 
 659              		.loc 1 104 0
 660 0084 5DF8044B 		ldr	r4, [sp], #4
 661              	.LCFI5:
 662              		.cfi_restore 4
 663              		.cfi_def_cfa_offset 0
 664 0088 7047     		bx	lr
 665              	.L62:
 102:Core/Src/bms.c ****     charged = false;
 666              		.loc 1 102 0
 667 008a 0023     		movs	r3, #0
 668 008c 034A     		ldr	r2, .L64+4
 669 008e 1370     		strb	r3, [r2]
 103:Core/Src/bms.c **** }
 670              		.loc 1 103 0
 671 0090 034A     		ldr	r2, .L64+8
 672 0092 1370     		strb	r3, [r2]
 673 0094 7047     		bx	lr
 674              	.L65:
 675 0096 00BF     		.align	2
 676              	.L64:
 677 0098 00000000 		.word	BMS
 678 009c 00000000 		.word	vechicleState
 679 00a0 00000000 		.word	charged
 680              		.cfi_endproc
 681              	.LFE131:
 683              		.global	__aeabi_i2d
 684              		.global	__aeabi_dcmpgt
 685              		.section	.text.bmsStateHandler,"ax",%progbits
 686              		.align	1
 687              		.global	bmsStateHandler
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 691              		.fpu fpv4-sp-d16
 693              	bmsStateHandler:
ARM GAS  /tmp/ccBwmWIp.s 			page 23


 694              	.LFB132:
 108:Core/Src/bms.c ****     switch (bms->state)
 695              		.loc 1 108 0
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 0
 698              		@ frame_needed = 0, uses_anonymous_args = 0
 699              	.LVL59:
 700 0000 38B5     		push	{r3, r4, r5, lr}
 701              	.LCFI6:
 702              		.cfi_def_cfa_offset 16
 703              		.cfi_offset 3, -16
 704              		.cfi_offset 4, -12
 705              		.cfi_offset 5, -8
 706              		.cfi_offset 14, -4
 109:Core/Src/bms.c ****     {
 707              		.loc 1 109 0
 708 0002 90F8F230 		ldrb	r3, [r0, #242]	@ zero_extendqisi2
 709 0006 042B     		cmp	r3, #4
 710 0008 6ED8     		bhi	.L66
 711 000a DFE803F0 		tbb	[pc, r3]
 712              	.L69:
 713 000e 03       		.byte	(.L68-.L69)/2
 714 000f 0A       		.byte	(.L70-.L69)/2
 715 0010 35       		.byte	(.L71-.L69)/2
 716 0011 3C       		.byte	(.L72-.L69)/2
 717 0012 5C       		.byte	(.L73-.L69)/2
 718 0013 00       		.p2align 1
 719              	.L68:
 112:Core/Src/bms.c ****         bms->state = Ready;
 720              		.loc 1 112 0
 721 0014 0023     		movs	r3, #0
 722 0016 80F8F430 		strb	r3, [r0, #244]
 113:Core/Src/bms.c ****         break;
 723              		.loc 1 113 0
 724 001a 0123     		movs	r3, #1
 725 001c 80F8F230 		strb	r3, [r0, #242]
 114:Core/Src/bms.c **** 
 726              		.loc 1 114 0
 727 0020 38BD     		pop	{r3, r4, r5, pc}
 728              	.L70:
 729 0022 0446     		mov	r4, r0
 117:Core/Src/bms.c **** 
 730              		.loc 1 117 0
 731 0024 0023     		movs	r3, #0
 732 0026 80F8F430 		strb	r3, [r0, #244]
 119:Core/Src/bms.c ****         {
 733              		.loc 1 119 0
 734 002a B0F8E620 		ldrh	r2, [r0, #230]
 735 002e 40F60A73 		movw	r3, #3850
 736 0032 9A42     		cmp	r2, r3
 737 0034 16D9     		bls	.L74
 121:Core/Src/bms.c ****             {
 738              		.loc 1 121 0
 739 0036 B0F8E450 		ldrh	r5, [r0, #228]
 740 003a B0F8E230 		ldrh	r3, [r0, #226]
 741 003e ED1A     		subs	r5, r5, r3
 742 0040 2846     		mov	r0, r5
ARM GAS  /tmp/ccBwmWIp.s 			page 24


 743              	.LVL60:
 744 0042 FFF7FEFF 		bl	__aeabi_i2d
 745              	.LVL61:
 746 0046 0022     		movs	r2, #0
 747 0048 284B     		ldr	r3, .L83
 748 004a FFF7FEFF 		bl	__aeabi_dcmpgt
 749              	.LVL62:
 750 004e 18B1     		cbz	r0, .L81
 123:Core/Src/bms.c ****             }
 751              		.loc 1 123 0
 752 0050 0123     		movs	r3, #1
 753 0052 84F8F530 		strb	r3, [r4, #245]
 754 0056 08E0     		b	.L77
 755              	.L81:
 126:Core/Src/bms.c ****             {
 756              		.loc 1 126 0
 757 0058 112D     		cmp	r5, #17
 758 005a 06DC     		bgt	.L77
 128:Core/Src/bms.c ****             }
 759              		.loc 1 128 0
 760 005c 0023     		movs	r3, #0
 761 005e 84F8F530 		strb	r3, [r4, #245]
 762 0062 02E0     		b	.L77
 763              	.LVL63:
 764              	.L74:
 133:Core/Src/bms.c ****         }
 765              		.loc 1 133 0
 766 0064 0023     		movs	r3, #0
 767 0066 80F8F530 		strb	r3, [r0, #245]
 768              	.LVL64:
 769              	.L77:
 143:Core/Src/bms.c ****             bms->state = Drive;
 770              		.loc 1 143 0
 771 006a 0023     		movs	r3, #0
 772 006c 84F8F530 		strb	r3, [r4, #245]
 144:Core/Src/bms.c ****         }
 773              		.loc 1 144 0
 774 0070 0223     		movs	r3, #2
 775 0072 84F8F230 		strb	r3, [r4, #242]
 146:Core/Src/bms.c **** 
 776              		.loc 1 146 0
 777 0076 38BD     		pop	{r3, r4, r5, pc}
 778              	.LVL65:
 779              	.L71:
 150:Core/Src/bms.c ****         {
 780              		.loc 1 150 0
 781 0078 1D4B     		ldr	r3, .L83+4
 782 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 783 007c A3BB     		cbnz	r3, .L66
 152:Core/Src/bms.c ****         }
 784              		.loc 1 152 0
 785 007e 0123     		movs	r3, #1
 786 0080 80F8F230 		strb	r3, [r0, #242]
 787 0084 38BD     		pop	{r3, r4, r5, pc}
 788              	.L72:
 157:Core/Src/bms.c ****         bms->chargeRequest = 1;
 789              		.loc 1 157 0
ARM GAS  /tmp/ccBwmWIp.s 			page 25


 790 0086 0023     		movs	r3, #0
 791 0088 80F8F530 		strb	r3, [r0, #245]
 158:Core/Src/bms.c **** 
 792              		.loc 1 158 0
 793 008c 0123     		movs	r3, #1
 794 008e 80F8F430 		strb	r3, [r0, #244]
 160:Core/Src/bms.c ****         {
 795              		.loc 1 160 0
 796 0092 B0F8E420 		ldrh	r2, [r0, #228]
 797 0096 41F25403 		movw	r3, #4180
 798 009a 9A42     		cmp	r2, r3
 799 009c 03D8     		bhi	.L78
 160:Core/Src/bms.c ****         {
 800              		.loc 1 160 0 is_stmt 0 discriminator 1
 801 009e B0F8EA30 		ldrh	r3, [r0, #234]
 802 00a2 952B     		cmp	r3, #149
 803 00a4 05D9     		bls	.L79
 804              	.L78:
 170:Core/Src/bms.c ****             bms->state = Ready;
 805              		.loc 1 170 0 is_stmt 1
 806 00a6 0023     		movs	r3, #0
 807 00a8 80F8F430 		strb	r3, [r0, #244]
 171:Core/Src/bms.c ****         }
 808              		.loc 1 171 0
 809 00ac 0123     		movs	r3, #1
 810 00ae 80F8F230 		strb	r3, [r0, #242]
 811              	.L79:
 174:Core/Src/bms.c ****         {
 812              		.loc 1 174 0
 813 00b2 104B     		ldr	r3, .L83+8
 814 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 815 00b6 BBB1     		cbz	r3, .L66
 176:Core/Src/bms.c ****             bms->state = Ready;
 816              		.loc 1 176 0
 817 00b8 0023     		movs	r3, #0
 818 00ba 80F8F430 		strb	r3, [r0, #244]
 177:Core/Src/bms.c ****         }
 819              		.loc 1 177 0
 820 00be 0123     		movs	r3, #1
 821 00c0 80F8F230 		strb	r3, [r0, #242]
 822 00c4 38BD     		pop	{r3, r4, r5, pc}
 823              	.L73:
 183:Core/Src/bms.c **** 
 824              		.loc 1 183 0
 825 00c6 0023     		movs	r3, #0
 826 00c8 80F8F430 		strb	r3, [r0, #244]
 185:Core/Src/bms.c ****         {
 827              		.loc 1 185 0
 828 00cc B0F8E230 		ldrh	r3, [r0, #226]
 829 00d0 B3F5FA6F 		cmp	r3, #2000
 830 00d4 08D9     		bls	.L66
 185:Core/Src/bms.c ****         {
 831              		.loc 1 185 0 is_stmt 0 discriminator 1
 832 00d6 B0F8E420 		ldrh	r2, [r0, #228]
 833 00da 41F29903 		movw	r3, #4249
 834 00de 9A42     		cmp	r2, r3
 835 00e0 02D8     		bhi	.L66
ARM GAS  /tmp/ccBwmWIp.s 			page 26


 187:Core/Src/bms.c ****         }
 836              		.loc 1 187 0 is_stmt 1
 837 00e2 0123     		movs	r3, #1
 838 00e4 80F8F230 		strb	r3, [r0, #242]
 839              	.L66:
 840 00e8 38BD     		pop	{r3, r4, r5, pc}
 841              	.L84:
 842 00ea 00BF     		.align	2
 843              	.L83:
 844 00ec 00803940 		.word	1077510144
 845 00f0 00000000 		.word	vechicleState
 846 00f4 00000000 		.word	charged
 847              		.cfi_endproc
 848              	.LFE132:
 850              		.section	.text.acChargeCommand,"ax",%progbits
 851              		.align	1
 852              		.global	acChargeCommand
 853              		.syntax unified
 854              		.thumb
 855              		.thumb_func
 856              		.fpu fpv4-sp-d16
 858              	acChargeCommand:
 859              	.LFB133:
 198:Core/Src/bms.c **** 
 860              		.loc 1 198 0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 0
 863              		@ frame_needed = 0, uses_anonymous_args = 0
 864 0000 10B5     		push	{r4, lr}
 865              	.LCFI7:
 866              		.cfi_def_cfa_offset 8
 867              		.cfi_offset 4, -8
 868              		.cfi_offset 14, -4
 200:Core/Src/bms.c ****     {
 869              		.loc 1 200 0
 870 0002 204B     		ldr	r3, .L91
 871 0004 93F8F430 		ldrb	r3, [r3, #244]	@ zero_extendqisi2
 872 0008 1BB1     		cbz	r3, .L86
 200:Core/Src/bms.c ****     {
 873              		.loc 1 200 0 is_stmt 0 discriminator 1
 874 000a 1E4B     		ldr	r3, .L91
 875 000c 93F8EA31 		ldrb	r3, [r3, #490]	@ zero_extendqisi2
 876 0010 03BB     		cbnz	r3, .L90
 877              	.L86:
 217:Core/Src/bms.c ****     {
 878              		.loc 1 217 0 is_stmt 1
 879 0012 1C4B     		ldr	r3, .L91
 880 0014 93F8F430 		ldrb	r3, [r3, #244]	@ zero_extendqisi2
 881 0018 1BB1     		cbz	r3, .L87
 217:Core/Src/bms.c ****     {
 882              		.loc 1 217 0 is_stmt 0 discriminator 1
 883 001a 1A4B     		ldr	r3, .L91
 884 001c 93F8EA31 		ldrb	r3, [r3, #490]	@ zero_extendqisi2
 885 0020 BBB9     		cbnz	r3, .L85
 886              	.L87:
 887              	.LVL66:
 888              	.LBB19:
ARM GAS  /tmp/ccBwmWIp.s 			page 27


 220:Core/Src/bms.c ****         txMsg2.DLC = 8;
 889              		.loc 1 220 0 is_stmt 1
 890 0022 1948     		ldr	r0, .L91+4
 891 0024 40F20563 		movw	r3, #1541
 892 0028 0360     		str	r3, [r0]
 221:Core/Src/bms.c ****         canTx2[0] = 0x40;
 893              		.loc 1 221 0
 894 002a 0823     		movs	r3, #8
 895 002c 0361     		str	r3, [r0, #16]
 222:Core/Src/bms.c ****         canTx2[1] = 0x00;
 896              		.loc 1 222 0
 897 002e 1749     		ldr	r1, .L91+8
 898 0030 4023     		movs	r3, #64
 899 0032 0B70     		strb	r3, [r1]
 223:Core/Src/bms.c ****         canTx2[2] = 0x20;
 900              		.loc 1 223 0
 901 0034 0023     		movs	r3, #0
 902 0036 4B70     		strb	r3, [r1, #1]
 224:Core/Src/bms.c ****         canTx2[3] = 9;
 903              		.loc 1 224 0
 904 0038 2022     		movs	r2, #32
 905 003a 8A70     		strb	r2, [r1, #2]
 225:Core/Src/bms.c ****         canTx2[4] = val & 0xFF;
 906              		.loc 1 225 0
 907 003c 0922     		movs	r2, #9
 908 003e CA70     		strb	r2, [r1, #3]
 226:Core/Src/bms.c ****         canTx2[5] = (val >> 8) & 0xFF;
 909              		.loc 1 226 0
 910 0040 0B71     		strb	r3, [r1, #4]
 227:Core/Src/bms.c ****         canTx2[6] = (val >> 16) & 0xFF;
 911              		.loc 1 227 0
 912 0042 4B71     		strb	r3, [r1, #5]
 228:Core/Src/bms.c ****         canTx2[7] = (val >> 24) & 0xFF;
 913              		.loc 1 228 0
 914 0044 8B71     		strb	r3, [r1, #6]
 229:Core/Src/bms.c ****         c2tx(&txMsg2, canTx2);
 915              		.loc 1 229 0
 916 0046 CB71     		strb	r3, [r1, #7]
 230:Core/Src/bms.c ****         charged = true;
 917              		.loc 1 230 0
 918 0048 FFF7FEFF 		bl	c2tx
 919              	.LVL67:
 231:Core/Src/bms.c ****     }
 920              		.loc 1 231 0
 921 004c 0122     		movs	r2, #1
 922 004e 104B     		ldr	r3, .L91+12
 923 0050 1A70     		strb	r2, [r3]
 924              	.LVL68:
 925              	.L85:
 926 0052 10BD     		pop	{r4, pc}
 927              	.L90:
 928              	.LBE19:
 929              	.LBB20:
 202:Core/Src/bms.c ****         int val = 32;
 930              		.loc 1 202 0
 931 0054 0023     		movs	r3, #0
 932 0056 0E4A     		ldr	r2, .L91+12
ARM GAS  /tmp/ccBwmWIp.s 			page 28


 933 0058 1370     		strb	r3, [r2]
 934              	.LVL69:
 204:Core/Src/bms.c ****         txMsg2.DLC = 8;
 935              		.loc 1 204 0
 936 005a 0B48     		ldr	r0, .L91+4
 937 005c 40F20562 		movw	r2, #1541
 938 0060 0260     		str	r2, [r0]
 205:Core/Src/bms.c ****         canTx2[0] = 0x40;
 939              		.loc 1 205 0
 940 0062 0822     		movs	r2, #8
 941 0064 0261     		str	r2, [r0, #16]
 206:Core/Src/bms.c ****         canTx2[1] = 0x00;
 942              		.loc 1 206 0
 943 0066 0949     		ldr	r1, .L91+8
 944 0068 4022     		movs	r2, #64
 945 006a 0A70     		strb	r2, [r1]
 207:Core/Src/bms.c ****         canTx2[2] = 0x20;
 946              		.loc 1 207 0
 947 006c 4B70     		strb	r3, [r1, #1]
 208:Core/Src/bms.c ****         canTx2[3] = 9;
 948              		.loc 1 208 0
 949 006e 2022     		movs	r2, #32
 950 0070 8A70     		strb	r2, [r1, #2]
 209:Core/Src/bms.c ****         canTx2[4] = val & 0xFF;
 951              		.loc 1 209 0
 952 0072 0924     		movs	r4, #9
 953 0074 CC70     		strb	r4, [r1, #3]
 210:Core/Src/bms.c ****         canTx2[5] = (val >> 8) & 0xFF;
 954              		.loc 1 210 0
 955 0076 0A71     		strb	r2, [r1, #4]
 211:Core/Src/bms.c ****         canTx2[6] = (val >> 16) & 0xFF;
 956              		.loc 1 211 0
 957 0078 4B71     		strb	r3, [r1, #5]
 212:Core/Src/bms.c ****         canTx2[7] = (val >> 24) & 0xFF;
 958              		.loc 1 212 0
 959 007a 8B71     		strb	r3, [r1, #6]
 213:Core/Src/bms.c ****         c2tx(&txMsg2, canTx2);
 960              		.loc 1 213 0
 961 007c CB71     		strb	r3, [r1, #7]
 214:Core/Src/bms.c ****     }
 962              		.loc 1 214 0
 963 007e FFF7FEFF 		bl	c2tx
 964              	.LVL70:
 965 0082 C6E7     		b	.L86
 966              	.L92:
 967              		.align	2
 968              	.L91:
 969 0084 00000000 		.word	BMS
 970 0088 00000000 		.word	txMsg2
 971 008c 00000000 		.word	canTx2
 972 0090 00000000 		.word	charged
 973              	.LBE20:
 974              		.cfi_endproc
 975              	.LFE133:
 977              		.section	.text.tx500kData,"ax",%progbits
 978              		.align	1
 979              		.global	tx500kData
ARM GAS  /tmp/ccBwmWIp.s 			page 29


 980              		.syntax unified
 981              		.thumb
 982              		.thumb_func
 983              		.fpu fpv4-sp-d16
 985              	tx500kData:
 986              	.LFB134:
 236:Core/Src/bms.c **** 
 987              		.loc 1 236 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 8
 990              		@ frame_needed = 0, uses_anonymous_args = 0
 991 0000 30B5     		push	{r4, r5, lr}
 992              	.LCFI8:
 993              		.cfi_def_cfa_offset 12
 994              		.cfi_offset 4, -12
 995              		.cfi_offset 5, -8
 996              		.cfi_offset 14, -4
 997 0002 83B0     		sub	sp, sp, #12
 998              	.LCFI9:
 999              		.cfi_def_cfa_offset 24
 241:Core/Src/bms.c ****     bytes[1] = (BMS[0].packVolt >> 8) & 0xFF;
 1000              		.loc 1 241 0
 1001 0004 224C     		ldr	r4, .L95
 1002 0006 B4F8E030 		ldrh	r3, [r4, #224]
 1003 000a 8DF80030 		strb	r3, [sp]
 242:Core/Src/bms.c ****     bytes[2] = BMS[0].avgCellTemp & 0XFF;
 1004              		.loc 1 242 0
 1005 000e 1B0A     		lsrs	r3, r3, #8
 1006 0010 8DF80130 		strb	r3, [sp, #1]
 243:Core/Src/bms.c ****     bytes[3] = (BMS[0].avgCellTemp >> 8) & 0XFF;
 1007              		.loc 1 243 0
 1008 0014 B4F8EE30 		ldrh	r3, [r4, #238]
 1009 0018 8DF80230 		strb	r3, [sp, #2]
 244:Core/Src/bms.c ****     bytes[4] = BMS[0].cellDelta & 0XFF;
 1010              		.loc 1 244 0
 1011 001c 1B0A     		lsrs	r3, r3, #8
 1012 001e 8DF80330 		strb	r3, [sp, #3]
 245:Core/Src/bms.c ****     bytes[5] = (BMS[0].cellDelta >> 8) & 0XFF;
 1013              		.loc 1 245 0
 1014 0022 B4F8E830 		ldrh	r3, [r4, #232]
 1015 0026 8DF80430 		strb	r3, [sp, #4]
 246:Core/Src/bms.c ****     bytes[6] = (BMS[0].SOC);
 1016              		.loc 1 246 0
 1017 002a 1B0A     		lsrs	r3, r3, #8
 1018 002c 8DF80530 		strb	r3, [sp, #5]
 247:Core/Src/bms.c ****     bytes[7] = 0;
 1019              		.loc 1 247 0
 1020 0030 94F8F330 		ldrb	r3, [r4, #243]	@ zero_extendqisi2
 1021 0034 8DF80630 		strb	r3, [sp, #6]
 248:Core/Src/bms.c ****     can2tx(0x138, 8, bytes);
 1022              		.loc 1 248 0
 1023 0038 0025     		movs	r5, #0
 1024 003a 8DF80750 		strb	r5, [sp, #7]
 249:Core/Src/bms.c **** 
 1025              		.loc 1 249 0
 1026 003e 6A46     		mov	r2, sp
 1027 0040 0821     		movs	r1, #8
ARM GAS  /tmp/ccBwmWIp.s 			page 30


 1028 0042 4FF49C70 		mov	r0, #312
 1029 0046 FFF7FEFF 		bl	can2tx
 1030              	.LVL71:
 253:Core/Src/bms.c ****     bytes[1] = (BMS[1].packVolt >> 8) & 0xFF;
 1031              		.loc 1 253 0
 1032 004a B4F8D631 		ldrh	r3, [r4, #470]
 1033 004e 8DF80030 		strb	r3, [sp]
 254:Core/Src/bms.c ****     bytes[2] = BMS[1].avgCellTemp & 0XFF;
 1034              		.loc 1 254 0
 1035 0052 1B0A     		lsrs	r3, r3, #8
 1036 0054 8DF80130 		strb	r3, [sp, #1]
 255:Core/Src/bms.c ****     bytes[3] = (BMS[1].avgCellTemp >> 8) & 0XFF;
 1037              		.loc 1 255 0
 1038 0058 B4F8E431 		ldrh	r3, [r4, #484]
 1039 005c 8DF80230 		strb	r3, [sp, #2]
 256:Core/Src/bms.c ****     bytes[4] = BMS[1].cellDelta & 0XFF;
 1040              		.loc 1 256 0
 1041 0060 1B0A     		lsrs	r3, r3, #8
 1042 0062 8DF80330 		strb	r3, [sp, #3]
 257:Core/Src/bms.c ****     bytes[5] = (BMS[1].cellDelta >> 8) & 0XFF;
 1043              		.loc 1 257 0
 1044 0066 B4F8DE31 		ldrh	r3, [r4, #478]
 1045 006a 8DF80430 		strb	r3, [sp, #4]
 258:Core/Src/bms.c ****     bytes[6] = (BMS[1].SOC);
 1046              		.loc 1 258 0
 1047 006e 1B0A     		lsrs	r3, r3, #8
 1048 0070 8DF80530 		strb	r3, [sp, #5]
 259:Core/Src/bms.c ****     bytes[7] = 0;
 1049              		.loc 1 259 0
 1050 0074 94F8E931 		ldrb	r3, [r4, #489]	@ zero_extendqisi2
 1051 0078 8DF80630 		strb	r3, [sp, #6]
 260:Core/Src/bms.c ****     can2tx(0x139, 8, bytes);
 1052              		.loc 1 260 0
 1053 007c 8DF80750 		strb	r5, [sp, #7]
 261:Core/Src/bms.c ****     //c2tx(&txMsg2, canTx2);
 1054              		.loc 1 261 0
 1055 0080 6A46     		mov	r2, sp
 1056 0082 0821     		movs	r1, #8
 1057 0084 40F23910 		movw	r0, #313
 1058 0088 FFF7FEFF 		bl	can2tx
 1059              	.LVL72:
 263:Core/Src/bms.c **** 
 1060              		.loc 1 263 0
 1061 008c 03B0     		add	sp, sp, #12
 1062              	.LCFI10:
 1063              		.cfi_def_cfa_offset 12
 1064              		@ sp needed
 1065 008e 30BD     		pop	{r4, r5, pc}
 1066              	.L96:
 1067              		.align	2
 1068              	.L95:
 1069 0090 00000000 		.word	BMS
 1070              		.cfi_endproc
 1071              	.LFE134:
 1073              		.section	.text.sendCommand,"ax",%progbits
 1074              		.align	1
 1075              		.global	sendCommand
ARM GAS  /tmp/ccBwmWIp.s 			page 31


 1076              		.syntax unified
 1077              		.thumb
 1078              		.thumb_func
 1079              		.fpu fpv4-sp-d16
 1081              	sendCommand:
 1082              	.LFB136:
 288:Core/Src/bms.c ****     txMsg.StdId = 0x200;
 1083              		.loc 1 288 0
 1084              		.cfi_startproc
 1085              		@ args = 0, pretend = 0, frame = 0
 1086              		@ frame_needed = 0, uses_anonymous_args = 0
 1087 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1088              	.LCFI11:
 1089              		.cfi_def_cfa_offset 24
 1090              		.cfi_offset 3, -24
 1091              		.cfi_offset 4, -20
 1092              		.cfi_offset 5, -16
 1093              		.cfi_offset 6, -12
 1094              		.cfi_offset 7, -8
 1095              		.cfi_offset 14, -4
 289:Core/Src/bms.c ****     txMsg.DLC = 3;
 1096              		.loc 1 289 0
 1097 0002 0C48     		ldr	r0, .L99
 1098 0004 4FF40077 		mov	r7, #512
 1099 0008 0760     		str	r7, [r0]
 290:Core/Src/bms.c ****     canTx[0] = 0x02;
 1100              		.loc 1 290 0
 1101 000a 0326     		movs	r6, #3
 1102 000c 0661     		str	r6, [r0, #16]
 291:Core/Src/bms.c ****     canTx[1] = 0x00;
 1103              		.loc 1 291 0
 1104 000e 0A49     		ldr	r1, .L99+4
 1105 0010 0225     		movs	r5, #2
 1106 0012 0D70     		strb	r5, [r1]
 292:Core/Src/bms.c ****     canTx[2] = 0x00;
 1107              		.loc 1 292 0
 1108 0014 0024     		movs	r4, #0
 1109 0016 4C70     		strb	r4, [r1, #1]
 293:Core/Src/bms.c ****     c1tx(&txMsg, canTx); //pack 1
 1110              		.loc 1 293 0
 1111 0018 8C70     		strb	r4, [r1, #2]
 294:Core/Src/bms.c ****     txMsg3.StdId = 0x200;
 1112              		.loc 1 294 0
 1113 001a FFF7FEFF 		bl	c1tx
 1114              	.LVL73:
 295:Core/Src/bms.c ****     txMsg3.DLC = 3;
 1115              		.loc 1 295 0
 1116 001e 0748     		ldr	r0, .L99+8
 1117 0020 0760     		str	r7, [r0]
 296:Core/Src/bms.c ****     canTx3[0] = 0x02;
 1118              		.loc 1 296 0
 1119 0022 0661     		str	r6, [r0, #16]
 297:Core/Src/bms.c ****     canTx3[1] = 0x00;
 1120              		.loc 1 297 0
 1121 0024 0649     		ldr	r1, .L99+12
 1122 0026 0D70     		strb	r5, [r1]
 298:Core/Src/bms.c ****     canTx3[2] = 0x00;
ARM GAS  /tmp/ccBwmWIp.s 			page 32


 1123              		.loc 1 298 0
 1124 0028 4C70     		strb	r4, [r1, #1]
 299:Core/Src/bms.c ****     c3tx(&txMsg3, canTx3); // pack 2
 1125              		.loc 1 299 0
 1126 002a 8C70     		strb	r4, [r1, #2]
 300:Core/Src/bms.c **** }
 1127              		.loc 1 300 0
 1128 002c FFF7FEFF 		bl	c3tx
 1129              	.LVL74:
 1130 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1131              	.L100:
 1132 0032 00BF     		.align	2
 1133              	.L99:
 1134 0034 00000000 		.word	txMsg
 1135 0038 00000000 		.word	canTx
 1136 003c 00000000 		.word	txMsg3
 1137 0040 00000000 		.word	canTx3
 1138              		.cfi_endproc
 1139              	.LFE136:
 1141              		.section	.text.requestBICMdata,"ax",%progbits
 1142              		.align	1
 1143              		.global	requestBICMdata
 1144              		.syntax unified
 1145              		.thumb
 1146              		.thumb_func
 1147              		.fpu fpv4-sp-d16
 1149              	requestBICMdata:
 1150              	.LFB137:
 304:Core/Src/bms.c ****     sendCommand();
 1151              		.loc 1 304 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155              	.LVL75:
 1156 0000 38B5     		push	{r3, r4, r5, lr}
 1157              	.LCFI12:
 1158              		.cfi_def_cfa_offset 16
 1159              		.cfi_offset 3, -16
 1160              		.cfi_offset 4, -12
 1161              		.cfi_offset 5, -8
 1162              		.cfi_offset 14, -4
 1163 0002 0446     		mov	r4, r0
 305:Core/Src/bms.c **** 
 1164              		.loc 1 305 0
 1165 0004 FFF7FEFF 		bl	sendCommand
 1166              	.LVL76:
 307:Core/Src/bms.c ****     {
 1167              		.loc 1 307 0
 1168 0008 94F8F530 		ldrb	r3, [r4, #245]	@ zero_extendqisi2
 1169 000c 1BBB     		cbnz	r3, .L102
 310:Core/Src/bms.c ****         txMsg.DLC = 8;
 1170              		.loc 1 310 0
 1171 000e 264B     		ldr	r3, .L113
 1172 0010 4FF44072 		mov	r2, #768
 1173 0014 1A60     		str	r2, [r3]
 311:Core/Src/bms.c ****         for (size_t i = 0; i < 8; i++)
 1174              		.loc 1 311 0
ARM GAS  /tmp/ccBwmWIp.s 			page 33


 1175 0016 0822     		movs	r2, #8
 1176 0018 1A61     		str	r2, [r3, #16]
 1177              	.LVL77:
 1178              	.LBB21:
 312:Core/Src/bms.c ****         {
 1179              		.loc 1 312 0
 1180 001a 0023     		movs	r3, #0
 1181 001c 03E0     		b	.L103
 1182              	.LVL78:
 1183              	.L104:
 314:Core/Src/bms.c ****         }
 1184              		.loc 1 314 0 discriminator 3
 1185 001e 0021     		movs	r1, #0
 1186 0020 224A     		ldr	r2, .L113+4
 1187 0022 D154     		strb	r1, [r2, r3]
 312:Core/Src/bms.c ****         {
 1188              		.loc 1 312 0 discriminator 3
 1189 0024 0133     		adds	r3, r3, #1
 1190              	.LVL79:
 1191              	.L103:
 312:Core/Src/bms.c ****         {
 1192              		.loc 1 312 0 is_stmt 0 discriminator 1
 1193 0026 072B     		cmp	r3, #7
 1194 0028 F9D9     		bls	.L104
 1195              	.LBE21:
 316:Core/Src/bms.c **** 
 1196              		.loc 1 316 0 is_stmt 1
 1197 002a 1F4D     		ldr	r5, .L113
 1198 002c 1F49     		ldr	r1, .L113+4
 1199 002e 2846     		mov	r0, r5
 1200 0030 FFF7FEFF 		bl	c1tx
 1201              	.LVL80:
 318:Core/Src/bms.c ****         txMsg.DLC = 5;
 1202              		.loc 1 318 0
 1203 0034 4FF44473 		mov	r3, #784
 1204 0038 2B60     		str	r3, [r5]
 319:Core/Src/bms.c ****         for (size_t i = 0; i < 5; i++)
 1205              		.loc 1 319 0
 1206 003a 0523     		movs	r3, #5
 1207 003c 2B61     		str	r3, [r5, #16]
 1208              	.LVL81:
 1209              	.LBB22:
 320:Core/Src/bms.c ****         {
 1210              		.loc 1 320 0
 1211 003e 0023     		movs	r3, #0
 1212 0040 03E0     		b	.L105
 1213              	.LVL82:
 1214              	.L106:
 322:Core/Src/bms.c ****         }
 1215              		.loc 1 322 0 discriminator 3
 1216 0042 0021     		movs	r1, #0
 1217 0044 194A     		ldr	r2, .L113+4
 1218 0046 D154     		strb	r1, [r2, r3]
 320:Core/Src/bms.c ****         {
 1219              		.loc 1 320 0 discriminator 3
 1220 0048 0133     		adds	r3, r3, #1
 1221              	.LVL83:
ARM GAS  /tmp/ccBwmWIp.s 			page 34


 1222              	.L105:
 320:Core/Src/bms.c ****         {
 1223              		.loc 1 320 0 is_stmt 0 discriminator 1
 1224 004a 042B     		cmp	r3, #4
 1225 004c F9D9     		bls	.L106
 1226              	.LBE22:
 324:Core/Src/bms.c ****     }
 1227              		.loc 1 324 0 is_stmt 1
 1228 004e 1749     		ldr	r1, .L113+4
 1229 0050 1548     		ldr	r0, .L113
 1230 0052 FFF7FEFF 		bl	c1tx
 1231              	.LVL84:
 1232              	.L102:
 327:Core/Src/bms.c ****     {
 1233              		.loc 1 327 0
 1234 0056 94F8F530 		ldrb	r3, [r4, #245]	@ zero_extendqisi2
 1235 005a 1BBB     		cbnz	r3, .L101
 329:Core/Src/bms.c ****         txMsg3.DLC = 8;
 1236              		.loc 1 329 0
 1237 005c 144B     		ldr	r3, .L113+8
 1238 005e 4FF44072 		mov	r2, #768
 1239 0062 1A60     		str	r2, [r3]
 330:Core/Src/bms.c ****         for (size_t i = 0; i < 8; i++)
 1240              		.loc 1 330 0
 1241 0064 0822     		movs	r2, #8
 1242 0066 1A61     		str	r2, [r3, #16]
 1243              	.LVL85:
 1244              	.LBB23:
 331:Core/Src/bms.c ****         {
 1245              		.loc 1 331 0
 1246 0068 0023     		movs	r3, #0
 1247 006a 03E0     		b	.L108
 1248              	.LVL86:
 1249              	.L109:
 333:Core/Src/bms.c ****         }
 1250              		.loc 1 333 0 discriminator 3
 1251 006c 0021     		movs	r1, #0
 1252 006e 114A     		ldr	r2, .L113+12
 1253 0070 D154     		strb	r1, [r2, r3]
 331:Core/Src/bms.c ****         {
 1254              		.loc 1 331 0 discriminator 3
 1255 0072 0133     		adds	r3, r3, #1
 1256              	.LVL87:
 1257              	.L108:
 331:Core/Src/bms.c ****         {
 1258              		.loc 1 331 0 is_stmt 0 discriminator 1
 1259 0074 072B     		cmp	r3, #7
 1260 0076 F9D9     		bls	.L109
 1261              	.LBE23:
 335:Core/Src/bms.c **** 
 1262              		.loc 1 335 0 is_stmt 1
 1263 0078 0D4C     		ldr	r4, .L113+8
 1264              	.LVL88:
 1265 007a 0E49     		ldr	r1, .L113+12
 1266 007c 2046     		mov	r0, r4
 1267 007e FFF7FEFF 		bl	c3tx
 1268              	.LVL89:
ARM GAS  /tmp/ccBwmWIp.s 			page 35


 337:Core/Src/bms.c ****         txMsg3.DLC = 5;
 1269              		.loc 1 337 0
 1270 0082 4FF44473 		mov	r3, #784
 1271 0086 2360     		str	r3, [r4]
 338:Core/Src/bms.c ****         for (size_t i = 0; i < 5; i++)
 1272              		.loc 1 338 0
 1273 0088 0523     		movs	r3, #5
 1274 008a 2361     		str	r3, [r4, #16]
 1275              	.LVL90:
 1276              	.LBB24:
 339:Core/Src/bms.c ****         {
 1277              		.loc 1 339 0
 1278 008c 0023     		movs	r3, #0
 1279 008e 03E0     		b	.L110
 1280              	.LVL91:
 1281              	.L111:
 341:Core/Src/bms.c ****         }
 1282              		.loc 1 341 0 discriminator 3
 1283 0090 0021     		movs	r1, #0
 1284 0092 084A     		ldr	r2, .L113+12
 1285 0094 D154     		strb	r1, [r2, r3]
 339:Core/Src/bms.c ****         {
 1286              		.loc 1 339 0 discriminator 3
 1287 0096 0133     		adds	r3, r3, #1
 1288              	.LVL92:
 1289              	.L110:
 339:Core/Src/bms.c ****         {
 1290              		.loc 1 339 0 is_stmt 0 discriminator 1
 1291 0098 042B     		cmp	r3, #4
 1292 009a F9D9     		bls	.L111
 1293              	.LBE24:
 343:Core/Src/bms.c ****     }
 1294              		.loc 1 343 0 is_stmt 1
 1295 009c 0549     		ldr	r1, .L113+12
 1296 009e 0448     		ldr	r0, .L113+8
 1297 00a0 FFF7FEFF 		bl	c3tx
 1298              	.LVL93:
 1299              	.L101:
 1300 00a4 38BD     		pop	{r3, r4, r5, pc}
 1301              	.L114:
 1302 00a6 00BF     		.align	2
 1303              	.L113:
 1304 00a8 00000000 		.word	txMsg
 1305 00ac 00000000 		.word	canTx
 1306 00b0 00000000 		.word	txMsg3
 1307 00b4 00000000 		.word	canTx3
 1308              		.cfi_endproc
 1309              	.LFE137:
 1311              		.section	.text.refreshData,"ax",%progbits
 1312              		.align	1
 1313              		.global	refreshData
 1314              		.syntax unified
 1315              		.thumb
 1316              		.thumb_func
 1317              		.fpu fpv4-sp-d16
 1319              	refreshData:
 1320              	.LFB135:
ARM GAS  /tmp/ccBwmWIp.s 			page 36


 266:Core/Src/bms.c **** 
 1321              		.loc 1 266 0
 1322              		.cfi_startproc
 1323              		@ args = 0, pretend = 0, frame = 0
 1324              		@ frame_needed = 0, uses_anonymous_args = 0
 1325 0000 38B5     		push	{r3, r4, r5, lr}
 1326              	.LCFI13:
 1327              		.cfi_def_cfa_offset 16
 1328              		.cfi_offset 3, -16
 1329              		.cfi_offset 4, -12
 1330              		.cfi_offset 5, -8
 1331              		.cfi_offset 14, -4
 1332              	.LVL94:
 1333              	.LBB25:
 268:Core/Src/bms.c ****     {
 1334              		.loc 1 268 0
 1335 0002 0025     		movs	r5, #0
 1336 0004 2BE0     		b	.L116
 1337              	.LVL95:
 1338              	.L117:
 270:Core/Src/bms.c ****         getPackVolt(&BMS[i]);
 1339              		.loc 1 270 0 discriminator 3
 1340 0006 174B     		ldr	r3, .L119
 1341 0008 F624     		movs	r4, #246
 1342 000a 04FB0534 		mla	r4, r4, r5, r3
 1343 000e 2046     		mov	r0, r4
 1344 0010 FFF7FEFF 		bl	requestBICMdata
 1345              	.LVL96:
 271:Core/Src/bms.c ****         getAvgCellVolt(&BMS[i]);
 1346              		.loc 1 271 0 discriminator 3
 1347 0014 2046     		mov	r0, r4
 1348 0016 FFF7FEFF 		bl	getPackVolt
 1349              	.LVL97:
 272:Core/Src/bms.c ****         getLowCellVolt(&BMS[i]);
 1350              		.loc 1 272 0 discriminator 3
 1351 001a 2046     		mov	r0, r4
 1352 001c FFF7FEFF 		bl	getAvgCellVolt
 1353              	.LVL98:
 273:Core/Src/bms.c ****         getHighCellVolt(&BMS[i]);
 1354              		.loc 1 273 0 discriminator 3
 1355 0020 2046     		mov	r0, r4
 1356 0022 FFF7FEFF 		bl	getLowCellVolt
 1357              	.LVL99:
 274:Core/Src/bms.c ****         getCellDelta(&BMS[i]);
 1358              		.loc 1 274 0 discriminator 3
 1359 0026 2046     		mov	r0, r4
 1360 0028 FFF7FEFF 		bl	getHighCellVolt
 1361              	.LVL100:
 275:Core/Src/bms.c ****         getLowCellTemp(&BMS[i]);
 1362              		.loc 1 275 0 discriminator 3
 1363 002c 2046     		mov	r0, r4
 1364 002e FFF7FEFF 		bl	getCellDelta
 1365              	.LVL101:
 276:Core/Src/bms.c ****         getHighCellTemp(&BMS[i]);
 1366              		.loc 1 276 0 discriminator 3
 1367 0032 2046     		mov	r0, r4
 1368 0034 FFF7FEFF 		bl	getLowCellTemp
ARM GAS  /tmp/ccBwmWIp.s 			page 37


 1369              	.LVL102:
 277:Core/Src/bms.c ****         getAvgCellTemp(&BMS[i]);
 1370              		.loc 1 277 0 discriminator 3
 1371 0038 2046     		mov	r0, r4
 1372 003a FFF7FEFF 		bl	getHighCellTemp
 1373              	.LVL103:
 278:Core/Src/bms.c ****         getTempDelta(&BMS[i]);
 1374              		.loc 1 278 0 discriminator 3
 1375 003e 2046     		mov	r0, r4
 1376 0040 FFF7FEFF 		bl	getAvgCellTemp
 1377              	.LVL104:
 279:Core/Src/bms.c ****         getCellCount(&BMS[i], i);
 1378              		.loc 1 279 0 discriminator 3
 1379 0044 2046     		mov	r0, r4
 1380 0046 FFF7FEFF 		bl	getTempDelta
 1381              	.LVL105:
 280:Core/Src/bms.c ****         getSOC(&BMS[i]);
 1382              		.loc 1 280 0 discriminator 3
 1383 004a 2946     		mov	r1, r5
 1384 004c 2046     		mov	r0, r4
 1385 004e FFF7FEFF 		bl	getCellCount
 1386              	.LVL106:
 281:Core/Src/bms.c ****         acChargeCommand();
 1387              		.loc 1 281 0 discriminator 3
 1388 0052 2046     		mov	r0, r4
 1389 0054 FFF7FEFF 		bl	getSOC
 1390              	.LVL107:
 282:Core/Src/bms.c ****     }
 1391              		.loc 1 282 0 discriminator 3
 1392 0058 FFF7FEFF 		bl	acChargeCommand
 1393              	.LVL108:
 268:Core/Src/bms.c ****     {
 1394              		.loc 1 268 0 discriminator 3
 1395 005c 0135     		adds	r5, r5, #1
 1396              	.LVL109:
 1397              	.L116:
 268:Core/Src/bms.c ****     {
 1398              		.loc 1 268 0 is_stmt 0 discriminator 1
 1399 005e 012D     		cmp	r5, #1
 1400 0060 D1D9     		bls	.L117
 1401              	.LBE25:
 284:Core/Src/bms.c **** 
 1402              		.loc 1 284 0 is_stmt 1
 1403 0062 38BD     		pop	{r3, r4, r5, pc}
 1404              	.LVL110:
 1405              	.L120:
 1406              		.align	2
 1407              	.L119:
 1408 0064 00000000 		.word	BMS
 1409              		.cfi_endproc
 1410              	.LFE135:
 1412              		.section	.text.balanceCommand,"ax",%progbits
 1413              		.align	1
 1414              		.global	balanceCommand
 1415              		.syntax unified
 1416              		.thumb
 1417              		.thumb_func
ARM GAS  /tmp/ccBwmWIp.s 			page 38


 1418              		.fpu fpv4-sp-d16
 1420              	balanceCommand:
 1421              	.LFB138:
 349:Core/Src/bms.c ****     if (pack == 0)
 1422              		.loc 1 349 0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 0
 1425              		@ frame_needed = 0, uses_anonymous_args = 0
 1426              	.LVL111:
 1427 0000 70B5     		push	{r4, r5, r6, lr}
 1428              	.LCFI14:
 1429              		.cfi_def_cfa_offset 16
 1430              		.cfi_offset 4, -16
 1431              		.cfi_offset 5, -12
 1432              		.cfi_offset 6, -8
 1433              		.cfi_offset 14, -4
 1434 0002 0446     		mov	r4, r0
 350:Core/Src/bms.c ****     {
 1435              		.loc 1 350 0
 1436 0004 0D46     		mov	r5, r1
 1437 0006 0029     		cmp	r1, #0
 1438 0008 3BD1     		bne	.L122
 352:Core/Src/bms.c ****         txMsg.DLC = 8;
 1439              		.loc 1 352 0
 1440 000a 3E4B     		ldr	r3, .L142
 1441 000c 4FF44072 		mov	r2, #768
 1442 0010 1A60     		str	r2, [r3]
 353:Core/Src/bms.c ****         for (size_t i = 0; i < 62; i++)
 1443              		.loc 1 353 0
 1444 0012 0822     		movs	r2, #8
 1445 0014 1A61     		str	r2, [r3, #16]
 1446              	.LVL112:
 1447              	.LBB26:
 354:Core/Src/bms.c ****         {
 1448              		.loc 1 354 0
 1449 0016 0023     		movs	r3, #0
 1450 0018 00E0     		b	.L123
 1451              	.LVL113:
 1452              	.L124:
 354:Core/Src/bms.c ****         {
 1453              		.loc 1 354 0 is_stmt 0 discriminator 2
 1454 001a 0133     		adds	r3, r3, #1
 1455              	.LVL114:
 1456              	.L123:
 354:Core/Src/bms.c ****         {
 1457              		.loc 1 354 0 discriminator 1
 1458 001c 3D2B     		cmp	r3, #61
 1459 001e 0ED8     		bhi	.L137
 356:Core/Src/bms.c ****             {
 1460              		.loc 1 356 0 is_stmt 1
 1461 0020 B4F8E610 		ldrh	r1, [r4, #230]
 1462 0024 34F81320 		ldrh	r2, [r4, r3, lsl #1]
 1463 0028 9142     		cmp	r1, r2
 1464 002a F6D2     		bcs	.L124
 358:Core/Src/bms.c ****             }
 1465              		.loc 1 358 0
 1466 002c 364A     		ldr	r2, .L142+4
ARM GAS  /tmp/ccBwmWIp.s 			page 39


 1467 002e D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1468 0030 364A     		ldr	r2, .L142+8
 1469 0032 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1470 0034 3648     		ldr	r0, .L142+12
 1471 0036 465C     		ldrb	r6, [r0, r1]	@ zero_extendqisi2
 1472 0038 3243     		orrs	r2, r2, r6
 1473 003a 4254     		strb	r2, [r0, r1]
 1474 003c EDE7     		b	.L124
 1475              	.L137:
 1476              	.LBE26:
 361:Core/Src/bms.c **** 
 1477              		.loc 1 361 0
 1478 003e 314E     		ldr	r6, .L142
 1479 0040 3349     		ldr	r1, .L142+12
 1480 0042 3046     		mov	r0, r6
 1481 0044 FFF7FEFF 		bl	c1tx
 1482              	.LVL115:
 363:Core/Src/bms.c ****         txMsg.DLC = 5;
 1483              		.loc 1 363 0
 1484 0048 4FF44473 		mov	r3, #784
 1485 004c 3360     		str	r3, [r6]
 364:Core/Src/bms.c ****         for (size_t i = 62; i < 96; i++)
 1486              		.loc 1 364 0
 1487 004e 0523     		movs	r3, #5
 1488 0050 3361     		str	r3, [r6, #16]
 1489              	.LVL116:
 1490              	.LBB27:
 365:Core/Src/bms.c ****         {
 1491              		.loc 1 365 0
 1492 0052 3E23     		movs	r3, #62
 1493 0054 00E0     		b	.L126
 1494              	.LVL117:
 1495              	.L127:
 365:Core/Src/bms.c ****         {
 1496              		.loc 1 365 0 is_stmt 0 discriminator 2
 1497 0056 0133     		adds	r3, r3, #1
 1498              	.LVL118:
 1499              	.L126:
 365:Core/Src/bms.c ****         {
 1500              		.loc 1 365 0 discriminator 1
 1501 0058 5F2B     		cmp	r3, #95
 1502 005a 0ED8     		bhi	.L138
 367:Core/Src/bms.c ****             {
 1503              		.loc 1 367 0 is_stmt 1
 1504 005c B4F8E610 		ldrh	r1, [r4, #230]
 1505 0060 34F81320 		ldrh	r2, [r4, r3, lsl #1]
 1506 0064 9142     		cmp	r1, r2
 1507 0066 F6D2     		bcs	.L127
 369:Core/Src/bms.c ****             }
 1508              		.loc 1 369 0
 1509 0068 274A     		ldr	r2, .L142+4
 1510 006a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1511 006c 274A     		ldr	r2, .L142+8
 1512 006e D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1513 0070 2748     		ldr	r0, .L142+12
 1514 0072 465C     		ldrb	r6, [r0, r1]	@ zero_extendqisi2
 1515 0074 3243     		orrs	r2, r2, r6
ARM GAS  /tmp/ccBwmWIp.s 			page 40


 1516 0076 4254     		strb	r2, [r0, r1]
 1517 0078 EDE7     		b	.L127
 1518              	.L138:
 1519              	.LBE27:
 372:Core/Src/bms.c ****     }
 1520              		.loc 1 372 0
 1521 007a 2549     		ldr	r1, .L142+12
 1522 007c 2148     		ldr	r0, .L142
 1523 007e FFF7FEFF 		bl	c1tx
 1524              	.LVL119:
 1525              	.L122:
 375:Core/Src/bms.c ****     {
 1526              		.loc 1 375 0
 1527 0082 012D     		cmp	r5, #1
 1528 0084 00D0     		beq	.L139
 1529              	.LVL120:
 1530              	.L121:
 1531 0086 70BD     		pop	{r4, r5, r6, pc}
 1532              	.LVL121:
 1533              	.L139:
 377:Core/Src/bms.c ****         txMsg3.DLC = 8;
 1534              		.loc 1 377 0
 1535 0088 224B     		ldr	r3, .L142+16
 1536 008a 4FF44072 		mov	r2, #768
 1537 008e 1A60     		str	r2, [r3]
 378:Core/Src/bms.c ****         for (size_t i = 0; i < 62; i++)
 1538              		.loc 1 378 0
 1539 0090 0822     		movs	r2, #8
 1540 0092 1A61     		str	r2, [r3, #16]
 1541              	.LVL122:
 1542              	.LBB28:
 379:Core/Src/bms.c ****         {
 1543              		.loc 1 379 0
 1544 0094 0023     		movs	r3, #0
 1545 0096 00E0     		b	.L130
 1546              	.LVL123:
 1547              	.L131:
 379:Core/Src/bms.c ****         {
 1548              		.loc 1 379 0 is_stmt 0 discriminator 2
 1549 0098 0133     		adds	r3, r3, #1
 1550              	.LVL124:
 1551              	.L130:
 379:Core/Src/bms.c ****         {
 1552              		.loc 1 379 0 discriminator 1
 1553 009a 3D2B     		cmp	r3, #61
 1554 009c 0ED8     		bhi	.L140
 381:Core/Src/bms.c ****             {
 1555              		.loc 1 381 0 is_stmt 1
 1556 009e B4F8E610 		ldrh	r1, [r4, #230]
 1557 00a2 34F81320 		ldrh	r2, [r4, r3, lsl #1]
 1558 00a6 9142     		cmp	r1, r2
 1559 00a8 F6D2     		bcs	.L131
 383:Core/Src/bms.c ****             }
 1560              		.loc 1 383 0
 1561 00aa 174A     		ldr	r2, .L142+4
 1562 00ac D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1563 00ae 174A     		ldr	r2, .L142+8
ARM GAS  /tmp/ccBwmWIp.s 			page 41


 1564 00b0 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1565 00b2 1948     		ldr	r0, .L142+20
 1566 00b4 455C     		ldrb	r5, [r0, r1]	@ zero_extendqisi2
 1567 00b6 2A43     		orrs	r2, r2, r5
 1568 00b8 4254     		strb	r2, [r0, r1]
 1569 00ba EDE7     		b	.L131
 1570              	.L140:
 1571              	.LBE28:
 386:Core/Src/bms.c **** 
 1572              		.loc 1 386 0
 1573 00bc 154D     		ldr	r5, .L142+16
 1574 00be 1649     		ldr	r1, .L142+20
 1575 00c0 2846     		mov	r0, r5
 1576 00c2 FFF7FEFF 		bl	c3tx
 1577              	.LVL125:
 388:Core/Src/bms.c ****         txMsg3.DLC = 5;
 1578              		.loc 1 388 0
 1579 00c6 4FF44473 		mov	r3, #784
 1580 00ca 2B60     		str	r3, [r5]
 389:Core/Src/bms.c ****         for (size_t i = 62; i < 96; i++)
 1581              		.loc 1 389 0
 1582 00cc 0523     		movs	r3, #5
 1583 00ce 2B61     		str	r3, [r5, #16]
 1584              	.LVL126:
 1585              	.LBB29:
 390:Core/Src/bms.c ****         {
 1586              		.loc 1 390 0
 1587 00d0 3E23     		movs	r3, #62
 1588 00d2 00E0     		b	.L133
 1589              	.LVL127:
 1590              	.L134:
 390:Core/Src/bms.c ****         {
 1591              		.loc 1 390 0 is_stmt 0 discriminator 2
 1592 00d4 0133     		adds	r3, r3, #1
 1593              	.LVL128:
 1594              	.L133:
 390:Core/Src/bms.c ****         {
 1595              		.loc 1 390 0 discriminator 1
 1596 00d6 5F2B     		cmp	r3, #95
 1597 00d8 0ED8     		bhi	.L141
 392:Core/Src/bms.c ****             {
 1598              		.loc 1 392 0 is_stmt 1
 1599 00da B4F8E610 		ldrh	r1, [r4, #230]
 1600 00de 34F81320 		ldrh	r2, [r4, r3, lsl #1]
 1601 00e2 9142     		cmp	r1, r2
 1602 00e4 F6D2     		bcs	.L134
 394:Core/Src/bms.c ****             }
 1603              		.loc 1 394 0
 1604 00e6 084A     		ldr	r2, .L142+4
 1605 00e8 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1606 00ea 084A     		ldr	r2, .L142+8
 1607 00ec D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1608 00ee 0A48     		ldr	r0, .L142+20
 1609 00f0 455C     		ldrb	r5, [r0, r1]	@ zero_extendqisi2
 1610 00f2 2A43     		orrs	r2, r2, r5
 1611 00f4 4254     		strb	r2, [r0, r1]
 1612 00f6 EDE7     		b	.L134
ARM GAS  /tmp/ccBwmWIp.s 			page 42


 1613              	.L141:
 1614              	.LBE29:
 397:Core/Src/bms.c ****     }
 1615              		.loc 1 397 0
 1616 00f8 0749     		ldr	r1, .L142+20
 1617 00fa 0648     		ldr	r0, .L142+16
 1618 00fc FFF7FEFF 		bl	c3tx
 1619              	.LVL129:
 399:Core/Src/bms.c **** 
 1620              		.loc 1 399 0
 1621 0100 C1E7     		b	.L121
 1622              	.L143:
 1623 0102 00BF     		.align	2
 1624              	.L142:
 1625 0104 00000000 		.word	txMsg
 1626 0108 00000000 		.word	.LANCHOR0
 1627 010c 00000000 		.word	.LANCHOR1
 1628 0110 00000000 		.word	canTx
 1629 0114 00000000 		.word	txMsg3
 1630 0118 00000000 		.word	canTx3
 1631              		.cfi_endproc
 1632              	.LFE138:
 1634              		.section	.text.vehicleComms,"ax",%progbits
 1635              		.align	1
 1636              		.global	vehicleComms
 1637              		.syntax unified
 1638              		.thumb
 1639              		.thumb_func
 1640              		.fpu fpv4-sp-d16
 1642              	vehicleComms:
 1643              	.LFB150:
 548:Core/Src/bms.c **** 
 549:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 550:Core/Src/bms.c **** void vehicleComms(CAN_RxHeaderTypeDef *rxMsg, uint8_t *canRx)
 551:Core/Src/bms.c **** {
 1644              		.loc 1 551 0
 1645              		.cfi_startproc
 1646              		@ args = 0, pretend = 0, frame = 0
 1647              		@ frame_needed = 0, uses_anonymous_args = 0
 1648              		@ link register save eliminated.
 1649              	.LVL130:
 552:Core/Src/bms.c ****     switch (rxMsg->StdId)
 1650              		.loc 1 552 0
 1651 0000 0268     		ldr	r2, [r0]
 1652 0002 40F21333 		movw	r3, #787
 1653 0006 9A42     		cmp	r2, r3
 1654 0008 02D1     		bne	.L144
 553:Core/Src/bms.c ****     {
 554:Core/Src/bms.c ****     case 0x313:
 555:Core/Src/bms.c ****         vechicleState = canRx[0];
 1655              		.loc 1 555 0
 1656 000a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 1657 000c 014B     		ldr	r3, .L147
 1658 000e 1A70     		strb	r2, [r3]
 1659              	.L144:
 1660 0010 7047     		bx	lr
 1661              	.L148:
ARM GAS  /tmp/ccBwmWIp.s 			page 43


 1662 0012 00BF     		.align	2
 1663              	.L147:
 1664 0014 00000000 		.word	vechicleState
 1665              		.cfi_endproc
 1666              	.LFE150:
 1668              		.global	__aeabi_dmul
 1669              		.global	__aeabi_d2uiz
 1670              		.section	.text.decodeVolt,"ax",%progbits
 1671              		.align	1
 1672              		.global	decodeVolt
 1673              		.syntax unified
 1674              		.thumb
 1675              		.thumb_func
 1676              		.fpu fpv4-sp-d16
 1678              	decodeVolt:
 1679              	.LFB151:
 556:Core/Src/bms.c ****         break;
 557:Core/Src/bms.c **** 
 558:Core/Src/bms.c ****     default:
 559:Core/Src/bms.c ****         break;
 560:Core/Src/bms.c ****     }
 561:Core/Src/bms.c **** }
 562:Core/Src/bms.c **** 
 563:Core/Src/bms.c **** ///////////////////////////////////////////////////////////////////////////////////////
 564:Core/Src/bms.c **** void decodeVolt(bms_t *bms, CAN_RxHeaderTypeDef *rxMsg, uint8_t *canRx) // cell voltage in millivol
 565:Core/Src/bms.c **** {
 1680              		.loc 1 565 0
 1681              		.cfi_startproc
 1682              		@ args = 0, pretend = 0, frame = 0
 1683              		@ frame_needed = 0, uses_anonymous_args = 0
 1684              	.LVL131:
 1685 0000 38B5     		push	{r3, r4, r5, lr}
 1686              	.LCFI15:
 1687              		.cfi_def_cfa_offset 16
 1688              		.cfi_offset 3, -16
 1689              		.cfi_offset 4, -12
 1690              		.cfi_offset 5, -8
 1691              		.cfi_offset 14, -4
 1692 0002 0546     		mov	r5, r0
 1693 0004 1446     		mov	r4, r2
 566:Core/Src/bms.c ****     switch (rxMsg->StdId)
 1694              		.loc 1 566 0
 1695 0006 0B68     		ldr	r3, [r1]
 1696 0008 A3F58C63 		sub	r3, r3, #1120
 1697 000c 1E2B     		cmp	r3, #30
 1698 000e 00F22186 		bhi	.L149
 1699 0012 DFE813F0 		tbh	[pc, r3, lsl #1]
 1700              	.LVL132:
 1701              	.L152:
 1702 0016 1F00     		.2byte	(.L151-.L152)/2
 1703 0018 7B00     		.2byte	(.L153-.L152)/2
 1704 001a F500     		.2byte	(.L154-.L152)/2
 1705 001c 6F01     		.2byte	(.L155-.L152)/2
 1706 001e EC01     		.2byte	(.L156-.L152)/2
 1707 0020 6C02     		.2byte	(.L157-.L152)/2
 1708 0022 EE02     		.2byte	(.L158-.L152)/2
 1709 0024 1F06     		.2byte	(.L149-.L152)/2
ARM GAS  /tmp/ccBwmWIp.s 			page 44


 1710 0026 7203     		.2byte	(.L159-.L152)/2
 1711 0028 F403     		.2byte	(.L160-.L152)/2
 1712 002a 7604     		.2byte	(.L161-.L152)/2
 1713 002c 1F06     		.2byte	(.L149-.L152)/2
 1714 002e FA04     		.2byte	(.L162-.L152)/2
 1715 0030 5C05     		.2byte	(.L163-.L152)/2
 1716 0032 BE05     		.2byte	(.L164-.L152)/2
 1717 0034 1F06     		.2byte	(.L149-.L152)/2
 1718 0036 4D00     		.2byte	(.L165-.L152)/2
 1719 0038 B800     		.2byte	(.L166-.L152)/2
 1720 003a 3201     		.2byte	(.L167-.L152)/2
 1721 003c AF01     		.2byte	(.L168-.L152)/2
 1722 003e 2B02     		.2byte	(.L169-.L152)/2
 1723 0040 AD02     		.2byte	(.L170-.L152)/2
 1724 0042 3103     		.2byte	(.L171-.L152)/2
 1725 0044 1F06     		.2byte	(.L149-.L152)/2
 1726 0046 B303     		.2byte	(.L172-.L152)/2
 1727 0048 3504     		.2byte	(.L173-.L152)/2
 1728 004a B904     		.2byte	(.L174-.L152)/2
 1729 004c 1F06     		.2byte	(.L149-.L152)/2
 1730 004e 2B05     		.2byte	(.L175-.L152)/2
 1731 0050 8D05     		.2byte	(.L176-.L152)/2
 1732 0052 EF05     		.2byte	(.L177-.L152)/2
 1733              		.p2align 1
 1734              	.L151:
 567:Core/Src/bms.c ****     {
 568:Core/Src/bms.c ****     case 0x460: // Begin module 1
 569:Core/Src/bms.c ****         bms->cellVolt[0] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 1735              		.loc 1 569 0
 1736 0054 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1737 0056 1B02     		lsls	r3, r3, #8
 1738 0058 03F47063 		and	r3, r3, #3840
 1739 005c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1740              	.LVL133:
 1741 005e 1844     		add	r0, r0, r3
 1742 0060 FFF7FEFF 		bl	__aeabi_i2d
 1743              	.LVL134:
 1744 0064 0022     		movs	r2, #0
 1745 0066 C24B     		ldr	r3, .L179
 1746 0068 FFF7FEFF 		bl	__aeabi_dmul
 1747              	.LVL135:
 1748 006c FFF7FEFF 		bl	__aeabi_d2uiz
 1749              	.LVL136:
 1750 0070 2880     		strh	r0, [r5]	@ movhi
 570:Core/Src/bms.c ****         bms->cellVolt[1] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 1751              		.loc 1 570 0
 1752 0072 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1753 0074 1B02     		lsls	r3, r3, #8
 1754 0076 03F47063 		and	r3, r3, #3840
 1755 007a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1756 007c 1844     		add	r0, r0, r3
 1757 007e FFF7FEFF 		bl	__aeabi_i2d
 1758              	.LVL137:
 1759 0082 0022     		movs	r2, #0
 1760 0084 BA4B     		ldr	r3, .L179
 1761 0086 FFF7FEFF 		bl	__aeabi_dmul
 1762              	.LVL138:
ARM GAS  /tmp/ccBwmWIp.s 			page 45


 1763 008a FFF7FEFF 		bl	__aeabi_d2uiz
 1764              	.LVL139:
 1765 008e 6880     		strh	r0, [r5, #2]	@ movhi
 571:Core/Src/bms.c ****         bms->cellVolt[2] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 1766              		.loc 1 571 0
 1767 0090 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1768 0092 1B02     		lsls	r3, r3, #8
 1769 0094 03F47063 		and	r3, r3, #3840
 1770 0098 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 1771 009a 1844     		add	r0, r0, r3
 1772 009c FFF7FEFF 		bl	__aeabi_i2d
 1773              	.LVL140:
 1774 00a0 0022     		movs	r2, #0
 1775 00a2 B34B     		ldr	r3, .L179
 1776 00a4 FFF7FEFF 		bl	__aeabi_dmul
 1777              	.LVL141:
 1778 00a8 FFF7FEFF 		bl	__aeabi_d2uiz
 1779              	.LVL142:
 1780 00ac A880     		strh	r0, [r5, #4]	@ movhi
 572:Core/Src/bms.c ****         break;
 1781              		.loc 1 572 0
 1782 00ae 38BD     		pop	{r3, r4, r5, pc}
 1783              	.LVL143:
 1784              	.L165:
 573:Core/Src/bms.c **** 
 574:Core/Src/bms.c ****     case 0x470:
 575:Core/Src/bms.c ****         bms->cellVolt[3] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 1785              		.loc 1 575 0
 1786 00b0 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1787 00b2 1B02     		lsls	r3, r3, #8
 1788 00b4 03F47063 		and	r3, r3, #3840
 1789 00b8 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1790              	.LVL144:
 1791 00ba 1844     		add	r0, r0, r3
 1792 00bc FFF7FEFF 		bl	__aeabi_i2d
 1793              	.LVL145:
 1794 00c0 0022     		movs	r2, #0
 1795 00c2 AB4B     		ldr	r3, .L179
 1796 00c4 FFF7FEFF 		bl	__aeabi_dmul
 1797              	.LVL146:
 1798 00c8 FFF7FEFF 		bl	__aeabi_d2uiz
 1799              	.LVL147:
 1800 00cc E880     		strh	r0, [r5, #6]	@ movhi
 576:Core/Src/bms.c ****         bms->cellVolt[4] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 1801              		.loc 1 576 0
 1802 00ce A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1803 00d0 1B02     		lsls	r3, r3, #8
 1804 00d2 03F47063 		and	r3, r3, #3840
 1805 00d6 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1806 00d8 1844     		add	r0, r0, r3
 1807 00da FFF7FEFF 		bl	__aeabi_i2d
 1808              	.LVL148:
 1809 00de 0022     		movs	r2, #0
 1810 00e0 A34B     		ldr	r3, .L179
 1811 00e2 FFF7FEFF 		bl	__aeabi_dmul
 1812              	.LVL149:
 1813 00e6 FFF7FEFF 		bl	__aeabi_d2uiz
ARM GAS  /tmp/ccBwmWIp.s 			page 46


 1814              	.LVL150:
 1815 00ea 2881     		strh	r0, [r5, #8]	@ movhi
 577:Core/Src/bms.c ****         bms->cellVolt[5] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 1816              		.loc 1 577 0
 1817 00ec 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1818 00ee 1B02     		lsls	r3, r3, #8
 1819 00f0 03F47063 		and	r3, r3, #3840
 1820 00f4 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 1821 00f6 1844     		add	r0, r0, r3
 1822 00f8 FFF7FEFF 		bl	__aeabi_i2d
 1823              	.LVL151:
 1824 00fc 0022     		movs	r2, #0
 1825 00fe 9C4B     		ldr	r3, .L179
 1826 0100 FFF7FEFF 		bl	__aeabi_dmul
 1827              	.LVL152:
 1828 0104 FFF7FEFF 		bl	__aeabi_d2uiz
 1829              	.LVL153:
 1830 0108 6881     		strh	r0, [r5, #10]	@ movhi
 578:Core/Src/bms.c ****         break;
 1831              		.loc 1 578 0
 1832 010a 38BD     		pop	{r3, r4, r5, pc}
 1833              	.LVL154:
 1834              	.L153:
 579:Core/Src/bms.c **** 
 580:Core/Src/bms.c ****     case 0x461:
 581:Core/Src/bms.c ****         bms->cellVolt[6] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 1835              		.loc 1 581 0
 1836 010c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1837 010e 1B02     		lsls	r3, r3, #8
 1838 0110 03F47063 		and	r3, r3, #3840
 1839 0114 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1840              	.LVL155:
 1841 0116 1844     		add	r0, r0, r3
 1842 0118 FFF7FEFF 		bl	__aeabi_i2d
 1843              	.LVL156:
 1844 011c 0022     		movs	r2, #0
 1845 011e 944B     		ldr	r3, .L179
 1846 0120 FFF7FEFF 		bl	__aeabi_dmul
 1847              	.LVL157:
 1848 0124 FFF7FEFF 		bl	__aeabi_d2uiz
 1849              	.LVL158:
 1850 0128 A881     		strh	r0, [r5, #12]	@ movhi
 582:Core/Src/bms.c ****         bms->cellVolt[7] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 1851              		.loc 1 582 0
 1852 012a A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1853 012c 1B02     		lsls	r3, r3, #8
 1854 012e 03F47063 		and	r3, r3, #3840
 1855 0132 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1856 0134 1844     		add	r0, r0, r3
 1857 0136 FFF7FEFF 		bl	__aeabi_i2d
 1858              	.LVL159:
 1859 013a 0022     		movs	r2, #0
 1860 013c 8C4B     		ldr	r3, .L179
 1861 013e FFF7FEFF 		bl	__aeabi_dmul
 1862              	.LVL160:
 1863 0142 FFF7FEFF 		bl	__aeabi_d2uiz
 1864              	.LVL161:
ARM GAS  /tmp/ccBwmWIp.s 			page 47


 1865 0146 E881     		strh	r0, [r5, #14]	@ movhi
 583:Core/Src/bms.c ****         bms->cellVolt[8] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 1866              		.loc 1 583 0
 1867 0148 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1868 014a 1B02     		lsls	r3, r3, #8
 1869 014c 03F47063 		and	r3, r3, #3840
 1870 0150 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 1871 0152 1844     		add	r0, r0, r3
 1872 0154 FFF7FEFF 		bl	__aeabi_i2d
 1873              	.LVL162:
 1874 0158 0022     		movs	r2, #0
 1875 015a 854B     		ldr	r3, .L179
 1876 015c FFF7FEFF 		bl	__aeabi_dmul
 1877              	.LVL163:
 1878 0160 FFF7FEFF 		bl	__aeabi_d2uiz
 1879              	.LVL164:
 1880 0164 2882     		strh	r0, [r5, #16]	@ movhi
 584:Core/Src/bms.c ****         bms->cellVolt[9] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 1881              		.loc 1 584 0
 1882 0166 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1883 0168 1B02     		lsls	r3, r3, #8
 1884 016a 03F47063 		and	r3, r3, #3840
 1885 016e E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 1886 0170 1844     		add	r0, r0, r3
 1887 0172 FFF7FEFF 		bl	__aeabi_i2d
 1888              	.LVL165:
 1889 0176 0022     		movs	r2, #0
 1890 0178 7D4B     		ldr	r3, .L179
 1891 017a FFF7FEFF 		bl	__aeabi_dmul
 1892              	.LVL166:
 1893 017e FFF7FEFF 		bl	__aeabi_d2uiz
 1894              	.LVL167:
 1895 0182 6882     		strh	r0, [r5, #18]	@ movhi
 585:Core/Src/bms.c ****         break;
 1896              		.loc 1 585 0
 1897 0184 38BD     		pop	{r3, r4, r5, pc}
 1898              	.LVL168:
 1899              	.L166:
 586:Core/Src/bms.c **** 
 587:Core/Src/bms.c ****     case 0x471:
 588:Core/Src/bms.c ****         bms->cellVolt[10] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 1900              		.loc 1 588 0
 1901 0186 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1902 0188 1B02     		lsls	r3, r3, #8
 1903 018a 03F47063 		and	r3, r3, #3840
 1904 018e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1905              	.LVL169:
 1906 0190 1844     		add	r0, r0, r3
 1907 0192 FFF7FEFF 		bl	__aeabi_i2d
 1908              	.LVL170:
 1909 0196 0022     		movs	r2, #0
 1910 0198 754B     		ldr	r3, .L179
 1911 019a FFF7FEFF 		bl	__aeabi_dmul
 1912              	.LVL171:
 1913 019e FFF7FEFF 		bl	__aeabi_d2uiz
 1914              	.LVL172:
 1915 01a2 A882     		strh	r0, [r5, #20]	@ movhi
ARM GAS  /tmp/ccBwmWIp.s 			page 48


 589:Core/Src/bms.c ****         bms->cellVolt[11] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 1916              		.loc 1 589 0
 1917 01a4 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1918 01a6 1B02     		lsls	r3, r3, #8
 1919 01a8 03F47063 		and	r3, r3, #3840
 1920 01ac E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1921 01ae 1844     		add	r0, r0, r3
 1922 01b0 FFF7FEFF 		bl	__aeabi_i2d
 1923              	.LVL173:
 1924 01b4 0022     		movs	r2, #0
 1925 01b6 6E4B     		ldr	r3, .L179
 1926 01b8 FFF7FEFF 		bl	__aeabi_dmul
 1927              	.LVL174:
 1928 01bc FFF7FEFF 		bl	__aeabi_d2uiz
 1929              	.LVL175:
 1930 01c0 E882     		strh	r0, [r5, #22]	@ movhi
 590:Core/Src/bms.c ****         bms->cellVolt[12] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 1931              		.loc 1 590 0
 1932 01c2 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1933 01c4 1B02     		lsls	r3, r3, #8
 1934 01c6 03F47063 		and	r3, r3, #3840
 1935 01ca 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 1936 01cc 1844     		add	r0, r0, r3
 1937 01ce FFF7FEFF 		bl	__aeabi_i2d
 1938              	.LVL176:
 1939 01d2 0022     		movs	r2, #0
 1940 01d4 664B     		ldr	r3, .L179
 1941 01d6 FFF7FEFF 		bl	__aeabi_dmul
 1942              	.LVL177:
 1943 01da FFF7FEFF 		bl	__aeabi_d2uiz
 1944              	.LVL178:
 1945 01de 2883     		strh	r0, [r5, #24]	@ movhi
 591:Core/Src/bms.c ****         bms->cellVolt[13] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 1946              		.loc 1 591 0
 1947 01e0 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1948 01e2 1B02     		lsls	r3, r3, #8
 1949 01e4 03F47063 		and	r3, r3, #3840
 1950 01e8 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 1951 01ea 1844     		add	r0, r0, r3
 1952 01ec FFF7FEFF 		bl	__aeabi_i2d
 1953              	.LVL179:
 1954 01f0 0022     		movs	r2, #0
 1955 01f2 5F4B     		ldr	r3, .L179
 1956 01f4 FFF7FEFF 		bl	__aeabi_dmul
 1957              	.LVL180:
 1958 01f8 FFF7FEFF 		bl	__aeabi_d2uiz
 1959              	.LVL181:
 1960 01fc 6883     		strh	r0, [r5, #26]	@ movhi
 592:Core/Src/bms.c ****         break;
 1961              		.loc 1 592 0
 1962 01fe 38BD     		pop	{r3, r4, r5, pc}
 1963              	.LVL182:
 1964              	.L154:
 593:Core/Src/bms.c **** 
 594:Core/Src/bms.c ****     case 0x462:
 595:Core/Src/bms.c ****         bms->cellVolt[14] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 1965              		.loc 1 595 0
ARM GAS  /tmp/ccBwmWIp.s 			page 49


 1966 0200 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1967 0202 1B02     		lsls	r3, r3, #8
 1968 0204 03F47063 		and	r3, r3, #3840
 1969 0208 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1970              	.LVL183:
 1971 020a 1844     		add	r0, r0, r3
 1972 020c FFF7FEFF 		bl	__aeabi_i2d
 1973              	.LVL184:
 1974 0210 0022     		movs	r2, #0
 1975 0212 574B     		ldr	r3, .L179
 1976 0214 FFF7FEFF 		bl	__aeabi_dmul
 1977              	.LVL185:
 1978 0218 FFF7FEFF 		bl	__aeabi_d2uiz
 1979              	.LVL186:
 1980 021c A883     		strh	r0, [r5, #28]	@ movhi
 596:Core/Src/bms.c ****         bms->cellVolt[15] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 1981              		.loc 1 596 0
 1982 021e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1983 0220 1B02     		lsls	r3, r3, #8
 1984 0222 03F47063 		and	r3, r3, #3840
 1985 0226 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 1986 0228 1844     		add	r0, r0, r3
 1987 022a FFF7FEFF 		bl	__aeabi_i2d
 1988              	.LVL187:
 1989 022e 0022     		movs	r2, #0
 1990 0230 4F4B     		ldr	r3, .L179
 1991 0232 FFF7FEFF 		bl	__aeabi_dmul
 1992              	.LVL188:
 1993 0236 FFF7FEFF 		bl	__aeabi_d2uiz
 1994              	.LVL189:
 1995 023a E883     		strh	r0, [r5, #30]	@ movhi
 597:Core/Src/bms.c ****         bms->cellVolt[16] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 1996              		.loc 1 597 0
 1997 023c 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1998 023e 1B02     		lsls	r3, r3, #8
 1999 0240 03F47063 		and	r3, r3, #3840
 2000 0244 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2001 0246 1844     		add	r0, r0, r3
 2002 0248 FFF7FEFF 		bl	__aeabi_i2d
 2003              	.LVL190:
 2004 024c 0022     		movs	r2, #0
 2005 024e 484B     		ldr	r3, .L179
 2006 0250 FFF7FEFF 		bl	__aeabi_dmul
 2007              	.LVL191:
 2008 0254 FFF7FEFF 		bl	__aeabi_d2uiz
 2009              	.LVL192:
 2010 0258 2884     		strh	r0, [r5, #32]	@ movhi
 598:Core/Src/bms.c ****         bms->cellVolt[17] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2011              		.loc 1 598 0
 2012 025a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2013 025c 1B02     		lsls	r3, r3, #8
 2014 025e 03F47063 		and	r3, r3, #3840
 2015 0262 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2016 0264 1844     		add	r0, r0, r3
 2017 0266 FFF7FEFF 		bl	__aeabi_i2d
 2018              	.LVL193:
 2019 026a 0022     		movs	r2, #0
ARM GAS  /tmp/ccBwmWIp.s 			page 50


 2020 026c 404B     		ldr	r3, .L179
 2021 026e FFF7FEFF 		bl	__aeabi_dmul
 2022              	.LVL194:
 2023 0272 FFF7FEFF 		bl	__aeabi_d2uiz
 2024              	.LVL195:
 2025 0276 6884     		strh	r0, [r5, #34]	@ movhi
 599:Core/Src/bms.c ****         break;
 2026              		.loc 1 599 0
 2027 0278 38BD     		pop	{r3, r4, r5, pc}
 2028              	.LVL196:
 2029              	.L167:
 600:Core/Src/bms.c **** 
 601:Core/Src/bms.c ****     case 0x472:
 602:Core/Src/bms.c ****         bms->cellVolt[18] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2030              		.loc 1 602 0
 2031 027a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2032 027c 1B02     		lsls	r3, r3, #8
 2033 027e 03F47063 		and	r3, r3, #3840
 2034 0282 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2035              	.LVL197:
 2036 0284 1844     		add	r0, r0, r3
 2037 0286 FFF7FEFF 		bl	__aeabi_i2d
 2038              	.LVL198:
 2039 028a 0022     		movs	r2, #0
 2040 028c 384B     		ldr	r3, .L179
 2041 028e FFF7FEFF 		bl	__aeabi_dmul
 2042              	.LVL199:
 2043 0292 FFF7FEFF 		bl	__aeabi_d2uiz
 2044              	.LVL200:
 2045 0296 A884     		strh	r0, [r5, #36]	@ movhi
 603:Core/Src/bms.c ****         bms->cellVolt[19] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2046              		.loc 1 603 0
 2047 0298 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2048 029a 1B02     		lsls	r3, r3, #8
 2049 029c 03F47063 		and	r3, r3, #3840
 2050 02a0 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2051 02a2 1844     		add	r0, r0, r3
 2052 02a4 FFF7FEFF 		bl	__aeabi_i2d
 2053              	.LVL201:
 2054 02a8 0022     		movs	r2, #0
 2055 02aa 314B     		ldr	r3, .L179
 2056 02ac FFF7FEFF 		bl	__aeabi_dmul
 2057              	.LVL202:
 2058 02b0 FFF7FEFF 		bl	__aeabi_d2uiz
 2059              	.LVL203:
 2060 02b4 E884     		strh	r0, [r5, #38]	@ movhi
 604:Core/Src/bms.c ****         bms->cellVolt[20] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2061              		.loc 1 604 0
 2062 02b6 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2063 02b8 1B02     		lsls	r3, r3, #8
 2064 02ba 03F47063 		and	r3, r3, #3840
 2065 02be 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2066 02c0 1844     		add	r0, r0, r3
 2067 02c2 FFF7FEFF 		bl	__aeabi_i2d
 2068              	.LVL204:
 2069 02c6 0022     		movs	r2, #0
 2070 02c8 294B     		ldr	r3, .L179
ARM GAS  /tmp/ccBwmWIp.s 			page 51


 2071 02ca FFF7FEFF 		bl	__aeabi_dmul
 2072              	.LVL205:
 2073 02ce FFF7FEFF 		bl	__aeabi_d2uiz
 2074              	.LVL206:
 2075 02d2 2885     		strh	r0, [r5, #40]	@ movhi
 605:Core/Src/bms.c ****         bms->cellVolt[21] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2076              		.loc 1 605 0
 2077 02d4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2078 02d6 1B02     		lsls	r3, r3, #8
 2079 02d8 03F47063 		and	r3, r3, #3840
 2080 02dc E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2081 02de 1844     		add	r0, r0, r3
 2082 02e0 FFF7FEFF 		bl	__aeabi_i2d
 2083              	.LVL207:
 2084 02e4 0022     		movs	r2, #0
 2085 02e6 224B     		ldr	r3, .L179
 2086 02e8 FFF7FEFF 		bl	__aeabi_dmul
 2087              	.LVL208:
 2088 02ec FFF7FEFF 		bl	__aeabi_d2uiz
 2089              	.LVL209:
 2090 02f0 6885     		strh	r0, [r5, #42]	@ movhi
 606:Core/Src/bms.c ****         break;
 2091              		.loc 1 606 0
 2092 02f2 38BD     		pop	{r3, r4, r5, pc}
 2093              	.LVL210:
 2094              	.L155:
 607:Core/Src/bms.c ****     case 0x463:
 608:Core/Src/bms.c ****         bms->cellVolt[22] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2095              		.loc 1 608 0
 2096 02f4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2097 02f6 1B02     		lsls	r3, r3, #8
 2098 02f8 03F47063 		and	r3, r3, #3840
 2099 02fc 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2100              	.LVL211:
 2101 02fe 1844     		add	r0, r0, r3
 2102 0300 FFF7FEFF 		bl	__aeabi_i2d
 2103              	.LVL212:
 2104 0304 0022     		movs	r2, #0
 2105 0306 1A4B     		ldr	r3, .L179
 2106 0308 FFF7FEFF 		bl	__aeabi_dmul
 2107              	.LVL213:
 2108 030c FFF7FEFF 		bl	__aeabi_d2uiz
 2109              	.LVL214:
 2110 0310 A885     		strh	r0, [r5, #44]	@ movhi
 609:Core/Src/bms.c ****         bms->cellVolt[23] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2111              		.loc 1 609 0
 2112 0312 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2113 0314 1B02     		lsls	r3, r3, #8
 2114 0316 03F47063 		and	r3, r3, #3840
 2115 031a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2116 031c 1844     		add	r0, r0, r3
 2117 031e FFF7FEFF 		bl	__aeabi_i2d
 2118              	.LVL215:
 2119 0322 0022     		movs	r2, #0
 2120 0324 124B     		ldr	r3, .L179
 2121 0326 FFF7FEFF 		bl	__aeabi_dmul
 2122              	.LVL216:
ARM GAS  /tmp/ccBwmWIp.s 			page 52


 2123 032a FFF7FEFF 		bl	__aeabi_d2uiz
 2124              	.LVL217:
 2125 032e E885     		strh	r0, [r5, #46]	@ movhi
 610:Core/Src/bms.c ****         bms->cellVolt[24] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2126              		.loc 1 610 0
 2127 0330 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2128 0332 1B02     		lsls	r3, r3, #8
 2129 0334 03F47063 		and	r3, r3, #3840
 2130 0338 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2131 033a 1844     		add	r0, r0, r3
 2132 033c FFF7FEFF 		bl	__aeabi_i2d
 2133              	.LVL218:
 2134 0340 0022     		movs	r2, #0
 2135 0342 0B4B     		ldr	r3, .L179
 2136 0344 FFF7FEFF 		bl	__aeabi_dmul
 2137              	.LVL219:
 2138 0348 FFF7FEFF 		bl	__aeabi_d2uiz
 2139              	.LVL220:
 2140 034c 2886     		strh	r0, [r5, #48]	@ movhi
 611:Core/Src/bms.c ****         bms->cellVolt[25] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2141              		.loc 1 611 0
 2142 034e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2143 0350 1B02     		lsls	r3, r3, #8
 2144 0352 03F47063 		and	r3, r3, #3840
 2145 0356 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2146 0358 1844     		add	r0, r0, r3
 2147 035a FFF7FEFF 		bl	__aeabi_i2d
 2148              	.LVL221:
 2149 035e 0022     		movs	r2, #0
 2150 0360 034B     		ldr	r3, .L179
 2151 0362 FFF7FEFF 		bl	__aeabi_dmul
 2152              	.LVL222:
 2153 0366 FFF7FEFF 		bl	__aeabi_d2uiz
 2154              	.LVL223:
 2155 036a 6886     		strh	r0, [r5, #50]	@ movhi
 612:Core/Src/bms.c ****         break;
 2156              		.loc 1 612 0
 2157 036c 38BD     		pop	{r3, r4, r5, pc}
 2158              	.LVL224:
 2159              	.L180:
 2160 036e 00BF     		.align	2
 2161              	.L179:
 2162 0370 0000F43F 		.word	1072955392
 2163              	.LVL225:
 2164              	.L168:
 613:Core/Src/bms.c **** 
 614:Core/Src/bms.c ****     case 0x473:
 615:Core/Src/bms.c ****         bms->cellVolt[26] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2165              		.loc 1 615 0
 2166 0374 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2167 0376 1B02     		lsls	r3, r3, #8
 2168 0378 03F47063 		and	r3, r3, #3840
 2169 037c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2170              	.LVL226:
 2171 037e 1844     		add	r0, r0, r3
 2172 0380 FFF7FEFF 		bl	__aeabi_i2d
 2173              	.LVL227:
ARM GAS  /tmp/ccBwmWIp.s 			page 53


 2174 0384 0022     		movs	r2, #0
 2175 0386 BB4B     		ldr	r3, .L181
 2176 0388 FFF7FEFF 		bl	__aeabi_dmul
 2177              	.LVL228:
 2178 038c FFF7FEFF 		bl	__aeabi_d2uiz
 2179              	.LVL229:
 2180 0390 A886     		strh	r0, [r5, #52]	@ movhi
 616:Core/Src/bms.c ****         bms->cellVolt[27] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2181              		.loc 1 616 0
 2182 0392 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2183 0394 1B02     		lsls	r3, r3, #8
 2184 0396 03F47063 		and	r3, r3, #3840
 2185 039a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2186 039c 1844     		add	r0, r0, r3
 2187 039e FFF7FEFF 		bl	__aeabi_i2d
 2188              	.LVL230:
 2189 03a2 0022     		movs	r2, #0
 2190 03a4 B34B     		ldr	r3, .L181
 2191 03a6 FFF7FEFF 		bl	__aeabi_dmul
 2192              	.LVL231:
 2193 03aa FFF7FEFF 		bl	__aeabi_d2uiz
 2194              	.LVL232:
 2195 03ae E886     		strh	r0, [r5, #54]	@ movhi
 617:Core/Src/bms.c ****         bms->cellVolt[28] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2196              		.loc 1 617 0
 2197 03b0 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2198 03b2 1B02     		lsls	r3, r3, #8
 2199 03b4 03F47063 		and	r3, r3, #3840
 2200 03b8 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2201 03ba 1844     		add	r0, r0, r3
 2202 03bc FFF7FEFF 		bl	__aeabi_i2d
 2203              	.LVL233:
 2204 03c0 0022     		movs	r2, #0
 2205 03c2 AC4B     		ldr	r3, .L181
 2206 03c4 FFF7FEFF 		bl	__aeabi_dmul
 2207              	.LVL234:
 2208 03c8 FFF7FEFF 		bl	__aeabi_d2uiz
 2209              	.LVL235:
 2210 03cc 2887     		strh	r0, [r5, #56]	@ movhi
 618:Core/Src/bms.c ****         bms->cellVolt[29] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2211              		.loc 1 618 0
 2212 03ce A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2213 03d0 1B02     		lsls	r3, r3, #8
 2214 03d2 03F47063 		and	r3, r3, #3840
 2215 03d6 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2216 03d8 1844     		add	r0, r0, r3
 2217 03da FFF7FEFF 		bl	__aeabi_i2d
 2218              	.LVL236:
 2219 03de 0022     		movs	r2, #0
 2220 03e0 A44B     		ldr	r3, .L181
 2221 03e2 FFF7FEFF 		bl	__aeabi_dmul
 2222              	.LVL237:
 2223 03e6 FFF7FEFF 		bl	__aeabi_d2uiz
 2224              	.LVL238:
 2225 03ea 6887     		strh	r0, [r5, #58]	@ movhi
 619:Core/Src/bms.c ****         break;
 2226              		.loc 1 619 0
ARM GAS  /tmp/ccBwmWIp.s 			page 54


 2227 03ec 38BD     		pop	{r3, r4, r5, pc}
 2228              	.LVL239:
 2229              	.L156:
 620:Core/Src/bms.c **** 
 621:Core/Src/bms.c ****     case 0x464:
 622:Core/Src/bms.c ****         bms->cellVolt[30] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25); // Begin module 2
 2230              		.loc 1 622 0
 2231 03ee 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2232 03f0 1B02     		lsls	r3, r3, #8
 2233 03f2 03F47063 		and	r3, r3, #3840
 2234 03f6 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2235              	.LVL240:
 2236 03f8 1844     		add	r0, r0, r3
 2237 03fa FFF7FEFF 		bl	__aeabi_i2d
 2238              	.LVL241:
 2239 03fe 0022     		movs	r2, #0
 2240 0400 9C4B     		ldr	r3, .L181
 2241 0402 FFF7FEFF 		bl	__aeabi_dmul
 2242              	.LVL242:
 2243 0406 FFF7FEFF 		bl	__aeabi_d2uiz
 2244              	.LVL243:
 2245 040a A887     		strh	r0, [r5, #60]	@ movhi
 623:Core/Src/bms.c ****         bms->cellVolt[31] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2246              		.loc 1 623 0
 2247 040c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2248 040e 1B02     		lsls	r3, r3, #8
 2249 0410 03F47063 		and	r3, r3, #3840
 2250 0414 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2251 0416 1844     		add	r0, r0, r3
 2252 0418 FFF7FEFF 		bl	__aeabi_i2d
 2253              	.LVL244:
 2254 041c 0022     		movs	r2, #0
 2255 041e 954B     		ldr	r3, .L181
 2256 0420 FFF7FEFF 		bl	__aeabi_dmul
 2257              	.LVL245:
 2258 0424 FFF7FEFF 		bl	__aeabi_d2uiz
 2259              	.LVL246:
 2260 0428 E887     		strh	r0, [r5, #62]	@ movhi
 624:Core/Src/bms.c ****         bms->cellVolt[32] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2261              		.loc 1 624 0
 2262 042a 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2263 042c 1B02     		lsls	r3, r3, #8
 2264 042e 03F47063 		and	r3, r3, #3840
 2265 0432 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2266 0434 1844     		add	r0, r0, r3
 2267 0436 FFF7FEFF 		bl	__aeabi_i2d
 2268              	.LVL247:
 2269 043a 0022     		movs	r2, #0
 2270 043c 8D4B     		ldr	r3, .L181
 2271 043e FFF7FEFF 		bl	__aeabi_dmul
 2272              	.LVL248:
 2273 0442 FFF7FEFF 		bl	__aeabi_d2uiz
 2274              	.LVL249:
 2275 0446 A5F84000 		strh	r0, [r5, #64]	@ movhi
 625:Core/Src/bms.c ****         bms->cellVolt[33] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2276              		.loc 1 625 0
 2277 044a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
ARM GAS  /tmp/ccBwmWIp.s 			page 55


 2278 044c 1B02     		lsls	r3, r3, #8
 2279 044e 03F47063 		and	r3, r3, #3840
 2280 0452 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2281 0454 1844     		add	r0, r0, r3
 2282 0456 FFF7FEFF 		bl	__aeabi_i2d
 2283              	.LVL250:
 2284 045a 0022     		movs	r2, #0
 2285 045c 854B     		ldr	r3, .L181
 2286 045e FFF7FEFF 		bl	__aeabi_dmul
 2287              	.LVL251:
 2288 0462 FFF7FEFF 		bl	__aeabi_d2uiz
 2289              	.LVL252:
 2290 0466 A5F84200 		strh	r0, [r5, #66]	@ movhi
 626:Core/Src/bms.c ****         break;
 2291              		.loc 1 626 0
 2292 046a 38BD     		pop	{r3, r4, r5, pc}
 2293              	.LVL253:
 2294              	.L169:
 627:Core/Src/bms.c **** 
 628:Core/Src/bms.c ****     case 0x474:
 629:Core/Src/bms.c ****         bms->cellVolt[34] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2295              		.loc 1 629 0
 2296 046c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2297 046e 1B02     		lsls	r3, r3, #8
 2298 0470 03F47063 		and	r3, r3, #3840
 2299 0474 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2300              	.LVL254:
 2301 0476 1844     		add	r0, r0, r3
 2302 0478 FFF7FEFF 		bl	__aeabi_i2d
 2303              	.LVL255:
 2304 047c 0022     		movs	r2, #0
 2305 047e 7D4B     		ldr	r3, .L181
 2306 0480 FFF7FEFF 		bl	__aeabi_dmul
 2307              	.LVL256:
 2308 0484 FFF7FEFF 		bl	__aeabi_d2uiz
 2309              	.LVL257:
 2310 0488 A5F84400 		strh	r0, [r5, #68]	@ movhi
 630:Core/Src/bms.c ****         bms->cellVolt[35] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2311              		.loc 1 630 0
 2312 048c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2313 048e 1B02     		lsls	r3, r3, #8
 2314 0490 03F47063 		and	r3, r3, #3840
 2315 0494 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2316 0496 1844     		add	r0, r0, r3
 2317 0498 FFF7FEFF 		bl	__aeabi_i2d
 2318              	.LVL258:
 2319 049c 0022     		movs	r2, #0
 2320 049e 754B     		ldr	r3, .L181
 2321 04a0 FFF7FEFF 		bl	__aeabi_dmul
 2322              	.LVL259:
 2323 04a4 FFF7FEFF 		bl	__aeabi_d2uiz
 2324              	.LVL260:
 2325 04a8 A5F84600 		strh	r0, [r5, #70]	@ movhi
 631:Core/Src/bms.c ****         bms->cellVolt[36] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2326              		.loc 1 631 0
 2327 04ac 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2328 04ae 1B02     		lsls	r3, r3, #8
ARM GAS  /tmp/ccBwmWIp.s 			page 56


 2329 04b0 03F47063 		and	r3, r3, #3840
 2330 04b4 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2331 04b6 1844     		add	r0, r0, r3
 2332 04b8 FFF7FEFF 		bl	__aeabi_i2d
 2333              	.LVL261:
 2334 04bc 0022     		movs	r2, #0
 2335 04be 6D4B     		ldr	r3, .L181
 2336 04c0 FFF7FEFF 		bl	__aeabi_dmul
 2337              	.LVL262:
 2338 04c4 FFF7FEFF 		bl	__aeabi_d2uiz
 2339              	.LVL263:
 2340 04c8 A5F84800 		strh	r0, [r5, #72]	@ movhi
 632:Core/Src/bms.c ****         bms->cellVolt[37] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2341              		.loc 1 632 0
 2342 04cc A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2343 04ce 1B02     		lsls	r3, r3, #8
 2344 04d0 03F47063 		and	r3, r3, #3840
 2345 04d4 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2346 04d6 1844     		add	r0, r0, r3
 2347 04d8 FFF7FEFF 		bl	__aeabi_i2d
 2348              	.LVL264:
 2349 04dc 0022     		movs	r2, #0
 2350 04de 654B     		ldr	r3, .L181
 2351 04e0 FFF7FEFF 		bl	__aeabi_dmul
 2352              	.LVL265:
 2353 04e4 FFF7FEFF 		bl	__aeabi_d2uiz
 2354              	.LVL266:
 2355 04e8 A5F84A00 		strh	r0, [r5, #74]	@ movhi
 633:Core/Src/bms.c ****         break;
 2356              		.loc 1 633 0
 2357 04ec 38BD     		pop	{r3, r4, r5, pc}
 2358              	.LVL267:
 2359              	.L157:
 634:Core/Src/bms.c **** 
 635:Core/Src/bms.c ****     case 0x465:
 636:Core/Src/bms.c ****         bms->cellVolt[38] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2360              		.loc 1 636 0
 2361 04ee 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2362 04f0 1B02     		lsls	r3, r3, #8
 2363 04f2 03F47063 		and	r3, r3, #3840
 2364 04f6 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2365              	.LVL268:
 2366 04f8 1844     		add	r0, r0, r3
 2367 04fa FFF7FEFF 		bl	__aeabi_i2d
 2368              	.LVL269:
 2369 04fe 0022     		movs	r2, #0
 2370 0500 5C4B     		ldr	r3, .L181
 2371 0502 FFF7FEFF 		bl	__aeabi_dmul
 2372              	.LVL270:
 2373 0506 FFF7FEFF 		bl	__aeabi_d2uiz
 2374              	.LVL271:
 2375 050a A5F84C00 		strh	r0, [r5, #76]	@ movhi
 637:Core/Src/bms.c ****         bms->cellVolt[39] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2376              		.loc 1 637 0
 2377 050e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2378 0510 1B02     		lsls	r3, r3, #8
 2379 0512 03F47063 		and	r3, r3, #3840
ARM GAS  /tmp/ccBwmWIp.s 			page 57


 2380 0516 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2381 0518 1844     		add	r0, r0, r3
 2382 051a FFF7FEFF 		bl	__aeabi_i2d
 2383              	.LVL272:
 2384 051e 0022     		movs	r2, #0
 2385 0520 544B     		ldr	r3, .L181
 2386 0522 FFF7FEFF 		bl	__aeabi_dmul
 2387              	.LVL273:
 2388 0526 FFF7FEFF 		bl	__aeabi_d2uiz
 2389              	.LVL274:
 2390 052a A5F84E00 		strh	r0, [r5, #78]	@ movhi
 638:Core/Src/bms.c ****         bms->cellVolt[40] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2391              		.loc 1 638 0
 2392 052e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2393 0530 1B02     		lsls	r3, r3, #8
 2394 0532 03F47063 		and	r3, r3, #3840
 2395 0536 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2396 0538 1844     		add	r0, r0, r3
 2397 053a FFF7FEFF 		bl	__aeabi_i2d
 2398              	.LVL275:
 2399 053e 0022     		movs	r2, #0
 2400 0540 4C4B     		ldr	r3, .L181
 2401 0542 FFF7FEFF 		bl	__aeabi_dmul
 2402              	.LVL276:
 2403 0546 FFF7FEFF 		bl	__aeabi_d2uiz
 2404              	.LVL277:
 2405 054a A5F85000 		strh	r0, [r5, #80]	@ movhi
 639:Core/Src/bms.c ****         bms->cellVolt[41] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2406              		.loc 1 639 0
 2407 054e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2408 0550 1B02     		lsls	r3, r3, #8
 2409 0552 03F47063 		and	r3, r3, #3840
 2410 0556 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2411 0558 1844     		add	r0, r0, r3
 2412 055a FFF7FEFF 		bl	__aeabi_i2d
 2413              	.LVL278:
 2414 055e 0022     		movs	r2, #0
 2415 0560 444B     		ldr	r3, .L181
 2416 0562 FFF7FEFF 		bl	__aeabi_dmul
 2417              	.LVL279:
 2418 0566 FFF7FEFF 		bl	__aeabi_d2uiz
 2419              	.LVL280:
 2420 056a A5F85200 		strh	r0, [r5, #82]	@ movhi
 640:Core/Src/bms.c ****         break;
 2421              		.loc 1 640 0
 2422 056e 38BD     		pop	{r3, r4, r5, pc}
 2423              	.LVL281:
 2424              	.L170:
 641:Core/Src/bms.c **** 
 642:Core/Src/bms.c ****     case 0x475:
 643:Core/Src/bms.c ****         bms->cellVolt[42] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2425              		.loc 1 643 0
 2426 0570 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2427 0572 1B02     		lsls	r3, r3, #8
 2428 0574 03F47063 		and	r3, r3, #3840
 2429 0578 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2430              	.LVL282:
ARM GAS  /tmp/ccBwmWIp.s 			page 58


 2431 057a 1844     		add	r0, r0, r3
 2432 057c FFF7FEFF 		bl	__aeabi_i2d
 2433              	.LVL283:
 2434 0580 0022     		movs	r2, #0
 2435 0582 3C4B     		ldr	r3, .L181
 2436 0584 FFF7FEFF 		bl	__aeabi_dmul
 2437              	.LVL284:
 2438 0588 FFF7FEFF 		bl	__aeabi_d2uiz
 2439              	.LVL285:
 2440 058c A5F85400 		strh	r0, [r5, #84]	@ movhi
 644:Core/Src/bms.c ****         bms->cellVolt[43] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2441              		.loc 1 644 0
 2442 0590 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2443 0592 1B02     		lsls	r3, r3, #8
 2444 0594 03F47063 		and	r3, r3, #3840
 2445 0598 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2446 059a 1844     		add	r0, r0, r3
 2447 059c FFF7FEFF 		bl	__aeabi_i2d
 2448              	.LVL286:
 2449 05a0 0022     		movs	r2, #0
 2450 05a2 344B     		ldr	r3, .L181
 2451 05a4 FFF7FEFF 		bl	__aeabi_dmul
 2452              	.LVL287:
 2453 05a8 FFF7FEFF 		bl	__aeabi_d2uiz
 2454              	.LVL288:
 2455 05ac A5F85600 		strh	r0, [r5, #86]	@ movhi
 645:Core/Src/bms.c ****         bms->cellVolt[44] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2456              		.loc 1 645 0
 2457 05b0 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2458 05b2 1B02     		lsls	r3, r3, #8
 2459 05b4 03F47063 		and	r3, r3, #3840
 2460 05b8 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2461 05ba 1844     		add	r0, r0, r3
 2462 05bc FFF7FEFF 		bl	__aeabi_i2d
 2463              	.LVL289:
 2464 05c0 0022     		movs	r2, #0
 2465 05c2 2C4B     		ldr	r3, .L181
 2466 05c4 FFF7FEFF 		bl	__aeabi_dmul
 2467              	.LVL290:
 2468 05c8 FFF7FEFF 		bl	__aeabi_d2uiz
 2469              	.LVL291:
 2470 05cc A5F85800 		strh	r0, [r5, #88]	@ movhi
 646:Core/Src/bms.c ****         bms->cellVolt[45] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2471              		.loc 1 646 0
 2472 05d0 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2473 05d2 1B02     		lsls	r3, r3, #8
 2474 05d4 03F47063 		and	r3, r3, #3840
 2475 05d8 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2476 05da 1844     		add	r0, r0, r3
 2477 05dc FFF7FEFF 		bl	__aeabi_i2d
 2478              	.LVL292:
 2479 05e0 0022     		movs	r2, #0
 2480 05e2 244B     		ldr	r3, .L181
 2481 05e4 FFF7FEFF 		bl	__aeabi_dmul
 2482              	.LVL293:
 2483 05e8 FFF7FEFF 		bl	__aeabi_d2uiz
 2484              	.LVL294:
ARM GAS  /tmp/ccBwmWIp.s 			page 59


 2485 05ec A5F85A00 		strh	r0, [r5, #90]	@ movhi
 647:Core/Src/bms.c ****         break;
 2486              		.loc 1 647 0
 2487 05f0 38BD     		pop	{r3, r4, r5, pc}
 2488              	.LVL295:
 2489              	.L158:
 648:Core/Src/bms.c **** 
 649:Core/Src/bms.c ****     case 0x466:
 650:Core/Src/bms.c ****         bms->cellVolt[46] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2490              		.loc 1 650 0
 2491 05f2 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2492 05f4 1B02     		lsls	r3, r3, #8
 2493 05f6 03F47063 		and	r3, r3, #3840
 2494 05fa 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2495              	.LVL296:
 2496 05fc 1844     		add	r0, r0, r3
 2497 05fe FFF7FEFF 		bl	__aeabi_i2d
 2498              	.LVL297:
 2499 0602 0022     		movs	r2, #0
 2500 0604 1B4B     		ldr	r3, .L181
 2501 0606 FFF7FEFF 		bl	__aeabi_dmul
 2502              	.LVL298:
 2503 060a FFF7FEFF 		bl	__aeabi_d2uiz
 2504              	.LVL299:
 2505 060e A5F85C00 		strh	r0, [r5, #92]	@ movhi
 651:Core/Src/bms.c ****         bms->cellVolt[47] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2506              		.loc 1 651 0
 2507 0612 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2508 0614 1B02     		lsls	r3, r3, #8
 2509 0616 03F47063 		and	r3, r3, #3840
 2510 061a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2511 061c 1844     		add	r0, r0, r3
 2512 061e FFF7FEFF 		bl	__aeabi_i2d
 2513              	.LVL300:
 2514 0622 0022     		movs	r2, #0
 2515 0624 134B     		ldr	r3, .L181
 2516 0626 FFF7FEFF 		bl	__aeabi_dmul
 2517              	.LVL301:
 2518 062a FFF7FEFF 		bl	__aeabi_d2uiz
 2519              	.LVL302:
 2520 062e A5F85E00 		strh	r0, [r5, #94]	@ movhi
 652:Core/Src/bms.c ****         bms->cellVolt[48] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2521              		.loc 1 652 0
 2522 0632 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2523 0634 1B02     		lsls	r3, r3, #8
 2524 0636 03F47063 		and	r3, r3, #3840
 2525 063a 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2526 063c 1844     		add	r0, r0, r3
 2527 063e FFF7FEFF 		bl	__aeabi_i2d
 2528              	.LVL303:
 2529 0642 0022     		movs	r2, #0
 2530 0644 0B4B     		ldr	r3, .L181
 2531 0646 FFF7FEFF 		bl	__aeabi_dmul
 2532              	.LVL304:
 2533 064a FFF7FEFF 		bl	__aeabi_d2uiz
 2534              	.LVL305:
 2535 064e A5F86000 		strh	r0, [r5, #96]	@ movhi
ARM GAS  /tmp/ccBwmWIp.s 			page 60


 653:Core/Src/bms.c ****         bms->cellVolt[49] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2536              		.loc 1 653 0
 2537 0652 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2538 0654 1B02     		lsls	r3, r3, #8
 2539 0656 03F47063 		and	r3, r3, #3840
 2540 065a E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2541 065c 1844     		add	r0, r0, r3
 2542 065e FFF7FEFF 		bl	__aeabi_i2d
 2543              	.LVL306:
 2544 0662 0022     		movs	r2, #0
 2545 0664 034B     		ldr	r3, .L181
 2546 0666 FFF7FEFF 		bl	__aeabi_dmul
 2547              	.LVL307:
 2548 066a FFF7FEFF 		bl	__aeabi_d2uiz
 2549              	.LVL308:
 2550 066e A5F86200 		strh	r0, [r5, #98]	@ movhi
 654:Core/Src/bms.c ****         break;
 2551              		.loc 1 654 0
 2552 0672 38BD     		pop	{r3, r4, r5, pc}
 2553              	.LVL309:
 2554              	.L182:
 2555              		.align	2
 2556              	.L181:
 2557 0674 0000F43F 		.word	1072955392
 2558              	.LVL310:
 2559              	.L171:
 655:Core/Src/bms.c **** 
 656:Core/Src/bms.c ****     case 0x476:
 657:Core/Src/bms.c ****         bms->cellVolt[50] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2560              		.loc 1 657 0
 2561 0678 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2562 067a 1B02     		lsls	r3, r3, #8
 2563 067c 03F47063 		and	r3, r3, #3840
 2564 0680 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2565              	.LVL311:
 2566 0682 1844     		add	r0, r0, r3
 2567 0684 FFF7FEFF 		bl	__aeabi_i2d
 2568              	.LVL312:
 2569 0688 0022     		movs	r2, #0
 2570 068a BE4B     		ldr	r3, .L183
 2571 068c FFF7FEFF 		bl	__aeabi_dmul
 2572              	.LVL313:
 2573 0690 FFF7FEFF 		bl	__aeabi_d2uiz
 2574              	.LVL314:
 2575 0694 A5F86400 		strh	r0, [r5, #100]	@ movhi
 658:Core/Src/bms.c ****         bms->cellVolt[51] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2576              		.loc 1 658 0
 2577 0698 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2578 069a 1B02     		lsls	r3, r3, #8
 2579 069c 03F47063 		and	r3, r3, #3840
 2580 06a0 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2581 06a2 1844     		add	r0, r0, r3
 2582 06a4 FFF7FEFF 		bl	__aeabi_i2d
 2583              	.LVL315:
 2584 06a8 0022     		movs	r2, #0
 2585 06aa B64B     		ldr	r3, .L183
 2586 06ac FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccBwmWIp.s 			page 61


 2587              	.LVL316:
 2588 06b0 FFF7FEFF 		bl	__aeabi_d2uiz
 2589              	.LVL317:
 2590 06b4 A5F86600 		strh	r0, [r5, #102]	@ movhi
 659:Core/Src/bms.c ****         bms->cellVolt[52] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2591              		.loc 1 659 0
 2592 06b8 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2593 06ba 1B02     		lsls	r3, r3, #8
 2594 06bc 03F47063 		and	r3, r3, #3840
 2595 06c0 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2596 06c2 1844     		add	r0, r0, r3
 2597 06c4 FFF7FEFF 		bl	__aeabi_i2d
 2598              	.LVL318:
 2599 06c8 0022     		movs	r2, #0
 2600 06ca AE4B     		ldr	r3, .L183
 2601 06cc FFF7FEFF 		bl	__aeabi_dmul
 2602              	.LVL319:
 2603 06d0 FFF7FEFF 		bl	__aeabi_d2uiz
 2604              	.LVL320:
 2605 06d4 A5F86800 		strh	r0, [r5, #104]	@ movhi
 660:Core/Src/bms.c ****         bms->cellVolt[53] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2606              		.loc 1 660 0
 2607 06d8 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2608 06da 1B02     		lsls	r3, r3, #8
 2609 06dc 03F47063 		and	r3, r3, #3840
 2610 06e0 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2611 06e2 1844     		add	r0, r0, r3
 2612 06e4 FFF7FEFF 		bl	__aeabi_i2d
 2613              	.LVL321:
 2614 06e8 0022     		movs	r2, #0
 2615 06ea A64B     		ldr	r3, .L183
 2616 06ec FFF7FEFF 		bl	__aeabi_dmul
 2617              	.LVL322:
 2618 06f0 FFF7FEFF 		bl	__aeabi_d2uiz
 2619              	.LVL323:
 2620 06f4 A5F86A00 		strh	r0, [r5, #106]	@ movhi
 661:Core/Src/bms.c ****         break;
 2621              		.loc 1 661 0
 2622 06f8 38BD     		pop	{r3, r4, r5, pc}
 2623              	.LVL324:
 2624              	.L159:
 662:Core/Src/bms.c **** 
 663:Core/Src/bms.c ****     case 0x468:
 664:Core/Src/bms.c ****         bms->cellVolt[54] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25); //Begin module 3
 2625              		.loc 1 664 0
 2626 06fa 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2627 06fc 1B02     		lsls	r3, r3, #8
 2628 06fe 03F47063 		and	r3, r3, #3840
 2629 0702 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2630              	.LVL325:
 2631 0704 1844     		add	r0, r0, r3
 2632 0706 FFF7FEFF 		bl	__aeabi_i2d
 2633              	.LVL326:
 2634 070a 0022     		movs	r2, #0
 2635 070c 9D4B     		ldr	r3, .L183
 2636 070e FFF7FEFF 		bl	__aeabi_dmul
 2637              	.LVL327:
ARM GAS  /tmp/ccBwmWIp.s 			page 62


 2638 0712 FFF7FEFF 		bl	__aeabi_d2uiz
 2639              	.LVL328:
 2640 0716 A5F86C00 		strh	r0, [r5, #108]	@ movhi
 665:Core/Src/bms.c ****         bms->cellVolt[55] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2641              		.loc 1 665 0
 2642 071a A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2643 071c 1B02     		lsls	r3, r3, #8
 2644 071e 03F47063 		and	r3, r3, #3840
 2645 0722 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2646 0724 1844     		add	r0, r0, r3
 2647 0726 FFF7FEFF 		bl	__aeabi_i2d
 2648              	.LVL329:
 2649 072a 0022     		movs	r2, #0
 2650 072c 954B     		ldr	r3, .L183
 2651 072e FFF7FEFF 		bl	__aeabi_dmul
 2652              	.LVL330:
 2653 0732 FFF7FEFF 		bl	__aeabi_d2uiz
 2654              	.LVL331:
 2655 0736 A5F86E00 		strh	r0, [r5, #110]	@ movhi
 666:Core/Src/bms.c ****         bms->cellVolt[56] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2656              		.loc 1 666 0
 2657 073a 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2658 073c 1B02     		lsls	r3, r3, #8
 2659 073e 03F47063 		and	r3, r3, #3840
 2660 0742 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2661 0744 1844     		add	r0, r0, r3
 2662 0746 FFF7FEFF 		bl	__aeabi_i2d
 2663              	.LVL332:
 2664 074a 0022     		movs	r2, #0
 2665 074c 8D4B     		ldr	r3, .L183
 2666 074e FFF7FEFF 		bl	__aeabi_dmul
 2667              	.LVL333:
 2668 0752 FFF7FEFF 		bl	__aeabi_d2uiz
 2669              	.LVL334:
 2670 0756 A5F87000 		strh	r0, [r5, #112]	@ movhi
 667:Core/Src/bms.c ****         bms->cellVolt[57] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2671              		.loc 1 667 0
 2672 075a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2673 075c 1B02     		lsls	r3, r3, #8
 2674 075e 03F47063 		and	r3, r3, #3840
 2675 0762 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2676 0764 1844     		add	r0, r0, r3
 2677 0766 FFF7FEFF 		bl	__aeabi_i2d
 2678              	.LVL335:
 2679 076a 0022     		movs	r2, #0
 2680 076c 854B     		ldr	r3, .L183
 2681 076e FFF7FEFF 		bl	__aeabi_dmul
 2682              	.LVL336:
 2683 0772 FFF7FEFF 		bl	__aeabi_d2uiz
 2684              	.LVL337:
 2685 0776 A5F87200 		strh	r0, [r5, #114]	@ movhi
 668:Core/Src/bms.c ****         break;
 2686              		.loc 1 668 0
 2687 077a 38BD     		pop	{r3, r4, r5, pc}
 2688              	.LVL338:
 2689              	.L172:
 669:Core/Src/bms.c **** 
ARM GAS  /tmp/ccBwmWIp.s 			page 63


 670:Core/Src/bms.c ****     case 0x478:
 671:Core/Src/bms.c ****         bms->cellVolt[58] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2690              		.loc 1 671 0
 2691 077c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2692 077e 1B02     		lsls	r3, r3, #8
 2693 0780 03F47063 		and	r3, r3, #3840
 2694 0784 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2695              	.LVL339:
 2696 0786 1844     		add	r0, r0, r3
 2697 0788 FFF7FEFF 		bl	__aeabi_i2d
 2698              	.LVL340:
 2699 078c 0022     		movs	r2, #0
 2700 078e 7D4B     		ldr	r3, .L183
 2701 0790 FFF7FEFF 		bl	__aeabi_dmul
 2702              	.LVL341:
 2703 0794 FFF7FEFF 		bl	__aeabi_d2uiz
 2704              	.LVL342:
 2705 0798 A5F87400 		strh	r0, [r5, #116]	@ movhi
 672:Core/Src/bms.c ****         bms->cellVolt[59] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2706              		.loc 1 672 0
 2707 079c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2708 079e 1B02     		lsls	r3, r3, #8
 2709 07a0 03F47063 		and	r3, r3, #3840
 2710 07a4 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2711 07a6 1844     		add	r0, r0, r3
 2712 07a8 FFF7FEFF 		bl	__aeabi_i2d
 2713              	.LVL343:
 2714 07ac 0022     		movs	r2, #0
 2715 07ae 754B     		ldr	r3, .L183
 2716 07b0 FFF7FEFF 		bl	__aeabi_dmul
 2717              	.LVL344:
 2718 07b4 FFF7FEFF 		bl	__aeabi_d2uiz
 2719              	.LVL345:
 2720 07b8 A5F87600 		strh	r0, [r5, #118]	@ movhi
 673:Core/Src/bms.c ****         bms->cellVolt[60] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2721              		.loc 1 673 0
 2722 07bc 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2723 07be 1B02     		lsls	r3, r3, #8
 2724 07c0 03F47063 		and	r3, r3, #3840
 2725 07c4 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2726 07c6 1844     		add	r0, r0, r3
 2727 07c8 FFF7FEFF 		bl	__aeabi_i2d
 2728              	.LVL346:
 2729 07cc 0022     		movs	r2, #0
 2730 07ce 6D4B     		ldr	r3, .L183
 2731 07d0 FFF7FEFF 		bl	__aeabi_dmul
 2732              	.LVL347:
 2733 07d4 FFF7FEFF 		bl	__aeabi_d2uiz
 2734              	.LVL348:
 2735 07d8 A5F87800 		strh	r0, [r5, #120]	@ movhi
 674:Core/Src/bms.c ****         bms->cellVolt[61] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2736              		.loc 1 674 0
 2737 07dc A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2738 07de 1B02     		lsls	r3, r3, #8
 2739 07e0 03F47063 		and	r3, r3, #3840
 2740 07e4 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2741 07e6 1844     		add	r0, r0, r3
ARM GAS  /tmp/ccBwmWIp.s 			page 64


 2742 07e8 FFF7FEFF 		bl	__aeabi_i2d
 2743              	.LVL349:
 2744 07ec 0022     		movs	r2, #0
 2745 07ee 654B     		ldr	r3, .L183
 2746 07f0 FFF7FEFF 		bl	__aeabi_dmul
 2747              	.LVL350:
 2748 07f4 FFF7FEFF 		bl	__aeabi_d2uiz
 2749              	.LVL351:
 2750 07f8 A5F87A00 		strh	r0, [r5, #122]	@ movhi
 675:Core/Src/bms.c ****         break;
 2751              		.loc 1 675 0
 2752 07fc 38BD     		pop	{r3, r4, r5, pc}
 2753              	.LVL352:
 2754              	.L160:
 676:Core/Src/bms.c **** 
 677:Core/Src/bms.c ****     case 0x469:
 678:Core/Src/bms.c ****         bms->cellVolt[62] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2755              		.loc 1 678 0
 2756 07fe 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2757 0800 1B02     		lsls	r3, r3, #8
 2758 0802 03F47063 		and	r3, r3, #3840
 2759 0806 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2760              	.LVL353:
 2761 0808 1844     		add	r0, r0, r3
 2762 080a FFF7FEFF 		bl	__aeabi_i2d
 2763              	.LVL354:
 2764 080e 0022     		movs	r2, #0
 2765 0810 5C4B     		ldr	r3, .L183
 2766 0812 FFF7FEFF 		bl	__aeabi_dmul
 2767              	.LVL355:
 2768 0816 FFF7FEFF 		bl	__aeabi_d2uiz
 2769              	.LVL356:
 2770 081a A5F87C00 		strh	r0, [r5, #124]	@ movhi
 679:Core/Src/bms.c ****         bms->cellVolt[63] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2771              		.loc 1 679 0
 2772 081e A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2773 0820 1B02     		lsls	r3, r3, #8
 2774 0822 03F47063 		and	r3, r3, #3840
 2775 0826 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2776 0828 1844     		add	r0, r0, r3
 2777 082a FFF7FEFF 		bl	__aeabi_i2d
 2778              	.LVL357:
 2779 082e 0022     		movs	r2, #0
 2780 0830 544B     		ldr	r3, .L183
 2781 0832 FFF7FEFF 		bl	__aeabi_dmul
 2782              	.LVL358:
 2783 0836 FFF7FEFF 		bl	__aeabi_d2uiz
 2784              	.LVL359:
 2785 083a A5F87E00 		strh	r0, [r5, #126]	@ movhi
 680:Core/Src/bms.c ****         bms->cellVolt[64] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2786              		.loc 1 680 0
 2787 083e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2788 0840 1B02     		lsls	r3, r3, #8
 2789 0842 03F47063 		and	r3, r3, #3840
 2790 0846 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2791 0848 1844     		add	r0, r0, r3
 2792 084a FFF7FEFF 		bl	__aeabi_i2d
ARM GAS  /tmp/ccBwmWIp.s 			page 65


 2793              	.LVL360:
 2794 084e 0022     		movs	r2, #0
 2795 0850 4C4B     		ldr	r3, .L183
 2796 0852 FFF7FEFF 		bl	__aeabi_dmul
 2797              	.LVL361:
 2798 0856 FFF7FEFF 		bl	__aeabi_d2uiz
 2799              	.LVL362:
 2800 085a A5F88000 		strh	r0, [r5, #128]	@ movhi
 681:Core/Src/bms.c ****         bms->cellVolt[65] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2801              		.loc 1 681 0
 2802 085e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2803 0860 1B02     		lsls	r3, r3, #8
 2804 0862 03F47063 		and	r3, r3, #3840
 2805 0866 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2806 0868 1844     		add	r0, r0, r3
 2807 086a FFF7FEFF 		bl	__aeabi_i2d
 2808              	.LVL363:
 2809 086e 0022     		movs	r2, #0
 2810 0870 444B     		ldr	r3, .L183
 2811 0872 FFF7FEFF 		bl	__aeabi_dmul
 2812              	.LVL364:
 2813 0876 FFF7FEFF 		bl	__aeabi_d2uiz
 2814              	.LVL365:
 2815 087a A5F88200 		strh	r0, [r5, #130]	@ movhi
 682:Core/Src/bms.c ****         break;
 2816              		.loc 1 682 0
 2817 087e 38BD     		pop	{r3, r4, r5, pc}
 2818              	.LVL366:
 2819              	.L173:
 683:Core/Src/bms.c **** 
 684:Core/Src/bms.c ****     case 0x479:
 685:Core/Src/bms.c ****         bms->cellVolt[66] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2820              		.loc 1 685 0
 2821 0880 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2822 0882 1B02     		lsls	r3, r3, #8
 2823 0884 03F47063 		and	r3, r3, #3840
 2824 0888 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2825              	.LVL367:
 2826 088a 1844     		add	r0, r0, r3
 2827 088c FFF7FEFF 		bl	__aeabi_i2d
 2828              	.LVL368:
 2829 0890 0022     		movs	r2, #0
 2830 0892 3C4B     		ldr	r3, .L183
 2831 0894 FFF7FEFF 		bl	__aeabi_dmul
 2832              	.LVL369:
 2833 0898 FFF7FEFF 		bl	__aeabi_d2uiz
 2834              	.LVL370:
 2835 089c A5F88400 		strh	r0, [r5, #132]	@ movhi
 686:Core/Src/bms.c ****         bms->cellVolt[67] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2836              		.loc 1 686 0
 2837 08a0 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2838 08a2 1B02     		lsls	r3, r3, #8
 2839 08a4 03F47063 		and	r3, r3, #3840
 2840 08a8 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2841 08aa 1844     		add	r0, r0, r3
 2842 08ac FFF7FEFF 		bl	__aeabi_i2d
 2843              	.LVL371:
ARM GAS  /tmp/ccBwmWIp.s 			page 66


 2844 08b0 0022     		movs	r2, #0
 2845 08b2 344B     		ldr	r3, .L183
 2846 08b4 FFF7FEFF 		bl	__aeabi_dmul
 2847              	.LVL372:
 2848 08b8 FFF7FEFF 		bl	__aeabi_d2uiz
 2849              	.LVL373:
 2850 08bc A5F88600 		strh	r0, [r5, #134]	@ movhi
 687:Core/Src/bms.c ****         bms->cellVolt[68] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2851              		.loc 1 687 0
 2852 08c0 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2853 08c2 1B02     		lsls	r3, r3, #8
 2854 08c4 03F47063 		and	r3, r3, #3840
 2855 08c8 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2856 08ca 1844     		add	r0, r0, r3
 2857 08cc FFF7FEFF 		bl	__aeabi_i2d
 2858              	.LVL374:
 2859 08d0 0022     		movs	r2, #0
 2860 08d2 2C4B     		ldr	r3, .L183
 2861 08d4 FFF7FEFF 		bl	__aeabi_dmul
 2862              	.LVL375:
 2863 08d8 FFF7FEFF 		bl	__aeabi_d2uiz
 2864              	.LVL376:
 2865 08dc A5F88800 		strh	r0, [r5, #136]	@ movhi
 688:Core/Src/bms.c ****         bms->cellVolt[69] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2866              		.loc 1 688 0
 2867 08e0 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2868 08e2 1B02     		lsls	r3, r3, #8
 2869 08e4 03F47063 		and	r3, r3, #3840
 2870 08e8 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2871 08ea 1844     		add	r0, r0, r3
 2872 08ec FFF7FEFF 		bl	__aeabi_i2d
 2873              	.LVL377:
 2874 08f0 0022     		movs	r2, #0
 2875 08f2 244B     		ldr	r3, .L183
 2876 08f4 FFF7FEFF 		bl	__aeabi_dmul
 2877              	.LVL378:
 2878 08f8 FFF7FEFF 		bl	__aeabi_d2uiz
 2879              	.LVL379:
 2880 08fc A5F88A00 		strh	r0, [r5, #138]	@ movhi
 689:Core/Src/bms.c ****         break;
 2881              		.loc 1 689 0
 2882 0900 38BD     		pop	{r3, r4, r5, pc}
 2883              	.LVL380:
 2884              	.L161:
 690:Core/Src/bms.c **** 
 691:Core/Src/bms.c ****     case 0x46A:
 692:Core/Src/bms.c ****         bms->cellVolt[70] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2885              		.loc 1 692 0
 2886 0902 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2887 0904 1B02     		lsls	r3, r3, #8
 2888 0906 03F47063 		and	r3, r3, #3840
 2889 090a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2890              	.LVL381:
 2891 090c 1844     		add	r0, r0, r3
 2892 090e FFF7FEFF 		bl	__aeabi_i2d
 2893              	.LVL382:
 2894 0912 0022     		movs	r2, #0
ARM GAS  /tmp/ccBwmWIp.s 			page 67


 2895 0914 1B4B     		ldr	r3, .L183
 2896 0916 FFF7FEFF 		bl	__aeabi_dmul
 2897              	.LVL383:
 2898 091a FFF7FEFF 		bl	__aeabi_d2uiz
 2899              	.LVL384:
 2900 091e A5F88C00 		strh	r0, [r5, #140]	@ movhi
 693:Core/Src/bms.c ****         bms->cellVolt[71] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2901              		.loc 1 693 0
 2902 0922 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2903 0924 1B02     		lsls	r3, r3, #8
 2904 0926 03F47063 		and	r3, r3, #3840
 2905 092a E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2906 092c 1844     		add	r0, r0, r3
 2907 092e FFF7FEFF 		bl	__aeabi_i2d
 2908              	.LVL385:
 2909 0932 0022     		movs	r2, #0
 2910 0934 134B     		ldr	r3, .L183
 2911 0936 FFF7FEFF 		bl	__aeabi_dmul
 2912              	.LVL386:
 2913 093a FFF7FEFF 		bl	__aeabi_d2uiz
 2914              	.LVL387:
 2915 093e A5F88E00 		strh	r0, [r5, #142]	@ movhi
 694:Core/Src/bms.c ****         bms->cellVolt[72] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2916              		.loc 1 694 0
 2917 0942 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2918 0944 1B02     		lsls	r3, r3, #8
 2919 0946 03F47063 		and	r3, r3, #3840
 2920 094a 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2921 094c 1844     		add	r0, r0, r3
 2922 094e FFF7FEFF 		bl	__aeabi_i2d
 2923              	.LVL388:
 2924 0952 0022     		movs	r2, #0
 2925 0954 0B4B     		ldr	r3, .L183
 2926 0956 FFF7FEFF 		bl	__aeabi_dmul
 2927              	.LVL389:
 2928 095a FFF7FEFF 		bl	__aeabi_d2uiz
 2929              	.LVL390:
 2930 095e A5F89000 		strh	r0, [r5, #144]	@ movhi
 695:Core/Src/bms.c ****         bms->cellVolt[73] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 2931              		.loc 1 695 0
 2932 0962 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 2933 0964 1B02     		lsls	r3, r3, #8
 2934 0966 03F47063 		and	r3, r3, #3840
 2935 096a E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 2936 096c 1844     		add	r0, r0, r3
 2937 096e FFF7FEFF 		bl	__aeabi_i2d
 2938              	.LVL391:
 2939 0972 0022     		movs	r2, #0
 2940 0974 034B     		ldr	r3, .L183
 2941 0976 FFF7FEFF 		bl	__aeabi_dmul
 2942              	.LVL392:
 2943 097a FFF7FEFF 		bl	__aeabi_d2uiz
 2944              	.LVL393:
 2945 097e A5F89200 		strh	r0, [r5, #146]	@ movhi
 696:Core/Src/bms.c ****         break;
 2946              		.loc 1 696 0
 2947 0982 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccBwmWIp.s 			page 68


 2948              	.LVL394:
 2949              	.L184:
 2950              		.align	2
 2951              	.L183:
 2952 0984 0000F43F 		.word	1072955392
 2953              	.LVL395:
 2954              	.L174:
 697:Core/Src/bms.c **** 
 698:Core/Src/bms.c ****     case 0x47A:
 699:Core/Src/bms.c ****         bms->cellVolt[74] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 2955              		.loc 1 699 0
 2956 0988 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2957 098a 1B02     		lsls	r3, r3, #8
 2958 098c 03F47063 		and	r3, r3, #3840
 2959 0990 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2960              	.LVL396:
 2961 0992 1844     		add	r0, r0, r3
 2962 0994 FFF7FEFF 		bl	__aeabi_i2d
 2963              	.LVL397:
 2964 0998 0022     		movs	r2, #0
 2965 099a AF4B     		ldr	r3, .L185
 2966 099c FFF7FEFF 		bl	__aeabi_dmul
 2967              	.LVL398:
 2968 09a0 FFF7FEFF 		bl	__aeabi_d2uiz
 2969              	.LVL399:
 2970 09a4 A5F89400 		strh	r0, [r5, #148]	@ movhi
 700:Core/Src/bms.c ****         bms->cellVolt[75] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 2971              		.loc 1 700 0
 2972 09a8 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 2973 09aa 1B02     		lsls	r3, r3, #8
 2974 09ac 03F47063 		and	r3, r3, #3840
 2975 09b0 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 2976 09b2 1844     		add	r0, r0, r3
 2977 09b4 FFF7FEFF 		bl	__aeabi_i2d
 2978              	.LVL400:
 2979 09b8 0022     		movs	r2, #0
 2980 09ba A74B     		ldr	r3, .L185
 2981 09bc FFF7FEFF 		bl	__aeabi_dmul
 2982              	.LVL401:
 2983 09c0 FFF7FEFF 		bl	__aeabi_d2uiz
 2984              	.LVL402:
 2985 09c4 A5F89600 		strh	r0, [r5, #150]	@ movhi
 701:Core/Src/bms.c ****         bms->cellVolt[76] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 2986              		.loc 1 701 0
 2987 09c8 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 2988 09ca 1B02     		lsls	r3, r3, #8
 2989 09cc 03F47063 		and	r3, r3, #3840
 2990 09d0 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 2991 09d2 1844     		add	r0, r0, r3
 2992 09d4 FFF7FEFF 		bl	__aeabi_i2d
 2993              	.LVL403:
 2994 09d8 0022     		movs	r2, #0
 2995 09da 9F4B     		ldr	r3, .L185
 2996 09dc FFF7FEFF 		bl	__aeabi_dmul
 2997              	.LVL404:
 2998 09e0 FFF7FEFF 		bl	__aeabi_d2uiz
 2999              	.LVL405:
ARM GAS  /tmp/ccBwmWIp.s 			page 69


 3000 09e4 A5F89800 		strh	r0, [r5, #152]	@ movhi
 702:Core/Src/bms.c ****         bms->cellVolt[77] = ((((canRx[6] & 0x0F) << 8) + canRx[7]) * 1.25);
 3001              		.loc 1 702 0
 3002 09e8 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3003 09ea 1B02     		lsls	r3, r3, #8
 3004 09ec 03F47063 		and	r3, r3, #3840
 3005 09f0 E079     		ldrb	r0, [r4, #7]	@ zero_extendqisi2
 3006 09f2 1844     		add	r0, r0, r3
 3007 09f4 FFF7FEFF 		bl	__aeabi_i2d
 3008              	.LVL406:
 3009 09f8 0022     		movs	r2, #0
 3010 09fa 974B     		ldr	r3, .L185
 3011 09fc FFF7FEFF 		bl	__aeabi_dmul
 3012              	.LVL407:
 3013 0a00 FFF7FEFF 		bl	__aeabi_d2uiz
 3014              	.LVL408:
 3015 0a04 A5F89A00 		strh	r0, [r5, #154]	@ movhi
 703:Core/Src/bms.c ****         break;
 3016              		.loc 1 703 0
 3017 0a08 38BD     		pop	{r3, r4, r5, pc}
 3018              	.LVL409:
 3019              	.L162:
 704:Core/Src/bms.c **** 
 705:Core/Src/bms.c ****     case 0x46C:
 706:Core/Src/bms.c ****         bms->cellVolt[78] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25); //Begin module 4
 3020              		.loc 1 706 0
 3021 0a0a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3022 0a0c 1B02     		lsls	r3, r3, #8
 3023 0a0e 03F47063 		and	r3, r3, #3840
 3024 0a12 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3025              	.LVL410:
 3026 0a14 1844     		add	r0, r0, r3
 3027 0a16 FFF7FEFF 		bl	__aeabi_i2d
 3028              	.LVL411:
 3029 0a1a 0022     		movs	r2, #0
 3030 0a1c 8E4B     		ldr	r3, .L185
 3031 0a1e FFF7FEFF 		bl	__aeabi_dmul
 3032              	.LVL412:
 3033 0a22 FFF7FEFF 		bl	__aeabi_d2uiz
 3034              	.LVL413:
 3035 0a26 A5F89C00 		strh	r0, [r5, #156]	@ movhi
 707:Core/Src/bms.c ****         bms->cellVolt[79] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3036              		.loc 1 707 0
 3037 0a2a A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3038 0a2c 1B02     		lsls	r3, r3, #8
 3039 0a2e 03F47063 		and	r3, r3, #3840
 3040 0a32 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3041 0a34 1844     		add	r0, r0, r3
 3042 0a36 FFF7FEFF 		bl	__aeabi_i2d
 3043              	.LVL414:
 3044 0a3a 0022     		movs	r2, #0
 3045 0a3c 864B     		ldr	r3, .L185
 3046 0a3e FFF7FEFF 		bl	__aeabi_dmul
 3047              	.LVL415:
 3048 0a42 FFF7FEFF 		bl	__aeabi_d2uiz
 3049              	.LVL416:
 3050 0a46 A5F89E00 		strh	r0, [r5, #158]	@ movhi
ARM GAS  /tmp/ccBwmWIp.s 			page 70


 708:Core/Src/bms.c ****         bms->cellVolt[80] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3051              		.loc 1 708 0
 3052 0a4a 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3053 0a4c 1B02     		lsls	r3, r3, #8
 3054 0a4e 03F47063 		and	r3, r3, #3840
 3055 0a52 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3056 0a54 1844     		add	r0, r0, r3
 3057 0a56 FFF7FEFF 		bl	__aeabi_i2d
 3058              	.LVL417:
 3059 0a5a 0022     		movs	r2, #0
 3060 0a5c 7E4B     		ldr	r3, .L185
 3061 0a5e FFF7FEFF 		bl	__aeabi_dmul
 3062              	.LVL418:
 3063 0a62 FFF7FEFF 		bl	__aeabi_d2uiz
 3064              	.LVL419:
 3065 0a66 A5F8A000 		strh	r0, [r5, #160]	@ movhi
 709:Core/Src/bms.c ****         break;
 3066              		.loc 1 709 0
 3067 0a6a 38BD     		pop	{r3, r4, r5, pc}
 3068              	.LVL420:
 3069              	.L175:
 710:Core/Src/bms.c **** 
 711:Core/Src/bms.c ****     case 0x47C:
 712:Core/Src/bms.c ****         bms->cellVolt[81] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 3070              		.loc 1 712 0
 3071 0a6c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3072 0a6e 1B02     		lsls	r3, r3, #8
 3073 0a70 03F47063 		and	r3, r3, #3840
 3074 0a74 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3075              	.LVL421:
 3076 0a76 1844     		add	r0, r0, r3
 3077 0a78 FFF7FEFF 		bl	__aeabi_i2d
 3078              	.LVL422:
 3079 0a7c 0022     		movs	r2, #0
 3080 0a7e 764B     		ldr	r3, .L185
 3081 0a80 FFF7FEFF 		bl	__aeabi_dmul
 3082              	.LVL423:
 3083 0a84 FFF7FEFF 		bl	__aeabi_d2uiz
 3084              	.LVL424:
 3085 0a88 A5F8A200 		strh	r0, [r5, #162]	@ movhi
 713:Core/Src/bms.c ****         bms->cellVolt[82] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3086              		.loc 1 713 0
 3087 0a8c A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3088 0a8e 1B02     		lsls	r3, r3, #8
 3089 0a90 03F47063 		and	r3, r3, #3840
 3090 0a94 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3091 0a96 1844     		add	r0, r0, r3
 3092 0a98 FFF7FEFF 		bl	__aeabi_i2d
 3093              	.LVL425:
 3094 0a9c 0022     		movs	r2, #0
 3095 0a9e 6E4B     		ldr	r3, .L185
 3096 0aa0 FFF7FEFF 		bl	__aeabi_dmul
 3097              	.LVL426:
 3098 0aa4 FFF7FEFF 		bl	__aeabi_d2uiz
 3099              	.LVL427:
 3100 0aa8 A5F8A400 		strh	r0, [r5, #164]	@ movhi
 714:Core/Src/bms.c ****         bms->cellVolt[83] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
ARM GAS  /tmp/ccBwmWIp.s 			page 71


 3101              		.loc 1 714 0
 3102 0aac 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3103 0aae 1B02     		lsls	r3, r3, #8
 3104 0ab0 03F47063 		and	r3, r3, #3840
 3105 0ab4 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3106 0ab6 1844     		add	r0, r0, r3
 3107 0ab8 FFF7FEFF 		bl	__aeabi_i2d
 3108              	.LVL428:
 3109 0abc 0022     		movs	r2, #0
 3110 0abe 664B     		ldr	r3, .L185
 3111 0ac0 FFF7FEFF 		bl	__aeabi_dmul
 3112              	.LVL429:
 3113 0ac4 FFF7FEFF 		bl	__aeabi_d2uiz
 3114              	.LVL430:
 3115 0ac8 A5F8A600 		strh	r0, [r5, #166]	@ movhi
 715:Core/Src/bms.c ****         break;
 3116              		.loc 1 715 0
 3117 0acc 38BD     		pop	{r3, r4, r5, pc}
 3118              	.LVL431:
 3119              	.L163:
 716:Core/Src/bms.c **** 
 717:Core/Src/bms.c ****     case 0x46D:
 718:Core/Src/bms.c ****         bms->cellVolt[84] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 3120              		.loc 1 718 0
 3121 0ace 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3122 0ad0 1B02     		lsls	r3, r3, #8
 3123 0ad2 03F47063 		and	r3, r3, #3840
 3124 0ad6 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3125              	.LVL432:
 3126 0ad8 1844     		add	r0, r0, r3
 3127 0ada FFF7FEFF 		bl	__aeabi_i2d
 3128              	.LVL433:
 3129 0ade 0022     		movs	r2, #0
 3130 0ae0 5D4B     		ldr	r3, .L185
 3131 0ae2 FFF7FEFF 		bl	__aeabi_dmul
 3132              	.LVL434:
 3133 0ae6 FFF7FEFF 		bl	__aeabi_d2uiz
 3134              	.LVL435:
 3135 0aea A5F8A800 		strh	r0, [r5, #168]	@ movhi
 719:Core/Src/bms.c ****         bms->cellVolt[85] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3136              		.loc 1 719 0
 3137 0aee A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3138 0af0 1B02     		lsls	r3, r3, #8
 3139 0af2 03F47063 		and	r3, r3, #3840
 3140 0af6 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3141 0af8 1844     		add	r0, r0, r3
 3142 0afa FFF7FEFF 		bl	__aeabi_i2d
 3143              	.LVL436:
 3144 0afe 0022     		movs	r2, #0
 3145 0b00 554B     		ldr	r3, .L185
 3146 0b02 FFF7FEFF 		bl	__aeabi_dmul
 3147              	.LVL437:
 3148 0b06 FFF7FEFF 		bl	__aeabi_d2uiz
 3149              	.LVL438:
 3150 0b0a A5F8AA00 		strh	r0, [r5, #170]	@ movhi
 720:Core/Src/bms.c ****         bms->cellVolt[86] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3151              		.loc 1 720 0
ARM GAS  /tmp/ccBwmWIp.s 			page 72


 3152 0b0e 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3153 0b10 1B02     		lsls	r3, r3, #8
 3154 0b12 03F47063 		and	r3, r3, #3840
 3155 0b16 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3156 0b18 1844     		add	r0, r0, r3
 3157 0b1a FFF7FEFF 		bl	__aeabi_i2d
 3158              	.LVL439:
 3159 0b1e 0022     		movs	r2, #0
 3160 0b20 4D4B     		ldr	r3, .L185
 3161 0b22 FFF7FEFF 		bl	__aeabi_dmul
 3162              	.LVL440:
 3163 0b26 FFF7FEFF 		bl	__aeabi_d2uiz
 3164              	.LVL441:
 3165 0b2a A5F8AC00 		strh	r0, [r5, #172]	@ movhi
 721:Core/Src/bms.c ****         break;
 3166              		.loc 1 721 0
 3167 0b2e 38BD     		pop	{r3, r4, r5, pc}
 3168              	.LVL442:
 3169              	.L176:
 722:Core/Src/bms.c **** 
 723:Core/Src/bms.c ****     case 0x47D:
 724:Core/Src/bms.c ****         bms->cellVolt[87] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 3170              		.loc 1 724 0
 3171 0b30 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3172 0b32 1B02     		lsls	r3, r3, #8
 3173 0b34 03F47063 		and	r3, r3, #3840
 3174 0b38 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3175              	.LVL443:
 3176 0b3a 1844     		add	r0, r0, r3
 3177 0b3c FFF7FEFF 		bl	__aeabi_i2d
 3178              	.LVL444:
 3179 0b40 0022     		movs	r2, #0
 3180 0b42 454B     		ldr	r3, .L185
 3181 0b44 FFF7FEFF 		bl	__aeabi_dmul
 3182              	.LVL445:
 3183 0b48 FFF7FEFF 		bl	__aeabi_d2uiz
 3184              	.LVL446:
 3185 0b4c A5F8AE00 		strh	r0, [r5, #174]	@ movhi
 725:Core/Src/bms.c ****         bms->cellVolt[88] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3186              		.loc 1 725 0
 3187 0b50 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3188 0b52 1B02     		lsls	r3, r3, #8
 3189 0b54 03F47063 		and	r3, r3, #3840
 3190 0b58 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3191 0b5a 1844     		add	r0, r0, r3
 3192 0b5c FFF7FEFF 		bl	__aeabi_i2d
 3193              	.LVL447:
 3194 0b60 0022     		movs	r2, #0
 3195 0b62 3D4B     		ldr	r3, .L185
 3196 0b64 FFF7FEFF 		bl	__aeabi_dmul
 3197              	.LVL448:
 3198 0b68 FFF7FEFF 		bl	__aeabi_d2uiz
 3199              	.LVL449:
 3200 0b6c A5F8B000 		strh	r0, [r5, #176]	@ movhi
 726:Core/Src/bms.c ****         bms->cellVolt[89] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3201              		.loc 1 726 0
 3202 0b70 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
ARM GAS  /tmp/ccBwmWIp.s 			page 73


 3203 0b72 1B02     		lsls	r3, r3, #8
 3204 0b74 03F47063 		and	r3, r3, #3840
 3205 0b78 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3206 0b7a 1844     		add	r0, r0, r3
 3207 0b7c FFF7FEFF 		bl	__aeabi_i2d
 3208              	.LVL450:
 3209 0b80 0022     		movs	r2, #0
 3210 0b82 354B     		ldr	r3, .L185
 3211 0b84 FFF7FEFF 		bl	__aeabi_dmul
 3212              	.LVL451:
 3213 0b88 FFF7FEFF 		bl	__aeabi_d2uiz
 3214              	.LVL452:
 3215 0b8c A5F8B200 		strh	r0, [r5, #178]	@ movhi
 727:Core/Src/bms.c ****         break;
 3216              		.loc 1 727 0
 3217 0b90 38BD     		pop	{r3, r4, r5, pc}
 3218              	.LVL453:
 3219              	.L164:
 728:Core/Src/bms.c **** 
 729:Core/Src/bms.c ****     case 0x46E:
 730:Core/Src/bms.c ****         bms->cellVolt[90] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 3220              		.loc 1 730 0
 3221 0b92 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3222 0b94 1B02     		lsls	r3, r3, #8
 3223 0b96 03F47063 		and	r3, r3, #3840
 3224 0b9a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3225              	.LVL454:
 3226 0b9c 1844     		add	r0, r0, r3
 3227 0b9e FFF7FEFF 		bl	__aeabi_i2d
 3228              	.LVL455:
 3229 0ba2 0022     		movs	r2, #0
 3230 0ba4 2C4B     		ldr	r3, .L185
 3231 0ba6 FFF7FEFF 		bl	__aeabi_dmul
 3232              	.LVL456:
 3233 0baa FFF7FEFF 		bl	__aeabi_d2uiz
 3234              	.LVL457:
 3235 0bae A5F8B400 		strh	r0, [r5, #180]	@ movhi
 731:Core/Src/bms.c ****         bms->cellVolt[91] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3236              		.loc 1 731 0
 3237 0bb2 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3238 0bb4 1B02     		lsls	r3, r3, #8
 3239 0bb6 03F47063 		and	r3, r3, #3840
 3240 0bba E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3241 0bbc 1844     		add	r0, r0, r3
 3242 0bbe FFF7FEFF 		bl	__aeabi_i2d
 3243              	.LVL458:
 3244 0bc2 0022     		movs	r2, #0
 3245 0bc4 244B     		ldr	r3, .L185
 3246 0bc6 FFF7FEFF 		bl	__aeabi_dmul
 3247              	.LVL459:
 3248 0bca FFF7FEFF 		bl	__aeabi_d2uiz
 3249              	.LVL460:
 3250 0bce A5F8B600 		strh	r0, [r5, #182]	@ movhi
 732:Core/Src/bms.c ****         bms->cellVolt[92] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3251              		.loc 1 732 0
 3252 0bd2 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3253 0bd4 1B02     		lsls	r3, r3, #8
ARM GAS  /tmp/ccBwmWIp.s 			page 74


 3254 0bd6 03F47063 		and	r3, r3, #3840
 3255 0bda 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3256 0bdc 1844     		add	r0, r0, r3
 3257 0bde FFF7FEFF 		bl	__aeabi_i2d
 3258              	.LVL461:
 3259 0be2 0022     		movs	r2, #0
 3260 0be4 1C4B     		ldr	r3, .L185
 3261 0be6 FFF7FEFF 		bl	__aeabi_dmul
 3262              	.LVL462:
 3263 0bea FFF7FEFF 		bl	__aeabi_d2uiz
 3264              	.LVL463:
 3265 0bee A5F8B800 		strh	r0, [r5, #184]	@ movhi
 733:Core/Src/bms.c ****         break;
 3266              		.loc 1 733 0
 3267 0bf2 38BD     		pop	{r3, r4, r5, pc}
 3268              	.LVL464:
 3269              	.L177:
 734:Core/Src/bms.c **** 
 735:Core/Src/bms.c ****     case 0x47E:
 736:Core/Src/bms.c ****         bms->cellVolt[93] = ((((canRx[0] & 0x0F) << 8) + canRx[1]) * 1.25);
 3270              		.loc 1 736 0
 3271 0bf4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3272 0bf6 1B02     		lsls	r3, r3, #8
 3273 0bf8 03F47063 		and	r3, r3, #3840
 3274 0bfc 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 3275              	.LVL465:
 3276 0bfe 1844     		add	r0, r0, r3
 3277 0c00 FFF7FEFF 		bl	__aeabi_i2d
 3278              	.LVL466:
 3279 0c04 0022     		movs	r2, #0
 3280 0c06 144B     		ldr	r3, .L185
 3281 0c08 FFF7FEFF 		bl	__aeabi_dmul
 3282              	.LVL467:
 3283 0c0c FFF7FEFF 		bl	__aeabi_d2uiz
 3284              	.LVL468:
 3285 0c10 A5F8BA00 		strh	r0, [r5, #186]	@ movhi
 737:Core/Src/bms.c ****         bms->cellVolt[94] = ((((canRx[2] & 0x0F) << 8) + canRx[3]) * 1.25);
 3286              		.loc 1 737 0
 3287 0c14 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 3288 0c16 1B02     		lsls	r3, r3, #8
 3289 0c18 03F47063 		and	r3, r3, #3840
 3290 0c1c E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 3291 0c1e 1844     		add	r0, r0, r3
 3292 0c20 FFF7FEFF 		bl	__aeabi_i2d
 3293              	.LVL469:
 3294 0c24 0022     		movs	r2, #0
 3295 0c26 0C4B     		ldr	r3, .L185
 3296 0c28 FFF7FEFF 		bl	__aeabi_dmul
 3297              	.LVL470:
 3298 0c2c FFF7FEFF 		bl	__aeabi_d2uiz
 3299              	.LVL471:
 3300 0c30 A5F8BC00 		strh	r0, [r5, #188]	@ movhi
 738:Core/Src/bms.c ****         bms->cellVolt[95] = ((((canRx[4] & 0x0F) << 8) + canRx[5]) * 1.25);
 3301              		.loc 1 738 0
 3302 0c34 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3303 0c36 1B02     		lsls	r3, r3, #8
 3304 0c38 03F47063 		and	r3, r3, #3840
ARM GAS  /tmp/ccBwmWIp.s 			page 75


 3305 0c3c 6079     		ldrb	r0, [r4, #5]	@ zero_extendqisi2
 3306 0c3e 1844     		add	r0, r0, r3
 3307 0c40 FFF7FEFF 		bl	__aeabi_i2d
 3308              	.LVL472:
 3309 0c44 0022     		movs	r2, #0
 3310 0c46 044B     		ldr	r3, .L185
 3311 0c48 FFF7FEFF 		bl	__aeabi_dmul
 3312              	.LVL473:
 3313 0c4c FFF7FEFF 		bl	__aeabi_d2uiz
 3314              	.LVL474:
 3315 0c50 A5F8BE00 		strh	r0, [r5, #190]	@ movhi
 3316              	.L149:
 3317 0c54 38BD     		pop	{r3, r4, r5, pc}
 3318              	.LVL475:
 3319              	.L186:
 3320 0c56 00BF     		.align	2
 3321              	.L185:
 3322 0c58 0000F43F 		.word	1072955392
 3323              		.cfi_endproc
 3324              	.LFE151:
 3326              		.section	.text.decodeTemp,"ax",%progbits
 3327              		.align	1
 3328              		.global	decodeTemp
 3329              		.syntax unified
 3330              		.thumb
 3331              		.thumb_func
 3332              		.fpu fpv4-sp-d16
 3334              	decodeTemp:
 3335              	.LFB152:
 739:Core/Src/bms.c ****         break;
 740:Core/Src/bms.c **** 
 741:Core/Src/bms.c ****     default:
 742:Core/Src/bms.c ****         break;
 743:Core/Src/bms.c ****     }
 744:Core/Src/bms.c **** }
 745:Core/Src/bms.c **** 
 746:Core/Src/bms.c **** void decodeTemp(bms_t *bms, CAN_RxHeaderTypeDef *rxMsg, uint8_t *canRx) // in degrees F x 100
 747:Core/Src/bms.c **** {
 3336              		.loc 1 747 0
 3337              		.cfi_startproc
 3338              		@ args = 0, pretend = 0, frame = 0
 3339              		@ frame_needed = 0, uses_anonymous_args = 0
 3340              		@ link register save eliminated.
 3341              	.LVL476:
 748:Core/Src/bms.c ****     switch (rxMsg->StdId)
 3342              		.loc 1 748 0
 3343 0000 0B68     		ldr	r3, [r1]
 3344 0002 A3F5FC63 		sub	r3, r3, #2016
 3345 0006 0E2B     		cmp	r3, #14
 3346 0008 00F28E80 		bhi	.L187
 3347 000c DFE803F0 		tbb	[pc, r3]
 3348              	.LVL477:
 3349              	.L190:
 3350 0010 08       		.byte	(.L189-.L190)/2
 3351 0011 14       		.byte	(.L191-.L190)/2
 3352 0012 20       		.byte	(.L192-.L190)/2
 3353 0013 2F       		.byte	(.L193-.L190)/2
ARM GAS  /tmp/ccBwmWIp.s 			page 76


 3354 0014 33       		.byte	(.L194-.L190)/2
 3355 0015 3F       		.byte	(.L195-.L190)/2
 3356 0016 4E       		.byte	(.L196-.L190)/2
 3357 0017 8C       		.byte	(.L187-.L190)/2
 3358 0018 52       		.byte	(.L197-.L190)/2
 3359 0019 5E       		.byte	(.L198-.L190)/2
 3360 001a 6D       		.byte	(.L199-.L190)/2
 3361 001b 8C       		.byte	(.L187-.L190)/2
 3362 001c 71       		.byte	(.L200-.L190)/2
 3363 001d 7D       		.byte	(.L201-.L190)/2
 3364 001e 89       		.byte	(.L202-.L190)/2
 3365 001f 00       		.p2align 1
 3366              	.L189:
 749:Core/Src/bms.c ****     {
 750:Core/Src/bms.c ****     case 0x7E0: //Begin module 1 temp sensors
 751:Core/Src/bms.c ****         bms->tempSensor[0] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3367              		.loc 1 751 0
 3368 0020 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3369 0022 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3370 0024 03EB0123 		add	r3, r3, r1, lsl #8
 3371 0028 A3EBC303 		sub	r3, r3, r3, lsl #3
 3372 002c 03F5E043 		add	r3, r3, #28672
 3373 0030 1C33     		adds	r3, r3, #28
 3374 0032 A0F8C030 		strh	r3, [r0, #192]	@ movhi
 752:Core/Src/bms.c ****         break;
 3375              		.loc 1 752 0
 3376 0036 7047     		bx	lr
 3377              	.L191:
 753:Core/Src/bms.c **** 
 754:Core/Src/bms.c ****     case 0x7E1:
 755:Core/Src/bms.c ****         bms->tempSensor[1] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3378              		.loc 1 755 0
 3379 0038 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3380 003a 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3381 003c 03EB0123 		add	r3, r3, r1, lsl #8
 3382 0040 A3EBC303 		sub	r3, r3, r3, lsl #3
 3383 0044 03F5E043 		add	r3, r3, #28672
 3384 0048 1C33     		adds	r3, r3, #28
 3385 004a A0F8C230 		strh	r3, [r0, #194]	@ movhi
 756:Core/Src/bms.c ****         break;
 3386              		.loc 1 756 0
 3387 004e 7047     		bx	lr
 3388              	.L192:
 757:Core/Src/bms.c **** 
 758:Core/Src/bms.c ****     case 0x7E2:
 759:Core/Src/bms.c ****         bms->tempSensor[2] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3389              		.loc 1 759 0
 3390 0050 0023     		movs	r3, #0
 3391 0052 A0F8C430 		strh	r3, [r0, #196]	@ movhi
 760:Core/Src/bms.c ****         bms->tempSensor[3] = -((((canRx[2] << 8) + canRx[3]) * 7) - 28700);
 3392              		.loc 1 760 0
 3393 0056 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 3394 0058 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 3395 005a 03EB0123 		add	r3, r3, r1, lsl #8
 3396 005e A3EBC303 		sub	r3, r3, r3, lsl #3
 3397 0062 03F5E043 		add	r3, r3, #28672
 3398 0066 1C33     		adds	r3, r3, #28
ARM GAS  /tmp/ccBwmWIp.s 			page 77


 3399 0068 A0F8C630 		strh	r3, [r0, #198]	@ movhi
 761:Core/Src/bms.c ****         break;
 3400              		.loc 1 761 0
 3401 006c 7047     		bx	lr
 3402              	.L193:
 762:Core/Src/bms.c **** 
 763:Core/Src/bms.c ****     case 0x7E3:
 764:Core/Src/bms.c ****         bms->tempSensor[4] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3403              		.loc 1 764 0
 3404 006e 0023     		movs	r3, #0
 3405 0070 A0F8C830 		strh	r3, [r0, #200]	@ movhi
 765:Core/Src/bms.c ****         break;
 3406              		.loc 1 765 0
 3407 0074 7047     		bx	lr
 3408              	.L194:
 766:Core/Src/bms.c **** 
 767:Core/Src/bms.c ****     case 0x7E4: //Begin module 2 temp sensors
 768:Core/Src/bms.c ****         bms->tempSensor[5] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3409              		.loc 1 768 0
 3410 0076 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3411 0078 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3412 007a 03EB0123 		add	r3, r3, r1, lsl #8
 3413 007e A3EBC303 		sub	r3, r3, r3, lsl #3
 3414 0082 03F5E043 		add	r3, r3, #28672
 3415 0086 1C33     		adds	r3, r3, #28
 3416 0088 A0F8CA30 		strh	r3, [r0, #202]	@ movhi
 769:Core/Src/bms.c ****         break;
 3417              		.loc 1 769 0
 3418 008c 7047     		bx	lr
 3419              	.L195:
 770:Core/Src/bms.c **** 
 771:Core/Src/bms.c ****     case 0x7E5:
 772:Core/Src/bms.c ****         bms->tempSensor[6] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3420              		.loc 1 772 0
 3421 008e 0023     		movs	r3, #0
 3422 0090 A0F8CC30 		strh	r3, [r0, #204]	@ movhi
 773:Core/Src/bms.c ****         bms->tempSensor[7] = -((((canRx[2] << 8) + canRx[3]) * 7) - 28700);
 3423              		.loc 1 773 0
 3424 0094 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 3425 0096 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 3426 0098 03EB0123 		add	r3, r3, r1, lsl #8
 3427 009c A3EBC303 		sub	r3, r3, r3, lsl #3
 3428 00a0 03F5E043 		add	r3, r3, #28672
 3429 00a4 1C33     		adds	r3, r3, #28
 3430 00a6 A0F8CE30 		strh	r3, [r0, #206]	@ movhi
 774:Core/Src/bms.c ****         break;
 3431              		.loc 1 774 0
 3432 00aa 7047     		bx	lr
 3433              	.L196:
 775:Core/Src/bms.c **** 
 776:Core/Src/bms.c ****     case 0x7E6:
 777:Core/Src/bms.c ****         bms->tempSensor[8] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3434              		.loc 1 777 0
 3435 00ac 0023     		movs	r3, #0
 3436 00ae A0F8D030 		strh	r3, [r0, #208]	@ movhi
 778:Core/Src/bms.c ****         break;
 3437              		.loc 1 778 0
ARM GAS  /tmp/ccBwmWIp.s 			page 78


 3438 00b2 7047     		bx	lr
 3439              	.L197:
 779:Core/Src/bms.c **** 
 780:Core/Src/bms.c ****     case 0x7E8: //Begin module 3 temp sensors
 781:Core/Src/bms.c ****         bms->tempSensor[9] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3440              		.loc 1 781 0
 3441 00b4 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3442 00b6 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3443 00b8 03EB0123 		add	r3, r3, r1, lsl #8
 3444 00bc A3EBC303 		sub	r3, r3, r3, lsl #3
 3445 00c0 03F5E043 		add	r3, r3, #28672
 3446 00c4 1C33     		adds	r3, r3, #28
 3447 00c6 A0F8D230 		strh	r3, [r0, #210]	@ movhi
 782:Core/Src/bms.c ****         break;
 3448              		.loc 1 782 0
 3449 00ca 7047     		bx	lr
 3450              	.L198:
 783:Core/Src/bms.c **** 
 784:Core/Src/bms.c ****     case 0x7E9:
 785:Core/Src/bms.c ****         bms->tempSensor[10] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3451              		.loc 1 785 0
 3452 00cc 0023     		movs	r3, #0
 3453 00ce A0F8D430 		strh	r3, [r0, #212]	@ movhi
 786:Core/Src/bms.c ****         bms->tempSensor[11] = -((((canRx[2] << 8) + canRx[3]) * 7) - 28700);
 3454              		.loc 1 786 0
 3455 00d2 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 3456 00d4 D378     		ldrb	r3, [r2, #3]	@ zero_extendqisi2
 3457 00d6 03EB0123 		add	r3, r3, r1, lsl #8
 3458 00da A3EBC303 		sub	r3, r3, r3, lsl #3
 3459 00de 03F5E043 		add	r3, r3, #28672
 3460 00e2 1C33     		adds	r3, r3, #28
 3461 00e4 A0F8D630 		strh	r3, [r0, #214]	@ movhi
 787:Core/Src/bms.c ****         break;
 3462              		.loc 1 787 0
 3463 00e8 7047     		bx	lr
 3464              	.L199:
 788:Core/Src/bms.c **** 
 789:Core/Src/bms.c ****     case 0x7EA:
 790:Core/Src/bms.c ****         bms->tempSensor[12] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3465              		.loc 1 790 0
 3466 00ea 0023     		movs	r3, #0
 3467 00ec A0F8D830 		strh	r3, [r0, #216]	@ movhi
 791:Core/Src/bms.c ****         break;
 3468              		.loc 1 791 0
 3469 00f0 7047     		bx	lr
 3470              	.L200:
 792:Core/Src/bms.c **** 
 793:Core/Src/bms.c ****     case 0x7EC: //Begin module 4 temp sensors
 794:Core/Src/bms.c ****         bms->tempSensor[13] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3471              		.loc 1 794 0
 3472 00f2 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3473 00f4 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3474 00f6 03EB0123 		add	r3, r3, r1, lsl #8
 3475 00fa A3EBC303 		sub	r3, r3, r3, lsl #3
 3476 00fe 03F5E043 		add	r3, r3, #28672
 3477 0102 1C33     		adds	r3, r3, #28
 3478 0104 A0F8DA30 		strh	r3, [r0, #218]	@ movhi
ARM GAS  /tmp/ccBwmWIp.s 			page 79


 795:Core/Src/bms.c ****         break;
 3479              		.loc 1 795 0
 3480 0108 7047     		bx	lr
 3481              	.L201:
 796:Core/Src/bms.c **** 
 797:Core/Src/bms.c ****     case 0x7ED:
 798:Core/Src/bms.c ****         bms->tempSensor[14] = -((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3482              		.loc 1 798 0
 3483 010a 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 3484 010c 5378     		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3485 010e 03EB0123 		add	r3, r3, r1, lsl #8
 3486 0112 A3EBC303 		sub	r3, r3, r3, lsl #3
 3487 0116 03F5E043 		add	r3, r3, #28672
 3488 011a 1C33     		adds	r3, r3, #28
 3489 011c A0F8DC30 		strh	r3, [r0, #220]	@ movhi
 799:Core/Src/bms.c ****         break;
 3490              		.loc 1 799 0
 3491 0120 7047     		bx	lr
 3492              	.L202:
 800:Core/Src/bms.c **** 
 801:Core/Src/bms.c ****     case 0x7EE:
 802:Core/Src/bms.c ****         bms->tempSensor[15] = 0; //-((((canRx[0] << 8) + canRx[1]) * 7) - 28700);
 3493              		.loc 1 802 0
 3494 0122 0023     		movs	r3, #0
 3495 0124 A0F8DE30 		strh	r3, [r0, #222]	@ movhi
 3496              	.L187:
 3497 0128 7047     		bx	lr
 3498              		.cfi_endproc
 3499              	.LFE152:
 3501              		.comm	charged,1,1
 3502              		.comm	vechicleState,1,1
 3503              		.comm	BMS,492,4
 3504              		.comm	txCycle3,4,4
 3505              		.comm	txCycle2,4,4
 3506              		.comm	txCycle,4,4
 3507              		.comm	canTx3,8,4
 3508              		.comm	canTx2,8,4
 3509              		.comm	canTx,8,4
 3510              		.comm	canMailbox2,4,4
 3511              		.comm	canMailbox,4,4
 3512              		.comm	canRx3,8,4
 3513              		.comm	canRx2,8,4
 3514              		.comm	canRx,8,4
 3515              		.comm	txMsgExt3,24,4
 3516              		.comm	txMsg3,24,4
 3517              		.comm	rxMsg3,28,4
 3518              		.comm	txMsgExt2,24,4
 3519              		.comm	txMsg2,24,4
 3520              		.comm	rxMsg2,28,4
 3521              		.comm	txMsgExt,24,4
 3522              		.comm	txMsg,24,4
 3523              		.comm	rxMsg,28,4
 3524              		.comm	sf5,40,4
 3525              		.comm	sf4,40,4
 3526              		.comm	sf3,40,4
 3527              		.comm	sf2,40,4
 3528              		.comm	sf,40,4
ARM GAS  /tmp/ccBwmWIp.s 			page 80


 3529              		.comm	hcan3,40,4
 3530              		.comm	hcan2,40,4
 3531              		.comm	hcan1,40,4
 3532              		.section	.rodata.balanceByte,"a",%progbits
 3533              		.align	2
 3534              		.set	.LANCHOR0,. + 0
 3537              	balanceByte:
 3538 0000 00       		.byte	0
 3539 0001 00       		.byte	0
 3540 0002 00       		.byte	0
 3541 0003 00       		.byte	0
 3542 0004 00       		.byte	0
 3543 0005 00       		.byte	0
 3544 0006 01       		.byte	1
 3545 0007 01       		.byte	1
 3546 0008 01       		.byte	1
 3547 0009 01       		.byte	1
 3548 000a 01       		.byte	1
 3549 000b 01       		.byte	1
 3550 000c 01       		.byte	1
 3551 000d 01       		.byte	1
 3552 000e 02       		.byte	2
 3553 000f 02       		.byte	2
 3554 0010 02       		.byte	2
 3555 0011 02       		.byte	2
 3556 0012 02       		.byte	2
 3557 0013 02       		.byte	2
 3558 0014 02       		.byte	2
 3559 0015 02       		.byte	2
 3560 0016 03       		.byte	3
 3561 0017 03       		.byte	3
 3562 0018 03       		.byte	3
 3563 0019 03       		.byte	3
 3564 001a 03       		.byte	3
 3565 001b 03       		.byte	3
 3566 001c 03       		.byte	3
 3567 001d 03       		.byte	3
 3568 001e 04       		.byte	4
 3569 001f 04       		.byte	4
 3570 0020 04       		.byte	4
 3571 0021 04       		.byte	4
 3572 0022 04       		.byte	4
 3573 0023 04       		.byte	4
 3574 0024 04       		.byte	4
 3575 0025 04       		.byte	4
 3576 0026 05       		.byte	5
 3577 0027 05       		.byte	5
 3578 0028 05       		.byte	5
 3579 0029 05       		.byte	5
 3580 002a 05       		.byte	5
 3581 002b 05       		.byte	5
 3582 002c 05       		.byte	5
 3583 002d 05       		.byte	5
 3584 002e 06       		.byte	6
 3585 002f 06       		.byte	6
 3586 0030 06       		.byte	6
 3587 0031 06       		.byte	6
ARM GAS  /tmp/ccBwmWIp.s 			page 81


 3588 0032 06       		.byte	6
 3589 0033 06       		.byte	6
 3590 0034 06       		.byte	6
 3591 0035 06       		.byte	6
 3592 0036 07       		.byte	7
 3593 0037 07       		.byte	7
 3594 0038 07       		.byte	7
 3595 0039 07       		.byte	7
 3596 003a 07       		.byte	7
 3597 003b 07       		.byte	7
 3598 003c 07       		.byte	7
 3599 003d 07       		.byte	7
 3600 003e 00       		.byte	0
 3601 003f 00       		.byte	0
 3602 0040 00       		.byte	0
 3603 0041 00       		.byte	0
 3604 0042 00       		.byte	0
 3605 0043 00       		.byte	0
 3606 0044 00       		.byte	0
 3607 0045 00       		.byte	0
 3608 0046 01       		.byte	1
 3609 0047 01       		.byte	1
 3610 0048 01       		.byte	1
 3611 0049 01       		.byte	1
 3612 004a 01       		.byte	1
 3613 004b 01       		.byte	1
 3614 004c 01       		.byte	1
 3615 004d 01       		.byte	1
 3616 004e 02       		.byte	2
 3617 004f 02       		.byte	2
 3618 0050 02       		.byte	2
 3619 0051 02       		.byte	2
 3620 0052 02       		.byte	2
 3621 0053 02       		.byte	2
 3622 0054 03       		.byte	3
 3623 0055 03       		.byte	3
 3624 0056 03       		.byte	3
 3625 0057 03       		.byte	3
 3626 0058 03       		.byte	3
 3627 0059 03       		.byte	3
 3628 005a 04       		.byte	4
 3629 005b 04       		.byte	4
 3630 005c 04       		.byte	4
 3631 005d 04       		.byte	4
 3632 005e 04       		.byte	4
 3633 005f 04       		.byte	4
 3634              		.section	.rodata.balanceShift,"a",%progbits
 3635              		.align	2
 3636              		.set	.LANCHOR1,. + 0
 3639              	balanceShift:
 3640 0000 01       		.byte	1
 3641 0001 02       		.byte	2
 3642 0002 04       		.byte	4
 3643 0003 08       		.byte	8
 3644 0004 0A       		.byte	10
 3645 0005 14       		.byte	20
 3646 0006 01       		.byte	1
ARM GAS  /tmp/ccBwmWIp.s 			page 82


 3647 0007 02       		.byte	2
 3648 0008 04       		.byte	4
 3649 0009 08       		.byte	8
 3650 000a 0A       		.byte	10
 3651 000b 14       		.byte	20
 3652 000c 28       		.byte	40
 3653 000d 50       		.byte	80
 3654 000e 01       		.byte	1
 3655 000f 02       		.byte	2
 3656 0010 04       		.byte	4
 3657 0011 08       		.byte	8
 3658 0012 0A       		.byte	10
 3659 0013 14       		.byte	20
 3660 0014 28       		.byte	40
 3661 0015 50       		.byte	80
 3662 0016 01       		.byte	1
 3663 0017 02       		.byte	2
 3664 0018 04       		.byte	4
 3665 0019 08       		.byte	8
 3666 001a 0A       		.byte	10
 3667 001b 14       		.byte	20
 3668 001c 28       		.byte	40
 3669 001d 50       		.byte	80
 3670 001e 01       		.byte	1
 3671 001f 02       		.byte	2
 3672 0020 04       		.byte	4
 3673 0021 08       		.byte	8
 3674 0022 0A       		.byte	10
 3675 0023 14       		.byte	20
 3676 0024 28       		.byte	40
 3677 0025 50       		.byte	80
 3678 0026 01       		.byte	1
 3679 0027 02       		.byte	2
 3680 0028 04       		.byte	4
 3681 0029 08       		.byte	8
 3682 002a 0A       		.byte	10
 3683 002b 14       		.byte	20
 3684 002c 28       		.byte	40
 3685 002d 50       		.byte	80
 3686 002e 01       		.byte	1
 3687 002f 02       		.byte	2
 3688 0030 04       		.byte	4
 3689 0031 08       		.byte	8
 3690 0032 0A       		.byte	10
 3691 0033 14       		.byte	20
 3692 0034 28       		.byte	40
 3693 0035 50       		.byte	80
 3694 0036 01       		.byte	1
 3695 0037 02       		.byte	2
 3696 0038 04       		.byte	4
 3697 0039 08       		.byte	8
 3698 003a 0A       		.byte	10
 3699 003b 14       		.byte	20
 3700 003c 28       		.byte	40
 3701 003d 50       		.byte	80
 3702 003e 01       		.byte	1
 3703 003f 02       		.byte	2
ARM GAS  /tmp/ccBwmWIp.s 			page 83


 3704 0040 04       		.byte	4
 3705 0041 08       		.byte	8
 3706 0042 0A       		.byte	10
 3707 0043 14       		.byte	20
 3708 0044 28       		.byte	40
 3709 0045 50       		.byte	80
 3710 0046 01       		.byte	1
 3711 0047 02       		.byte	2
 3712 0048 04       		.byte	4
 3713 0049 08       		.byte	8
 3714 004a 0A       		.byte	10
 3715 004b 14       		.byte	20
 3716 004c 28       		.byte	40
 3717 004d 50       		.byte	80
 3718 004e 01       		.byte	1
 3719 004f 02       		.byte	2
 3720 0050 04       		.byte	4
 3721 0051 08       		.byte	8
 3722 0052 0A       		.byte	10
 3723 0053 14       		.byte	20
 3724 0054 01       		.byte	1
 3725 0055 02       		.byte	2
 3726 0056 04       		.byte	4
 3727 0057 08       		.byte	8
 3728 0058 0A       		.byte	10
 3729 0059 14       		.byte	20
 3730 005a 01       		.byte	1
 3731 005b 02       		.byte	2
 3732 005c 04       		.byte	4
 3733 005d 08       		.byte	8
 3734 005e 0A       		.byte	10
 3735 005f 14       		.byte	20
 3736              		.text
 3737              	.Letext0:
 3738              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3739              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3740              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 3741              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3742              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 3743              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3744              		.file 8 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3745              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 3746              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 3747              		.file 11 "/usr/include/newlib/sys/lock.h"
 3748              		.file 12 "/usr/include/newlib/sys/_types.h"
 3749              		.file 13 "/usr/include/newlib/sys/reent.h"
 3750              		.file 14 "Core/Inc/can_setup.h"
 3751              		.file 15 "Core/Inc/bms.h"
ARM GAS  /tmp/ccBwmWIp.s 			page 84


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bms.c
     /tmp/ccBwmWIp.s:18     .text.getSOC:0000000000000000 $t
     /tmp/ccBwmWIp.s:24     .text.getSOC:0000000000000000 getSOC
     /tmp/ccBwmWIp.s:48     .text.getSOC:0000000000000024 $d
     /tmp/ccBwmWIp.s:53     .text.getHighCellVolt:0000000000000000 $t
     /tmp/ccBwmWIp.s:59     .text.getHighCellVolt:0000000000000000 getHighCellVolt
     /tmp/ccBwmWIp.s:99     .text.getHighCellTemp:0000000000000000 $t
     /tmp/ccBwmWIp.s:105    .text.getHighCellTemp:0000000000000000 getHighCellTemp
     /tmp/ccBwmWIp.s:146    .text.getLowCellTemp:0000000000000000 $t
     /tmp/ccBwmWIp.s:152    .text.getLowCellTemp:0000000000000000 getLowCellTemp
     /tmp/ccBwmWIp.s:197    .text.getAvgCellTemp:0000000000000000 $t
     /tmp/ccBwmWIp.s:203    .text.getAvgCellTemp:0000000000000000 getAvgCellTemp
     /tmp/ccBwmWIp.s:266    .text.getTempDelta:0000000000000000 $t
     /tmp/ccBwmWIp.s:272    .text.getTempDelta:0000000000000000 getTempDelta
     /tmp/ccBwmWIp.s:290    .text.getCellDelta:0000000000000000 $t
     /tmp/ccBwmWIp.s:296    .text.getCellDelta:0000000000000000 getCellDelta
     /tmp/ccBwmWIp.s:314    .text.getLowCellVolt:0000000000000000 $t
     /tmp/ccBwmWIp.s:320    .text.getLowCellVolt:0000000000000000 getLowCellVolt
     /tmp/ccBwmWIp.s:361    .text.getAvgCellVolt:0000000000000000 $t
     /tmp/ccBwmWIp.s:367    .text.getAvgCellVolt:0000000000000000 getAvgCellVolt
     /tmp/ccBwmWIp.s:409    .text.getAvgCellVolt:0000000000000024 $d
     /tmp/ccBwmWIp.s:414    .text.getPackVolt:0000000000000000 $t
     /tmp/ccBwmWIp.s:420    .text.getPackVolt:0000000000000000 getPackVolt
     /tmp/ccBwmWIp.s:462    .text.getPackVolt:0000000000000020 $d
     /tmp/ccBwmWIp.s:467    .text.getCellCount:0000000000000000 $t
     /tmp/ccBwmWIp.s:473    .text.getCellCount:0000000000000000 getCellCount
     /tmp/ccBwmWIp.s:538    .text.getCellCount:0000000000000038 $d
                            *COM*:00000000000001ec BMS
     /tmp/ccBwmWIp.s:543    .text.initBMS:0000000000000000 $t
     /tmp/ccBwmWIp.s:550    .text.initBMS:0000000000000000 initBMS
     /tmp/ccBwmWIp.s:677    .text.initBMS:0000000000000098 $d
                            *COM*:0000000000000001 vechicleState
                            *COM*:0000000000000001 charged
     /tmp/ccBwmWIp.s:686    .text.bmsStateHandler:0000000000000000 $t
     /tmp/ccBwmWIp.s:693    .text.bmsStateHandler:0000000000000000 bmsStateHandler
     /tmp/ccBwmWIp.s:713    .text.bmsStateHandler:000000000000000e $d
     /tmp/ccBwmWIp.s:844    .text.bmsStateHandler:00000000000000ec $d
     /tmp/ccBwmWIp.s:851    .text.acChargeCommand:0000000000000000 $t
     /tmp/ccBwmWIp.s:858    .text.acChargeCommand:0000000000000000 acChargeCommand
     /tmp/ccBwmWIp.s:969    .text.acChargeCommand:0000000000000084 $d
                            *COM*:0000000000000018 txMsg2
                            *COM*:0000000000000008 canTx2
     /tmp/ccBwmWIp.s:978    .text.tx500kData:0000000000000000 $t
     /tmp/ccBwmWIp.s:985    .text.tx500kData:0000000000000000 tx500kData
     /tmp/ccBwmWIp.s:1069   .text.tx500kData:0000000000000090 $d
     /tmp/ccBwmWIp.s:1074   .text.sendCommand:0000000000000000 $t
     /tmp/ccBwmWIp.s:1081   .text.sendCommand:0000000000000000 sendCommand
     /tmp/ccBwmWIp.s:1134   .text.sendCommand:0000000000000034 $d
                            *COM*:0000000000000018 txMsg
                            *COM*:0000000000000008 canTx
                            *COM*:0000000000000018 txMsg3
                            *COM*:0000000000000008 canTx3
     /tmp/ccBwmWIp.s:1142   .text.requestBICMdata:0000000000000000 $t
     /tmp/ccBwmWIp.s:1149   .text.requestBICMdata:0000000000000000 requestBICMdata
     /tmp/ccBwmWIp.s:1304   .text.requestBICMdata:00000000000000a8 $d
     /tmp/ccBwmWIp.s:1312   .text.refreshData:0000000000000000 $t
ARM GAS  /tmp/ccBwmWIp.s 			page 85


     /tmp/ccBwmWIp.s:1319   .text.refreshData:0000000000000000 refreshData
     /tmp/ccBwmWIp.s:1408   .text.refreshData:0000000000000064 $d
     /tmp/ccBwmWIp.s:1413   .text.balanceCommand:0000000000000000 $t
     /tmp/ccBwmWIp.s:1420   .text.balanceCommand:0000000000000000 balanceCommand
     /tmp/ccBwmWIp.s:1625   .text.balanceCommand:0000000000000104 $d
     /tmp/ccBwmWIp.s:1635   .text.vehicleComms:0000000000000000 $t
     /tmp/ccBwmWIp.s:1642   .text.vehicleComms:0000000000000000 vehicleComms
     /tmp/ccBwmWIp.s:1664   .text.vehicleComms:0000000000000014 $d
     /tmp/ccBwmWIp.s:1671   .text.decodeVolt:0000000000000000 $t
     /tmp/ccBwmWIp.s:1678   .text.decodeVolt:0000000000000000 decodeVolt
     /tmp/ccBwmWIp.s:1702   .text.decodeVolt:0000000000000016 $d
     /tmp/ccBwmWIp.s:1733   .text.decodeVolt:0000000000000054 $t
     /tmp/ccBwmWIp.s:2162   .text.decodeVolt:0000000000000370 $d
     /tmp/ccBwmWIp.s:2166   .text.decodeVolt:0000000000000374 $t
     /tmp/ccBwmWIp.s:2557   .text.decodeVolt:0000000000000674 $d
     /tmp/ccBwmWIp.s:2561   .text.decodeVolt:0000000000000678 $t
     /tmp/ccBwmWIp.s:2952   .text.decodeVolt:0000000000000984 $d
     /tmp/ccBwmWIp.s:2956   .text.decodeVolt:0000000000000988 $t
     /tmp/ccBwmWIp.s:3322   .text.decodeVolt:0000000000000c58 $d
     /tmp/ccBwmWIp.s:3327   .text.decodeTemp:0000000000000000 $t
     /tmp/ccBwmWIp.s:3334   .text.decodeTemp:0000000000000000 decodeTemp
     /tmp/ccBwmWIp.s:3350   .text.decodeTemp:0000000000000010 $d
                            *COM*:0000000000000004 txCycle3
                            *COM*:0000000000000004 txCycle2
                            *COM*:0000000000000004 txCycle
                            *COM*:0000000000000004 canMailbox2
                            *COM*:0000000000000004 canMailbox
                            *COM*:0000000000000008 canRx3
                            *COM*:0000000000000008 canRx2
                            *COM*:0000000000000008 canRx
                            *COM*:0000000000000018 txMsgExt3
                            *COM*:000000000000001c rxMsg3
                            *COM*:0000000000000018 txMsgExt2
                            *COM*:000000000000001c rxMsg2
                            *COM*:0000000000000018 txMsgExt
                            *COM*:000000000000001c rxMsg
                            *COM*:0000000000000028 sf5
                            *COM*:0000000000000028 sf4
                            *COM*:0000000000000028 sf3
                            *COM*:0000000000000028 sf2
                            *COM*:0000000000000028 sf
                            *COM*:0000000000000028 hcan3
                            *COM*:0000000000000028 hcan2
                            *COM*:0000000000000028 hcan1
     /tmp/ccBwmWIp.s:3533   .rodata.balanceByte:0000000000000000 $d
     /tmp/ccBwmWIp.s:3537   .rodata.balanceByte:0000000000000000 balanceByte
     /tmp/ccBwmWIp.s:3635   .rodata.balanceShift:0000000000000000 $d
     /tmp/ccBwmWIp.s:3639   .rodata.balanceShift:0000000000000000 balanceShift
                     .debug_frame:0000000000000010 $d
     /tmp/ccBwmWIp.s:718    .text.bmsStateHandler:0000000000000013 $d
     /tmp/ccBwmWIp.s:718    .text.bmsStateHandler:0000000000000014 $t
     /tmp/ccBwmWIp.s:3365   .text.decodeTemp:000000000000001f $d
     /tmp/ccBwmWIp.s:3365   .text.decodeTemp:0000000000000020 $t

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_dcmpgt
ARM GAS  /tmp/ccBwmWIp.s 			page 86


c2tx
can2tx
c1tx
c3tx
__aeabi_dmul
__aeabi_d2uiz
