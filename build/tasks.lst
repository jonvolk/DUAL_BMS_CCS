ARM GAS  /tmp/ccJO9w1Z.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB16:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/ccJO9w1Z.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
ARM GAS  /tmp/ccJO9w1Z.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
ARM GAS  /tmp/ccJO9w1Z.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
ARM GAS  /tmp/ccJO9w1Z.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
ARM GAS  /tmp/ccJO9w1Z.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
ARM GAS  /tmp/ccJO9w1Z.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccJO9w1Z.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  /tmp/ccJO9w1Z.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
ARM GAS  /tmp/ccJO9w1Z.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
ARM GAS  /tmp/ccJO9w1Z.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccJO9w1Z.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
ARM GAS  /tmp/ccJO9w1Z.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  /tmp/ccJO9w1Z.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccJO9w1Z.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccJO9w1Z.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
ARM GAS  /tmp/ccJO9w1Z.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
ARM GAS  /tmp/ccJO9w1Z.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
ARM GAS  /tmp/ccJO9w1Z.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
ARM GAS  /tmp/ccJO9w1Z.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
ARM GAS  /tmp/ccJO9w1Z.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
ARM GAS  /tmp/ccJO9w1Z.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
ARM GAS  /tmp/ccJO9w1Z.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  /tmp/ccJO9w1Z.s 			page 32


1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1798 0
ARM GAS  /tmp/ccJO9w1Z.s 			page 33


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1806 0
  34 0000 28B1     		cbz	r0, .L8
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1809 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0C4A     		ldr	r2, .L10
  38 0006 9142     		cmp	r1, r2
  39 0008 0AD0     		beq	.L9
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  40              		.loc 1 1799 0
  41 000a 0020     		movs	r0, #0
  42              	.LVL1:
  43 000c 7047     		bx	lr
  44              	.LVL2:
  45              	.L8:
  46              	.LBB117:
  47              	.LBB118:
  48              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  /tmp/ccJO9w1Z.s 			page 34


  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
ARM GAS  /tmp/ccJO9w1Z.s 			page 35


  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
ARM GAS  /tmp/ccJO9w1Z.s 			page 36


 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
ARM GAS  /tmp/ccJO9w1Z.s 			page 37


  49              		.loc 2 195 0
  50              		.syntax unified
  51              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  52 000e 4FF05003 			mov r3, #80												
  53 0012 83F31188 		msr basepri, r3											
  54 0016 BFF36F8F 		isb														
  55 001a BFF34F8F 		dsb														
  56              	
  57              	@ 0 "" 2
  58              	.LVL3:
  59              		.thumb
  60              		.syntax unified
  61              	.L3:
  62 001e FEE7     		b	.L3
  63              	.L9:
  64              	.LBE118:
  65              	.LBE117:
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  66              		.loc 1 1812 0
  67 0020 836A     		ldr	r3, [r0, #40]
  68 0022 064A     		ldr	r2, .L10+4
  69 0024 9342     		cmp	r3, r2
  70 0026 02D0     		beq	.L6
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  71              		.loc 1 1816 0
  72 0028 1BB1     		cbz	r3, .L7
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  73              		.loc 1 1799 0
  74 002a 0020     		movs	r0, #0
  75              	.LVL4:
  76 002c 7047     		bx	lr
  77              	.LVL5:
  78              	.L6:
  79 002e 0020     		movs	r0, #0
  80              	.LVL6:
  81 0030 7047     		bx	lr
  82              	.LVL7:
  83              	.L7:
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  84              		.loc 1 1818 0
  85 0032 0120     		movs	r0, #1
  86              	.LVL8:
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccJO9w1Z.s 			page 38


1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  87              		.loc 1 1836 0
  88 0034 7047     		bx	lr
  89              	.L11:
  90 0036 00BF     		.align	2
  91              	.L10:
  92 0038 00000000 		.word	.LANCHOR0
  93 003c 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE16:
  97              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	prvTaskCheckFreeStackSpace:
 105              	.LFB46:
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccJO9w1Z.s 			page 39


1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccJO9w1Z.s 			page 40


1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
ARM GAS  /tmp/ccJO9w1Z.s 			page 41


1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
ARM GAS  /tmp/ccJO9w1Z.s 			page 42


2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
ARM GAS  /tmp/ccJO9w1Z.s 			page 43


2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
ARM GAS  /tmp/ccJO9w1Z.s 			page 44


2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
ARM GAS  /tmp/ccJO9w1Z.s 			page 45


2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccJO9w1Z.s 			page 46


2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccJO9w1Z.s 			page 47


2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccJO9w1Z.s 			page 48


2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccJO9w1Z.s 			page 49


2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
ARM GAS  /tmp/ccJO9w1Z.s 			page 50


2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
ARM GAS  /tmp/ccJO9w1Z.s 			page 51


2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
ARM GAS  /tmp/ccJO9w1Z.s 			page 52


2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
ARM GAS  /tmp/ccJO9w1Z.s 			page 53


2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccJO9w1Z.s 			page 54


2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
ARM GAS  /tmp/ccJO9w1Z.s 			page 55


2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 56


2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccJO9w1Z.s 			page 57


2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccJO9w1Z.s 			page 58


2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/ccJO9w1Z.s 			page 59


3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccJO9w1Z.s 			page 60


3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  /tmp/ccJO9w1Z.s 			page 61


3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 62


3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
ARM GAS  /tmp/ccJO9w1Z.s 			page 63


3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
ARM GAS  /tmp/ccJO9w1Z.s 			page 64


3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
ARM GAS  /tmp/ccJO9w1Z.s 			page 65


3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
ARM GAS  /tmp/ccJO9w1Z.s 			page 66


3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccJO9w1Z.s 			page 67


3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccJO9w1Z.s 			page 68


3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 69


3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
ARM GAS  /tmp/ccJO9w1Z.s 			page 70


3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccJO9w1Z.s 			page 71


3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 106              		.loc 1 3739 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 111              	.LVL9:
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 112              		.loc 1 3740 0
 113 0000 0023     		movs	r3, #0
ARM GAS  /tmp/ccJO9w1Z.s 			page 72


3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 114              		.loc 1 3742 0
 115 0002 01E0     		b	.L13
 116              	.LVL10:
 117              	.L14:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 118              		.loc 1 3744 0
 119 0004 0130     		adds	r0, r0, #1
 120              	.LVL11:
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 121              		.loc 1 3745 0
 122 0006 0133     		adds	r3, r3, #1
 123              	.LVL12:
 124              	.L13:
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 125              		.loc 1 3742 0
 126 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 127 000a A52A     		cmp	r2, #165
 128 000c FAD0     		beq	.L14
 129              	.LVL13:
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 130              		.loc 1 3751 0
 131 000e C3F38F00 		ubfx	r0, r3, #2, #16
 132              	.LVL14:
 133 0012 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE46:
 137              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 138              		.align	1
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv4-sp-d16
 144              	prvResetNextTaskUnblockTime:
 145              	.LFB49:
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
ARM GAS  /tmp/ccJO9w1Z.s 			page 73


3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 74


3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
ARM GAS  /tmp/ccJO9w1Z.s 			page 75


3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 146              		.loc 1 3881 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 151              		.loc 1 3884 0
 152 0000 084B     		ldr	r3, .L19
 153 0002 1B68     		ldr	r3, [r3]
 154 0004 1B68     		ldr	r3, [r3]
 155 0006 3BB1     		cbz	r3, .L18
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 156              		.loc 1 3898 0
 157 0008 064B     		ldr	r3, .L19
 158 000a 1B68     		ldr	r3, [r3]
 159 000c DB68     		ldr	r3, [r3, #12]
 160 000e DB68     		ldr	r3, [r3, #12]
 161              	.LVL15:
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 162              		.loc 1 3899 0
 163 0010 5A68     		ldr	r2, [r3, #4]
 164 0012 054B     		ldr	r3, .L19+4
 165              	.LVL16:
 166 0014 1A60     		str	r2, [r3]
 167 0016 7047     		bx	lr
 168              	.L18:
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 169              		.loc 1 3890 0
 170 0018 4FF0FF32 		mov	r2, #-1
 171 001c 024B     		ldr	r3, .L19+4
 172 001e 1A60     		str	r2, [r3]
 173 0020 7047     		bx	lr
 174              	.L20:
 175 0022 00BF     		.align	2
 176              	.L19:
 177 0024 00000000 		.word	.LANCHOR2
 178 0028 00000000 		.word	.LANCHOR3
 179              		.cfi_endproc
 180              	.LFE49:
 182              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 183              		.align	1
ARM GAS  /tmp/ccJO9w1Z.s 			page 76


 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu fpv4-sp-d16
 189              	prvInitialiseNewTask:
 190              	.LFB6:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 191              		.loc 1 829 0
 192              		.cfi_startproc
 193              		@ args = 16, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              	.LVL17:
 196 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 197              	.LCFI0:
 198              		.cfi_def_cfa_offset 32
 199              		.cfi_offset 4, -32
 200              		.cfi_offset 5, -28
 201              		.cfi_offset 6, -24
 202              		.cfi_offset 7, -20
 203              		.cfi_offset 8, -16
 204              		.cfi_offset 9, -12
 205              		.cfi_offset 10, -8
 206              		.cfi_offset 14, -4
 207 0004 8146     		mov	r9, r0
 208 0006 0D46     		mov	r5, r1
 209 0008 1746     		mov	r7, r2
 210 000a 9A46     		mov	r10, r3
 211 000c 089E     		ldr	r6, [sp, #32]
 212 000e DDF82480 		ldr	r8, [sp, #36]
 213 0012 0A9C     		ldr	r4, [sp, #40]
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 214              		.loc 1 851 0
 215 0014 9200     		lsls	r2, r2, #2
 216              	.LVL18:
 217 0016 A521     		movs	r1, #165
 218              	.LVL19:
 219 0018 206B     		ldr	r0, [r4, #48]
 220              	.LVL20:
 221 001a FFF7FEFF 		bl	memset
 222              	.LVL21:
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 223              		.loc 1 861 0
 224 001e 236B     		ldr	r3, [r4, #48]
 225 0020 07F18042 		add	r2, r7, #1073741824
 226 0024 013A     		subs	r2, r2, #1
 227 0026 03EB8207 		add	r7, r3, r2, lsl #2
 228              	.LVL22:
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229              		.loc 1 862 0
 230 002a 27F00707 		bic	r7, r7, #7
 231              	.LVL23:
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 232              		.loc 1 889 0
 233 002e 85B3     		cbz	r5, .L33
 234 0030 0023     		movs	r3, #0
 235              	.LVL24:
 236              	.L22:
ARM GAS  /tmp/ccJO9w1Z.s 			page 77


 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 237              		.loc 1 891 0 discriminator 1
 238 0032 0F2B     		cmp	r3, #15
 239 0034 07D8     		bhi	.L24
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 240              		.loc 1 893 0
 241 0036 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 242 0038 E218     		adds	r2, r4, r3
 243 003a 82F83410 		strb	r1, [r2, #52]
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 244              		.loc 1 898 0
 245 003e EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 246 0040 0AB1     		cbz	r2, .L24
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 247              		.loc 1 891 0 discriminator 2
 248 0042 0133     		adds	r3, r3, #1
 249              	.LVL25:
 250 0044 F5E7     		b	.L22
 251              	.L24:
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 252              		.loc 1 910 0
 253 0046 0023     		movs	r3, #0
 254              	.LVL26:
 255 0048 84F84330 		strb	r3, [r4, #67]
 256              	.L26:
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 257              		.loc 1 921 0
 258 004c 372E     		cmp	r6, #55
 259 004e 00D9     		bls	.L27
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 260              		.loc 1 923 0
 261 0050 3726     		movs	r6, #55
 262              	.L27:
 263              	.LVL27:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 264              		.loc 1 930 0
 265 0052 E662     		str	r6, [r4, #44]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 266              		.loc 1 933 0
 267 0054 E664     		str	r6, [r4, #76]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 268              		.loc 1 934 0
 269 0056 0025     		movs	r5, #0
 270              	.LVL28:
 271 0058 2565     		str	r5, [r4, #80]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 272              		.loc 1 938 0
 273 005a 201D     		adds	r0, r4, #4
 274 005c FFF7FEFF 		bl	vListInitialiseItem
 275              	.LVL29:
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 276              		.loc 1 939 0
 277 0060 04F11800 		add	r0, r4, #24
 278 0064 FFF7FEFF 		bl	vListInitialiseItem
 279              	.LVL30:
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 280              		.loc 1 943 0
ARM GAS  /tmp/ccJO9w1Z.s 			page 78


 281 0068 2461     		str	r4, [r4, #16]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 282              		.loc 1 946 0
 283 006a C6F13806 		rsb	r6, r6, #56
 284              	.LVL31:
 285 006e A661     		str	r6, [r4, #24]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 286              		.loc 1 947 0
 287 0070 6462     		str	r4, [r4, #36]
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 288              		.loc 1 989 0
 289 0072 6565     		str	r5, [r4, #84]
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 290              		.loc 1 990 0
 291 0074 84F85850 		strb	r5, [r4, #88]
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 292              		.loc 1 1053 0
 293 0078 5246     		mov	r2, r10
 294 007a 4946     		mov	r1, r9
 295 007c 3846     		mov	r0, r7
 296 007e FFF7FEFF 		bl	pxPortInitialiseStack
 297              	.LVL32:
 298 0082 2060     		str	r0, [r4]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 299              		.loc 1 1059 0
 300 0084 B8F1000F 		cmp	r8, #0
 301 0088 01D0     		beq	.L21
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 302              		.loc 1 1063 0
 303 008a C8F80040 		str	r4, [r8]
 304              	.L21:
 305 008e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 306              	.LVL33:
 307              	.L33:
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 308              		.loc 1 916 0
 309 0092 0023     		movs	r3, #0
 310 0094 84F83430 		strb	r3, [r4, #52]
 311 0098 D8E7     		b	.L26
 312              		.cfi_endproc
 313              	.LFE6:
 315              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 316              		.align	1
 317              		.syntax unified
 318              		.thumb
 319              		.thumb_func
 320              		.fpu fpv4-sp-d16
 322              	prvInitialiseTaskLists:
 323              	.LFB42:
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 324              		.loc 1 3547 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328 0000 38B5     		push	{r3, r4, r5, lr}
 329              	.LCFI1:
 330              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccJO9w1Z.s 			page 79


 331              		.cfi_offset 3, -16
 332              		.cfi_offset 4, -12
 333              		.cfi_offset 5, -8
 334              		.cfi_offset 14, -4
 335              	.LVL34:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 336              		.loc 1 3550 0
 337 0002 0024     		movs	r4, #0
 338 0004 07E0     		b	.L35
 339              	.LVL35:
 340              	.L36:
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 341              		.loc 1 3552 0 discriminator 3
 342 0006 04EB8402 		add	r2, r4, r4, lsl #2
 343 000a 9300     		lsls	r3, r2, #2
 344 000c 0E48     		ldr	r0, .L38
 345 000e 1844     		add	r0, r0, r3
 346 0010 FFF7FEFF 		bl	vListInitialise
 347              	.LVL36:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 348              		.loc 1 3550 0 discriminator 3
 349 0014 0134     		adds	r4, r4, #1
 350              	.LVL37:
 351              	.L35:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 352              		.loc 1 3550 0 is_stmt 0 discriminator 1
 353 0016 372C     		cmp	r4, #55
 354 0018 F5D9     		bls	.L36
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 355              		.loc 1 3555 0 is_stmt 1
 356 001a 0C4D     		ldr	r5, .L38+4
 357 001c 2846     		mov	r0, r5
 358 001e FFF7FEFF 		bl	vListInitialise
 359              	.LVL38:
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 360              		.loc 1 3556 0
 361 0022 0B4C     		ldr	r4, .L38+8
 362              	.LVL39:
 363 0024 2046     		mov	r0, r4
 364 0026 FFF7FEFF 		bl	vListInitialise
 365              	.LVL40:
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366              		.loc 1 3557 0
 367 002a 0A48     		ldr	r0, .L38+12
 368 002c FFF7FEFF 		bl	vListInitialise
 369              	.LVL41:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 370              		.loc 1 3561 0
 371 0030 0948     		ldr	r0, .L38+16
 372 0032 FFF7FEFF 		bl	vListInitialise
 373              	.LVL42:
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 374              		.loc 1 3567 0
 375 0036 0948     		ldr	r0, .L38+20
 376 0038 FFF7FEFF 		bl	vListInitialise
 377              	.LVL43:
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
ARM GAS  /tmp/ccJO9w1Z.s 			page 80


 378              		.loc 1 3573 0
 379 003c 084B     		ldr	r3, .L38+24
 380 003e 1D60     		str	r5, [r3]
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 381              		.loc 1 3574 0
 382 0040 084B     		ldr	r3, .L38+28
 383 0042 1C60     		str	r4, [r3]
 384 0044 38BD     		pop	{r3, r4, r5, pc}
 385              	.L39:
 386 0046 00BF     		.align	2
 387              	.L38:
 388 0048 00000000 		.word	.LANCHOR4
 389 004c 00000000 		.word	.LANCHOR5
 390 0050 00000000 		.word	.LANCHOR6
 391 0054 00000000 		.word	.LANCHOR1
 392 0058 00000000 		.word	.LANCHOR7
 393 005c 00000000 		.word	.LANCHOR0
 394 0060 00000000 		.word	.LANCHOR2
 395 0064 00000000 		.word	.LANCHOR8
 396              		.cfi_endproc
 397              	.LFE42:
 399              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 400              		.align	1
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 404              		.fpu fpv4-sp-d16
 406              	prvAddNewTaskToReadyList:
 407              	.LFB7:
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 408              		.loc 1 1073 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              	.LVL44:
 413 0000 10B5     		push	{r4, lr}
 414              	.LCFI2:
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 4, -8
 417              		.cfi_offset 14, -4
 418 0002 0446     		mov	r4, r0
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 419              		.loc 1 1076 0
 420 0004 FFF7FEFF 		bl	vPortEnterCritical
 421              	.LVL45:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 422              		.loc 1 1078 0
 423 0008 214A     		ldr	r2, .L47
 424 000a 1368     		ldr	r3, [r2]
 425 000c 0133     		adds	r3, r3, #1
 426 000e 1360     		str	r3, [r2]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 427              		.loc 1 1079 0
 428 0010 204B     		ldr	r3, .L47+4
 429 0012 1B68     		ldr	r3, [r3]
 430 0014 002B     		cmp	r3, #0
 431 0016 32D0     		beq	.L46
ARM GAS  /tmp/ccJO9w1Z.s 			page 81


1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 432              		.loc 1 1102 0
 433 0018 1F4B     		ldr	r3, .L47+8
 434 001a 1B68     		ldr	r3, [r3]
 435 001c 3BB9     		cbnz	r3, .L42
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 436              		.loc 1 1104 0
 437 001e 1D4B     		ldr	r3, .L47+4
 438 0020 1B68     		ldr	r3, [r3]
 439 0022 DA6A     		ldr	r2, [r3, #44]
 440 0024 E36A     		ldr	r3, [r4, #44]
 441 0026 9A42     		cmp	r2, r3
 442 0028 01D8     		bhi	.L42
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 443              		.loc 1 1106 0
 444 002a 1A4B     		ldr	r3, .L47+4
 445 002c 1C60     		str	r4, [r3]
 446              	.L42:
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 447              		.loc 1 1119 0
 448 002e 1B4A     		ldr	r2, .L47+12
 449 0030 1368     		ldr	r3, [r2]
 450 0032 0133     		adds	r3, r3, #1
 451 0034 1360     		str	r3, [r2]
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 452              		.loc 1 1124 0
 453 0036 6364     		str	r3, [r4, #68]
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 454              		.loc 1 1129 0
 455 0038 E36A     		ldr	r3, [r4, #44]
 456 003a 194A     		ldr	r2, .L47+16
 457 003c 1268     		ldr	r2, [r2]
 458 003e 9342     		cmp	r3, r2
 459 0040 01D9     		bls	.L43
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460              		.loc 1 1129 0 is_stmt 0 discriminator 1
 461 0042 174A     		ldr	r2, .L47+16
 462 0044 1360     		str	r3, [r2]
 463              	.L43:
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 464              		.loc 1 1129 0 discriminator 3
 465 0046 03EB8303 		add	r3, r3, r3, lsl #2
 466 004a 9A00     		lsls	r2, r3, #2
 467 004c 211D     		adds	r1, r4, #4
 468 004e 1548     		ldr	r0, .L47+20
 469 0050 1044     		add	r0, r0, r2
 470 0052 FFF7FEFF 		bl	vListInsertEnd
 471              	.LVL46:
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472              		.loc 1 1133 0 is_stmt 1 discriminator 3
 473 0056 FFF7FEFF 		bl	vPortExitCritical
 474              	.LVL47:
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 475              		.loc 1 1135 0 discriminator 3
 476 005a 0F4B     		ldr	r3, .L47+8
 477 005c 1B68     		ldr	r3, [r3]
 478 005e 6BB1     		cbz	r3, .L40
ARM GAS  /tmp/ccJO9w1Z.s 			page 82


1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 479              		.loc 1 1139 0
 480 0060 0C4B     		ldr	r3, .L47+4
 481 0062 1B68     		ldr	r3, [r3]
 482 0064 DA6A     		ldr	r2, [r3, #44]
 483 0066 E36A     		ldr	r3, [r4, #44]
 484 0068 9A42     		cmp	r2, r3
 485 006a 07D2     		bcs	.L40
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 486              		.loc 1 1141 0
 487 006c 4FF08052 		mov	r2, #268435456
 488 0070 0D4B     		ldr	r3, .L47+24
 489 0072 1A60     		str	r2, [r3]
 490              		.syntax unified
 491              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 492 0074 BFF34F8F 		dsb
 493              	@ 0 "" 2
 494              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 495 0078 BFF36F8F 		isb
 496              	@ 0 "" 2
 497              		.thumb
 498              		.syntax unified
 499              	.L40:
 500 007c 10BD     		pop	{r4, pc}
 501              	.LVL48:
 502              	.L46:
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 503              		.loc 1 1083 0
 504 007e 054B     		ldr	r3, .L47+4
 505 0080 1C60     		str	r4, [r3]
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 506              		.loc 1 1085 0
 507 0082 1368     		ldr	r3, [r2]
 508 0084 012B     		cmp	r3, #1
 509 0086 D2D1     		bne	.L42
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 510              		.loc 1 1090 0
 511 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 512              	.LVL49:
 513 008c CFE7     		b	.L42
 514              	.L48:
 515 008e 00BF     		.align	2
 516              	.L47:
 517 0090 00000000 		.word	.LANCHOR9
 518 0094 00000000 		.word	.LANCHOR10
 519 0098 00000000 		.word	.LANCHOR11
 520 009c 00000000 		.word	.LANCHOR12
 521 00a0 00000000 		.word	.LANCHOR13
 522 00a4 00000000 		.word	.LANCHOR4
 523 00a8 04ED00E0 		.word	-536810236
 524              		.cfi_endproc
 525              	.LFE7:
 527              		.section	.text.prvDeleteTCB,"ax",%progbits
 528              		.align	1
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
ARM GAS  /tmp/ccJO9w1Z.s 			page 83


 532              		.fpu fpv4-sp-d16
 534              	prvDeleteTCB:
 535              	.LFB48:
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 536              		.loc 1 3827 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              	.LVL50:
 541 0000 10B5     		push	{r4, lr}
 542              	.LCFI3:
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 4, -8
 545              		.cfi_offset 14, -4
 546 0002 0446     		mov	r4, r0
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 547              		.loc 1 3853 0
 548 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
 549 0008 63B1     		cbz	r3, .L55
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 550              		.loc 1 3860 0
 551 000a 012B     		cmp	r3, #1
 552 000c 11D0     		beq	.L56
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 553              		.loc 1 3870 0
 554 000e 022B     		cmp	r3, #2
 555 0010 12D0     		beq	.L49
 556              	.LBB119:
 557              	.LBB120:
 558              		.loc 2 195 0
 559              		.syntax unified
 560              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 561 0012 4FF05003 			mov r3, #80												
 562 0016 83F31188 		msr basepri, r3											
 563 001a BFF36F8F 		isb														
 564 001e BFF34F8F 		dsb														
 565              	
 566              	@ 0 "" 2
 567              	.LVL51:
 568              		.thumb
 569              		.syntax unified
 570              	.L53:
 571 0022 FEE7     		b	.L53
 572              	.L55:
 573              	.LBE120:
 574              	.LBE119:
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 575              		.loc 1 3857 0
 576 0024 006B     		ldr	r0, [r0, #48]
 577              	.LVL52:
 578 0026 FFF7FEFF 		bl	vPortFree
 579              	.LVL53:
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 580              		.loc 1 3858 0
 581 002a 2046     		mov	r0, r4
 582 002c FFF7FEFF 		bl	vPortFree
 583              	.LVL54:
ARM GAS  /tmp/ccJO9w1Z.s 			page 84


 584 0030 10BD     		pop	{r4, pc}
 585              	.LVL55:
 586              	.L56:
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 587              		.loc 1 3864 0
 588 0032 FFF7FEFF 		bl	vPortFree
 589              	.LVL56:
 590 0036 10BD     		pop	{r4, pc}
 591              	.LVL57:
 592              	.L49:
 593 0038 10BD     		pop	{r4, pc}
 594              		.cfi_endproc
 595              	.LFE48:
 597              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 598              		.align	1
 599              		.syntax unified
 600              		.thumb
 601              		.thumb_func
 602              		.fpu fpv4-sp-d16
 604              	prvCheckTasksWaitingTermination:
 605              	.LFB43:
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 606              		.loc 1 3579 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610              	.LBB121:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 611              		.loc 1 3589 0
 612 0000 0F4B     		ldr	r3, .L64
 613 0002 1B68     		ldr	r3, [r3]
 614 0004 D3B1     		cbz	r3, .L63
 615              	.LBE121:
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 616              		.loc 1 3579 0
 617 0006 10B5     		push	{r4, lr}
 618              	.LCFI4:
 619              		.cfi_def_cfa_offset 8
 620              		.cfi_offset 4, -8
 621              		.cfi_offset 14, -4
 622              	.L59:
 623              	.LBB122:
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 624              		.loc 1 3591 0
 625 0008 FFF7FEFF 		bl	vPortEnterCritical
 626              	.LVL58:
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 627              		.loc 1 3593 0
 628 000c 0D4B     		ldr	r3, .L64+4
 629 000e DB68     		ldr	r3, [r3, #12]
 630 0010 DC68     		ldr	r4, [r3, #12]
 631              	.LVL59:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 632              		.loc 1 3594 0
 633 0012 201D     		adds	r0, r4, #4
 634 0014 FFF7FEFF 		bl	uxListRemove
 635              	.LVL60:
ARM GAS  /tmp/ccJO9w1Z.s 			page 85


3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 636              		.loc 1 3595 0
 637 0018 0B4A     		ldr	r2, .L64+8
 638 001a 1368     		ldr	r3, [r2]
 639 001c 013B     		subs	r3, r3, #1
 640 001e 1360     		str	r3, [r2]
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 641              		.loc 1 3596 0
 642 0020 074A     		ldr	r2, .L64
 643 0022 1368     		ldr	r3, [r2]
 644 0024 013B     		subs	r3, r3, #1
 645 0026 1360     		str	r3, [r2]
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646              		.loc 1 3598 0
 647 0028 FFF7FEFF 		bl	vPortExitCritical
 648              	.LVL61:
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 649              		.loc 1 3600 0
 650 002c 2046     		mov	r0, r4
 651 002e FFF7FEFF 		bl	prvDeleteTCB
 652              	.LVL62:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 653              		.loc 1 3589 0
 654 0032 034B     		ldr	r3, .L64
 655 0034 1B68     		ldr	r3, [r3]
 656 0036 002B     		cmp	r3, #0
 657 0038 E6D1     		bne	.L59
 658              	.LBE122:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 659              		.loc 1 3604 0
 660 003a 10BD     		pop	{r4, pc}
 661              	.LVL63:
 662              	.L63:
 663              	.LCFI5:
 664              		.cfi_def_cfa_offset 0
 665              		.cfi_restore 4
 666              		.cfi_restore 14
 667 003c 7047     		bx	lr
 668              	.L65:
 669 003e 00BF     		.align	2
 670              	.L64:
 671 0040 00000000 		.word	.LANCHOR14
 672 0044 00000000 		.word	.LANCHOR7
 673 0048 00000000 		.word	.LANCHOR9
 674              		.cfi_endproc
 675              	.LFE43:
 677              		.section	.text.prvIdleTask,"ax",%progbits
 678              		.align	1
 679              		.syntax unified
 680              		.thumb
 681              		.thumb_func
 682              		.fpu fpv4-sp-d16
 684              	prvIdleTask:
 685              	.LFB41:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 686              		.loc 1 3335 0
 687              		.cfi_startproc
ARM GAS  /tmp/ccJO9w1Z.s 			page 86


 688              		@ Volatile: function does not return.
 689              		@ args = 0, pretend = 0, frame = 0
 690              		@ frame_needed = 0, uses_anonymous_args = 0
 691              	.LVL64:
 692 0000 08B5     		push	{r3, lr}
 693              	.LCFI6:
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 3, -8
 696              		.cfi_offset 14, -4
 697              	.LVL65:
 698              	.L67:
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 699              		.loc 1 3351 0
 700 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 701              	.LVL66:
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 702              		.loc 1 3374 0
 703 0006 064B     		ldr	r3, .L70
 704 0008 1B68     		ldr	r3, [r3]
 705 000a 012B     		cmp	r3, #1
 706 000c F9D9     		bls	.L67
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 707              		.loc 1 3376 0
 708 000e 4FF08052 		mov	r2, #268435456
 709 0012 044B     		ldr	r3, .L70+4
 710 0014 1A60     		str	r2, [r3]
 711              		.syntax unified
 712              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 713 0016 BFF34F8F 		dsb
 714              	@ 0 "" 2
 715              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 716 001a BFF36F8F 		isb
 717              	@ 0 "" 2
 718              		.thumb
 719              		.syntax unified
 720 001e F0E7     		b	.L67
 721              	.L71:
 722              		.align	2
 723              	.L70:
 724 0020 00000000 		.word	.LANCHOR4
 725 0024 04ED00E0 		.word	-536810236
 726              		.cfi_endproc
 727              	.LFE41:
 729              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 730              		.align	1
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 734              		.fpu fpv4-sp-d16
 736              	prvAddCurrentTaskToDelayedList:
 737              	.LFB63:
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 87


3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
ARM GAS  /tmp/ccJO9w1Z.s 			page 88


3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccJO9w1Z.s 			page 89


4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
ARM GAS  /tmp/ccJO9w1Z.s 			page 90


4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
ARM GAS  /tmp/ccJO9w1Z.s 			page 91


4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/ccJO9w1Z.s 			page 92


4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 93


4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
ARM GAS  /tmp/ccJO9w1Z.s 			page 94


4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccJO9w1Z.s 			page 95


4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/ccJO9w1Z.s 			page 96


4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 97


4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 98


4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccJO9w1Z.s 			page 99


4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
ARM GAS  /tmp/ccJO9w1Z.s 			page 100


4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccJO9w1Z.s 			page 101


4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
ARM GAS  /tmp/ccJO9w1Z.s 			page 102


4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccJO9w1Z.s 			page 103


4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
ARM GAS  /tmp/ccJO9w1Z.s 			page 104


4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
ARM GAS  /tmp/ccJO9w1Z.s 			page 105


4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  /tmp/ccJO9w1Z.s 			page 106


4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccJO9w1Z.s 			page 107


5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 738              		.loc 1 5082 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              	.LVL67:
 743 0000 70B5     		push	{r4, r5, r6, lr}
 744              	.LCFI7:
 745              		.cfi_def_cfa_offset 16
 746              		.cfi_offset 4, -16
 747              		.cfi_offset 5, -12
 748              		.cfi_offset 6, -8
 749              		.cfi_offset 14, -4
 750 0002 0446     		mov	r4, r0
 751 0004 0E46     		mov	r6, r1
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 752              		.loc 1 5084 0
 753 0006 174B     		ldr	r3, .L79
 754 0008 1D68     		ldr	r5, [r3]
 755              	.LVL68:
ARM GAS  /tmp/ccJO9w1Z.s 			page 108


5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 756              		.loc 1 5097 0
 757 000a 174B     		ldr	r3, .L79+4
 758 000c 1868     		ldr	r0, [r3]
 759              	.LVL69:
 760 000e 0430     		adds	r0, r0, #4
 761 0010 FFF7FEFF 		bl	uxListRemove
 762              	.LVL70:
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 763              		.loc 1 5110 0
 764 0014 B4F1FF3F 		cmp	r4, #-1
 765 0018 13D0     		beq	.L77
 766              	.L73:
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 767              		.loc 1 5122 0
 768 001a 2C44     		add	r4, r4, r5
 769              	.LVL71:
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 770              		.loc 1 5125 0
 771 001c 124B     		ldr	r3, .L79+4
ARM GAS  /tmp/ccJO9w1Z.s 			page 109


 772 001e 1B68     		ldr	r3, [r3]
 773 0020 5C60     		str	r4, [r3, #4]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 774              		.loc 1 5127 0
 775 0022 A542     		cmp	r5, r4
 776 0024 16D8     		bhi	.L78
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 777              		.loc 1 5137 0
 778 0026 114B     		ldr	r3, .L79+8
 779 0028 1868     		ldr	r0, [r3]
 780 002a 0F4B     		ldr	r3, .L79+4
 781 002c 1968     		ldr	r1, [r3]
 782 002e 0431     		adds	r1, r1, #4
 783 0030 FFF7FEFF 		bl	vListInsert
 784              	.LVL72:
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 785              		.loc 1 5142 0
 786 0034 0E4B     		ldr	r3, .L79+12
 787 0036 1B68     		ldr	r3, [r3]
 788 0038 9C42     		cmp	r4, r3
 789 003a 01D2     		bcs	.L72
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 790              		.loc 1 5144 0
 791 003c 0C4B     		ldr	r3, .L79+12
 792 003e 1C60     		str	r4, [r3]
 793              	.L72:
 794 0040 70BD     		pop	{r4, r5, r6, pc}
 795              	.LVL73:
 796              	.L77:
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 797              		.loc 1 5110 0 discriminator 1
 798 0042 002E     		cmp	r6, #0
 799 0044 E9D0     		beq	.L73
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 800              		.loc 1 5115 0
 801 0046 084B     		ldr	r3, .L79+4
 802 0048 1968     		ldr	r1, [r3]
 803 004a 0431     		adds	r1, r1, #4
 804 004c 0948     		ldr	r0, .L79+16
 805 004e FFF7FEFF 		bl	vListInsertEnd
 806              	.LVL74:
 807 0052 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccJO9w1Z.s 			page 110


 808              	.LVL75:
 809              	.L78:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 810              		.loc 1 5131 0
 811 0054 084B     		ldr	r3, .L79+20
 812 0056 1868     		ldr	r0, [r3]
 813 0058 034B     		ldr	r3, .L79+4
 814 005a 1968     		ldr	r1, [r3]
 815 005c 0431     		adds	r1, r1, #4
 816 005e FFF7FEFF 		bl	vListInsert
 817              	.LVL76:
 818 0062 70BD     		pop	{r4, r5, r6, pc}
 819              	.LVL77:
 820              	.L80:
 821              		.align	2
 822              	.L79:
 823 0064 00000000 		.word	.LANCHOR15
 824 0068 00000000 		.word	.LANCHOR10
 825 006c 00000000 		.word	.LANCHOR2
 826 0070 00000000 		.word	.LANCHOR3
 827 0074 00000000 		.word	.LANCHOR0
 828 0078 00000000 		.word	.LANCHOR8
 829              		.cfi_endproc
 830              	.LFE63:
 832              		.section	.text.xTaskCreateStatic,"ax",%progbits
 833              		.align	1
 834              		.global	xTaskCreateStatic
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 838              		.fpu fpv4-sp-d16
 840              	xTaskCreateStatic:
 841              	.LFB4:
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 842              		.loc 1 585 0
 843              		.cfi_startproc
 844              		@ args = 12, pretend = 0, frame = 8
 845              		@ frame_needed = 0, uses_anonymous_args = 0
 846              	.LVL78:
 847 0000 70B5     		push	{r4, r5, r6, lr}
 848              	.LCFI8:
 849              		.cfi_def_cfa_offset 16
 850              		.cfi_offset 4, -16
 851              		.cfi_offset 5, -12
 852              		.cfi_offset 6, -8
 853              		.cfi_offset 14, -4
 854 0002 86B0     		sub	sp, sp, #24
 855              	.LCFI9:
 856              		.cfi_def_cfa_offset 40
 857 0004 0B9D     		ldr	r5, [sp, #44]
 858 0006 0C9C     		ldr	r4, [sp, #48]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 859              		.loc 1 589 0
 860 0008 75B1     		cbz	r5, .L89
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 861              		.loc 1 590 0
 862 000a B4B1     		cbz	r4, .L90
ARM GAS  /tmp/ccJO9w1Z.s 			page 111


 863              	.LBB123:
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 864              		.loc 1 597 0
 865 000c 5C26     		movs	r6, #92
 866 000e 0496     		str	r6, [sp, #16]
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 867              		.loc 1 598 0
 868 0010 049E     		ldr	r6, [sp, #16]
 869 0012 5C2E     		cmp	r6, #92
 870 0014 1AD0     		beq	.L86
 871              	.LBB124:
 872              	.LBB125:
 873              		.loc 2 195 0
 874              		.syntax unified
 875              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 876 0016 4FF05003 			mov r3, #80												
 877 001a 83F31188 		msr basepri, r3											
 878 001e BFF36F8F 		isb														
 879 0022 BFF34F8F 		dsb														
 880              	
 881              	@ 0 "" 2
 882              	.LVL79:
 883              		.thumb
 884              		.syntax unified
 885              	.L87:
 886 0026 FEE7     		b	.L87
 887              	.LVL80:
 888              	.L89:
 889              	.LBE125:
 890              	.LBE124:
 891              	.LBE123:
 892              	.LBB126:
 893              	.LBB127:
 894              		.syntax unified
 895              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 896 0028 4FF05003 			mov r3, #80												
 897 002c 83F31188 		msr basepri, r3											
 898 0030 BFF36F8F 		isb														
 899 0034 BFF34F8F 		dsb														
 900              	
 901              	@ 0 "" 2
 902              	.LVL81:
 903              		.thumb
 904              		.syntax unified
 905              	.L83:
 906 0038 FEE7     		b	.L83
 907              	.LVL82:
 908              	.L90:
 909              	.LBE127:
 910              	.LBE126:
 911              	.LBB128:
 912              	.LBB129:
 913              		.syntax unified
 914              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 915 003a 4FF05003 			mov r3, #80												
 916 003e 83F31188 		msr basepri, r3											
 917 0042 BFF36F8F 		isb														
ARM GAS  /tmp/ccJO9w1Z.s 			page 112


 918 0046 BFF34F8F 		dsb														
 919              	
 920              	@ 0 "" 2
 921              	.LVL83:
 922              		.thumb
 923              		.syntax unified
 924              	.L85:
 925 004a FEE7     		b	.L85
 926              	.LVL84:
 927              	.L86:
 928              	.LBE129:
 929              	.LBE128:
 930              	.LBB130:
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 931              		.loc 1 599 0
 932 004c 049E     		ldr	r6, [sp, #16]
 933              	.LVL85:
 934              	.LBE130:
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 935              		.loc 1 609 0
 936 004e 2563     		str	r5, [r4, #48]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 937              		.loc 1 615 0
 938 0050 0225     		movs	r5, #2
 939 0052 84F85950 		strb	r5, [r4, #89]
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 940              		.loc 1 619 0
 941 0056 0025     		movs	r5, #0
 942 0058 0395     		str	r5, [sp, #12]
 943 005a 0294     		str	r4, [sp, #8]
 944 005c 05AD     		add	r5, sp, #20
 945 005e 0195     		str	r5, [sp, #4]
 946 0060 0A9D     		ldr	r5, [sp, #40]
 947 0062 0095     		str	r5, [sp]
 948 0064 FFF7FEFF 		bl	prvInitialiseNewTask
 949              	.LVL86:
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 950              		.loc 1 620 0
 951 0068 2046     		mov	r0, r4
 952 006a FFF7FEFF 		bl	prvAddNewTaskToReadyList
 953              	.LVL87:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954              		.loc 1 628 0
 955 006e 0598     		ldr	r0, [sp, #20]
 956 0070 06B0     		add	sp, sp, #24
 957              	.LCFI10:
 958              		.cfi_def_cfa_offset 16
 959              		@ sp needed
 960 0072 70BD     		pop	{r4, r5, r6, pc}
 961              		.cfi_endproc
 962              	.LFE4:
 964              		.section	.text.xTaskCreate,"ax",%progbits
 965              		.align	1
 966              		.global	xTaskCreate
 967              		.syntax unified
 968              		.thumb
 969              		.thumb_func
ARM GAS  /tmp/ccJO9w1Z.s 			page 113


 970              		.fpu fpv4-sp-d16
 972              	xTaskCreate:
 973              	.LFB5:
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 974              		.loc 1 736 0
 975              		.cfi_startproc
 976              		@ args = 8, pretend = 0, frame = 0
 977              		@ frame_needed = 0, uses_anonymous_args = 0
 978              	.LVL88:
 979 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 980              	.LCFI11:
 981              		.cfi_def_cfa_offset 28
 982              		.cfi_offset 4, -28
 983              		.cfi_offset 5, -24
 984              		.cfi_offset 6, -20
 985              		.cfi_offset 7, -16
 986              		.cfi_offset 8, -12
 987              		.cfi_offset 9, -8
 988              		.cfi_offset 14, -4
 989 0004 85B0     		sub	sp, sp, #20
 990              	.LCFI12:
 991              		.cfi_def_cfa_offset 48
 992 0006 0646     		mov	r6, r0
 993 0008 0F46     		mov	r7, r1
 994 000a 1546     		mov	r5, r2
 995 000c 9846     		mov	r8, r3
 996              	.LBB131:
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 997              		.loc 1 770 0
 998 000e 9000     		lsls	r0, r2, #2
 999              	.LVL89:
 1000 0010 FFF7FEFF 		bl	pvPortMalloc
 1001              	.LVL90:
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1002              		.loc 1 772 0
 1003 0014 10B3     		cbz	r0, .L95
 1004 0016 8146     		mov	r9, r0
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1005              		.loc 1 775 0
 1006 0018 5C20     		movs	r0, #92
 1007              	.LVL91:
 1008 001a FFF7FEFF 		bl	pvPortMalloc
 1009              	.LVL92:
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1010              		.loc 1 777 0
 1011 001e 0446     		mov	r4, r0
 1012 0020 C0B1     		cbz	r0, .L93
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1013              		.loc 1 780 0
 1014 0022 C0F83090 		str	r9, [r0, #48]
 1015              	.LVL93:
 1016              	.L92:
 1017              	.LBE131:
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1018              		.loc 1 796 0
 1019 0026 DCB1     		cbz	r4, .L96
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccJO9w1Z.s 			page 114


 1020              		.loc 1 802 0
 1021 0028 0023     		movs	r3, #0
 1022 002a 84F85930 		strb	r3, [r4, #89]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1023              		.loc 1 806 0
 1024 002e 0393     		str	r3, [sp, #12]
 1025 0030 0294     		str	r4, [sp, #8]
 1026 0032 0D9B     		ldr	r3, [sp, #52]
 1027 0034 0193     		str	r3, [sp, #4]
 1028 0036 0C9B     		ldr	r3, [sp, #48]
 1029 0038 0093     		str	r3, [sp]
 1030 003a 4346     		mov	r3, r8
 1031 003c 2A46     		mov	r2, r5
 1032 003e 3946     		mov	r1, r7
 1033 0040 3046     		mov	r0, r6
 1034 0042 FFF7FEFF 		bl	prvInitialiseNewTask
 1035              	.LVL94:
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1036              		.loc 1 807 0
 1037 0046 2046     		mov	r0, r4
 1038 0048 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1039              	.LVL95:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1040              		.loc 1 808 0
 1041 004c 0120     		movs	r0, #1
 1042              	.LVL96:
 1043              	.L91:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1044              		.loc 1 816 0
 1045 004e 05B0     		add	sp, sp, #20
 1046              	.LCFI13:
 1047              		.cfi_remember_state
 1048              		.cfi_def_cfa_offset 28
 1049              		@ sp needed
 1050 0050 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1051              	.LVL97:
 1052              	.L93:
 1053              	.LCFI14:
 1054              		.cfi_restore_state
 1055              	.LBB132:
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1056              		.loc 1 786 0
 1057 0054 4846     		mov	r0, r9
 1058              	.LVL98:
 1059 0056 FFF7FEFF 		bl	vPortFree
 1060              	.LVL99:
 1061 005a E4E7     		b	.L92
 1062              	.LVL100:
 1063              	.L95:
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1064              		.loc 1 791 0
 1065 005c 0024     		movs	r4, #0
 1066 005e E2E7     		b	.L92
 1067              	.LVL101:
 1068              	.L96:
 1069              	.LBE132:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccJO9w1Z.s 			page 115


 1070              		.loc 1 812 0
 1071 0060 4FF0FF30 		mov	r0, #-1
 1072              	.LVL102:
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1073              		.loc 1 815 0
 1074 0064 F3E7     		b	.L91
 1075              		.cfi_endproc
 1076              	.LFE5:
 1078              		.section	.text.vTaskDelete,"ax",%progbits
 1079              		.align	1
 1080              		.global	vTaskDelete
 1081              		.syntax unified
 1082              		.thumb
 1083              		.thumb_func
 1084              		.fpu fpv4-sp-d16
 1086              	vTaskDelete:
 1087              	.LFB8:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1088              		.loc 1 1158 0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              	.LVL103:
 1093 0000 38B5     		push	{r3, r4, r5, lr}
 1094              	.LCFI15:
 1095              		.cfi_def_cfa_offset 16
 1096              		.cfi_offset 3, -16
 1097              		.cfi_offset 4, -12
 1098              		.cfi_offset 5, -8
 1099              		.cfi_offset 14, -4
 1100 0002 0446     		mov	r4, r0
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1101              		.loc 1 1161 0
 1102 0004 FFF7FEFF 		bl	vPortEnterCritical
 1103              	.LVL104:
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1104              		.loc 1 1165 0
 1105 0008 24B3     		cbz	r4, .L107
 1106              	.LVL105:
 1107              	.L99:
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1108              		.loc 1 1168 0 discriminator 4
 1109 000a 251D     		adds	r5, r4, #4
 1110 000c 2846     		mov	r0, r5
 1111 000e FFF7FEFF 		bl	uxListRemove
 1112              	.LVL106:
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1113              		.loc 1 1178 0 discriminator 4
 1114 0012 A36A     		ldr	r3, [r4, #40]
 1115 0014 1BB1     		cbz	r3, .L100
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1116              		.loc 1 1180 0
 1117 0016 04F11800 		add	r0, r4, #24
 1118 001a FFF7FEFF 		bl	uxListRemove
 1119              	.LVL107:
 1120              	.L100:
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 116


 1121              		.loc 1 1191 0
 1122 001e 1E4A     		ldr	r2, .L110
 1123 0020 1368     		ldr	r3, [r2]
 1124 0022 0133     		adds	r3, r3, #1
 1125 0024 1360     		str	r3, [r2]
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1126              		.loc 1 1193 0
 1127 0026 1D4B     		ldr	r3, .L110+4
 1128 0028 1B68     		ldr	r3, [r3]
 1129 002a 9C42     		cmp	r4, r3
 1130 002c 15D0     		beq	.L108
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1131              		.loc 1 1216 0
 1132 002e 1C4A     		ldr	r2, .L110+8
 1133 0030 1368     		ldr	r3, [r2]
 1134 0032 013B     		subs	r3, r3, #1
 1135 0034 1360     		str	r3, [r2]
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1136              		.loc 1 1217 0
 1137 0036 2046     		mov	r0, r4
 1138 0038 FFF7FEFF 		bl	prvDeleteTCB
 1139              	.LVL108:
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1140              		.loc 1 1221 0
 1141 003c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1142              	.LVL109:
 1143              	.L102:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1144              		.loc 1 1226 0
 1145 0040 FFF7FEFF 		bl	vPortExitCritical
 1146              	.LVL110:
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1147              		.loc 1 1230 0
 1148 0044 174B     		ldr	r3, .L110+12
 1149 0046 1B68     		ldr	r3, [r3]
 1150 0048 1BB1     		cbz	r3, .L98
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1151              		.loc 1 1232 0
 1152 004a 144B     		ldr	r3, .L110+4
 1153 004c 1B68     		ldr	r3, [r3]
 1154 004e 9C42     		cmp	r4, r3
 1155 0050 0CD0     		beq	.L109
 1156              	.L98:
 1157 0052 38BD     		pop	{r3, r4, r5, pc}
 1158              	.LVL111:
 1159              	.L107:
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1160              		.loc 1 1165 0 discriminator 1
 1161 0054 114B     		ldr	r3, .L110+4
 1162 0056 1C68     		ldr	r4, [r3]
 1163              	.LVL112:
 1164 0058 D7E7     		b	.L99
 1165              	.LVL113:
 1166              	.L108:
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1167              		.loc 1 1200 0
 1168 005a 2946     		mov	r1, r5
ARM GAS  /tmp/ccJO9w1Z.s 			page 117


 1169 005c 1248     		ldr	r0, .L110+16
 1170 005e FFF7FEFF 		bl	vListInsertEnd
 1171              	.LVL114:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1172              		.loc 1 1205 0
 1173 0062 124A     		ldr	r2, .L110+20
 1174 0064 1368     		ldr	r3, [r2]
 1175 0066 0133     		adds	r3, r3, #1
 1176 0068 1360     		str	r3, [r2]
 1177 006a E9E7     		b	.L102
 1178              	.L109:
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1179              		.loc 1 1234 0
 1180 006c 104B     		ldr	r3, .L110+24
 1181 006e 1B68     		ldr	r3, [r3]
 1182 0070 43B1     		cbz	r3, .L104
 1183              	.LBB133:
 1184              	.LBB134:
 1185              		.loc 2 195 0
 1186              		.syntax unified
 1187              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1188 0072 4FF05003 			mov r3, #80												
 1189 0076 83F31188 		msr basepri, r3											
 1190 007a BFF36F8F 		isb														
 1191 007e BFF34F8F 		dsb														
 1192              	
 1193              	@ 0 "" 2
 1194              	.LVL115:
 1195              		.thumb
 1196              		.syntax unified
 1197              	.L105:
 1198 0082 FEE7     		b	.L105
 1199              	.L104:
 1200              	.LBE134:
 1201              	.LBE133:
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1202              		.loc 1 1235 0
 1203 0084 4FF08052 		mov	r2, #268435456
 1204 0088 0A4B     		ldr	r3, .L110+28
 1205 008a 1A60     		str	r2, [r3]
 1206              		.syntax unified
 1207              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1208 008c BFF34F8F 		dsb
 1209              	@ 0 "" 2
 1210              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1211 0090 BFF36F8F 		isb
 1212              	@ 0 "" 2
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1213              		.loc 1 1242 0
 1214              		.thumb
 1215              		.syntax unified
 1216 0094 DDE7     		b	.L98
 1217              	.L111:
 1218 0096 00BF     		.align	2
 1219              	.L110:
 1220 0098 00000000 		.word	.LANCHOR12
 1221 009c 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/ccJO9w1Z.s 			page 118


 1222 00a0 00000000 		.word	.LANCHOR9
 1223 00a4 00000000 		.word	.LANCHOR11
 1224 00a8 00000000 		.word	.LANCHOR7
 1225 00ac 00000000 		.word	.LANCHOR14
 1226 00b0 00000000 		.word	.LANCHOR16
 1227 00b4 04ED00E0 		.word	-536810236
 1228              		.cfi_endproc
 1229              	.LFE8:
 1231              		.section	.text.eTaskGetState,"ax",%progbits
 1232              		.align	1
 1233              		.global	eTaskGetState
 1234              		.syntax unified
 1235              		.thumb
 1236              		.thumb_func
 1237              		.fpu fpv4-sp-d16
 1239              	eTaskGetState:
 1240              	.LFB11:
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1241              		.loc 1 1379 0
 1242              		.cfi_startproc
 1243              		@ args = 0, pretend = 0, frame = 0
 1244              		@ frame_needed = 0, uses_anonymous_args = 0
 1245              	.LVL116:
 1246 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1247              	.LCFI16:
 1248              		.cfi_def_cfa_offset 24
 1249              		.cfi_offset 3, -24
 1250              		.cfi_offset 4, -20
 1251              		.cfi_offset 5, -16
 1252              		.cfi_offset 6, -12
 1253              		.cfi_offset 7, -8
 1254              		.cfi_offset 14, -4
 1255              	.LVL117:
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1256              		.loc 1 1384 0
 1257 0002 D0B1     		cbz	r0, .L125
 1258 0004 0446     		mov	r4, r0
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1259              		.loc 1 1386 0
 1260 0006 1D4B     		ldr	r3, .L127
 1261 0008 1B68     		ldr	r3, [r3]
 1262 000a 9842     		cmp	r0, r3
 1263 000c 27D0     		beq	.L117
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1264              		.loc 1 1393 0
 1265 000e FFF7FEFF 		bl	vPortEnterCritical
 1266              	.LVL118:
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1267              		.loc 1 1395 0
 1268 0012 6569     		ldr	r5, [r4, #20]
 1269              	.LVL119:
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1270              		.loc 1 1396 0
 1271 0014 1A4B     		ldr	r3, .L127+4
 1272 0016 1F68     		ldr	r7, [r3]
 1273              	.LVL120:
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccJO9w1Z.s 			page 119


 1274              		.loc 1 1397 0
 1275 0018 1A4B     		ldr	r3, .L127+8
 1276 001a 1E68     		ldr	r6, [r3]
 1277              	.LVL121:
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1278              		.loc 1 1399 0
 1279 001c FFF7FEFF 		bl	vPortExitCritical
 1280              	.LVL122:
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1281              		.loc 1 1401 0
 1282 0020 BD42     		cmp	r5, r7
 1283 0022 1ED0     		beq	.L118
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1284              		.loc 1 1401 0 is_stmt 0 discriminator 1
 1285 0024 B542     		cmp	r5, r6
 1286 0026 1ED0     		beq	.L119
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1287              		.loc 1 1409 0 is_stmt 1
 1288 0028 174B     		ldr	r3, .L127+12
 1289 002a 9D42     		cmp	r5, r3
 1290 002c 0ED0     		beq	.L126
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1291              		.loc 1 1445 0
 1292 002e 174B     		ldr	r3, .L127+16
 1293 0030 9D42     		cmp	r5, r3
 1294 0032 1ED0     		beq	.L122
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1295              		.loc 1 1445 0 is_stmt 0 discriminator 1
 1296 0034 FDB9     		cbnz	r5, .L123
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1297              		.loc 1 1450 0 is_stmt 1
 1298 0036 0420     		movs	r0, #4
 1299 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1300              	.LVL123:
 1301              	.L125:
 1302              	.LBB135:
 1303              	.LBB136:
 1304              		.loc 2 195 0
 1305              		.syntax unified
 1306              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1307 003a 4FF05003 			mov r3, #80												
 1308 003e 83F31188 		msr basepri, r3											
 1309 0042 BFF36F8F 		isb														
 1310 0046 BFF34F8F 		dsb														
 1311              	
 1312              	@ 0 "" 2
 1313              	.LVL124:
 1314              		.thumb
 1315              		.syntax unified
 1316              	.L114:
 1317 004a FEE7     		b	.L114
 1318              	.LVL125:
 1319              	.L126:
 1320              	.LBE136:
 1321              	.LBE135:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1322              		.loc 1 1414 0
ARM GAS  /tmp/ccJO9w1Z.s 			page 120


 1323 004c A36A     		ldr	r3, [r4, #40]
 1324 004e 63B9     		cbnz	r3, .L120
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 1325              		.loc 1 1422 0
 1326 0050 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 1327 0054 DBB2     		uxtb	r3, r3
 1328 0056 012B     		cmp	r3, #1
 1329 0058 09D1     		bne	.L121
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1330              		.loc 1 1424 0
 1331 005a 0220     		movs	r0, #2
 1332 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1333              	.LVL126:
 1334              	.L117:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1335              		.loc 1 1389 0
 1336 005e 0020     		movs	r0, #0
 1337              	.LVL127:
 1338 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1339              	.LVL128:
 1340              	.L118:
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1341              		.loc 1 1405 0
 1342 0062 0220     		movs	r0, #2
 1343 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1344              	.LVL129:
 1345              	.L119:
 1346 0066 0220     		movs	r0, #2
 1347 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1348              	.LVL130:
 1349              	.L120:
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1350              		.loc 1 1439 0
 1351 006a 0220     		movs	r0, #2
 1352 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1353              	.LVL131:
 1354              	.L121:
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1355              		.loc 1 1428 0
 1356 006e 0320     		movs	r0, #3
 1357 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1358              	.LVL132:
 1359              	.L122:
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1360              		.loc 1 1450 0
 1361 0072 0420     		movs	r0, #4
 1362 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1363              	.LVL133:
 1364              	.L123:
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1365              		.loc 1 1458 0
 1366 0076 0120     		movs	r0, #1
 1367              	.LVL134:
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1368              		.loc 1 1463 0
 1369 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1370              	.LVL135:
ARM GAS  /tmp/ccJO9w1Z.s 			page 121


 1371              	.L128:
 1372 007a 00BF     		.align	2
 1373              	.L127:
 1374 007c 00000000 		.word	.LANCHOR10
 1375 0080 00000000 		.word	.LANCHOR2
 1376 0084 00000000 		.word	.LANCHOR8
 1377 0088 00000000 		.word	.LANCHOR0
 1378 008c 00000000 		.word	.LANCHOR7
 1379              		.cfi_endproc
 1380              	.LFE11:
 1382              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1383              		.align	1
 1384              		.global	uxTaskPriorityGet
 1385              		.syntax unified
 1386              		.thumb
 1387              		.thumb_func
 1388              		.fpu fpv4-sp-d16
 1390              	uxTaskPriorityGet:
 1391              	.LFB12:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1392              		.loc 1 1471 0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 0
 1395              		@ frame_needed = 0, uses_anonymous_args = 0
 1396              	.LVL136:
 1397 0000 10B5     		push	{r4, lr}
 1398              	.LCFI17:
 1399              		.cfi_def_cfa_offset 8
 1400              		.cfi_offset 4, -8
 1401              		.cfi_offset 14, -4
 1402 0002 0446     		mov	r4, r0
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1403              		.loc 1 1475 0
 1404 0004 FFF7FEFF 		bl	vPortEnterCritical
 1405              	.LVL137:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1406              		.loc 1 1479 0
 1407 0008 24B1     		cbz	r4, .L133
 1408              	.LVL138:
 1409              	.L130:
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1410              		.loc 1 1480 0 discriminator 4
 1411 000a E46A     		ldr	r4, [r4, #44]
 1412              	.LVL139:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1413              		.loc 1 1482 0 discriminator 4
 1414 000c FFF7FEFF 		bl	vPortExitCritical
 1415              	.LVL140:
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1416              		.loc 1 1485 0 discriminator 4
 1417 0010 2046     		mov	r0, r4
 1418 0012 10BD     		pop	{r4, pc}
 1419              	.LVL141:
 1420              	.L133:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1421              		.loc 1 1479 0 discriminator 1
 1422 0014 014B     		ldr	r3, .L134
ARM GAS  /tmp/ccJO9w1Z.s 			page 122


 1423 0016 1C68     		ldr	r4, [r3]
 1424              	.LVL142:
 1425 0018 F7E7     		b	.L130
 1426              	.L135:
 1427 001a 00BF     		.align	2
 1428              	.L134:
 1429 001c 00000000 		.word	.LANCHOR10
 1430              		.cfi_endproc
 1431              	.LFE12:
 1433              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1434              		.align	1
 1435              		.global	uxTaskPriorityGetFromISR
 1436              		.syntax unified
 1437              		.thumb
 1438              		.thumb_func
 1439              		.fpu fpv4-sp-d16
 1441              	uxTaskPriorityGetFromISR:
 1442              	.LFB13:
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1443              		.loc 1 1493 0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
 1446              		@ frame_needed = 0, uses_anonymous_args = 0
 1447              	.LVL143:
 1448 0000 10B5     		push	{r4, lr}
 1449              	.LCFI18:
 1450              		.cfi_def_cfa_offset 8
 1451              		.cfi_offset 4, -8
 1452              		.cfi_offset 14, -4
 1453 0002 0446     		mov	r4, r0
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1454              		.loc 1 1513 0
 1455 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1456              	.LVL144:
 1457              	.LBB137:
 1458              	.LBB138:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1459              		.loc 2 211 0
 1460              		.syntax unified
 1461              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1462 0008 EFF31183 			mrs r3, basepri											
 1463 000c 4FF05002 		mov r2, #80												
ARM GAS  /tmp/ccJO9w1Z.s 			page 123


 1464 0010 82F31188 		msr basepri, r2											
 1465 0014 BFF36F8F 		isb														
 1466 0018 BFF34F8F 		dsb														
 1467              	
 1468              	@ 0 "" 2
 1469              		.thumb
 1470              		.syntax unified
 1471              	.LBE138:
 1472              	.LBE137:
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1473              		.loc 1 1519 0
 1474 001c 1CB1     		cbz	r4, .L140
 1475              	.LVL145:
 1476              	.L137:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1477              		.loc 1 1520 0 discriminator 4
 1478 001e E06A     		ldr	r0, [r4, #44]
 1479              	.LVL146:
 1480              	.LBB139:
 1481              	.LBB140:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1482              		.loc 2 229 0 discriminator 4
 1483              		.syntax unified
 1484              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1485 0020 83F31188 			msr basepri, r3	
 1486              	@ 0 "" 2
 1487              	.LVL147:
 1488              		.thumb
 1489              		.syntax unified
 1490              	.LBE140:
 1491              	.LBE139:
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1492              		.loc 1 1525 0 discriminator 4
 1493 0024 10BD     		pop	{r4, pc}
 1494              	.LVL148:
 1495              	.L140:
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1496              		.loc 1 1519 0 discriminator 1
 1497 0026 014A     		ldr	r2, .L141
 1498 0028 1468     		ldr	r4, [r2]
ARM GAS  /tmp/ccJO9w1Z.s 			page 124


 1499              	.LVL149:
 1500 002a F8E7     		b	.L137
 1501              	.L142:
 1502              		.align	2
 1503              	.L141:
 1504 002c 00000000 		.word	.LANCHOR10
 1505              		.cfi_endproc
 1506              	.LFE13:
 1508              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1509              		.align	1
 1510              		.global	vTaskPrioritySet
 1511              		.syntax unified
 1512              		.thumb
 1513              		.thumb_func
 1514              		.fpu fpv4-sp-d16
 1516              	vTaskPrioritySet:
 1517              	.LFB14:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1518              		.loc 1 1533 0
 1519              		.cfi_startproc
 1520              		@ args = 0, pretend = 0, frame = 0
 1521              		@ frame_needed = 0, uses_anonymous_args = 0
 1522              	.LVL150:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1523              		.loc 1 1538 0
 1524 0000 3729     		cmp	r1, #55
 1525 0002 08D9     		bls	.L144
 1526              	.LBB141:
 1527              	.LBB142:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1528              		.loc 2 195 0
 1529              		.syntax unified
 1530              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1531 0004 4FF05003 			mov r3, #80												
 1532 0008 83F31188 		msr basepri, r3											
 1533 000c BFF36F8F 		isb														
 1534 0010 BFF34F8F 		dsb														
 1535              	
 1536              	@ 0 "" 2
 1537              	.LVL151:
 1538              		.thumb
 1539              		.syntax unified
 1540              	.L145:
 1541 0014 FEE7     		b	.L145
 1542              	.L144:
 1543              	.LBE142:
 1544              	.LBE141:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1545              		.loc 1 1533 0
 1546 0016 70B5     		push	{r4, r5, r6, lr}
 1547              	.LCFI19:
 1548              		.cfi_def_cfa_offset 16
 1549              		.cfi_offset 4, -16
 1550              		.cfi_offset 5, -12
 1551              		.cfi_offset 6, -8
 1552              		.cfi_offset 14, -4
 1553 0018 0446     		mov	r4, r0
ARM GAS  /tmp/ccJO9w1Z.s 			page 125


 1554 001a 0D46     		mov	r5, r1
 1555              	.LVL152:
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1556              		.loc 1 1550 0
 1557 001c FFF7FEFF 		bl	vPortEnterCritical
 1558              	.LVL153:
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1559              		.loc 1 1554 0
 1560 0020 0CB9     		cbnz	r4, .L146
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1561              		.loc 1 1554 0 is_stmt 0 discriminator 1
 1562 0022 274B     		ldr	r3, .L159
 1563 0024 1C68     		ldr	r4, [r3]
 1564              	.LVL154:
 1565              	.L146:
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1566              		.loc 1 1560 0 is_stmt 1 discriminator 4
 1567 0026 E26C     		ldr	r2, [r4, #76]
 1568              	.LVL155:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1569              		.loc 1 1568 0 discriminator 4
 1570 0028 9542     		cmp	r5, r2
 1571 002a 39D0     		beq	.L147
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1572              		.loc 1 1572 0
 1573 002c 3BD9     		bls	.L148
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1574              		.loc 1 1574 0
 1575 002e 244B     		ldr	r3, .L159
 1576 0030 1B68     		ldr	r3, [r3]
 1577 0032 9C42     		cmp	r4, r3
 1578 0034 3DD0     		beq	.L154
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1579              		.loc 1 1579 0
 1580 0036 224B     		ldr	r3, .L159
 1581 0038 1B68     		ldr	r3, [r3]
 1582 003a DB6A     		ldr	r3, [r3, #44]
 1583 003c 9D42     		cmp	r5, r3
 1584 003e 3AD2     		bcs	.L155
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1585              		.loc 1 1536 0
 1586 0040 0026     		movs	r6, #0
 1587              	.L149:
 1588              	.LVL156:
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1589              		.loc 1 1612 0
 1590 0042 E36A     		ldr	r3, [r4, #44]
 1591              	.LVL157:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1592              		.loc 1 1618 0
 1593 0044 9A42     		cmp	r2, r3
 1594 0046 00D1     		bne	.L150
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1595              		.loc 1 1620 0
 1596 0048 E562     		str	r5, [r4, #44]
 1597              	.L150:
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccJO9w1Z.s 			page 126


 1598              		.loc 1 1628 0
 1599 004a E564     		str	r5, [r4, #76]
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1600              		.loc 1 1638 0
 1601 004c A269     		ldr	r2, [r4, #24]
 1602              	.LVL158:
 1603 004e 002A     		cmp	r2, #0
 1604 0050 02DB     		blt	.L151
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1605              		.loc 1 1640 0
 1606 0052 C5F13805 		rsb	r5, r5, #56
 1607              	.LVL159:
 1608 0056 A561     		str	r5, [r4, #24]
 1609              	.L151:
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1610              		.loc 1 1651 0
 1611 0058 6169     		ldr	r1, [r4, #20]
 1612 005a 03EB8303 		add	r3, r3, r3, lsl #2
 1613              	.LVL160:
 1614 005e 9A00     		lsls	r2, r3, #2
 1615 0060 184B     		ldr	r3, .L159+4
 1616 0062 1344     		add	r3, r3, r2
 1617 0064 9942     		cmp	r1, r3
 1618 0066 12D1     		bne	.L152
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1619              		.loc 1 1656 0
 1620 0068 251D     		adds	r5, r4, #4
 1621 006a 2846     		mov	r0, r5
 1622 006c FFF7FEFF 		bl	uxListRemove
 1623              	.LVL161:
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1624              		.loc 1 1667 0
 1625 0070 E36A     		ldr	r3, [r4, #44]
 1626 0072 154A     		ldr	r2, .L159+8
 1627 0074 1268     		ldr	r2, [r2]
 1628 0076 9342     		cmp	r3, r2
 1629 0078 01D9     		bls	.L153
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1630              		.loc 1 1667 0 is_stmt 0 discriminator 1
 1631 007a 134A     		ldr	r2, .L159+8
 1632 007c 1360     		str	r3, [r2]
 1633              	.L153:
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1634              		.loc 1 1667 0 discriminator 3
 1635 007e 03EB8303 		add	r3, r3, r3, lsl #2
 1636 0082 9A00     		lsls	r2, r3, #2
 1637 0084 2946     		mov	r1, r5
 1638 0086 0F48     		ldr	r0, .L159+4
 1639 0088 1044     		add	r0, r0, r2
 1640 008a FFF7FEFF 		bl	vListInsertEnd
 1641              	.LVL162:
 1642              	.L152:
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1643              		.loc 1 1674 0 is_stmt 1
 1644 008e 3EB1     		cbz	r6, .L147
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1645              		.loc 1 1676 0
ARM GAS  /tmp/ccJO9w1Z.s 			page 127


 1646 0090 4FF08052 		mov	r2, #268435456
 1647 0094 0D4B     		ldr	r3, .L159+12
 1648 0096 1A60     		str	r2, [r3]
 1649              		.syntax unified
 1650              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1651 0098 BFF34F8F 		dsb
 1652              	@ 0 "" 2
 1653              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1654 009c BFF36F8F 		isb
 1655              	@ 0 "" 2
 1656              	.LVL163:
 1657              		.thumb
 1658              		.syntax unified
 1659              	.L147:
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1660              		.loc 1 1688 0
 1661 00a0 FFF7FEFF 		bl	vPortExitCritical
 1662              	.LVL164:
 1663 00a4 70BD     		pop	{r4, r5, r6, pc}
 1664              	.LVL165:
 1665              	.L148:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1666              		.loc 1 1595 0
 1667 00a6 064B     		ldr	r3, .L159
 1668 00a8 1B68     		ldr	r3, [r3]
 1669 00aa 9C42     		cmp	r4, r3
 1670 00ac 05D0     		beq	.L156
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1671              		.loc 1 1536 0
 1672 00ae 0026     		movs	r6, #0
 1673 00b0 C7E7     		b	.L149
 1674              	.L154:
 1675 00b2 0026     		movs	r6, #0
 1676 00b4 C5E7     		b	.L149
 1677              	.L155:
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1678              		.loc 1 1581 0
 1679 00b6 0126     		movs	r6, #1
 1680 00b8 C3E7     		b	.L149
 1681              	.L156:
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1682              		.loc 1 1600 0
 1683 00ba 0126     		movs	r6, #1
 1684 00bc C1E7     		b	.L149
 1685              	.L160:
 1686 00be 00BF     		.align	2
 1687              	.L159:
 1688 00c0 00000000 		.word	.LANCHOR10
 1689 00c4 00000000 		.word	.LANCHOR4
 1690 00c8 00000000 		.word	.LANCHOR13
 1691 00cc 04ED00E0 		.word	-536810236
 1692              		.cfi_endproc
 1693              	.LFE14:
 1695              		.section	.text.vTaskResume,"ax",%progbits
 1696              		.align	1
 1697              		.global	vTaskResume
 1698              		.syntax unified
ARM GAS  /tmp/ccJO9w1Z.s 			page 128


 1699              		.thumb
 1700              		.thumb_func
 1701              		.fpu fpv4-sp-d16
 1703              	vTaskResume:
 1704              	.LFB17:
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1705              		.loc 1 1844 0
 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 0
 1708              		@ frame_needed = 0, uses_anonymous_args = 0
 1709              	.LVL166:
 1710 0000 38B5     		push	{r3, r4, r5, lr}
 1711              	.LCFI20:
 1712              		.cfi_def_cfa_offset 16
 1713              		.cfi_offset 3, -16
 1714              		.cfi_offset 4, -12
 1715              		.cfi_offset 5, -8
 1716              		.cfi_offset 14, -4
 1717              	.LVL167:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1718              		.loc 1 1848 0
 1719 0002 68B1     		cbz	r0, .L168
 1720 0004 0446     		mov	r4, r0
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1721              		.loc 1 1852 0
 1722 0006 1C4B     		ldr	r3, .L170
 1723 0008 1B68     		ldr	r3, [r3]
 1724 000a 9842     		cmp	r0, r3
 1725 000c 07D0     		beq	.L161
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1726              		.loc 1 1854 0
 1727 000e FFF7FEFF 		bl	vPortEnterCritical
 1728              	.LVL168:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1729              		.loc 1 1856 0
 1730 0012 2046     		mov	r0, r4
 1731 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1732              	.LVL169:
 1733 0018 58B9     		cbnz	r0, .L169
 1734              	.L165:
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1735              		.loc 1 1883 0
 1736 001a FFF7FEFF 		bl	vPortExitCritical
 1737              	.LVL170:
 1738              	.L161:
 1739 001e 38BD     		pop	{r3, r4, r5, pc}
 1740              	.LVL171:
 1741              	.L168:
 1742              	.LBB143:
 1743              	.LBB144:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1744              		.loc 2 195 0
 1745              		.syntax unified
 1746              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1747 0020 4FF05003 			mov r3, #80												
 1748 0024 83F31188 		msr basepri, r3											
 1749 0028 BFF36F8F 		isb														
ARM GAS  /tmp/ccJO9w1Z.s 			page 129


 1750 002c BFF34F8F 		dsb														
 1751              	
 1752              	@ 0 "" 2
 1753              	.LVL172:
 1754              		.thumb
 1755              		.syntax unified
 1756              	.L163:
 1757 0030 FEE7     		b	.L163
 1758              	.LVL173:
 1759              	.L169:
 1760              	.LBE144:
 1761              	.LBE143:
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1762              		.loc 1 1862 0
 1763 0032 251D     		adds	r5, r4, #4
 1764 0034 2846     		mov	r0, r5
 1765 0036 FFF7FEFF 		bl	uxListRemove
 1766              	.LVL174:
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1767              		.loc 1 1863 0
 1768 003a E36A     		ldr	r3, [r4, #44]
 1769 003c 0F4A     		ldr	r2, .L170+4
 1770 003e 1268     		ldr	r2, [r2]
 1771 0040 9342     		cmp	r3, r2
 1772 0042 01D9     		bls	.L166
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1773              		.loc 1 1863 0 is_stmt 0 discriminator 1
 1774 0044 0D4A     		ldr	r2, .L170+4
 1775 0046 1360     		str	r3, [r2]
 1776              	.L166:
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1777              		.loc 1 1863 0 discriminator 3
 1778 0048 03EB8303 		add	r3, r3, r3, lsl #2
 1779 004c 9A00     		lsls	r2, r3, #2
 1780 004e 2946     		mov	r1, r5
 1781 0050 0B48     		ldr	r0, .L170+8
 1782 0052 1044     		add	r0, r0, r2
 1783 0054 FFF7FEFF 		bl	vListInsertEnd
 1784              	.LVL175:
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1785              		.loc 1 1866 0 is_stmt 1 discriminator 3
 1786 0058 E26A     		ldr	r2, [r4, #44]
 1787 005a 074B     		ldr	r3, .L170
 1788 005c 1B68     		ldr	r3, [r3]
 1789 005e DB6A     		ldr	r3, [r3, #44]
 1790 0060 9A42     		cmp	r2, r3
 1791 0062 DAD3     		bcc	.L165
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1792              		.loc 1 1871 0
 1793 0064 4FF08052 		mov	r2, #268435456
 1794 0068 064B     		ldr	r3, .L170+12
 1795 006a 1A60     		str	r2, [r3]
 1796              		.syntax unified
 1797              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1798 006c BFF34F8F 		dsb
 1799              	@ 0 "" 2
 1800              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  /tmp/ccJO9w1Z.s 			page 130


 1801 0070 BFF36F8F 		isb
 1802              	@ 0 "" 2
 1803              		.thumb
 1804              		.syntax unified
 1805 0074 D1E7     		b	.L165
 1806              	.L171:
 1807 0076 00BF     		.align	2
 1808              	.L170:
 1809 0078 00000000 		.word	.LANCHOR10
 1810 007c 00000000 		.word	.LANCHOR13
 1811 0080 00000000 		.word	.LANCHOR4
 1812 0084 04ED00E0 		.word	-536810236
 1813              		.cfi_endproc
 1814              	.LFE17:
 1816              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1817              		.align	1
 1818              		.global	xTaskResumeFromISR
 1819              		.syntax unified
 1820              		.thumb
 1821              		.thumb_func
 1822              		.fpu fpv4-sp-d16
 1824              	xTaskResumeFromISR:
 1825              	.LFB18:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1826              		.loc 1 1898 0
 1827              		.cfi_startproc
 1828              		@ args = 0, pretend = 0, frame = 0
 1829              		@ frame_needed = 0, uses_anonymous_args = 0
 1830              	.LVL176:
 1831 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1832              	.LCFI21:
 1833              		.cfi_def_cfa_offset 24
 1834              		.cfi_offset 3, -24
 1835              		.cfi_offset 4, -20
 1836              		.cfi_offset 5, -16
 1837              		.cfi_offset 6, -12
 1838              		.cfi_offset 7, -8
 1839              		.cfi_offset 14, -4
 1840              	.LVL177:
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1841              		.loc 1 1903 0
 1842 0002 0028     		cmp	r0, #0
 1843 0004 32D0     		beq	.L182
 1844 0006 0446     		mov	r4, r0
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1845              		.loc 1 1921 0
 1846 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1847              	.LVL178:
 1848              	.LBB145:
 1849              	.LBB146:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1850              		.loc 2 211 0
 1851              		.syntax unified
 1852              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1853 000c EFF31187 			mrs r7, basepri											
 1854 0010 4FF05003 		mov r3, #80												
 1855 0014 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccJO9w1Z.s 			page 131


 1856 0018 BFF36F8F 		isb														
 1857 001c BFF34F8F 		dsb														
 1858              	
 1859              	@ 0 "" 2
 1860              		.thumb
 1861              		.syntax unified
 1862              	.LBE146:
 1863              	.LBE145:
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1864              		.loc 1 1925 0
 1865 0020 2046     		mov	r0, r4
 1866 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1867              	.LVL179:
 1868 0026 0028     		cmp	r0, #0
 1869 0028 32D0     		beq	.L179
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1870              		.loc 1 1930 0
 1871 002a 1A4B     		ldr	r3, .L183
 1872 002c 1B68     		ldr	r3, [r3]
 1873 002e 43BB     		cbnz	r3, .L176
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1874              		.loc 1 1934 0
 1875 0030 E26A     		ldr	r2, [r4, #44]
 1876 0032 194B     		ldr	r3, .L183+4
 1877 0034 1B68     		ldr	r3, [r3]
 1878 0036 DB6A     		ldr	r3, [r3, #44]
 1879 0038 9A42     		cmp	r2, r3
 1880 003a 20D2     		bcs	.L180
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1881              		.loc 1 1899 0
 1882 003c 0025     		movs	r5, #0
 1883              	.L177:
 1884              	.LVL180:
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1885              		.loc 1 1943 0
 1886 003e 261D     		adds	r6, r4, #4
 1887 0040 3046     		mov	r0, r6
 1888 0042 FFF7FEFF 		bl	uxListRemove
 1889              	.LVL181:
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1890              		.loc 1 1944 0
 1891 0046 E36A     		ldr	r3, [r4, #44]
 1892 0048 144A     		ldr	r2, .L183+8
 1893 004a 1268     		ldr	r2, [r2]
 1894 004c 9342     		cmp	r3, r2
 1895 004e 01D9     		bls	.L178
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1896              		.loc 1 1944 0 is_stmt 0 discriminator 1
 1897 0050 124A     		ldr	r2, .L183+8
 1898 0052 1360     		str	r3, [r2]
 1899              	.L178:
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1900              		.loc 1 1944 0 discriminator 3
 1901 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1902 0058 9A00     		lsls	r2, r3, #2
 1903 005a 3146     		mov	r1, r6
 1904 005c 1048     		ldr	r0, .L183+12
ARM GAS  /tmp/ccJO9w1Z.s 			page 132


 1905 005e 1044     		add	r0, r0, r2
 1906 0060 FFF7FEFF 		bl	vListInsertEnd
 1907              	.LVL182:
 1908              	.L175:
 1909              	.LBB147:
 1910              	.LBB148:
 1911              		.loc 2 229 0 is_stmt 1
 1912              		.syntax unified
 1913              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1914 0064 87F31188 			msr basepri, r7	
 1915              	@ 0 "" 2
 1916              	.LVL183:
 1917              		.thumb
 1918              		.syntax unified
 1919              	.LBE148:
 1920              	.LBE147:
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1921              		.loc 1 1962 0
 1922 0068 2846     		mov	r0, r5
 1923 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1924              	.LVL184:
 1925              	.L182:
 1926              	.LBB149:
 1927              	.LBB150:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1928              		.loc 2 195 0
 1929              		.syntax unified
 1930              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1931 006c 4FF05003 			mov r3, #80												
 1932 0070 83F31188 		msr basepri, r3											
 1933 0074 BFF36F8F 		isb														
 1934 0078 BFF34F8F 		dsb														
 1935              	
 1936              	@ 0 "" 2
 1937              	.LVL185:
 1938              		.thumb
 1939              		.syntax unified
 1940              	.L174:
 1941 007c FEE7     		b	.L174
 1942              	.LVL186:
 1943              	.L180:
 1944              	.LBE150:
 1945              	.LBE149:
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1946              		.loc 1 1936 0
 1947 007e 0125     		movs	r5, #1
 1948 0080 DDE7     		b	.L177
 1949              	.L176:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1950              		.loc 1 1951 0
 1951 0082 04F11801 		add	r1, r4, #24
 1952 0086 0748     		ldr	r0, .L183+16
 1953 0088 FFF7FEFF 		bl	vListInsertEnd
 1954              	.LVL187:
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1955              		.loc 1 1899 0
 1956 008c 0025     		movs	r5, #0
ARM GAS  /tmp/ccJO9w1Z.s 			page 133


 1957 008e E9E7     		b	.L175
 1958              	.L179:
 1959 0090 0025     		movs	r5, #0
 1960 0092 E7E7     		b	.L175
 1961              	.L184:
 1962              		.align	2
 1963              	.L183:
 1964 0094 00000000 		.word	.LANCHOR16
 1965 0098 00000000 		.word	.LANCHOR10
 1966 009c 00000000 		.word	.LANCHOR13
 1967 00a0 00000000 		.word	.LANCHOR4
 1968 00a4 00000000 		.word	.LANCHOR1
 1969              		.cfi_endproc
 1970              	.LFE18:
 1972              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1973              		.align	1
 1974              		.global	vTaskStartScheduler
 1975              		.syntax unified
 1976              		.thumb
 1977              		.thumb_func
 1978              		.fpu fpv4-sp-d16
 1980              	vTaskStartScheduler:
 1981              	.LFB19:
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1982              		.loc 1 1968 0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 16
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 1986 0000 10B5     		push	{r4, lr}
 1987              	.LCFI22:
 1988              		.cfi_def_cfa_offset 8
 1989              		.cfi_offset 4, -8
 1990              		.cfi_offset 14, -4
 1991 0002 88B0     		sub	sp, sp, #32
 1992              	.LCFI23:
 1993              		.cfi_def_cfa_offset 40
 1994              	.LBB151:
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1995              		.loc 1 1974 0
 1996 0004 0024     		movs	r4, #0
 1997 0006 0594     		str	r4, [sp, #20]
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1998              		.loc 1 1975 0
 1999 0008 0694     		str	r4, [sp, #24]
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2000              		.loc 1 1980 0
 2001 000a 07AA     		add	r2, sp, #28
 2002 000c 06A9     		add	r1, sp, #24
 2003 000e 05A8     		add	r0, sp, #20
 2004 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 2005              	.LVL188:
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 2006              		.loc 1 1981 0
 2007 0014 059B     		ldr	r3, [sp, #20]
 2008 0016 0293     		str	r3, [sp, #8]
 2009 0018 069B     		ldr	r3, [sp, #24]
 2010 001a 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccJO9w1Z.s 			page 134


 2011 001c 0094     		str	r4, [sp]
 2012 001e 2346     		mov	r3, r4
 2013 0020 079A     		ldr	r2, [sp, #28]
 2014 0022 1949     		ldr	r1, .L196
 2015 0024 1948     		ldr	r0, .L196+4
 2016 0026 FFF7FEFF 		bl	xTaskCreateStatic
 2017              	.LVL189:
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2018              		.loc 1 1989 0
 2019 002a 48B1     		cbz	r0, .L191
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2020              		.loc 1 1991 0
 2021 002c 0120     		movs	r0, #1
 2022              	.L186:
 2023              	.LVL190:
 2024              	.LBE151:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2025              		.loc 1 2012 0
 2026 002e 0128     		cmp	r0, #1
 2027 0030 08D0     		beq	.L193
 2028              	.L187:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2029              		.loc 1 2023 0
 2030 0032 0128     		cmp	r0, #1
 2031 0034 09D0     		beq	.L194
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2032              		.loc 1 2080 0
 2033 0036 B0F1FF3F 		cmp	r0, #-1
 2034 003a 1BD0     		beq	.L195
 2035              	.LVL191:
 2036              	.L185:
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2037              		.loc 1 2086 0
 2038 003c 08B0     		add	sp, sp, #32
 2039              	.LCFI24:
 2040              		.cfi_remember_state
 2041              		.cfi_def_cfa_offset 8
 2042              		@ sp needed
 2043 003e 10BD     		pop	{r4, pc}
 2044              	.L191:
 2045              	.LCFI25:
 2046              		.cfi_restore_state
 2047              	.LBB152:
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2048              		.loc 1 1995 0
 2049 0040 0020     		movs	r0, #0
 2050 0042 F4E7     		b	.L186
 2051              	.LVL192:
 2052              	.L193:
 2053              	.LBE152:
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2054              		.loc 1 2014 0
 2055 0044 FFF7FEFF 		bl	xTimerCreateTimerTask
 2056              	.LVL193:
 2057 0048 F3E7     		b	.L187
 2058              	.L194:
 2059              	.LBB153:
ARM GAS  /tmp/ccJO9w1Z.s 			page 135


 2060              	.LBB154:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2061              		.loc 2 195 0
 2062              		.syntax unified
 2063              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2064 004a 4FF05003 			mov r3, #80												
 2065 004e 83F31188 		msr basepri, r3											
 2066 0052 BFF36F8F 		isb														
 2067 0056 BFF34F8F 		dsb														
 2068              	
 2069              	@ 0 "" 2
 2070              		.thumb
 2071              		.syntax unified
 2072              	.LBE154:
 2073              	.LBE153:
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2074              		.loc 1 2049 0
 2075 005a 4FF0FF32 		mov	r2, #-1
 2076 005e 0C4B     		ldr	r3, .L196+8
 2077 0060 1A60     		str	r2, [r3]
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2078              		.loc 1 2050 0
 2079 0062 0122     		movs	r2, #1
 2080 0064 0B4B     		ldr	r3, .L196+12
 2081 0066 1A60     		str	r2, [r3]
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2082              		.loc 1 2051 0
 2083 0068 0022     		movs	r2, #0
 2084 006a 0B4B     		ldr	r3, .L196+16
 2085 006c 1A60     		str	r2, [r3]
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2086              		.loc 1 2065 0
 2087 006e FFF7FEFF 		bl	xPortStartScheduler
 2088              	.LVL194:
 2089 0072 E3E7     		b	.L185
 2090              	.LVL195:
 2091              	.L195:
 2092              	.LBB155:
 2093              	.LBB156:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2094              		.loc 2 195 0
 2095              		.syntax unified
 2096              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2097 0074 4FF05003 			mov r3, #80												
 2098 0078 83F31188 		msr basepri, r3											
 2099 007c BFF36F8F 		isb														
 2100 0080 BFF34F8F 		dsb														
 2101              	
 2102              	@ 0 "" 2
 2103              	.LVL196:
 2104              		.thumb
 2105              		.syntax unified
 2106              	.L190:
 2107 0084 FEE7     		b	.L190
 2108              	.L197:
 2109 0086 00BF     		.align	2
 2110              	.L196:
ARM GAS  /tmp/ccJO9w1Z.s 			page 136


 2111 0088 00000000 		.word	.LC0
 2112 008c 00000000 		.word	prvIdleTask
 2113 0090 00000000 		.word	.LANCHOR3
 2114 0094 00000000 		.word	.LANCHOR11
 2115 0098 00000000 		.word	.LANCHOR15
 2116              	.LBE156:
 2117              	.LBE155:
 2118              		.cfi_endproc
 2119              	.LFE19:
 2121              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2122              		.align	1
 2123              		.global	vTaskEndScheduler
 2124              		.syntax unified
 2125              		.thumb
 2126              		.thumb_func
 2127              		.fpu fpv4-sp-d16
 2129              	vTaskEndScheduler:
 2130              	.LFB20:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2131              		.loc 1 2090 0
 2132              		.cfi_startproc
 2133              		@ args = 0, pretend = 0, frame = 0
 2134              		@ frame_needed = 0, uses_anonymous_args = 0
 2135 0000 08B5     		push	{r3, lr}
 2136              	.LCFI26:
 2137              		.cfi_def_cfa_offset 8
 2138              		.cfi_offset 3, -8
 2139              		.cfi_offset 14, -4
 2140              	.LBB157:
 2141              	.LBB158:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2142              		.loc 2 195 0
 2143              		.syntax unified
 2144              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2145 0002 4FF05003 			mov r3, #80												
 2146 0006 83F31188 		msr basepri, r3											
 2147 000a BFF36F8F 		isb														
 2148 000e BFF34F8F 		dsb														
 2149              	
 2150              	@ 0 "" 2
 2151              		.thumb
 2152              		.syntax unified
 2153              	.LBE158:
 2154              	.LBE157:
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2155              		.loc 1 2095 0
 2156 0012 0022     		movs	r2, #0
 2157 0014 024B     		ldr	r3, .L200
 2158 0016 1A60     		str	r2, [r3]
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2159              		.loc 1 2096 0
 2160 0018 FFF7FEFF 		bl	vPortEndScheduler
 2161              	.LVL197:
 2162 001c 08BD     		pop	{r3, pc}
 2163              	.L201:
 2164 001e 00BF     		.align	2
 2165              	.L200:
ARM GAS  /tmp/ccJO9w1Z.s 			page 137


 2166 0020 00000000 		.word	.LANCHOR11
 2167              		.cfi_endproc
 2168              	.LFE20:
 2170              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2171              		.align	1
 2172              		.global	vTaskSuspendAll
 2173              		.syntax unified
 2174              		.thumb
 2175              		.thumb_func
 2176              		.fpu fpv4-sp-d16
 2178              	vTaskSuspendAll:
 2179              	.LFB21:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2180              		.loc 1 2101 0
 2181              		.cfi_startproc
 2182              		@ args = 0, pretend = 0, frame = 0
 2183              		@ frame_needed = 0, uses_anonymous_args = 0
 2184              		@ link register save eliminated.
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2185              		.loc 1 2106 0
 2186 0000 024A     		ldr	r2, .L203
 2187 0002 1368     		ldr	r3, [r2]
 2188 0004 0133     		adds	r3, r3, #1
 2189 0006 1360     		str	r3, [r2]
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2190              		.loc 1 2107 0
 2191 0008 7047     		bx	lr
 2192              	.L204:
 2193 000a 00BF     		.align	2
 2194              	.L203:
 2195 000c 00000000 		.word	.LANCHOR16
 2196              		.cfi_endproc
 2197              	.LFE21:
 2199              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2200              		.align	1
 2201              		.global	xTaskGetTickCount
 2202              		.syntax unified
 2203              		.thumb
 2204              		.thumb_func
 2205              		.fpu fpv4-sp-d16
 2207              	xTaskGetTickCount:
 2208              	.LFB23:
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2209              		.loc 1 2285 0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 0
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 2213              		@ link register save eliminated.
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2214              		.loc 1 2291 0
 2215 0000 014B     		ldr	r3, .L206
 2216 0002 1868     		ldr	r0, [r3]
 2217              	.LVL198:
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2218              		.loc 1 2296 0
 2219 0004 7047     		bx	lr
 2220              	.L207:
ARM GAS  /tmp/ccJO9w1Z.s 			page 138


 2221 0006 00BF     		.align	2
 2222              	.L206:
 2223 0008 00000000 		.word	.LANCHOR15
 2224              		.cfi_endproc
 2225              	.LFE23:
 2227              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2228              		.align	1
 2229              		.global	xTaskGetTickCountFromISR
 2230              		.syntax unified
 2231              		.thumb
 2232              		.thumb_func
 2233              		.fpu fpv4-sp-d16
 2235              	xTaskGetTickCountFromISR:
 2236              	.LFB24:
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2237              		.loc 1 2300 0
 2238              		.cfi_startproc
 2239              		@ args = 0, pretend = 0, frame = 0
 2240              		@ frame_needed = 0, uses_anonymous_args = 0
 2241 0000 08B5     		push	{r3, lr}
 2242              	.LCFI27:
 2243              		.cfi_def_cfa_offset 8
 2244              		.cfi_offset 3, -8
 2245              		.cfi_offset 14, -4
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2246              		.loc 1 2318 0
 2247 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2248              	.LVL199:
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2249              		.loc 1 2322 0
 2250 0006 014B     		ldr	r3, .L210
 2251 0008 1868     		ldr	r0, [r3]
 2252              	.LVL200:
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2253              		.loc 1 2327 0
 2254 000a 08BD     		pop	{r3, pc}
 2255              	.L211:
 2256              		.align	2
 2257              	.L210:
 2258 000c 00000000 		.word	.LANCHOR15
 2259              		.cfi_endproc
 2260              	.LFE24:
 2262              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2263              		.align	1
 2264              		.global	uxTaskGetNumberOfTasks
 2265              		.syntax unified
 2266              		.thumb
 2267              		.thumb_func
 2268              		.fpu fpv4-sp-d16
 2270              	uxTaskGetNumberOfTasks:
 2271              	.LFB25:
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2272              		.loc 1 2331 0
 2273              		.cfi_startproc
 2274              		@ args = 0, pretend = 0, frame = 0
 2275              		@ frame_needed = 0, uses_anonymous_args = 0
 2276              		@ link register save eliminated.
ARM GAS  /tmp/ccJO9w1Z.s 			page 139


2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2277              		.loc 1 2334 0
 2278 0000 014B     		ldr	r3, .L213
 2279 0002 1868     		ldr	r0, [r3]
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2280              		.loc 1 2335 0
 2281 0004 7047     		bx	lr
 2282              	.L214:
 2283 0006 00BF     		.align	2
 2284              	.L213:
 2285 0008 00000000 		.word	.LANCHOR9
 2286              		.cfi_endproc
 2287              	.LFE25:
 2289              		.section	.text.pcTaskGetName,"ax",%progbits
 2290              		.align	1
 2291              		.global	pcTaskGetName
 2292              		.syntax unified
 2293              		.thumb
 2294              		.thumb_func
 2295              		.fpu fpv4-sp-d16
 2297              	pcTaskGetName:
 2298              	.LFB26:
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2299              		.loc 1 2339 0
 2300              		.cfi_startproc
 2301              		@ args = 0, pretend = 0, frame = 0
 2302              		@ frame_needed = 0, uses_anonymous_args = 0
 2303              		@ link register save eliminated.
 2304              	.LVL201:
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2305              		.loc 1 2344 0
 2306 0000 0346     		mov	r3, r0
 2307 0002 18B1     		cbz	r0, .L219
 2308              	.LVL202:
 2309              	.L216:
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2310              		.loc 1 2345 0 discriminator 4
 2311 0004 2BB1     		cbz	r3, .L220
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2312              		.loc 1 2347 0
 2313 0006 03F13400 		add	r0, r3, #52
 2314 000a 7047     		bx	lr
 2315              	.LVL203:
 2316              	.L219:
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2317              		.loc 1 2344 0 discriminator 1
 2318 000c 054B     		ldr	r3, .L221
 2319 000e 1B68     		ldr	r3, [r3]
 2320              	.LVL204:
 2321 0010 F8E7     		b	.L216
 2322              	.LVL205:
 2323              	.L220:
 2324              	.LBB159:
 2325              	.LBB160:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2326              		.loc 2 195 0
 2327              		.syntax unified
ARM GAS  /tmp/ccJO9w1Z.s 			page 140


 2328              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2329 0012 4FF05003 			mov r3, #80												
 2330 0016 83F31188 		msr basepri, r3											
 2331 001a BFF36F8F 		isb														
 2332 001e BFF34F8F 		dsb														
 2333              	
 2334              	@ 0 "" 2
 2335              	.LVL206:
 2336              		.thumb
 2337              		.syntax unified
 2338              	.L218:
 2339 0022 FEE7     		b	.L218
 2340              	.L222:
 2341              		.align	2
 2342              	.L221:
 2343 0024 00000000 		.word	.LANCHOR10
 2344              	.LBE160:
 2345              	.LBE159:
 2346              		.cfi_endproc
 2347              	.LFE26:
 2349              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2350              		.align	1
 2351              		.global	xTaskIncrementTick
 2352              		.syntax unified
 2353              		.thumb
 2354              		.thumb_func
 2355              		.fpu fpv4-sp-d16
 2357              	xTaskIncrementTick:
 2358              	.LFB28:
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2359              		.loc 1 2666 0
 2360              		.cfi_startproc
 2361              		@ args = 0, pretend = 0, frame = 0
 2362              		@ frame_needed = 0, uses_anonymous_args = 0
 2363 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2364              	.LCFI28:
 2365              		.cfi_def_cfa_offset 24
 2366              		.cfi_offset 3, -24
 2367              		.cfi_offset 4, -20
 2368              		.cfi_offset 5, -16
 2369              		.cfi_offset 6, -12
 2370              		.cfi_offset 7, -8
 2371              		.cfi_offset 14, -4
 2372              	.LVL207:
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2373              		.loc 1 2675 0
 2374 0002 3A4B     		ldr	r3, .L245
 2375 0004 1B68     		ldr	r3, [r3]
 2376 0006 002B     		cmp	r3, #0
 2377 0008 64D1     		bne	.L224
 2378              	.LBB161:
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2379              		.loc 1 2679 0
 2380 000a 394B     		ldr	r3, .L245+4
 2381 000c 1D68     		ldr	r5, [r3]
 2382 000e 0135     		adds	r5, r5, #1
 2383              	.LVL208:
ARM GAS  /tmp/ccJO9w1Z.s 			page 141


2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2384              		.loc 1 2683 0
 2385 0010 1D60     		str	r5, [r3]
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2386              		.loc 1 2685 0
 2387 0012 C5B9     		cbnz	r5, .L225
 2388              	.LBB162:
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2389              		.loc 1 2687 0
 2390 0014 374B     		ldr	r3, .L245+8
 2391 0016 1B68     		ldr	r3, [r3]
 2392 0018 1B68     		ldr	r3, [r3]
 2393 001a 43B1     		cbz	r3, .L226
 2394              	.LBB163:
 2395              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2396              		.loc 2 195 0
 2397              		.syntax unified
 2398              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2399 001c 4FF05003 			mov r3, #80												
 2400 0020 83F31188 		msr basepri, r3											
 2401 0024 BFF36F8F 		isb														
 2402 0028 BFF34F8F 		dsb														
 2403              	
 2404              	@ 0 "" 2
 2405              	.LVL209:
 2406              		.thumb
 2407              		.syntax unified
 2408              	.L227:
 2409 002c FEE7     		b	.L227
 2410              	.L226:
 2411              	.LBE164:
 2412              	.LBE163:
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2413              		.loc 1 2687 0 discriminator 2
 2414 002e 314A     		ldr	r2, .L245+8
 2415 0030 1168     		ldr	r1, [r2]
 2416              	.LVL210:
 2417 0032 314B     		ldr	r3, .L245+12
 2418 0034 1868     		ldr	r0, [r3]
 2419 0036 1060     		str	r0, [r2]
 2420 0038 1960     		str	r1, [r3]
 2421 003a 304A     		ldr	r2, .L245+16
 2422 003c 1368     		ldr	r3, [r2]
 2423 003e 0133     		adds	r3, r3, #1
 2424 0040 1360     		str	r3, [r2]
 2425 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2426              	.LVL211:
 2427              	.L225:
 2428              	.LBE162:
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2429              		.loc 1 2698 0
 2430 0046 2E4B     		ldr	r3, .L245+20
 2431 0048 1B68     		ldr	r3, [r3]
 2432 004a 9D42     		cmp	r5, r3
 2433 004c 38D2     		bcs	.L238
 2434              	.LBE161:
ARM GAS  /tmp/ccJO9w1Z.s 			page 142


2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2435              		.loc 1 2669 0
 2436 004e 0024     		movs	r4, #0
 2437              	.LVL212:
 2438              	.L229:
 2439              	.LBB165:
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2440              		.loc 1 2781 0
 2441 0050 2C4B     		ldr	r3, .L245+24
 2442 0052 1B68     		ldr	r3, [r3]
 2443 0054 DB6A     		ldr	r3, [r3, #44]
 2444 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2445 005a 9A00     		lsls	r2, r3, #2
 2446 005c 2A4B     		ldr	r3, .L245+28
 2447 005e 9B58     		ldr	r3, [r3, r2]
 2448 0060 012B     		cmp	r3, #1
 2449 0062 3CD9     		bls	.L236
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2450              		.loc 1 2783 0
 2451 0064 0124     		movs	r4, #1
 2452              	.LVL213:
 2453 0066 3AE0     		b	.L236
 2454              	.LVL214:
 2455              	.L239:
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2456              		.loc 1 2764 0
 2457 0068 0124     		movs	r4, #1
 2458              	.LVL215:
 2459              	.L228:
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2460              		.loc 1 2702 0
 2461 006a 224B     		ldr	r3, .L245+8
 2462 006c 1B68     		ldr	r3, [r3]
 2463 006e 1B68     		ldr	r3, [r3]
 2464 0070 43B3     		cbz	r3, .L243
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2465              		.loc 1 2718 0
 2466 0072 204B     		ldr	r3, .L245+8
 2467 0074 1B68     		ldr	r3, [r3]
 2468 0076 DB68     		ldr	r3, [r3, #12]
 2469 0078 DE68     		ldr	r6, [r3, #12]
 2470              	.LVL216:
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2471              		.loc 1 2719 0
 2472 007a 7368     		ldr	r3, [r6, #4]
 2473              	.LVL217:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2474              		.loc 1 2721 0
 2475 007c 9D42     		cmp	r5, r3
 2476 007e 26D3     		bcc	.L244
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2477              		.loc 1 2737 0
 2478 0080 371D     		adds	r7, r6, #4
 2479 0082 3846     		mov	r0, r7
 2480 0084 FFF7FEFF 		bl	uxListRemove
 2481              	.LVL218:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccJO9w1Z.s 			page 143


 2482              		.loc 1 2741 0
 2483 0088 B36A     		ldr	r3, [r6, #40]
 2484 008a 1BB1     		cbz	r3, .L232
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2485              		.loc 1 2743 0
 2486 008c 06F11800 		add	r0, r6, #24
 2487 0090 FFF7FEFF 		bl	uxListRemove
 2488              	.LVL219:
 2489              	.L232:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2490              		.loc 1 2752 0
 2491 0094 F36A     		ldr	r3, [r6, #44]
 2492 0096 1D4A     		ldr	r2, .L245+32
 2493 0098 1268     		ldr	r2, [r2]
 2494 009a 9342     		cmp	r3, r2
 2495 009c 01D9     		bls	.L233
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2496              		.loc 1 2752 0 is_stmt 0 discriminator 1
 2497 009e 1B4A     		ldr	r2, .L245+32
 2498 00a0 1360     		str	r3, [r2]
 2499              	.L233:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2500              		.loc 1 2752 0 discriminator 3
 2501 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2502 00a6 9A00     		lsls	r2, r3, #2
 2503 00a8 3946     		mov	r1, r7
 2504 00aa 1748     		ldr	r0, .L245+28
 2505 00ac 1044     		add	r0, r0, r2
 2506 00ae FFF7FEFF 		bl	vListInsertEnd
 2507              	.LVL220:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2508              		.loc 1 2762 0 is_stmt 1 discriminator 3
 2509 00b2 F26A     		ldr	r2, [r6, #44]
 2510 00b4 134B     		ldr	r3, .L245+24
 2511 00b6 1B68     		ldr	r3, [r3]
 2512 00b8 DB6A     		ldr	r3, [r3, #44]
 2513 00ba 9A42     		cmp	r2, r3
 2514 00bc D4D2     		bcs	.L239
 2515 00be D4E7     		b	.L228
 2516              	.LVL221:
 2517              	.L238:
 2518 00c0 0024     		movs	r4, #0
 2519 00c2 D2E7     		b	.L228
 2520              	.LVL222:
 2521              	.L243:
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2522              		.loc 1 2709 0
 2523 00c4 4FF0FF32 		mov	r2, #-1
 2524 00c8 0D4B     		ldr	r3, .L245+20
 2525 00ca 1A60     		str	r2, [r3]
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2526              		.loc 1 2710 0
 2527 00cc C0E7     		b	.L229
 2528              	.LVL223:
 2529              	.L244:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2530              		.loc 1 2728 0
ARM GAS  /tmp/ccJO9w1Z.s 			page 144


 2531 00ce 0C4A     		ldr	r2, .L245+20
 2532 00d0 1360     		str	r3, [r2]
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2533              		.loc 1 2729 0
 2534 00d2 BDE7     		b	.L229
 2535              	.LVL224:
 2536              	.L224:
 2537              	.LBE165:
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2538              		.loc 1 2809 0
 2539 00d4 0E4A     		ldr	r2, .L245+36
 2540 00d6 1368     		ldr	r3, [r2]
 2541 00d8 0133     		adds	r3, r3, #1
 2542 00da 1360     		str	r3, [r2]
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2543              		.loc 1 2669 0
 2544 00dc 0024     		movs	r4, #0
 2545              	.LVL225:
 2546              	.L236:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2547              		.loc 1 2822 0
 2548 00de 0D4B     		ldr	r3, .L245+40
 2549 00e0 1B68     		ldr	r3, [r3]
 2550 00e2 03B1     		cbz	r3, .L223
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2551              		.loc 1 2824 0
 2552 00e4 0124     		movs	r4, #1
 2553              	.LVL226:
 2554              	.L223:
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2555              		.loc 1 2834 0
 2556 00e6 2046     		mov	r0, r4
 2557 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2558              	.L246:
 2559 00ea 00BF     		.align	2
 2560              	.L245:
 2561 00ec 00000000 		.word	.LANCHOR16
 2562 00f0 00000000 		.word	.LANCHOR15
 2563 00f4 00000000 		.word	.LANCHOR2
 2564 00f8 00000000 		.word	.LANCHOR8
 2565 00fc 00000000 		.word	.LANCHOR17
 2566 0100 00000000 		.word	.LANCHOR3
 2567 0104 00000000 		.word	.LANCHOR10
 2568 0108 00000000 		.word	.LANCHOR4
 2569 010c 00000000 		.word	.LANCHOR13
 2570 0110 00000000 		.word	.LANCHOR18
 2571 0114 00000000 		.word	.LANCHOR19
 2572              		.cfi_endproc
 2573              	.LFE28:
 2575              		.section	.text.xTaskResumeAll,"ax",%progbits
 2576              		.align	1
 2577              		.global	xTaskResumeAll
 2578              		.syntax unified
 2579              		.thumb
 2580              		.thumb_func
 2581              		.fpu fpv4-sp-d16
 2583              	xTaskResumeAll:
ARM GAS  /tmp/ccJO9w1Z.s 			page 145


 2584              	.LFB22:
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2585              		.loc 1 2175 0
 2586              		.cfi_startproc
 2587              		@ args = 0, pretend = 0, frame = 0
 2588              		@ frame_needed = 0, uses_anonymous_args = 0
 2589 0000 38B5     		push	{r3, r4, r5, lr}
 2590              	.LCFI29:
 2591              		.cfi_def_cfa_offset 16
 2592              		.cfi_offset 3, -16
 2593              		.cfi_offset 4, -12
 2594              		.cfi_offset 5, -8
 2595              		.cfi_offset 14, -4
 2596              	.LVL227:
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2597              		.loc 1 2181 0
 2598 0002 354B     		ldr	r3, .L265
 2599 0004 1B68     		ldr	r3, [r3]
 2600 0006 43B9     		cbnz	r3, .L248
 2601              	.LBB166:
 2602              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2603              		.loc 2 195 0
 2604              		.syntax unified
 2605              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2606 0008 4FF05003 			mov r3, #80												
 2607 000c 83F31188 		msr basepri, r3											
 2608 0010 BFF36F8F 		isb														
 2609 0014 BFF34F8F 		dsb														
 2610              	
 2611              	@ 0 "" 2
 2612              	.LVL228:
 2613              		.thumb
 2614              		.syntax unified
 2615              	.L249:
 2616 0018 FEE7     		b	.L249
 2617              	.L248:
 2618              	.LBE167:
 2619              	.LBE166:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2620              		.loc 1 2188 0
 2621 001a FFF7FEFF 		bl	vPortEnterCritical
 2622              	.LVL229:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2623              		.loc 1 2190 0
 2624 001e 2E4B     		ldr	r3, .L265
 2625 0020 1A68     		ldr	r2, [r3]
 2626 0022 013A     		subs	r2, r2, #1
 2627 0024 1A60     		str	r2, [r3]
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2628              		.loc 1 2192 0
 2629 0026 1B68     		ldr	r3, [r3]
 2630 0028 002B     		cmp	r3, #0
 2631 002a 50D1     		bne	.L259
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2632              		.loc 1 2194 0
 2633 002c 2B4B     		ldr	r3, .L265+4
ARM GAS  /tmp/ccJO9w1Z.s 			page 146


 2634 002e 1B68     		ldr	r3, [r3]
 2635 0030 23B9     		cbnz	r3, .L260
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2636              		.loc 1 2177 0
 2637 0032 0024     		movs	r4, #0
 2638              	.LVL230:
 2639              	.L250:
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2640              		.loc 1 2278 0
 2641 0034 FFF7FEFF 		bl	vPortExitCritical
 2642              	.LVL231:
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2643              		.loc 1 2281 0
 2644 0038 2046     		mov	r0, r4
 2645 003a 38BD     		pop	{r3, r4, r5, pc}
 2646              	.LVL232:
 2647              	.L260:
 2648 003c 0024     		movs	r4, #0
 2649              	.LVL233:
 2650              	.L251:
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2651              		.loc 1 2198 0
 2652 003e 284B     		ldr	r3, .L265+8
 2653 0040 1B68     		ldr	r3, [r3]
 2654 0042 1BB3     		cbz	r3, .L263
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2655              		.loc 1 2200 0
 2656 0044 264B     		ldr	r3, .L265+8
 2657 0046 DB68     		ldr	r3, [r3, #12]
 2658 0048 DC68     		ldr	r4, [r3, #12]
 2659              	.LVL234:
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2660              		.loc 1 2201 0
 2661 004a 04F11800 		add	r0, r4, #24
 2662 004e FFF7FEFF 		bl	uxListRemove
 2663              	.LVL235:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2664              		.loc 1 2202 0
 2665 0052 251D     		adds	r5, r4, #4
 2666 0054 2846     		mov	r0, r5
 2667 0056 FFF7FEFF 		bl	uxListRemove
 2668              	.LVL236:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2669              		.loc 1 2203 0
 2670 005a E36A     		ldr	r3, [r4, #44]
 2671 005c 214A     		ldr	r2, .L265+12
 2672 005e 1268     		ldr	r2, [r2]
 2673 0060 9342     		cmp	r3, r2
 2674 0062 01D9     		bls	.L252
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2675              		.loc 1 2203 0 is_stmt 0 discriminator 1
 2676 0064 1F4A     		ldr	r2, .L265+12
 2677 0066 1360     		str	r3, [r2]
 2678              	.L252:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2679              		.loc 1 2203 0 discriminator 3
 2680 0068 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  /tmp/ccJO9w1Z.s 			page 147


 2681 006c 9A00     		lsls	r2, r3, #2
 2682 006e 2946     		mov	r1, r5
 2683 0070 1D48     		ldr	r0, .L265+16
 2684 0072 1044     		add	r0, r0, r2
 2685 0074 FFF7FEFF 		bl	vListInsertEnd
 2686              	.LVL237:
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2687              		.loc 1 2207 0 is_stmt 1 discriminator 3
 2688 0078 E26A     		ldr	r2, [r4, #44]
 2689 007a 1C4B     		ldr	r3, .L265+20
 2690 007c 1B68     		ldr	r3, [r3]
 2691 007e DB6A     		ldr	r3, [r3, #44]
 2692 0080 9A42     		cmp	r2, r3
 2693 0082 DCD3     		bcc	.L251
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2694              		.loc 1 2209 0
 2695 0084 0122     		movs	r2, #1
 2696 0086 1A4B     		ldr	r3, .L265+24
 2697 0088 1A60     		str	r2, [r3]
 2698 008a D8E7     		b	.L251
 2699              	.L263:
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2700              		.loc 1 2217 0
 2701 008c 0CB1     		cbz	r4, .L255
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2702              		.loc 1 2225 0
 2703 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2704              	.LVL238:
 2705              	.L255:
 2706              	.LBB168:
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2707              		.loc 1 2233 0
 2708 0092 184B     		ldr	r3, .L265+28
 2709 0094 1C68     		ldr	r4, [r3]
 2710              	.LVL239:
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2711              		.loc 1 2235 0
 2712 0096 74B9     		cbnz	r4, .L258
 2713              	.L256:
 2714              	.LBE168:
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2715              		.loc 1 2258 0
 2716 0098 154B     		ldr	r3, .L265+24
 2717 009a 1B68     		ldr	r3, [r3]
 2718 009c CBB1     		cbz	r3, .L261
 2719              	.LVL240:
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2720              		.loc 1 2265 0
 2721 009e 4FF08052 		mov	r2, #268435456
 2722 00a2 154B     		ldr	r3, .L265+32
 2723 00a4 1A60     		str	r2, [r3]
 2724              		.syntax unified
 2725              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2726 00a6 BFF34F8F 		dsb
 2727              	@ 0 "" 2
 2728              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2729 00aa BFF36F8F 		isb
ARM GAS  /tmp/ccJO9w1Z.s 			page 148


 2730              	@ 0 "" 2
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2731              		.loc 1 2262 0
 2732              		.thumb
 2733              		.syntax unified
 2734 00ae 0124     		movs	r4, #1
 2735              	.LVL241:
 2736 00b0 C0E7     		b	.L250
 2737              	.LVL242:
 2738              	.L257:
 2739              	.LBB169:
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2740              		.loc 1 2248 0
 2741 00b2 013C     		subs	r4, r4, #1
 2742              	.LVL243:
 2743 00b4 07D0     		beq	.L264
 2744              	.L258:
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2745              		.loc 1 2239 0
 2746 00b6 FFF7FEFF 		bl	xTaskIncrementTick
 2747              	.LVL244:
 2748 00ba 0028     		cmp	r0, #0
 2749 00bc F9D0     		beq	.L257
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2750              		.loc 1 2241 0
 2751 00be 0122     		movs	r2, #1
 2752 00c0 0B4B     		ldr	r3, .L265+24
 2753 00c2 1A60     		str	r2, [r3]
 2754 00c4 F5E7     		b	.L257
 2755              	.L264:
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2756              		.loc 1 2250 0
 2757 00c6 0022     		movs	r2, #0
 2758 00c8 0A4B     		ldr	r3, .L265+28
 2759 00ca 1A60     		str	r2, [r3]
 2760 00cc E4E7     		b	.L256
 2761              	.LVL245:
 2762              	.L259:
 2763              	.LBE169:
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2764              		.loc 1 2177 0
 2765 00ce 0024     		movs	r4, #0
 2766 00d0 B0E7     		b	.L250
 2767              	.LVL246:
 2768              	.L261:
 2769 00d2 0024     		movs	r4, #0
 2770              	.LVL247:
 2771 00d4 AEE7     		b	.L250
 2772              	.L266:
 2773 00d6 00BF     		.align	2
 2774              	.L265:
 2775 00d8 00000000 		.word	.LANCHOR16
 2776 00dc 00000000 		.word	.LANCHOR9
 2777 00e0 00000000 		.word	.LANCHOR1
 2778 00e4 00000000 		.word	.LANCHOR13
 2779 00e8 00000000 		.word	.LANCHOR4
 2780 00ec 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/ccJO9w1Z.s 			page 149


 2781 00f0 00000000 		.word	.LANCHOR19
 2782 00f4 00000000 		.word	.LANCHOR18
 2783 00f8 04ED00E0 		.word	-536810236
 2784              		.cfi_endproc
 2785              	.LFE22:
 2787              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2788              		.align	1
 2789              		.global	vTaskDelayUntil
 2790              		.syntax unified
 2791              		.thumb
 2792              		.thumb_func
 2793              		.fpu fpv4-sp-d16
 2795              	vTaskDelayUntil:
 2796              	.LFB9:
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2797              		.loc 1 1250 0
 2798              		.cfi_startproc
 2799              		@ args = 0, pretend = 0, frame = 0
 2800              		@ frame_needed = 0, uses_anonymous_args = 0
 2801              	.LVL248:
 2802 0000 38B5     		push	{r3, r4, r5, lr}
 2803              	.LCFI30:
 2804              		.cfi_def_cfa_offset 16
 2805              		.cfi_offset 3, -16
 2806              		.cfi_offset 4, -12
 2807              		.cfi_offset 5, -8
 2808              		.cfi_offset 14, -4
 2809              	.LVL249:
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2810              		.loc 1 1254 0
 2811 0002 50B1     		cbz	r0, .L283
 2812 0004 0546     		mov	r5, r0
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2813              		.loc 1 1255 0
 2814 0006 89B9     		cbnz	r1, .L270
 2815              	.LBB170:
 2816              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2817              		.loc 2 195 0
 2818              		.syntax unified
 2819              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2820 0008 4FF05003 			mov r3, #80												
 2821 000c 83F31188 		msr basepri, r3											
 2822 0010 BFF36F8F 		isb														
 2823 0014 BFF34F8F 		dsb														
 2824              	
 2825              	@ 0 "" 2
 2826              	.LVL250:
 2827              		.thumb
 2828              		.syntax unified
 2829              	.L271:
 2830 0018 FEE7     		b	.L271
 2831              	.L283:
 2832              	.LBE171:
 2833              	.LBE170:
 2834              	.LBB172:
 2835              	.LBB173:
ARM GAS  /tmp/ccJO9w1Z.s 			page 150


 2836              		.syntax unified
 2837              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2838 001a 4FF05003 			mov r3, #80												
 2839 001e 83F31188 		msr basepri, r3											
 2840 0022 BFF36F8F 		isb														
 2841 0026 BFF34F8F 		dsb														
 2842              	
 2843              	@ 0 "" 2
 2844              	.LVL251:
 2845              		.thumb
 2846              		.syntax unified
 2847              	.L269:
 2848 002a FEE7     		b	.L269
 2849              	.L270:
 2850              	.LBE173:
 2851              	.LBE172:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2852              		.loc 1 1256 0
 2853 002c 1C4B     		ldr	r3, .L284
 2854 002e 1B68     		ldr	r3, [r3]
 2855 0030 43B1     		cbz	r3, .L272
 2856              	.LBB174:
 2857              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2858              		.loc 2 195 0
 2859              		.syntax unified
 2860              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2861 0032 4FF05003 			mov r3, #80												
 2862 0036 83F31188 		msr basepri, r3											
 2863 003a BFF36F8F 		isb														
 2864 003e BFF34F8F 		dsb														
 2865              	
 2866              	@ 0 "" 2
 2867              	.LVL252:
 2868              		.thumb
 2869              		.syntax unified
 2870              	.L273:
 2871 0042 FEE7     		b	.L273
 2872              	.L272:
 2873 0044 0C46     		mov	r4, r1
 2874              	.LBE175:
 2875              	.LBE174:
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2876              		.loc 1 1258 0
 2877 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2878              	.LVL253:
 2879              	.LBB176:
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2880              		.loc 1 1262 0
 2881 004a 164B     		ldr	r3, .L284+4
 2882 004c 1868     		ldr	r0, [r3]
 2883              	.LVL254:
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2884              		.loc 1 1265 0
 2885 004e 2A68     		ldr	r2, [r5]
 2886 0050 1444     		add	r4, r4, r2
 2887              	.LVL255:
ARM GAS  /tmp/ccJO9w1Z.s 			page 151


1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2888              		.loc 1 1267 0
 2889 0052 9042     		cmp	r0, r2
 2890 0054 16D2     		bcs	.L274
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2891              		.loc 1 1274 0
 2892 0056 A242     		cmp	r2, r4
 2893 0058 1AD9     		bls	.L278
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2894              		.loc 1 1274 0 is_stmt 0 discriminator 1
 2895 005a A042     		cmp	r0, r4
 2896 005c 1AD3     		bcc	.L279
 2897              	.LBE176:
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2898              		.loc 1 1252 0 is_stmt 1
 2899 005e 0022     		movs	r2, #0
 2900              	.L275:
 2901              	.LVL256:
 2902              	.LBB177:
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2903              		.loc 1 1299 0
 2904 0060 2C60     		str	r4, [r5]
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2905              		.loc 1 1301 0
 2906 0062 1AB1     		cbz	r2, .L276
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2907              		.loc 1 1307 0
 2908 0064 0021     		movs	r1, #0
 2909 0066 201A     		subs	r0, r4, r0
 2910              	.LVL257:
 2911 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2912              	.LVL258:
 2913              	.L276:
 2914              	.LBE177:
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2915              		.loc 1 1314 0
 2916 006c FFF7FEFF 		bl	xTaskResumeAll
 2917              	.LVL259:
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2918              		.loc 1 1318 0
 2919 0070 38B9     		cbnz	r0, .L267
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2920              		.loc 1 1320 0
 2921 0072 4FF08052 		mov	r2, #268435456
 2922 0076 0C4B     		ldr	r3, .L284+8
 2923 0078 1A60     		str	r2, [r3]
 2924              		.syntax unified
 2925              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2926 007a BFF34F8F 		dsb
 2927              	@ 0 "" 2
 2928              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2929 007e BFF36F8F 		isb
 2930              	@ 0 "" 2
 2931              		.thumb
 2932              		.syntax unified
 2933              	.L267:
 2934 0082 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccJO9w1Z.s 			page 152


 2935              	.LVL260:
 2936              	.L274:
 2937              	.LBB178:
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2938              		.loc 1 1288 0
 2939 0084 A242     		cmp	r2, r4
 2940 0086 07D8     		bhi	.L280
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2941              		.loc 1 1288 0 is_stmt 0 discriminator 1
 2942 0088 A042     		cmp	r0, r4
 2943 008a 07D3     		bcc	.L281
 2944              	.LBE178:
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2945              		.loc 1 1252 0 is_stmt 1
 2946 008c 0022     		movs	r2, #0
 2947 008e E7E7     		b	.L275
 2948              	.L278:
 2949 0090 0022     		movs	r2, #0
 2950 0092 E5E7     		b	.L275
 2951              	.L279:
 2952              	.LBB179:
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2953              		.loc 1 1276 0
 2954 0094 0122     		movs	r2, #1
 2955 0096 E3E7     		b	.L275
 2956              	.L280:
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2957              		.loc 1 1290 0
 2958 0098 0122     		movs	r2, #1
 2959 009a E1E7     		b	.L275
 2960              	.L281:
 2961 009c 0122     		movs	r2, #1
 2962 009e DFE7     		b	.L275
 2963              	.L285:
 2964              		.align	2
 2965              	.L284:
 2966 00a0 00000000 		.word	.LANCHOR16
 2967 00a4 00000000 		.word	.LANCHOR15
 2968 00a8 04ED00E0 		.word	-536810236
 2969              	.LBE179:
 2970              		.cfi_endproc
 2971              	.LFE9:
 2973              		.section	.text.vTaskDelay,"ax",%progbits
 2974              		.align	1
 2975              		.global	vTaskDelay
 2976              		.syntax unified
 2977              		.thumb
 2978              		.thumb_func
 2979              		.fpu fpv4-sp-d16
 2981              	vTaskDelay:
 2982              	.LFB10:
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2983              		.loc 1 1334 0
 2984              		.cfi_startproc
 2985              		@ args = 0, pretend = 0, frame = 0
 2986              		@ frame_needed = 0, uses_anonymous_args = 0
 2987              	.LVL261:
ARM GAS  /tmp/ccJO9w1Z.s 			page 153


 2988 0000 10B5     		push	{r4, lr}
 2989              	.LCFI31:
 2990              		.cfi_def_cfa_offset 8
 2991              		.cfi_offset 4, -8
 2992              		.cfi_offset 14, -4
 2993              	.LVL262:
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2994              		.loc 1 1338 0
 2995 0002 A8B1     		cbz	r0, .L291
 2996 0004 0446     		mov	r4, r0
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2997              		.loc 1 1340 0
 2998 0006 104B     		ldr	r3, .L293
 2999 0008 1B68     		ldr	r3, [r3]
 3000 000a 43B1     		cbz	r3, .L288
 3001              	.LBB180:
 3002              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3003              		.loc 2 195 0
 3004              		.syntax unified
 3005              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3006 000c 4FF05003 			mov r3, #80												
 3007 0010 83F31188 		msr basepri, r3											
 3008 0014 BFF36F8F 		isb														
 3009 0018 BFF34F8F 		dsb														
 3010              	
 3011              	@ 0 "" 2
 3012              	.LVL263:
 3013              		.thumb
 3014              		.syntax unified
 3015              	.L289:
 3016 001c FEE7     		b	.L289
 3017              	.L288:
 3018              	.LBE181:
 3019              	.LBE180:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3020              		.loc 1 1341 0
 3021 001e FFF7FEFF 		bl	vTaskSuspendAll
 3022              	.LVL264:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3023              		.loc 1 1352 0
 3024 0022 0021     		movs	r1, #0
 3025 0024 2046     		mov	r0, r4
 3026 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3027              	.LVL265:
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3028              		.loc 1 1354 0
 3029 002a FFF7FEFF 		bl	xTaskResumeAll
 3030              	.LVL266:
 3031 002e 00E0     		b	.L287
 3032              	.LVL267:
 3033              	.L291:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3034              		.loc 1 1335 0
 3035 0030 0020     		movs	r0, #0
 3036              	.LVL268:
 3037              	.L287:
ARM GAS  /tmp/ccJO9w1Z.s 			page 154


1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3038              		.loc 1 1363 0
 3039 0032 38B9     		cbnz	r0, .L286
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3040              		.loc 1 1365 0
 3041 0034 4FF08052 		mov	r2, #268435456
 3042 0038 044B     		ldr	r3, .L293+4
 3043 003a 1A60     		str	r2, [r3]
 3044              		.syntax unified
 3045              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3046 003c BFF34F8F 		dsb
 3047              	@ 0 "" 2
 3048              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3049 0040 BFF36F8F 		isb
 3050              	@ 0 "" 2
 3051              		.thumb
 3052              		.syntax unified
 3053              	.L286:
 3054 0044 10BD     		pop	{r4, pc}
 3055              	.L294:
 3056 0046 00BF     		.align	2
 3057              	.L293:
 3058 0048 00000000 		.word	.LANCHOR16
 3059 004c 04ED00E0 		.word	-536810236
 3060              		.cfi_endproc
 3061              	.LFE10:
 3063              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3064              		.align	1
 3065              		.global	vTaskSwitchContext
 3066              		.syntax unified
 3067              		.thumb
 3068              		.thumb_func
 3069              		.fpu fpv4-sp-d16
 3071              	vTaskSwitchContext:
 3072              	.LFB29:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3073              		.loc 1 2948 0
 3074              		.cfi_startproc
 3075              		@ args = 0, pretend = 0, frame = 0
 3076              		@ frame_needed = 0, uses_anonymous_args = 0
 3077              		@ link register save eliminated.
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3078              		.loc 1 2949 0
 3079 0000 214B     		ldr	r3, .L311
 3080 0002 1B68     		ldr	r3, [r3]
 3081 0004 6BB9     		cbnz	r3, .L307
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3082              		.loc 1 2957 0
 3083 0006 0022     		movs	r2, #0
 3084 0008 204B     		ldr	r3, .L311+4
 3085 000a 1A60     		str	r2, [r3]
 3086              	.LBB182:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3087              		.loc 1 2999 0
 3088 000c 204B     		ldr	r3, .L311+8
 3089 000e 1B68     		ldr	r3, [r3]
 3090              	.LVL269:
ARM GAS  /tmp/ccJO9w1Z.s 			page 155


 3091              	.L298:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3092              		.loc 1 2999 0 is_stmt 0 discriminator 4
 3093 0010 03EB8301 		add	r1, r3, r3, lsl #2
 3094 0014 8A00     		lsls	r2, r1, #2
 3095 0016 1F49     		ldr	r1, .L311+12
 3096 0018 8A58     		ldr	r2, [r1, r2]
 3097 001a 7AB9     		cbnz	r2, .L308
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3098              		.loc 1 2999 0 discriminator 5
 3099 001c 2BB1     		cbz	r3, .L309
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3100              		.loc 1 2999 0 discriminator 3
 3101 001e 013B     		subs	r3, r3, #1
 3102              	.LVL270:
 3103 0020 F6E7     		b	.L298
 3104              	.LVL271:
 3105              	.L307:
 3106              	.LBE182:
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3107              		.loc 1 2953 0 is_stmt 1
 3108 0022 0122     		movs	r2, #1
 3109 0024 194B     		ldr	r3, .L311+4
 3110 0026 1A60     		str	r2, [r3]
 3111 0028 7047     		bx	lr
 3112              	.LVL272:
 3113              	.L309:
 3114              	.LBB187:
 3115              	.LBB183:
 3116              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3117              		.loc 2 195 0
 3118              		.syntax unified
 3119              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3120 002a 4FF05003 			mov r3, #80												
 3121 002e 83F31188 		msr basepri, r3											
 3122 0032 BFF36F8F 		isb														
 3123 0036 BFF34F8F 		dsb														
 3124              	
 3125              	@ 0 "" 2
 3126              	.LVL273:
 3127              		.thumb
 3128              		.syntax unified
 3129              	.L300:
 3130 003a FEE7     		b	.L300
 3131              	.LVL274:
 3132              	.L308:
 3133              	.LBE184:
 3134              	.LBE183:
 3135              	.LBE187:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3136              		.loc 1 2948 0 discriminator 6
 3137 003c 10B4     		push	{r4}
 3138              	.LCFI32:
 3139              		.cfi_def_cfa_offset 4
 3140              		.cfi_offset 4, -4
 3141              	.LVL275:
ARM GAS  /tmp/ccJO9w1Z.s 			page 156


 3142              	.LBB188:
 3143              	.LBB185:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3144              		.loc 1 2999 0 discriminator 6
 3145 003e 0846     		mov	r0, r1
 3146 0040 9A00     		lsls	r2, r3, #2
 3147 0042 D418     		adds	r4, r2, r3
 3148 0044 A100     		lsls	r1, r4, #2
 3149 0046 0144     		add	r1, r1, r0
 3150 0048 4C68     		ldr	r4, [r1, #4]
 3151 004a 6468     		ldr	r4, [r4, #4]
 3152 004c 4C60     		str	r4, [r1, #4]
 3153 004e 1A44     		add	r2, r2, r3
 3154 0050 9100     		lsls	r1, r2, #2
 3155 0052 0831     		adds	r1, r1, #8
 3156 0054 0844     		add	r0, r0, r1
 3157 0056 8442     		cmp	r4, r0
 3158 0058 0DD0     		beq	.L310
 3159              	.L302:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3160              		.loc 1 2999 0 is_stmt 0 discriminator 9
 3161 005a 03EB8302 		add	r2, r3, r3, lsl #2
 3162 005e 9100     		lsls	r1, r2, #2
 3163 0060 0C4A     		ldr	r2, .L311+12
 3164 0062 0A44     		add	r2, r2, r1
 3165 0064 5268     		ldr	r2, [r2, #4]
 3166 0066 D168     		ldr	r1, [r2, #12]
 3167 0068 0B4A     		ldr	r2, .L311+16
 3168 006a 1160     		str	r1, [r2]
 3169              	.LBE185:
 3170 006c 084A     		ldr	r2, .L311+8
 3171 006e 1360     		str	r3, [r2]
 3172              	.LBE188:
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3173              		.loc 1 3017 0 is_stmt 1 discriminator 9
 3174 0070 5DF8044B 		ldr	r4, [sp], #4
 3175              	.LCFI33:
 3176              		.cfi_remember_state
 3177              		.cfi_restore 4
 3178              		.cfi_def_cfa_offset 0
 3179 0074 7047     		bx	lr
 3180              	.L310:
 3181              	.LCFI34:
 3182              		.cfi_restore_state
 3183              	.LBB189:
 3184              	.LBB186:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3185              		.loc 1 2999 0 discriminator 7
 3186 0076 6068     		ldr	r0, [r4, #4]
 3187 0078 03EB8302 		add	r2, r3, r3, lsl #2
 3188 007c 9100     		lsls	r1, r2, #2
 3189 007e 054A     		ldr	r2, .L311+12
 3190 0080 0A44     		add	r2, r2, r1
 3191 0082 5060     		str	r0, [r2, #4]
 3192 0084 E9E7     		b	.L302
 3193              	.L312:
 3194 0086 00BF     		.align	2
ARM GAS  /tmp/ccJO9w1Z.s 			page 157


 3195              	.L311:
 3196 0088 00000000 		.word	.LANCHOR16
 3197 008c 00000000 		.word	.LANCHOR19
 3198 0090 00000000 		.word	.LANCHOR13
 3199 0094 00000000 		.word	.LANCHOR4
 3200 0098 00000000 		.word	.LANCHOR10
 3201              	.LBE186:
 3202              	.LBE189:
 3203              		.cfi_endproc
 3204              	.LFE29:
 3206              		.section	.text.vTaskSuspend,"ax",%progbits
 3207              		.align	1
 3208              		.global	vTaskSuspend
 3209              		.syntax unified
 3210              		.thumb
 3211              		.thumb_func
 3212              		.fpu fpv4-sp-d16
 3214              	vTaskSuspend:
 3215              	.LFB15:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3216              		.loc 1 1697 0
 3217              		.cfi_startproc
 3218              		@ args = 0, pretend = 0, frame = 0
 3219              		@ frame_needed = 0, uses_anonymous_args = 0
 3220              	.LVL276:
 3221 0000 38B5     		push	{r3, r4, r5, lr}
 3222              	.LCFI35:
 3223              		.cfi_def_cfa_offset 16
 3224              		.cfi_offset 3, -16
 3225              		.cfi_offset 4, -12
 3226              		.cfi_offset 5, -8
 3227              		.cfi_offset 14, -4
 3228 0002 0446     		mov	r4, r0
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3229              		.loc 1 1700 0
 3230 0004 FFF7FEFF 		bl	vPortEnterCritical
 3231              	.LVL277:
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3232              		.loc 1 1704 0
 3233 0008 E4B1     		cbz	r4, .L324
 3234              	.LVL278:
 3235              	.L314:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3236              		.loc 1 1710 0 discriminator 4
 3237 000a 251D     		adds	r5, r4, #4
 3238 000c 2846     		mov	r0, r5
 3239 000e FFF7FEFF 		bl	uxListRemove
 3240              	.LVL279:
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3241              		.loc 1 1720 0 discriminator 4
 3242 0012 A36A     		ldr	r3, [r4, #40]
 3243 0014 1BB1     		cbz	r3, .L315
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3244              		.loc 1 1722 0
 3245 0016 04F11800 		add	r0, r4, #24
 3246 001a FFF7FEFF 		bl	uxListRemove
 3247              	.LVL280:
ARM GAS  /tmp/ccJO9w1Z.s 			page 158


 3248              	.L315:
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3249              		.loc 1 1729 0
 3250 001e 2946     		mov	r1, r5
 3251 0020 2248     		ldr	r0, .L328
 3252 0022 FFF7FEFF 		bl	vListInsertEnd
 3253              	.LVL281:
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3254              		.loc 1 1733 0
 3255 0026 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3256 002a DBB2     		uxtb	r3, r3
 3257 002c 012B     		cmp	r3, #1
 3258 002e 0CD0     		beq	.L325
 3259              	.L316:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3260              		.loc 1 1742 0
 3261 0030 FFF7FEFF 		bl	vPortExitCritical
 3262              	.LVL282:
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3263              		.loc 1 1744 0
 3264 0034 1E4B     		ldr	r3, .L328+4
 3265 0036 1B68     		ldr	r3, [r3]
 3266 0038 5BB9     		cbnz	r3, .L326
 3267              	.L317:
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3268              		.loc 1 1759 0
 3269 003a 1E4B     		ldr	r3, .L328+8
 3270 003c 1B68     		ldr	r3, [r3]
 3271 003e 9C42     		cmp	r4, r3
 3272 0040 0ED0     		beq	.L327
 3273              	.L313:
 3274 0042 38BD     		pop	{r3, r4, r5, pc}
 3275              	.LVL283:
 3276              	.L324:
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3277              		.loc 1 1704 0 discriminator 1
 3278 0044 1B4B     		ldr	r3, .L328+8
 3279 0046 1C68     		ldr	r4, [r3]
 3280              	.LVL284:
 3281 0048 DFE7     		b	.L314
 3282              	.LVL285:
 3283              	.L325:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3284              		.loc 1 1737 0
 3285 004a 0023     		movs	r3, #0
 3286 004c 84F85830 		strb	r3, [r4, #88]
 3287 0050 EEE7     		b	.L316
 3288              	.L326:
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3289              		.loc 1 1748 0
 3290 0052 FFF7FEFF 		bl	vPortEnterCritical
 3291              	.LVL286:
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3292              		.loc 1 1750 0
 3293 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3294              	.LVL287:
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccJO9w1Z.s 			page 159


 3295              		.loc 1 1752 0
 3296 005a FFF7FEFF 		bl	vPortExitCritical
 3297              	.LVL288:
 3298 005e ECE7     		b	.L317
 3299              	.L327:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3300              		.loc 1 1761 0
 3301 0060 134B     		ldr	r3, .L328+4
 3302 0062 1B68     		ldr	r3, [r3]
 3303 0064 A3B1     		cbz	r3, .L319
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3304              		.loc 1 1764 0
 3305 0066 144B     		ldr	r3, .L328+12
 3306 0068 1B68     		ldr	r3, [r3]
 3307 006a 43B1     		cbz	r3, .L320
 3308              	.LBB190:
 3309              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3310              		.loc 2 195 0
 3311              		.syntax unified
 3312              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3313 006c 4FF05003 			mov r3, #80												
 3314 0070 83F31188 		msr basepri, r3											
 3315 0074 BFF36F8F 		isb														
 3316 0078 BFF34F8F 		dsb														
 3317              	
 3318              	@ 0 "" 2
 3319              	.LVL289:
 3320              		.thumb
 3321              		.syntax unified
 3322              	.L321:
 3323 007c FEE7     		b	.L321
 3324              	.L320:
 3325              	.LBE191:
 3326              	.LBE190:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3327              		.loc 1 1765 0
 3328 007e 4FF08052 		mov	r2, #268435456
 3329 0082 0E4B     		ldr	r3, .L328+16
 3330 0084 1A60     		str	r2, [r3]
 3331              		.syntax unified
 3332              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3333 0086 BFF34F8F 		dsb
 3334              	@ 0 "" 2
 3335              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3336 008a BFF36F8F 		isb
 3337              	@ 0 "" 2
 3338              		.thumb
 3339              		.syntax unified
 3340 008e 38BD     		pop	{r3, r4, r5, pc}
 3341              	.LVL290:
 3342              	.L319:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3343              		.loc 1 1772 0
 3344 0090 064B     		ldr	r3, .L328
 3345 0092 1A68     		ldr	r2, [r3]
 3346 0094 0A4B     		ldr	r3, .L328+20
ARM GAS  /tmp/ccJO9w1Z.s 			page 160


 3347 0096 1B68     		ldr	r3, [r3]
 3348 0098 9A42     		cmp	r2, r3
 3349 009a 03D1     		bne	.L322
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3350              		.loc 1 1778 0
 3351 009c 0022     		movs	r2, #0
 3352 009e 054B     		ldr	r3, .L328+8
 3353 00a0 1A60     		str	r2, [r3]
 3354 00a2 38BD     		pop	{r3, r4, r5, pc}
 3355              	.LVL291:
 3356              	.L322:
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3357              		.loc 1 1782 0
 3358 00a4 FFF7FEFF 		bl	vTaskSwitchContext
 3359              	.LVL292:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3360              		.loc 1 1790 0
 3361 00a8 CBE7     		b	.L313
 3362              	.L329:
 3363 00aa 00BF     		.align	2
 3364              	.L328:
 3365 00ac 00000000 		.word	.LANCHOR0
 3366 00b0 00000000 		.word	.LANCHOR11
 3367 00b4 00000000 		.word	.LANCHOR10
 3368 00b8 00000000 		.word	.LANCHOR16
 3369 00bc 04ED00E0 		.word	-536810236
 3370 00c0 00000000 		.word	.LANCHOR9
 3371              		.cfi_endproc
 3372              	.LFE15:
 3374              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3375              		.align	1
 3376              		.global	vTaskPlaceOnEventList
 3377              		.syntax unified
 3378              		.thumb
 3379              		.thumb_func
 3380              		.fpu fpv4-sp-d16
 3382              	vTaskPlaceOnEventList:
 3383              	.LFB30:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3384              		.loc 1 3021 0
 3385              		.cfi_startproc
 3386              		@ args = 0, pretend = 0, frame = 0
 3387              		@ frame_needed = 0, uses_anonymous_args = 0
 3388              	.LVL293:
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3389              		.loc 1 3022 0
 3390 0000 40B9     		cbnz	r0, .L331
 3391              	.LBB192:
 3392              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3393              		.loc 2 195 0
 3394              		.syntax unified
 3395              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3396 0002 4FF05003 			mov r3, #80												
 3397 0006 83F31188 		msr basepri, r3											
 3398 000a BFF36F8F 		isb														
 3399 000e BFF34F8F 		dsb														
ARM GAS  /tmp/ccJO9w1Z.s 			page 161


 3400              	
 3401              	@ 0 "" 2
 3402              	.LVL294:
 3403              		.thumb
 3404              		.syntax unified
 3405              	.L332:
 3406 0012 FEE7     		b	.L332
 3407              	.L331:
 3408              	.LBE193:
 3409              	.LBE192:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3410              		.loc 1 3021 0
 3411 0014 10B5     		push	{r4, lr}
 3412              	.LCFI36:
 3413              		.cfi_def_cfa_offset 8
 3414              		.cfi_offset 4, -8
 3415              		.cfi_offset 14, -4
 3416 0016 0C46     		mov	r4, r1
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3417              		.loc 1 3031 0
 3418 0018 044B     		ldr	r3, .L335
 3419 001a 1968     		ldr	r1, [r3]
 3420              	.LVL295:
 3421 001c 1831     		adds	r1, r1, #24
 3422 001e FFF7FEFF 		bl	vListInsert
 3423              	.LVL296:
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3424              		.loc 1 3033 0
 3425 0022 0121     		movs	r1, #1
 3426 0024 2046     		mov	r0, r4
 3427 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3428              	.LVL297:
 3429 002a 10BD     		pop	{r4, pc}
 3430              	.LVL298:
 3431              	.L336:
 3432              		.align	2
 3433              	.L335:
 3434 002c 00000000 		.word	.LANCHOR10
 3435              		.cfi_endproc
 3436              	.LFE30:
 3438              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3439              		.align	1
 3440              		.global	vTaskPlaceOnUnorderedEventList
 3441              		.syntax unified
 3442              		.thumb
 3443              		.thumb_func
 3444              		.fpu fpv4-sp-d16
 3446              	vTaskPlaceOnUnorderedEventList:
 3447              	.LFB31:
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3448              		.loc 1 3038 0
 3449              		.cfi_startproc
 3450              		@ args = 0, pretend = 0, frame = 0
 3451              		@ frame_needed = 0, uses_anonymous_args = 0
 3452              	.LVL299:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3453              		.loc 1 3039 0
ARM GAS  /tmp/ccJO9w1Z.s 			page 162


 3454 0000 60B1     		cbz	r0, .L344
 3455 0002 0346     		mov	r3, r0
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3456              		.loc 1 3043 0
 3457 0004 1348     		ldr	r0, .L345
 3458              	.LVL300:
 3459 0006 0068     		ldr	r0, [r0]
 3460 0008 88B9     		cbnz	r0, .L340
 3461              	.LBB194:
 3462              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3463              		.loc 2 195 0
 3464              		.syntax unified
 3465              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3466 000a 4FF05003 			mov r3, #80												
 3467 000e 83F31188 		msr basepri, r3											
 3468 0012 BFF36F8F 		isb														
 3469 0016 BFF34F8F 		dsb														
 3470              	
 3471              	@ 0 "" 2
 3472              	.LVL301:
 3473              		.thumb
 3474              		.syntax unified
 3475              	.L341:
 3476 001a FEE7     		b	.L341
 3477              	.LVL302:
 3478              	.L344:
 3479              	.LBE195:
 3480              	.LBE194:
 3481              	.LBB196:
 3482              	.LBB197:
 3483              		.syntax unified
 3484              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3485 001c 4FF05003 			mov r3, #80												
 3486 0020 83F31188 		msr basepri, r3											
 3487 0024 BFF36F8F 		isb														
 3488 0028 BFF34F8F 		dsb														
 3489              	
 3490              	@ 0 "" 2
 3491              	.LVL303:
 3492              		.thumb
 3493              		.syntax unified
 3494              	.L339:
 3495 002c FEE7     		b	.L339
 3496              	.LVL304:
 3497              	.L340:
 3498              	.LBE197:
 3499              	.LBE196:
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3500              		.loc 1 3038 0
 3501 002e 10B5     		push	{r4, lr}
 3502              	.LCFI37:
 3503              		.cfi_def_cfa_offset 8
 3504              		.cfi_offset 4, -8
 3505              		.cfi_offset 14, -4
 3506 0030 1846     		mov	r0, r3
 3507 0032 1446     		mov	r4, r2
ARM GAS  /tmp/ccJO9w1Z.s 			page 163


 3508 0034 0B46     		mov	r3, r1
 3509              	.LVL305:
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3510              		.loc 1 3048 0
 3511 0036 084A     		ldr	r2, .L345+4
 3512              	.LVL306:
 3513 0038 1168     		ldr	r1, [r2]
 3514              	.LVL307:
 3515 003a 43F00043 		orr	r3, r3, #-2147483648
 3516              	.LVL308:
 3517 003e 8B61     		str	r3, [r1, #24]
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3518              		.loc 1 3055 0
 3519 0040 1168     		ldr	r1, [r2]
 3520 0042 1831     		adds	r1, r1, #24
 3521 0044 FFF7FEFF 		bl	vListInsertEnd
 3522              	.LVL309:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3523              		.loc 1 3057 0
 3524 0048 0121     		movs	r1, #1
 3525 004a 2046     		mov	r0, r4
 3526 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3527              	.LVL310:
 3528 0050 10BD     		pop	{r4, pc}
 3529              	.LVL311:
 3530              	.L346:
 3531 0052 00BF     		.align	2
 3532              	.L345:
 3533 0054 00000000 		.word	.LANCHOR16
 3534 0058 00000000 		.word	.LANCHOR10
 3535              		.cfi_endproc
 3536              	.LFE31:
 3538              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3539              		.align	1
 3540              		.global	vTaskPlaceOnEventListRestricted
 3541              		.syntax unified
 3542              		.thumb
 3543              		.thumb_func
 3544              		.fpu fpv4-sp-d16
 3546              	vTaskPlaceOnEventListRestricted:
 3547              	.LFB32:
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3548              		.loc 1 3064 0
 3549              		.cfi_startproc
 3550              		@ args = 0, pretend = 0, frame = 0
 3551              		@ frame_needed = 0, uses_anonymous_args = 0
 3552              	.LVL312:
 3553 0000 38B5     		push	{r3, r4, r5, lr}
 3554              	.LCFI38:
 3555              		.cfi_def_cfa_offset 16
 3556              		.cfi_offset 3, -16
 3557              		.cfi_offset 4, -12
 3558              		.cfi_offset 5, -8
 3559              		.cfi_offset 14, -4
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3560              		.loc 1 3065 0
 3561 0002 70B1     		cbz	r0, .L353
ARM GAS  /tmp/ccJO9w1Z.s 			page 164


 3562 0004 0C46     		mov	r4, r1
 3563 0006 1546     		mov	r5, r2
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3564              		.loc 1 3077 0
 3565 0008 0A4A     		ldr	r2, .L354
 3566              	.LVL313:
 3567 000a 1168     		ldr	r1, [r2]
 3568              	.LVL314:
 3569 000c 1831     		adds	r1, r1, #24
 3570 000e FFF7FEFF 		bl	vListInsertEnd
 3571              	.LVL315:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3572              		.loc 1 3082 0
 3573 0012 0DB1     		cbz	r5, .L350
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3574              		.loc 1 3084 0
 3575 0014 4FF0FF34 		mov	r4, #-1
 3576              	.LVL316:
 3577              	.L350:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3578              		.loc 1 3088 0
 3579 0018 2946     		mov	r1, r5
 3580 001a 2046     		mov	r0, r4
 3581 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3582              	.LVL317:
 3583 0020 38BD     		pop	{r3, r4, r5, pc}
 3584              	.LVL318:
 3585              	.L353:
 3586              	.LBB198:
 3587              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3588              		.loc 2 195 0
 3589              		.syntax unified
 3590              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3591 0022 4FF05003 			mov r3, #80												
 3592 0026 83F31188 		msr basepri, r3											
 3593 002a BFF36F8F 		isb														
 3594 002e BFF34F8F 		dsb														
 3595              	
 3596              	@ 0 "" 2
 3597              	.LVL319:
 3598              		.thumb
 3599              		.syntax unified
 3600              	.L349:
 3601 0032 FEE7     		b	.L349
 3602              	.L355:
 3603              		.align	2
 3604              	.L354:
 3605 0034 00000000 		.word	.LANCHOR10
 3606              	.LBE199:
 3607              	.LBE198:
 3608              		.cfi_endproc
 3609              	.LFE32:
 3611              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3612              		.align	1
 3613              		.global	xTaskRemoveFromEventList
 3614              		.syntax unified
ARM GAS  /tmp/ccJO9w1Z.s 			page 165


 3615              		.thumb
 3616              		.thumb_func
 3617              		.fpu fpv4-sp-d16
 3619              	xTaskRemoveFromEventList:
 3620              	.LFB33:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3621              		.loc 1 3095 0
 3622              		.cfi_startproc
 3623              		@ args = 0, pretend = 0, frame = 0
 3624              		@ frame_needed = 0, uses_anonymous_args = 0
 3625              	.LVL320:
 3626 0000 38B5     		push	{r3, r4, r5, lr}
 3627              	.LCFI39:
 3628              		.cfi_def_cfa_offset 16
 3629              		.cfi_offset 3, -16
 3630              		.cfi_offset 4, -12
 3631              		.cfi_offset 5, -8
 3632              		.cfi_offset 14, -4
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3633              		.loc 1 3112 0
 3634 0002 C368     		ldr	r3, [r0, #12]
 3635 0004 DC68     		ldr	r4, [r3, #12]
 3636              	.LVL321:
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3637              		.loc 1 3113 0
 3638 0006 24B3     		cbz	r4, .L365
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3639              		.loc 1 3114 0
 3640 0008 04F11805 		add	r5, r4, #24
 3641 000c 2846     		mov	r0, r5
 3642              	.LVL322:
 3643 000e FFF7FEFF 		bl	uxListRemove
 3644              	.LVL323:
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3645              		.loc 1 3116 0
 3646 0012 184B     		ldr	r3, .L366
 3647 0014 1B68     		ldr	r3, [r3]
 3648 0016 2BBB     		cbnz	r3, .L359
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3649              		.loc 1 3118 0
 3650 0018 251D     		adds	r5, r4, #4
 3651 001a 2846     		mov	r0, r5
 3652 001c FFF7FEFF 		bl	uxListRemove
 3653              	.LVL324:
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3654              		.loc 1 3119 0
 3655 0020 E36A     		ldr	r3, [r4, #44]
 3656 0022 154A     		ldr	r2, .L366+4
 3657 0024 1268     		ldr	r2, [r2]
 3658 0026 9342     		cmp	r3, r2
 3659 0028 01D9     		bls	.L360
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3660              		.loc 1 3119 0 is_stmt 0 discriminator 1
 3661 002a 134A     		ldr	r2, .L366+4
 3662 002c 1360     		str	r3, [r2]
 3663              	.L360:
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 166


 3664              		.loc 1 3119 0 discriminator 3
 3665 002e 03EB8303 		add	r3, r3, r3, lsl #2
 3666 0032 9A00     		lsls	r2, r3, #2
 3667 0034 2946     		mov	r1, r5
 3668 0036 1148     		ldr	r0, .L366+8
 3669 0038 1044     		add	r0, r0, r2
 3670 003a FFF7FEFF 		bl	vListInsertEnd
 3671              	.LVL325:
 3672              	.L361:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3673              		.loc 1 3142 0 is_stmt 1
 3674 003e E26A     		ldr	r2, [r4, #44]
 3675 0040 0F4B     		ldr	r3, .L366+12
 3676 0042 1B68     		ldr	r3, [r3]
 3677 0044 DB6A     		ldr	r3, [r3, #44]
 3678 0046 9A42     		cmp	r2, r3
 3679 0048 11D9     		bls	.L363
 3680              	.LVL326:
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3681              		.loc 1 3151 0
 3682 004a 0120     		movs	r0, #1
 3683 004c 0D4B     		ldr	r3, .L366+16
 3684 004e 1860     		str	r0, [r3]
 3685 0050 38BD     		pop	{r3, r4, r5, pc}
 3686              	.LVL327:
 3687              	.L365:
 3688              	.LBB200:
 3689              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3690              		.loc 2 195 0
 3691              		.syntax unified
 3692              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3693 0052 4FF05003 			mov r3, #80												
 3694 0056 83F31188 		msr basepri, r3											
 3695 005a BFF36F8F 		isb														
 3696 005e BFF34F8F 		dsb														
 3697              	
 3698              	@ 0 "" 2
 3699              	.LVL328:
 3700              		.thumb
 3701              		.syntax unified
 3702              	.L358:
 3703 0062 FEE7     		b	.L358
 3704              	.LVL329:
 3705              	.L359:
 3706              	.LBE201:
 3707              	.LBE200:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3708              		.loc 1 3139 0
 3709 0064 2946     		mov	r1, r5
 3710 0066 0848     		ldr	r0, .L366+20
 3711 0068 FFF7FEFF 		bl	vListInsertEnd
 3712              	.LVL330:
 3713 006c E7E7     		b	.L361
 3714              	.L363:
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3715              		.loc 1 3155 0
ARM GAS  /tmp/ccJO9w1Z.s 			page 167


 3716 006e 0020     		movs	r0, #0
 3717              	.LVL331:
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3718              		.loc 1 3159 0
 3719 0070 38BD     		pop	{r3, r4, r5, pc}
 3720              	.LVL332:
 3721              	.L367:
 3722 0072 00BF     		.align	2
 3723              	.L366:
 3724 0074 00000000 		.word	.LANCHOR16
 3725 0078 00000000 		.word	.LANCHOR13
 3726 007c 00000000 		.word	.LANCHOR4
 3727 0080 00000000 		.word	.LANCHOR10
 3728 0084 00000000 		.word	.LANCHOR19
 3729 0088 00000000 		.word	.LANCHOR1
 3730              		.cfi_endproc
 3731              	.LFE33:
 3733              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3734              		.align	1
 3735              		.global	vTaskRemoveFromUnorderedEventList
 3736              		.syntax unified
 3737              		.thumb
 3738              		.thumb_func
 3739              		.fpu fpv4-sp-d16
 3741              	vTaskRemoveFromUnorderedEventList:
 3742              	.LFB34:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3743              		.loc 1 3163 0
 3744              		.cfi_startproc
 3745              		@ args = 0, pretend = 0, frame = 0
 3746              		@ frame_needed = 0, uses_anonymous_args = 0
 3747              	.LVL333:
 3748 0000 38B5     		push	{r3, r4, r5, lr}
 3749              	.LCFI40:
 3750              		.cfi_def_cfa_offset 16
 3751              		.cfi_offset 3, -16
 3752              		.cfi_offset 4, -12
 3753              		.cfi_offset 5, -8
 3754              		.cfi_offset 14, -4
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3755              		.loc 1 3168 0
 3756 0002 1C4B     		ldr	r3, .L377
 3757 0004 1B68     		ldr	r3, [r3]
 3758 0006 43B9     		cbnz	r3, .L369
 3759              	.LBB202:
 3760              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3761              		.loc 2 195 0
 3762              		.syntax unified
 3763              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3764 0008 4FF05003 			mov r3, #80												
 3765 000c 83F31188 		msr basepri, r3											
 3766 0010 BFF36F8F 		isb														
 3767 0014 BFF34F8F 		dsb														
 3768              	
 3769              	@ 0 "" 2
 3770              	.LVL334:
ARM GAS  /tmp/ccJO9w1Z.s 			page 168


 3771              		.thumb
 3772              		.syntax unified
 3773              	.L370:
 3774 0018 FEE7     		b	.L370
 3775              	.L369:
 3776              	.LBE203:
 3777              	.LBE202:
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3778              		.loc 1 3171 0
 3779 001a 41F00041 		orr	r1, r1, #-2147483648
 3780              	.LVL335:
 3781 001e 0160     		str	r1, [r0]
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3782              		.loc 1 3175 0
 3783 0020 C468     		ldr	r4, [r0, #12]
 3784              	.LVL336:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3785              		.loc 1 3176 0
 3786 0022 F4B1     		cbz	r4, .L376
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3787              		.loc 1 3177 0
 3788 0024 FFF7FEFF 		bl	uxListRemove
 3789              	.LVL337:
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3790              		.loc 1 3182 0
 3791 0028 251D     		adds	r5, r4, #4
 3792 002a 2846     		mov	r0, r5
 3793 002c FFF7FEFF 		bl	uxListRemove
 3794              	.LVL338:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3795              		.loc 1 3183 0
 3796 0030 E36A     		ldr	r3, [r4, #44]
 3797 0032 114A     		ldr	r2, .L377+4
 3798 0034 1268     		ldr	r2, [r2]
 3799 0036 9342     		cmp	r3, r2
 3800 0038 01D9     		bls	.L373
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3801              		.loc 1 3183 0 is_stmt 0 discriminator 1
 3802 003a 0F4A     		ldr	r2, .L377+4
 3803 003c 1360     		str	r3, [r2]
 3804              	.L373:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3805              		.loc 1 3183 0 discriminator 3
 3806 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3807 0042 9A00     		lsls	r2, r3, #2
 3808 0044 2946     		mov	r1, r5
 3809 0046 0D48     		ldr	r0, .L377+8
 3810 0048 1044     		add	r0, r0, r2
 3811 004a FFF7FEFF 		bl	vListInsertEnd
 3812              	.LVL339:
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3813              		.loc 1 3185 0 is_stmt 1 discriminator 3
 3814 004e E26A     		ldr	r2, [r4, #44]
 3815 0050 0B4B     		ldr	r3, .L377+12
 3816 0052 1B68     		ldr	r3, [r3]
 3817 0054 DB6A     		ldr	r3, [r3, #44]
 3818 0056 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccJO9w1Z.s 			page 169


 3819 0058 02D9     		bls	.L368
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3820              		.loc 1 3191 0
 3821 005a 0122     		movs	r2, #1
 3822 005c 094B     		ldr	r3, .L377+16
 3823 005e 1A60     		str	r2, [r3]
 3824              	.L368:
 3825 0060 38BD     		pop	{r3, r4, r5, pc}
 3826              	.LVL340:
 3827              	.L376:
 3828              	.LBB204:
 3829              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3830              		.loc 2 195 0
 3831              		.syntax unified
 3832              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3833 0062 4FF05003 			mov r3, #80												
 3834 0066 83F31188 		msr basepri, r3											
 3835 006a BFF36F8F 		isb														
 3836 006e BFF34F8F 		dsb														
 3837              	
 3838              	@ 0 "" 2
 3839              	.LVL341:
 3840              		.thumb
 3841              		.syntax unified
 3842              	.L372:
 3843 0072 FEE7     		b	.L372
 3844              	.L378:
 3845              		.align	2
 3846              	.L377:
 3847 0074 00000000 		.word	.LANCHOR16
 3848 0078 00000000 		.word	.LANCHOR13
 3849 007c 00000000 		.word	.LANCHOR4
 3850 0080 00000000 		.word	.LANCHOR10
 3851 0084 00000000 		.word	.LANCHOR19
 3852              	.LBE205:
 3853              	.LBE204:
 3854              		.cfi_endproc
 3855              	.LFE34:
 3857              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3858              		.align	1
 3859              		.global	vTaskSetTimeOutState
 3860              		.syntax unified
 3861              		.thumb
 3862              		.thumb_func
 3863              		.fpu fpv4-sp-d16
 3865              	vTaskSetTimeOutState:
 3866              	.LFB35:
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3867              		.loc 1 3197 0
 3868              		.cfi_startproc
 3869              		@ args = 0, pretend = 0, frame = 0
 3870              		@ frame_needed = 0, uses_anonymous_args = 0
 3871              	.LVL342:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3872              		.loc 1 3198 0
 3873 0000 40B9     		cbnz	r0, .L380
ARM GAS  /tmp/ccJO9w1Z.s 			page 170


 3874              	.LBB206:
 3875              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3876              		.loc 2 195 0
 3877              		.syntax unified
 3878              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3879 0002 4FF05003 			mov r3, #80												
 3880 0006 83F31188 		msr basepri, r3											
 3881 000a BFF36F8F 		isb														
 3882 000e BFF34F8F 		dsb														
 3883              	
 3884              	@ 0 "" 2
 3885              	.LVL343:
 3886              		.thumb
 3887              		.syntax unified
 3888              	.L381:
 3889 0012 FEE7     		b	.L381
 3890              	.L380:
 3891              	.LBE207:
 3892              	.LBE206:
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3893              		.loc 1 3197 0
 3894 0014 10B5     		push	{r4, lr}
 3895              	.LCFI41:
 3896              		.cfi_def_cfa_offset 8
 3897              		.cfi_offset 4, -8
 3898              		.cfi_offset 14, -4
 3899 0016 0446     		mov	r4, r0
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3900              		.loc 1 3199 0
 3901 0018 FFF7FEFF 		bl	vPortEnterCritical
 3902              	.LVL344:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3903              		.loc 1 3201 0
 3904 001c 044B     		ldr	r3, .L384
 3905 001e 1B68     		ldr	r3, [r3]
 3906 0020 2360     		str	r3, [r4]
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3907              		.loc 1 3202 0
 3908 0022 044B     		ldr	r3, .L384+4
 3909 0024 1B68     		ldr	r3, [r3]
 3910 0026 6360     		str	r3, [r4, #4]
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3911              		.loc 1 3204 0
 3912 0028 FFF7FEFF 		bl	vPortExitCritical
 3913              	.LVL345:
 3914 002c 10BD     		pop	{r4, pc}
 3915              	.LVL346:
 3916              	.L385:
 3917 002e 00BF     		.align	2
 3918              	.L384:
 3919 0030 00000000 		.word	.LANCHOR17
 3920 0034 00000000 		.word	.LANCHOR15
 3921              		.cfi_endproc
 3922              	.LFE35:
 3924              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3925              		.align	1
ARM GAS  /tmp/ccJO9w1Z.s 			page 171


 3926              		.global	vTaskInternalSetTimeOutState
 3927              		.syntax unified
 3928              		.thumb
 3929              		.thumb_func
 3930              		.fpu fpv4-sp-d16
 3932              	vTaskInternalSetTimeOutState:
 3933              	.LFB36:
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3934              		.loc 1 3209 0
 3935              		.cfi_startproc
 3936              		@ args = 0, pretend = 0, frame = 0
 3937              		@ frame_needed = 0, uses_anonymous_args = 0
 3938              		@ link register save eliminated.
 3939              	.LVL347:
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3940              		.loc 1 3211 0
 3941 0000 034B     		ldr	r3, .L387
 3942 0002 1B68     		ldr	r3, [r3]
 3943 0004 0360     		str	r3, [r0]
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3944              		.loc 1 3212 0
 3945 0006 034B     		ldr	r3, .L387+4
 3946 0008 1B68     		ldr	r3, [r3]
 3947 000a 4360     		str	r3, [r0, #4]
 3948 000c 7047     		bx	lr
 3949              	.L388:
 3950 000e 00BF     		.align	2
 3951              	.L387:
 3952 0010 00000000 		.word	.LANCHOR17
 3953 0014 00000000 		.word	.LANCHOR15
 3954              		.cfi_endproc
 3955              	.LFE36:
 3957              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3958              		.align	1
 3959              		.global	xTaskCheckForTimeOut
 3960              		.syntax unified
 3961              		.thumb
 3962              		.thumb_func
 3963              		.fpu fpv4-sp-d16
 3965              	xTaskCheckForTimeOut:
 3966              	.LFB37:
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3967              		.loc 1 3217 0
 3968              		.cfi_startproc
 3969              		@ args = 0, pretend = 0, frame = 0
 3970              		@ frame_needed = 0, uses_anonymous_args = 0
 3971              	.LVL348:
 3972 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3973              	.LCFI42:
 3974              		.cfi_def_cfa_offset 24
 3975              		.cfi_offset 3, -24
 3976              		.cfi_offset 4, -20
 3977              		.cfi_offset 5, -16
 3978              		.cfi_offset 6, -12
 3979              		.cfi_offset 7, -8
 3980              		.cfi_offset 14, -4
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
ARM GAS  /tmp/ccJO9w1Z.s 			page 172


 3981              		.loc 1 3220 0
 3982 0002 E0B1     		cbz	r0, .L400
 3983 0004 0546     		mov	r5, r0
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3984              		.loc 1 3221 0
 3985 0006 19B3     		cbz	r1, .L401
 3986 0008 0C46     		mov	r4, r1
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3987              		.loc 1 3223 0
 3988 000a FFF7FEFF 		bl	vPortEnterCritical
 3989              	.LVL349:
 3990              	.LBB208:
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3991              		.loc 1 3226 0
 3992 000e 1A4B     		ldr	r3, .L403
 3993 0010 1868     		ldr	r0, [r3]
 3994              	.LVL350:
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3995              		.loc 1 3227 0
 3996 0012 6968     		ldr	r1, [r5, #4]
 3997 0014 421A     		subs	r2, r0, r1
 3998              	.LVL351:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3999              		.loc 1 3241 0
 4000 0016 2368     		ldr	r3, [r4]
 4001 0018 B3F1FF3F 		cmp	r3, #-1
 4002 001c 28D0     		beq	.L397
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4003              		.loc 1 3251 0
 4004 001e 2F68     		ldr	r7, [r5]
 4005 0020 164E     		ldr	r6, .L403+4
 4006 0022 3668     		ldr	r6, [r6]
 4007 0024 B742     		cmp	r7, r6
 4008 0026 01D0     		beq	.L395
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4009              		.loc 1 3251 0 is_stmt 0 discriminator 1
 4010 0028 8842     		cmp	r0, r1
 4011 002a 23D2     		bcs	.L398
 4012              	.L395:
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4013              		.loc 1 3260 0 is_stmt 1
 4014 002c 9A42     		cmp	r2, r3
 4015 002e 18D3     		bcc	.L402
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4016              		.loc 1 3269 0
 4017 0030 0023     		movs	r3, #0
 4018 0032 2360     		str	r3, [r4]
 4019              	.LVL352:
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4020              		.loc 1 3270 0
 4021 0034 0124     		movs	r4, #1
 4022              	.LVL353:
 4023              	.L394:
 4024              	.LBE208:
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4025              		.loc 1 3273 0
 4026 0036 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccJO9w1Z.s 			page 173


 4027              	.LVL354:
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4028              		.loc 1 3276 0
 4029 003a 2046     		mov	r0, r4
 4030 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4031              	.LVL355:
 4032              	.L400:
 4033              	.LBB209:
 4034              	.LBB210:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4035              		.loc 2 195 0
 4036              		.syntax unified
 4037              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4038 003e 4FF05003 			mov r3, #80												
 4039 0042 83F31188 		msr basepri, r3											
 4040 0046 BFF36F8F 		isb														
 4041 004a BFF34F8F 		dsb														
 4042              	
 4043              	@ 0 "" 2
 4044              	.LVL356:
 4045              		.thumb
 4046              		.syntax unified
 4047              	.L391:
 4048 004e FEE7     		b	.L391
 4049              	.L401:
 4050              	.LBE210:
 4051              	.LBE209:
 4052              	.LBB211:
 4053              	.LBB212:
 4054              		.syntax unified
 4055              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4056 0050 4FF05003 			mov r3, #80												
 4057 0054 83F31188 		msr basepri, r3											
 4058 0058 BFF36F8F 		isb														
 4059 005c BFF34F8F 		dsb														
 4060              	
 4061              	@ 0 "" 2
 4062              	.LVL357:
 4063              		.thumb
 4064              		.syntax unified
 4065              	.L393:
 4066 0060 FEE7     		b	.L393
 4067              	.LVL358:
 4068              	.L402:
 4069              	.LBE212:
 4070              	.LBE211:
 4071              	.LBB213:
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4072              		.loc 1 3263 0
 4073 0062 9B1A     		subs	r3, r3, r2
 4074 0064 2360     		str	r3, [r4]
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4075              		.loc 1 3264 0
 4076 0066 2846     		mov	r0, r5
 4077              	.LVL359:
 4078 0068 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4079              	.LVL360:
ARM GAS  /tmp/ccJO9w1Z.s 			page 174


3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4080              		.loc 1 3265 0
 4081 006c 0024     		movs	r4, #0
 4082              	.LVL361:
 4083 006e E2E7     		b	.L394
 4084              	.LVL362:
 4085              	.L397:
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4086              		.loc 1 3246 0
 4087 0070 0024     		movs	r4, #0
 4088              	.LVL363:
 4089 0072 E0E7     		b	.L394
 4090              	.LVL364:
 4091              	.L398:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4092              		.loc 1 3258 0
 4093 0074 0124     		movs	r4, #1
 4094              	.LVL365:
 4095 0076 DEE7     		b	.L394
 4096              	.L404:
 4097              		.align	2
 4098              	.L403:
 4099 0078 00000000 		.word	.LANCHOR15
 4100 007c 00000000 		.word	.LANCHOR17
 4101              	.LBE213:
 4102              		.cfi_endproc
 4103              	.LFE37:
 4105              		.section	.text.vTaskMissedYield,"ax",%progbits
 4106              		.align	1
 4107              		.global	vTaskMissedYield
 4108              		.syntax unified
 4109              		.thumb
 4110              		.thumb_func
 4111              		.fpu fpv4-sp-d16
 4113              	vTaskMissedYield:
 4114              	.LFB38:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4115              		.loc 1 3280 0
 4116              		.cfi_startproc
 4117              		@ args = 0, pretend = 0, frame = 0
 4118              		@ frame_needed = 0, uses_anonymous_args = 0
 4119              		@ link register save eliminated.
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4120              		.loc 1 3281 0
 4121 0000 0122     		movs	r2, #1
 4122 0002 014B     		ldr	r3, .L406
 4123 0004 1A60     		str	r2, [r3]
 4124 0006 7047     		bx	lr
 4125              	.L407:
 4126              		.align	2
 4127              	.L406:
 4128 0008 00000000 		.word	.LANCHOR19
 4129              		.cfi_endproc
 4130              	.LFE38:
 4132              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4133              		.align	1
 4134              		.global	uxTaskGetTaskNumber
ARM GAS  /tmp/ccJO9w1Z.s 			page 175


 4135              		.syntax unified
 4136              		.thumb
 4137              		.thumb_func
 4138              		.fpu fpv4-sp-d16
 4140              	uxTaskGetTaskNumber:
 4141              	.LFB39:
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4142              		.loc 1 3288 0
 4143              		.cfi_startproc
 4144              		@ args = 0, pretend = 0, frame = 0
 4145              		@ frame_needed = 0, uses_anonymous_args = 0
 4146              		@ link register save eliminated.
 4147              	.LVL366:
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4148              		.loc 1 3292 0
 4149 0000 08B1     		cbz	r0, .L410
 4150              	.LVL367:
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4151              		.loc 1 3295 0
 4152 0002 806C     		ldr	r0, [r0, #72]
 4153              	.LVL368:
 4154 0004 7047     		bx	lr
 4155              	.LVL369:
 4156              	.L410:
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4157              		.loc 1 3299 0
 4158 0006 0020     		movs	r0, #0
 4159              	.LVL370:
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4160              		.loc 1 3303 0
 4161 0008 7047     		bx	lr
 4162              		.cfi_endproc
 4163              	.LFE39:
 4165              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4166              		.align	1
 4167              		.global	vTaskSetTaskNumber
 4168              		.syntax unified
 4169              		.thumb
 4170              		.thumb_func
 4171              		.fpu fpv4-sp-d16
 4173              	vTaskSetTaskNumber:
 4174              	.LFB40:
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4175              		.loc 1 3311 0
 4176              		.cfi_startproc
 4177              		@ args = 0, pretend = 0, frame = 0
 4178              		@ frame_needed = 0, uses_anonymous_args = 0
 4179              		@ link register save eliminated.
 4180              	.LVL371:
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4181              		.loc 1 3314 0
 4182 0000 00B1     		cbz	r0, .L411
 4183              	.LVL372:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4184              		.loc 1 3317 0
 4185 0002 8164     		str	r1, [r0, #72]
 4186              	.LVL373:
ARM GAS  /tmp/ccJO9w1Z.s 			page 176


 4187              	.L411:
 4188 0004 7047     		bx	lr
 4189              		.cfi_endproc
 4190              	.LFE40:
 4192              		.section	.text.vTaskGetInfo,"ax",%progbits
 4193              		.align	1
 4194              		.global	vTaskGetInfo
 4195              		.syntax unified
 4196              		.thumb
 4197              		.thumb_func
 4198              		.fpu fpv4-sp-d16
 4200              	vTaskGetInfo:
 4201              	.LFB44:
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4202              		.loc 1 3610 0
 4203              		.cfi_startproc
 4204              		@ args = 0, pretend = 0, frame = 0
 4205              		@ frame_needed = 0, uses_anonymous_args = 0
 4206              	.LVL374:
 4207 0000 70B5     		push	{r4, r5, r6, lr}
 4208              	.LCFI43:
 4209              		.cfi_def_cfa_offset 16
 4210              		.cfi_offset 4, -16
 4211              		.cfi_offset 5, -12
 4212              		.cfi_offset 6, -8
 4213              		.cfi_offset 14, -4
 4214 0002 0C46     		mov	r4, r1
 4215 0004 1646     		mov	r6, r2
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4216              		.loc 1 3614 0
 4217 0006 0546     		mov	r5, r0
 4218 0008 D0B1     		cbz	r0, .L422
 4219              	.LVL375:
 4220              	.L414:
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4221              		.loc 1 3616 0 discriminator 4
 4222 000a 2560     		str	r5, [r4]
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4223              		.loc 1 3617 0 discriminator 4
 4224 000c 05F13402 		add	r2, r5, #52
 4225 0010 6260     		str	r2, [r4, #4]
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4226              		.loc 1 3618 0 discriminator 4
 4227 0012 EA6A     		ldr	r2, [r5, #44]
 4228 0014 2261     		str	r2, [r4, #16]
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4229              		.loc 1 3619 0 discriminator 4
 4230 0016 2A6B     		ldr	r2, [r5, #48]
 4231 0018 E261     		str	r2, [r4, #28]
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4232              		.loc 1 3620 0 discriminator 4
 4233 001a 6A6C     		ldr	r2, [r5, #68]
 4234 001c A260     		str	r2, [r4, #8]
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4235              		.loc 1 3624 0 discriminator 4
 4236 001e EA6C     		ldr	r2, [r5, #76]
 4237 0020 6261     		str	r2, [r4, #20]
ARM GAS  /tmp/ccJO9w1Z.s 			page 177


3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4238              		.loc 1 3638 0 discriminator 4
 4239 0022 0022     		movs	r2, #0
 4240 0024 A261     		str	r2, [r4, #24]
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4241              		.loc 1 3645 0 discriminator 4
 4242 0026 052B     		cmp	r3, #5
 4243 0028 19D0     		beq	.L415
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4244              		.loc 1 3647 0
 4245 002a 124A     		ldr	r2, .L426
 4246 002c 1268     		ldr	r2, [r2]
 4247 002e 9542     		cmp	r5, r2
 4248 0030 09D0     		beq	.L423
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4249              		.loc 1 3653 0
 4250 0032 2373     		strb	r3, [r4, #12]
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4251              		.loc 1 3660 0
 4252 0034 032B     		cmp	r3, #3
 4253 0036 09D0     		beq	.L424
 4254              	.LVL376:
 4255              	.L417:
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4256              		.loc 1 3682 0
 4257 0038 B6B9     		cbnz	r6, .L425
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4258              		.loc 1 3696 0
 4259 003a 0023     		movs	r3, #0
 4260 003c 2384     		strh	r3, [r4, #32]	@ movhi
 4261 003e 70BD     		pop	{r4, r5, r6, pc}
 4262              	.LVL377:
 4263              	.L422:
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4264              		.loc 1 3614 0 discriminator 1
 4265 0040 0C4A     		ldr	r2, .L426
 4266              	.LVL378:
 4267 0042 1568     		ldr	r5, [r2]
 4268              	.LVL379:
 4269 0044 E1E7     		b	.L414
 4270              	.LVL380:
 4271              	.L423:
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4272              		.loc 1 3649 0
 4273 0046 0023     		movs	r3, #0
 4274              	.LVL381:
 4275 0048 2373     		strb	r3, [r4, #12]
 4276 004a F5E7     		b	.L417
 4277              	.LVL382:
 4278              	.L424:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4279              		.loc 1 3662 0
 4280 004c FFF7FEFF 		bl	vTaskSuspendAll
 4281              	.LVL383:
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4282              		.loc 1 3664 0
 4283 0050 AB6A     		ldr	r3, [r5, #40]
ARM GAS  /tmp/ccJO9w1Z.s 			page 178


 4284 0052 0BB1     		cbz	r3, .L418
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 4285              		.loc 1 3666 0
 4286 0054 0223     		movs	r3, #2
 4287 0056 2373     		strb	r3, [r4, #12]
 4288              	.L418:
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4289              		.loc 1 3669 0
 4290 0058 FFF7FEFF 		bl	xTaskResumeAll
 4291              	.LVL384:
 4292 005c ECE7     		b	.L417
 4293              	.LVL385:
 4294              	.L415:
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4295              		.loc 1 3677 0
 4296 005e 2846     		mov	r0, r5
 4297 0060 FFF7FEFF 		bl	eTaskGetState
 4298              	.LVL386:
 4299 0064 2073     		strb	r0, [r4, #12]
 4300 0066 E7E7     		b	.L417
 4301              	.L425:
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4302              		.loc 1 3690 0
 4303 0068 286B     		ldr	r0, [r5, #48]
 4304 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4305              	.LVL387:
 4306 006e 2084     		strh	r0, [r4, #32]	@ movhi
 4307 0070 70BD     		pop	{r4, r5, r6, pc}
 4308              	.LVL388:
 4309              	.L427:
 4310 0072 00BF     		.align	2
 4311              	.L426:
 4312 0074 00000000 		.word	.LANCHOR10
 4313              		.cfi_endproc
 4314              	.LFE44:
 4316              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4317              		.align	1
 4318              		.syntax unified
 4319              		.thumb
 4320              		.thumb_func
 4321              		.fpu fpv4-sp-d16
 4323              	prvListTasksWithinSingleList:
 4324              	.LFB45:
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4325              		.loc 1 3706 0
 4326              		.cfi_startproc
 4327              		@ args = 0, pretend = 0, frame = 0
 4328              		@ frame_needed = 0, uses_anonymous_args = 0
 4329              	.LVL389:
 4330 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4331              	.LCFI44:
 4332              		.cfi_def_cfa_offset 32
 4333              		.cfi_offset 4, -32
 4334              		.cfi_offset 5, -28
 4335              		.cfi_offset 6, -24
 4336              		.cfi_offset 7, -20
 4337              		.cfi_offset 8, -16
ARM GAS  /tmp/ccJO9w1Z.s 			page 179


 4338              		.cfi_offset 9, -12
 4339              		.cfi_offset 10, -8
 4340              		.cfi_offset 14, -4
 4341              	.LVL390:
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4342              		.loc 1 3710 0
 4343 0004 0B68     		ldr	r3, [r1]
 4344 0006 3BB3     		cbz	r3, .L433
 4345              	.LVL391:
 4346              	.LBB214:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4347              		.loc 1 3712 0
 4348 0008 4B68     		ldr	r3, [r1, #4]
 4349 000a 5B68     		ldr	r3, [r3, #4]
 4350 000c 4B60     		str	r3, [r1, #4]
 4351 000e 01F10809 		add	r9, r1, #8
 4352 0012 4B45     		cmp	r3, r9
 4353 0014 07D0     		beq	.L435
 4354              	.L430:
 4355 0016 9046     		mov	r8, r2
 4356 0018 0D46     		mov	r5, r1
 4357 001a 0746     		mov	r7, r0
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4358              		.loc 1 3712 0 is_stmt 0 discriminator 3
 4359 001c 4B68     		ldr	r3, [r1, #4]
 4360 001e D3F80CA0 		ldr	r10, [r3, #12]
 4361              	.LVL392:
 4362              	.LBE214:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4363              		.loc 1 3708 0 is_stmt 1 discriminator 3
 4364 0022 0024     		movs	r4, #0
 4365 0024 10E0     		b	.L432
 4366              	.LVL393:
 4367              	.L435:
 4368              	.LBB215:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4369              		.loc 1 3712 0 discriminator 1
 4370 0026 5B68     		ldr	r3, [r3, #4]
 4371 0028 4B60     		str	r3, [r1, #4]
 4372 002a F4E7     		b	.L430
 4373              	.LVL394:
 4374              	.L431:
 4375              	.LBE215:
 4376              	.LBB216:
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4377              		.loc 1 3720 0 discriminator 3
 4378 002c 6B68     		ldr	r3, [r5, #4]
 4379 002e DE68     		ldr	r6, [r3, #12]
 4380              	.LVL395:
 4381              	.LBE216:
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4382              		.loc 1 3721 0 discriminator 3
 4383 0030 04EBC403 		add	r3, r4, r4, lsl #3
 4384 0034 9900     		lsls	r1, r3, #2
 4385 0036 4346     		mov	r3, r8
 4386 0038 0122     		movs	r2, #1
 4387 003a 3944     		add	r1, r1, r7
ARM GAS  /tmp/ccJO9w1Z.s 			page 180


 4388 003c 3046     		mov	r0, r6
 4389 003e FFF7FEFF 		bl	vTaskGetInfo
 4390              	.LVL396:
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4391              		.loc 1 3722 0 discriminator 3
 4392 0042 0134     		adds	r4, r4, #1
 4393              	.LVL397:
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4394              		.loc 1 3723 0 discriminator 3
 4395 0044 B245     		cmp	r10, r6
 4396 0046 08D0     		beq	.L428
 4397              	.LVL398:
 4398              	.L432:
 4399              	.LBB217:
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4400              		.loc 1 3720 0
 4401 0048 6B68     		ldr	r3, [r5, #4]
 4402 004a 5B68     		ldr	r3, [r3, #4]
 4403 004c 6B60     		str	r3, [r5, #4]
 4404 004e 9945     		cmp	r9, r3
 4405 0050 ECD1     		bne	.L431
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4406              		.loc 1 3720 0 is_stmt 0 discriminator 1
 4407 0052 5B68     		ldr	r3, [r3, #4]
 4408 0054 6B60     		str	r3, [r5, #4]
 4409 0056 E9E7     		b	.L431
 4410              	.LVL399:
 4411              	.L433:
 4412              	.LBE217:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4413              		.loc 1 3708 0 is_stmt 1
 4414 0058 0024     		movs	r4, #0
 4415              	.LVL400:
 4416              	.L428:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4417              		.loc 1 3731 0
 4418 005a 2046     		mov	r0, r4
 4419 005c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4420              		.cfi_endproc
 4421              	.LFE45:
 4423              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4424              		.align	1
 4425              		.global	uxTaskGetSystemState
 4426              		.syntax unified
 4427              		.thumb
 4428              		.thumb_func
 4429              		.fpu fpv4-sp-d16
 4431              	uxTaskGetSystemState:
 4432              	.LFB27:
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4433              		.loc 1 2486 0
 4434              		.cfi_startproc
 4435              		@ args = 0, pretend = 0, frame = 0
 4436              		@ frame_needed = 0, uses_anonymous_args = 0
 4437              	.LVL401:
 4438 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4439              	.LCFI45:
ARM GAS  /tmp/ccJO9w1Z.s 			page 181


 4440              		.cfi_def_cfa_offset 24
 4441              		.cfi_offset 3, -24
 4442              		.cfi_offset 4, -20
 4443              		.cfi_offset 5, -16
 4444              		.cfi_offset 6, -12
 4445              		.cfi_offset 7, -8
 4446              		.cfi_offset 14, -4
 4447 0002 0746     		mov	r7, r0
 4448 0004 0C46     		mov	r4, r1
 4449 0006 1646     		mov	r6, r2
 4450              	.LVL402:
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4451              		.loc 1 2489 0
 4452 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4453              	.LVL403:
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4454              		.loc 1 2492 0
 4455 000c 224B     		ldr	r3, .L441
 4456 000e 1B68     		ldr	r3, [r3]
 4457 0010 A342     		cmp	r3, r4
 4458 0012 3ED8     		bhi	.L439
 4459 0014 3824     		movs	r4, #56
 4460              	.LVL404:
 4461 0016 0025     		movs	r5, #0
 4462              	.LVL405:
 4463              	.L438:
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4464              		.loc 1 2498 0 discriminator 1
 4465 0018 013C     		subs	r4, r4, #1
 4466              	.LVL406:
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4467              		.loc 1 2499 0 discriminator 1
 4468 001a 05EBC503 		add	r3, r5, r5, lsl #3
 4469 001e 9800     		lsls	r0, r3, #2
 4470 0020 04EB8402 		add	r2, r4, r4, lsl #2
 4471 0024 9300     		lsls	r3, r2, #2
 4472 0026 0122     		movs	r2, #1
 4473 0028 1C49     		ldr	r1, .L441+4
 4474 002a 1944     		add	r1, r1, r3
 4475 002c 3844     		add	r0, r0, r7
 4476 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4477              	.LVL407:
 4478 0032 0544     		add	r5, r5, r0
 4479              	.LVL408:
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4480              		.loc 1 2501 0 discriminator 1
 4481 0034 002C     		cmp	r4, #0
 4482 0036 EFD1     		bne	.L438
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4483              		.loc 1 2505 0
 4484 0038 05EBC503 		add	r3, r5, r5, lsl #3
 4485 003c 9800     		lsls	r0, r3, #2
 4486 003e 184B     		ldr	r3, .L441+8
 4487 0040 1968     		ldr	r1, [r3]
 4488 0042 0222     		movs	r2, #2
 4489 0044 3844     		add	r0, r0, r7
 4490 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
ARM GAS  /tmp/ccJO9w1Z.s 			page 182


 4491              	.LVL409:
 4492 004a 2C18     		adds	r4, r5, r0
 4493              	.LVL410:
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4494              		.loc 1 2506 0
 4495 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4496 0050 9800     		lsls	r0, r3, #2
 4497 0052 144B     		ldr	r3, .L441+12
 4498 0054 1968     		ldr	r1, [r3]
 4499 0056 0222     		movs	r2, #2
 4500 0058 3844     		add	r0, r0, r7
 4501 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4502              	.LVL411:
 4503 005e 0444     		add	r4, r4, r0
 4504              	.LVL412:
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4505              		.loc 1 2512 0
 4506 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4507 0064 9800     		lsls	r0, r3, #2
 4508 0066 0422     		movs	r2, #4
 4509 0068 0F49     		ldr	r1, .L441+16
 4510 006a 3844     		add	r0, r0, r7
 4511 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4512              	.LVL413:
 4513 0070 0444     		add	r4, r4, r0
 4514              	.LVL414:
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4515              		.loc 1 2520 0
 4516 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4517 0076 9800     		lsls	r0, r3, #2
 4518 0078 0322     		movs	r2, #3
 4519 007a 0C49     		ldr	r1, .L441+20
 4520 007c 3844     		add	r0, r0, r7
 4521 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4522              	.LVL415:
 4523 0082 0444     		add	r4, r4, r0
 4524              	.LVL416:
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4525              		.loc 1 2537 0
 4526 0084 0EB1     		cbz	r6, .L437
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4527              		.loc 1 2539 0
 4528 0086 0023     		movs	r3, #0
 4529 0088 3360     		str	r3, [r6]
 4530              	.LVL417:
 4531              	.L437:
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4532              		.loc 1 2549 0
 4533 008a FFF7FEFF 		bl	xTaskResumeAll
 4534              	.LVL418:
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4535              		.loc 1 2552 0
 4536 008e 2046     		mov	r0, r4
 4537 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4538              	.LVL419:
 4539              	.L439:
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 183


 4540              		.loc 1 2487 0
 4541 0092 0024     		movs	r4, #0
 4542              	.LVL420:
 4543 0094 F9E7     		b	.L437
 4544              	.L442:
 4545 0096 00BF     		.align	2
 4546              	.L441:
 4547 0098 00000000 		.word	.LANCHOR9
 4548 009c 00000000 		.word	.LANCHOR4
 4549 00a0 00000000 		.word	.LANCHOR2
 4550 00a4 00000000 		.word	.LANCHOR8
 4551 00a8 00000000 		.word	.LANCHOR7
 4552 00ac 00000000 		.word	.LANCHOR0
 4553              		.cfi_endproc
 4554              	.LFE27:
 4556              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4557              		.align	1
 4558              		.global	uxTaskGetStackHighWaterMark
 4559              		.syntax unified
 4560              		.thumb
 4561              		.thumb_func
 4562              		.fpu fpv4-sp-d16
 4564              	uxTaskGetStackHighWaterMark:
 4565              	.LFB47:
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4566              		.loc 1 3799 0
 4567              		.cfi_startproc
 4568              		@ args = 0, pretend = 0, frame = 0
 4569              		@ frame_needed = 0, uses_anonymous_args = 0
 4570              	.LVL421:
 4571 0000 08B5     		push	{r3, lr}
 4572              	.LCFI46:
 4573              		.cfi_def_cfa_offset 8
 4574              		.cfi_offset 3, -8
 4575              		.cfi_offset 14, -4
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4576              		.loc 1 3804 0
 4577 0002 0346     		mov	r3, r0
 4578 0004 18B1     		cbz	r0, .L446
 4579              	.LVL422:
 4580              	.L444:
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4581              		.loc 1 3816 0 discriminator 4
 4582 0006 186B     		ldr	r0, [r3, #48]
 4583 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4584              	.LVL423:
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4585              		.loc 1 3819 0 discriminator 4
 4586 000c 08BD     		pop	{r3, pc}
 4587              	.LVL424:
 4588              	.L446:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4589              		.loc 1 3804 0 discriminator 1
 4590 000e 014B     		ldr	r3, .L447
 4591 0010 1B68     		ldr	r3, [r3]
 4592              	.LVL425:
 4593 0012 F8E7     		b	.L444
ARM GAS  /tmp/ccJO9w1Z.s 			page 184


 4594              	.L448:
 4595              		.align	2
 4596              	.L447:
 4597 0014 00000000 		.word	.LANCHOR10
 4598              		.cfi_endproc
 4599              	.LFE47:
 4601              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4602              		.align	1
 4603              		.global	xTaskGetCurrentTaskHandle
 4604              		.syntax unified
 4605              		.thumb
 4606              		.thumb_func
 4607              		.fpu fpv4-sp-d16
 4609              	xTaskGetCurrentTaskHandle:
 4610              	.LFB50:
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4611              		.loc 1 3907 0
 4612              		.cfi_startproc
 4613              		@ args = 0, pretend = 0, frame = 0
 4614              		@ frame_needed = 0, uses_anonymous_args = 0
 4615              		@ link register save eliminated.
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4616              		.loc 1 3913 0
 4617 0000 014B     		ldr	r3, .L450
 4618 0002 1868     		ldr	r0, [r3]
 4619              	.LVL426:
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4620              		.loc 1 3916 0
 4621 0004 7047     		bx	lr
 4622              	.L451:
 4623 0006 00BF     		.align	2
 4624              	.L450:
 4625 0008 00000000 		.word	.LANCHOR10
 4626              		.cfi_endproc
 4627              	.LFE50:
 4629              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4630              		.align	1
 4631              		.global	xTaskGetSchedulerState
 4632              		.syntax unified
 4633              		.thumb
 4634              		.thumb_func
 4635              		.fpu fpv4-sp-d16
 4637              	xTaskGetSchedulerState:
 4638              	.LFB51:
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4639              		.loc 1 3924 0
 4640              		.cfi_startproc
 4641              		@ args = 0, pretend = 0, frame = 0
 4642              		@ frame_needed = 0, uses_anonymous_args = 0
 4643              		@ link register save eliminated.
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4644              		.loc 1 3927 0
 4645 0000 054B     		ldr	r3, .L456
 4646 0002 1B68     		ldr	r3, [r3]
 4647 0004 23B1     		cbz	r3, .L454
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4648              		.loc 1 3933 0
ARM GAS  /tmp/ccJO9w1Z.s 			page 185


 4649 0006 054B     		ldr	r3, .L456+4
 4650 0008 1B68     		ldr	r3, [r3]
 4651 000a 1BB9     		cbnz	r3, .L455
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4652              		.loc 1 3935 0
 4653 000c 0220     		movs	r0, #2
 4654 000e 7047     		bx	lr
 4655              	.L454:
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4656              		.loc 1 3929 0
 4657 0010 0120     		movs	r0, #1
 4658 0012 7047     		bx	lr
 4659              	.L455:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4660              		.loc 1 3939 0
 4661 0014 0020     		movs	r0, #0
 4662              	.LVL427:
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4663              		.loc 1 3944 0
 4664 0016 7047     		bx	lr
 4665              	.L457:
 4666              		.align	2
 4667              	.L456:
 4668 0018 00000000 		.word	.LANCHOR11
 4669 001c 00000000 		.word	.LANCHOR16
 4670              		.cfi_endproc
 4671              	.LFE51:
 4673              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4674              		.align	1
 4675              		.global	xTaskPriorityInherit
 4676              		.syntax unified
 4677              		.thumb
 4678              		.thumb_func
 4679              		.fpu fpv4-sp-d16
 4681              	xTaskPriorityInherit:
 4682              	.LFB52:
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4683              		.loc 1 3952 0
 4684              		.cfi_startproc
 4685              		@ args = 0, pretend = 0, frame = 0
 4686              		@ frame_needed = 0, uses_anonymous_args = 0
 4687              	.LVL428:
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4688              		.loc 1 3959 0
 4689 0000 0028     		cmp	r0, #0
 4690 0002 40D0     		beq	.L464
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4691              		.loc 1 3952 0
 4692 0004 38B5     		push	{r3, r4, r5, lr}
 4693              	.LCFI47:
 4694              		.cfi_def_cfa_offset 16
 4695              		.cfi_offset 3, -16
 4696              		.cfi_offset 4, -12
 4697              		.cfi_offset 5, -8
 4698              		.cfi_offset 14, -4
 4699 0006 0546     		mov	r5, r0
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccJO9w1Z.s 			page 186


 4700              		.loc 1 3964 0
 4701 0008 C26A     		ldr	r2, [r0, #44]
 4702 000a 2049     		ldr	r1, .L472
 4703 000c 0968     		ldr	r1, [r1]
 4704 000e C96A     		ldr	r1, [r1, #44]
 4705 0010 8A42     		cmp	r2, r1
 4706 0012 2ED2     		bcs	.L460
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4707              		.loc 1 3969 0
 4708 0014 8169     		ldr	r1, [r0, #24]
 4709 0016 0029     		cmp	r1, #0
 4710 0018 05DB     		blt	.L461
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4711              		.loc 1 3971 0
 4712 001a 1C49     		ldr	r1, .L472
 4713 001c 0968     		ldr	r1, [r1]
 4714 001e C96A     		ldr	r1, [r1, #44]
 4715 0020 C1F13801 		rsb	r1, r1, #56
 4716 0024 8161     		str	r1, [r0, #24]
 4717              	.L461:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4718              		.loc 1 3980 0
 4719 0026 6869     		ldr	r0, [r5, #20]
 4720              	.LVL429:
 4721 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4722 002c 9100     		lsls	r1, r2, #2
 4723 002e 184A     		ldr	r2, .L472+4
 4724 0030 0A44     		add	r2, r2, r1
 4725 0032 9042     		cmp	r0, r2
 4726 0034 05D0     		beq	.L470
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4727              		.loc 1 3998 0
 4728 0036 154A     		ldr	r2, .L472
 4729 0038 1268     		ldr	r2, [r2]
 4730 003a D26A     		ldr	r2, [r2, #44]
 4731 003c EA62     		str	r2, [r5, #44]
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4732              		.loc 1 4004 0
 4733 003e 0120     		movs	r0, #1
 4734 0040 38BD     		pop	{r3, r4, r5, pc}
 4735              	.LVL430:
 4736              	.L470:
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4737              		.loc 1 3982 0
 4738 0042 2C1D     		adds	r4, r5, #4
 4739 0044 2046     		mov	r0, r4
 4740 0046 FFF7FEFF 		bl	uxListRemove
 4741              	.LVL431:
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4742              		.loc 1 3992 0
 4743 004a 104B     		ldr	r3, .L472
 4744 004c 1B68     		ldr	r3, [r3]
 4745 004e DB6A     		ldr	r3, [r3, #44]
 4746 0050 EB62     		str	r3, [r5, #44]
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4747              		.loc 1 3993 0
 4748 0052 104A     		ldr	r2, .L472+8
ARM GAS  /tmp/ccJO9w1Z.s 			page 187


 4749 0054 1268     		ldr	r2, [r2]
 4750 0056 9342     		cmp	r3, r2
 4751 0058 01D9     		bls	.L463
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4752              		.loc 1 3993 0 is_stmt 0 discriminator 1
 4753 005a 0E4A     		ldr	r2, .L472+8
 4754 005c 1360     		str	r3, [r2]
 4755              	.L463:
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4756              		.loc 1 3993 0 discriminator 3
 4757 005e 03EB8303 		add	r3, r3, r3, lsl #2
 4758 0062 9A00     		lsls	r2, r3, #2
 4759 0064 2146     		mov	r1, r4
 4760 0066 0A48     		ldr	r0, .L472+4
 4761 0068 1044     		add	r0, r0, r2
 4762 006a FFF7FEFF 		bl	vListInsertEnd
 4763              	.LVL432:
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4764              		.loc 1 4004 0 is_stmt 1 discriminator 3
 4765 006e 0120     		movs	r0, #1
 4766 0070 38BD     		pop	{r3, r4, r5, pc}
 4767              	.LVL433:
 4768              	.L460:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4769              		.loc 1 4008 0
 4770 0072 C26C     		ldr	r2, [r0, #76]
 4771 0074 054B     		ldr	r3, .L472
 4772 0076 1B68     		ldr	r3, [r3]
 4773 0078 DB6A     		ldr	r3, [r3, #44]
 4774 007a 9A42     		cmp	r2, r3
 4775 007c 01D2     		bcs	.L471
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4776              		.loc 1 4017 0
 4777 007e 0120     		movs	r0, #1
 4778              	.LVL434:
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4779              		.loc 1 4031 0
 4780 0080 38BD     		pop	{r3, r4, r5, pc}
 4781              	.LVL435:
 4782              	.L471:
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4783              		.loc 1 3954 0
 4784 0082 0020     		movs	r0, #0
 4785              	.LVL436:
 4786 0084 38BD     		pop	{r3, r4, r5, pc}
 4787              	.LVL437:
 4788              	.L464:
 4789              	.LCFI48:
 4790              		.cfi_def_cfa_offset 0
 4791              		.cfi_restore 3
 4792              		.cfi_restore 4
 4793              		.cfi_restore 5
 4794              		.cfi_restore 14
 4795 0086 0020     		movs	r0, #0
 4796              	.LVL438:
 4797 0088 7047     		bx	lr
 4798              	.L473:
ARM GAS  /tmp/ccJO9w1Z.s 			page 188


 4799 008a 00BF     		.align	2
 4800              	.L472:
 4801 008c 00000000 		.word	.LANCHOR10
 4802 0090 00000000 		.word	.LANCHOR4
 4803 0094 00000000 		.word	.LANCHOR13
 4804              		.cfi_endproc
 4805              	.LFE52:
 4807              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4808              		.align	1
 4809              		.global	xTaskPriorityDisinherit
 4810              		.syntax unified
 4811              		.thumb
 4812              		.thumb_func
 4813              		.fpu fpv4-sp-d16
 4815              	xTaskPriorityDisinherit:
 4816              	.LFB53:
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4817              		.loc 1 4039 0
 4818              		.cfi_startproc
 4819              		@ args = 0, pretend = 0, frame = 0
 4820              		@ frame_needed = 0, uses_anonymous_args = 0
 4821              	.LVL439:
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4822              		.loc 1 4043 0
 4823 0000 0028     		cmp	r0, #0
 4824 0002 39D0     		beq	.L481
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4825              		.loc 1 4039 0
 4826 0004 38B5     		push	{r3, r4, r5, lr}
 4827              	.LCFI49:
 4828              		.cfi_def_cfa_offset 16
 4829              		.cfi_offset 3, -16
 4830              		.cfi_offset 4, -12
 4831              		.cfi_offset 5, -8
 4832              		.cfi_offset 14, -4
 4833 0006 0446     		mov	r4, r0
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4834              		.loc 1 4049 0
 4835 0008 1E4A     		ldr	r2, .L488
 4836 000a 1268     		ldr	r2, [r2]
 4837 000c 9042     		cmp	r0, r2
 4838 000e 08D0     		beq	.L476
 4839              	.LBB218:
 4840              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4841              		.loc 2 195 0
 4842              		.syntax unified
 4843              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4844 0010 4FF05003 			mov r3, #80												
 4845 0014 83F31188 		msr basepri, r3											
 4846 0018 BFF36F8F 		isb														
 4847 001c BFF34F8F 		dsb														
 4848              	
 4849              	@ 0 "" 2
 4850              	.LVL440:
 4851              		.thumb
 4852              		.syntax unified
ARM GAS  /tmp/ccJO9w1Z.s 			page 189


 4853              	.L477:
 4854 0020 FEE7     		b	.L477
 4855              	.L476:
 4856              	.LBE219:
 4857              	.LBE218:
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4858              		.loc 1 4050 0
 4859 0022 026D     		ldr	r2, [r0, #80]
 4860 0024 42B9     		cbnz	r2, .L478
 4861              	.LBB220:
 4862              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4863              		.loc 2 195 0
 4864              		.syntax unified
 4865              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4866 0026 4FF05003 			mov r3, #80												
 4867 002a 83F31188 		msr basepri, r3											
 4868 002e BFF36F8F 		isb														
 4869 0032 BFF34F8F 		dsb														
 4870              	
 4871              	@ 0 "" 2
 4872              	.LVL441:
 4873              		.thumb
 4874              		.syntax unified
 4875              	.L479:
 4876 0036 FEE7     		b	.L479
 4877              	.L478:
 4878              	.LBE221:
 4879              	.LBE220:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4880              		.loc 1 4051 0
 4881 0038 013A     		subs	r2, r2, #1
 4882 003a 0265     		str	r2, [r0, #80]
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4883              		.loc 1 4055 0
 4884 003c C06A     		ldr	r0, [r0, #44]
 4885              	.LVL442:
 4886 003e E16C     		ldr	r1, [r4, #76]
 4887 0040 8842     		cmp	r0, r1
 4888 0042 1BD0     		beq	.L482
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4889              		.loc 1 4058 0
 4890 0044 E2B9     		cbnz	r2, .L483
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4891              		.loc 1 4065 0
 4892 0046 251D     		adds	r5, r4, #4
 4893 0048 2846     		mov	r0, r5
 4894 004a FFF7FEFF 		bl	uxListRemove
 4895              	.LVL443:
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4896              		.loc 1 4077 0
 4897 004e E36C     		ldr	r3, [r4, #76]
 4898 0050 E362     		str	r3, [r4, #44]
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4899              		.loc 1 4082 0
 4900 0052 C3F13802 		rsb	r2, r3, #56
 4901 0056 A261     		str	r2, [r4, #24]
ARM GAS  /tmp/ccJO9w1Z.s 			page 190


4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4902              		.loc 1 4083 0
 4903 0058 0B4A     		ldr	r2, .L488+4
 4904 005a 1268     		ldr	r2, [r2]
 4905 005c 9342     		cmp	r3, r2
 4906 005e 01D9     		bls	.L480
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4907              		.loc 1 4083 0 is_stmt 0 discriminator 1
 4908 0060 094A     		ldr	r2, .L488+4
 4909 0062 1360     		str	r3, [r2]
 4910              	.L480:
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4911              		.loc 1 4083 0 discriminator 3
 4912 0064 03EB8303 		add	r3, r3, r3, lsl #2
 4913 0068 9A00     		lsls	r2, r3, #2
 4914 006a 2946     		mov	r1, r5
 4915 006c 0748     		ldr	r0, .L488+8
 4916 006e 1044     		add	r0, r0, r2
 4917 0070 FFF7FEFF 		bl	vListInsertEnd
 4918              	.LVL444:
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4919              		.loc 1 4093 0 is_stmt 1 discriminator 3
 4920 0074 0120     		movs	r0, #1
 4921 0076 38BD     		pop	{r3, r4, r5, pc}
 4922              	.LVL445:
 4923              	.L481:
 4924              	.LCFI50:
 4925              		.cfi_def_cfa_offset 0
 4926              		.cfi_restore 3
 4927              		.cfi_restore 4
 4928              		.cfi_restore 5
 4929              		.cfi_restore 14
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4930              		.loc 1 4041 0
 4931 0078 0020     		movs	r0, #0
 4932              	.LVL446:
 4933 007a 7047     		bx	lr
 4934              	.LVL447:
 4935              	.L482:
 4936              	.LCFI51:
 4937              		.cfi_def_cfa_offset 16
 4938              		.cfi_offset 3, -16
 4939              		.cfi_offset 4, -12
 4940              		.cfi_offset 5, -8
 4941              		.cfi_offset 14, -4
 4942 007c 0020     		movs	r0, #0
 4943 007e 38BD     		pop	{r3, r4, r5, pc}
 4944              	.LVL448:
 4945              	.L483:
 4946 0080 0020     		movs	r0, #0
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4947              		.loc 1 4111 0
 4948 0082 38BD     		pop	{r3, r4, r5, pc}
 4949              	.LVL449:
 4950              	.L489:
 4951              		.align	2
 4952              	.L488:
ARM GAS  /tmp/ccJO9w1Z.s 			page 191


 4953 0084 00000000 		.word	.LANCHOR10
 4954 0088 00000000 		.word	.LANCHOR13
 4955 008c 00000000 		.word	.LANCHOR4
 4956              		.cfi_endproc
 4957              	.LFE53:
 4959              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4960              		.align	1
 4961              		.global	vTaskPriorityDisinheritAfterTimeout
 4962              		.syntax unified
 4963              		.thumb
 4964              		.thumb_func
 4965              		.fpu fpv4-sp-d16
 4967              	vTaskPriorityDisinheritAfterTimeout:
 4968              	.LFB54:
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4969              		.loc 1 4119 0
 4970              		.cfi_startproc
 4971              		@ args = 0, pretend = 0, frame = 0
 4972              		@ frame_needed = 0, uses_anonymous_args = 0
 4973              	.LVL450:
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4974              		.loc 1 4124 0
 4975 0000 0028     		cmp	r0, #0
 4976 0002 46D0     		beq	.L500
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4977              		.loc 1 4119 0
 4978 0004 38B5     		push	{r3, r4, r5, lr}
 4979              	.LCFI52:
 4980              		.cfi_def_cfa_offset 16
 4981              		.cfi_offset 3, -16
 4982              		.cfi_offset 4, -12
 4983              		.cfi_offset 5, -8
 4984              		.cfi_offset 14, -4
 4985 0006 0446     		mov	r4, r0
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4986              		.loc 1 4128 0
 4987 0008 006D     		ldr	r0, [r0, #80]
 4988              	.LVL451:
 4989 000a 40B9     		cbnz	r0, .L492
 4990              	.LBB222:
 4991              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4992              		.loc 2 195 0
 4993              		.syntax unified
 4994              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4995 000c 4FF05003 			mov r3, #80												
 4996 0010 83F31188 		msr basepri, r3											
 4997 0014 BFF36F8F 		isb														
 4998 0018 BFF34F8F 		dsb														
 4999              	
 5000              	@ 0 "" 2
 5001              	.LVL452:
 5002              		.thumb
 5003              		.syntax unified
 5004              	.L493:
 5005 001c FEE7     		b	.L493
 5006              	.L492:
ARM GAS  /tmp/ccJO9w1Z.s 			page 192


 5007              	.LBE223:
 5008              	.LBE222:
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5009              		.loc 1 4134 0
 5010 001e E26C     		ldr	r2, [r4, #76]
 5011 0020 8A42     		cmp	r2, r1
 5012 0022 00D2     		bcs	.L494
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5013              		.loc 1 4136 0
 5014 0024 0A46     		mov	r2, r1
 5015              	.L494:
 5016              	.LVL453:
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5017              		.loc 1 4144 0
 5018 0026 E16A     		ldr	r1, [r4, #44]
 5019              	.LVL454:
 5020 0028 8A42     		cmp	r2, r1
 5021 002a 01D0     		beq	.L490
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5022              		.loc 1 4150 0
 5023 002c 0128     		cmp	r0, #1
 5024 002e 00D0     		beq	.L503
 5025              	.LVL455:
 5026              	.L490:
 5027 0030 38BD     		pop	{r3, r4, r5, pc}
 5028              	.LVL456:
 5029              	.L503:
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5030              		.loc 1 4155 0
 5031 0032 1848     		ldr	r0, .L504
 5032 0034 0068     		ldr	r0, [r0]
 5033 0036 8442     		cmp	r4, r0
 5034 0038 08D1     		bne	.L495
 5035              	.LBB224:
 5036              	.LBB225:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5037              		.loc 2 195 0
 5038              		.syntax unified
 5039              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5040 003a 4FF05003 			mov r3, #80												
 5041 003e 83F31188 		msr basepri, r3											
 5042 0042 BFF36F8F 		isb														
 5043 0046 BFF34F8F 		dsb														
 5044              	
 5045              	@ 0 "" 2
 5046              	.LVL457:
 5047              		.thumb
 5048              		.syntax unified
 5049              	.L496:
 5050 004a FEE7     		b	.L496
 5051              	.L495:
 5052              	.LVL458:
 5053              	.LBE225:
 5054              	.LBE224:
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5055              		.loc 1 4162 0
 5056 004c E262     		str	r2, [r4, #44]
ARM GAS  /tmp/ccJO9w1Z.s 			page 193


4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5057              		.loc 1 4166 0
 5058 004e A069     		ldr	r0, [r4, #24]
 5059 0050 0028     		cmp	r0, #0
 5060 0052 02DB     		blt	.L497
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5061              		.loc 1 4168 0
 5062 0054 C2F13802 		rsb	r2, r2, #56
 5063              	.LVL459:
 5064 0058 A261     		str	r2, [r4, #24]
 5065              	.L497:
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5066              		.loc 1 4181 0
 5067 005a 6369     		ldr	r3, [r4, #20]
 5068 005c 01EB8101 		add	r1, r1, r1, lsl #2
 5069              	.LVL460:
 5070 0060 8800     		lsls	r0, r1, #2
 5071 0062 0D4A     		ldr	r2, .L504+4
 5072 0064 0244     		add	r2, r2, r0
 5073 0066 9342     		cmp	r3, r2
 5074 0068 E2D1     		bne	.L490
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 5075              		.loc 1 4183 0
 5076 006a 251D     		adds	r5, r4, #4
 5077 006c 2846     		mov	r0, r5
 5078 006e FFF7FEFF 		bl	uxListRemove
 5079              	.LVL461:
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5080              		.loc 1 4192 0
 5081 0072 E36A     		ldr	r3, [r4, #44]
 5082 0074 094A     		ldr	r2, .L504+8
 5083 0076 1268     		ldr	r2, [r2]
 5084 0078 9342     		cmp	r3, r2
 5085 007a 01D9     		bls	.L498
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5086              		.loc 1 4192 0 is_stmt 0 discriminator 1
 5087 007c 074A     		ldr	r2, .L504+8
 5088 007e 1360     		str	r3, [r2]
 5089              	.L498:
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5090              		.loc 1 4192 0 discriminator 3
 5091 0080 03EB8303 		add	r3, r3, r3, lsl #2
 5092 0084 9A00     		lsls	r2, r3, #2
 5093 0086 2946     		mov	r1, r5
 5094 0088 0348     		ldr	r0, .L504+4
 5095 008a 1044     		add	r0, r0, r2
 5096 008c FFF7FEFF 		bl	vListInsertEnd
 5097              	.LVL462:
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5098              		.loc 1 4213 0 is_stmt 1 discriminator 3
 5099 0090 CEE7     		b	.L490
 5100              	.LVL463:
 5101              	.L500:
 5102              	.LCFI53:
 5103              		.cfi_def_cfa_offset 0
 5104              		.cfi_restore 3
 5105              		.cfi_restore 4
ARM GAS  /tmp/ccJO9w1Z.s 			page 194


 5106              		.cfi_restore 5
 5107              		.cfi_restore 14
 5108 0092 7047     		bx	lr
 5109              	.L505:
 5110              		.align	2
 5111              	.L504:
 5112 0094 00000000 		.word	.LANCHOR10
 5113 0098 00000000 		.word	.LANCHOR4
 5114 009c 00000000 		.word	.LANCHOR13
 5115              		.cfi_endproc
 5116              	.LFE54:
 5118              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5119              		.align	1
 5120              		.global	uxTaskResetEventItemValue
 5121              		.syntax unified
 5122              		.thumb
 5123              		.thumb_func
 5124              		.fpu fpv4-sp-d16
 5126              	uxTaskResetEventItemValue:
 5127              	.LFB55:
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5128              		.loc 1 4534 0
 5129              		.cfi_startproc
 5130              		@ args = 0, pretend = 0, frame = 0
 5131              		@ frame_needed = 0, uses_anonymous_args = 0
 5132              		@ link register save eliminated.
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5133              		.loc 1 4537 0
 5134 0000 044B     		ldr	r3, .L507
 5135 0002 1A68     		ldr	r2, [r3]
 5136 0004 9069     		ldr	r0, [r2, #24]
 5137              	.LVL464:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5138              		.loc 1 4541 0
 5139 0006 1A68     		ldr	r2, [r3]
 5140 0008 1B68     		ldr	r3, [r3]
 5141 000a DB6A     		ldr	r3, [r3, #44]
 5142 000c C3F13803 		rsb	r3, r3, #56
 5143 0010 9361     		str	r3, [r2, #24]
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5144              		.loc 1 4544 0
 5145 0012 7047     		bx	lr
 5146              	.L508:
 5147              		.align	2
 5148              	.L507:
 5149 0014 00000000 		.word	.LANCHOR10
 5150              		.cfi_endproc
 5151              	.LFE55:
 5153              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5154              		.align	1
 5155              		.global	pvTaskIncrementMutexHeldCount
 5156              		.syntax unified
 5157              		.thumb
 5158              		.thumb_func
 5159              		.fpu fpv4-sp-d16
 5161              	pvTaskIncrementMutexHeldCount:
 5162              	.LFB56:
ARM GAS  /tmp/ccJO9w1Z.s 			page 195


4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5163              		.loc 1 4550 0
 5164              		.cfi_startproc
 5165              		@ args = 0, pretend = 0, frame = 0
 5166              		@ frame_needed = 0, uses_anonymous_args = 0
 5167              		@ link register save eliminated.
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5168              		.loc 1 4553 0
 5169 0000 054B     		ldr	r3, .L511
 5170 0002 1B68     		ldr	r3, [r3]
 5171 0004 23B1     		cbz	r3, .L510
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5172              		.loc 1 4555 0
 5173 0006 044B     		ldr	r3, .L511
 5174 0008 1A68     		ldr	r2, [r3]
 5175 000a 136D     		ldr	r3, [r2, #80]
 5176 000c 0133     		adds	r3, r3, #1
 5177 000e 1365     		str	r3, [r2, #80]
 5178              	.L510:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5179              		.loc 1 4558 0
 5180 0010 014B     		ldr	r3, .L511
 5181 0012 1868     		ldr	r0, [r3]
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5182              		.loc 1 4559 0
 5183 0014 7047     		bx	lr
 5184              	.L512:
 5185 0016 00BF     		.align	2
 5186              	.L511:
 5187 0018 00000000 		.word	.LANCHOR10
 5188              		.cfi_endproc
 5189              	.LFE56:
 5191              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5192              		.align	1
 5193              		.global	ulTaskNotifyTake
 5194              		.syntax unified
 5195              		.thumb
 5196              		.thumb_func
 5197              		.fpu fpv4-sp-d16
 5199              	ulTaskNotifyTake:
 5200              	.LFB57:
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5201              		.loc 1 4567 0
 5202              		.cfi_startproc
 5203              		@ args = 0, pretend = 0, frame = 0
 5204              		@ frame_needed = 0, uses_anonymous_args = 0
 5205              	.LVL465:
 5206 0000 38B5     		push	{r3, r4, r5, lr}
 5207              	.LCFI54:
 5208              		.cfi_def_cfa_offset 16
 5209              		.cfi_offset 3, -16
 5210              		.cfi_offset 4, -12
 5211              		.cfi_offset 5, -8
 5212              		.cfi_offset 14, -4
 5213 0002 0546     		mov	r5, r0
 5214 0004 0C46     		mov	r4, r1
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccJO9w1Z.s 			page 196


 5215              		.loc 1 4570 0
 5216 0006 FFF7FEFF 		bl	vPortEnterCritical
 5217              	.LVL466:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5218              		.loc 1 4573 0
 5219 000a 194B     		ldr	r3, .L520
 5220 000c 1B68     		ldr	r3, [r3]
 5221 000e 5B6D     		ldr	r3, [r3, #84]
 5222 0010 2BB9     		cbnz	r3, .L514
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5223              		.loc 1 4576 0
 5224 0012 174B     		ldr	r3, .L520
 5225 0014 1B68     		ldr	r3, [r3]
 5226 0016 0122     		movs	r2, #1
 5227 0018 83F85820 		strb	r2, [r3, #88]
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5228              		.loc 1 4578 0
 5229 001c ACB9     		cbnz	r4, .L518
 5230              	.L514:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5231              		.loc 1 4599 0
 5232 001e FFF7FEFF 		bl	vPortExitCritical
 5233              	.LVL467:
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5234              		.loc 1 4601 0
 5235 0022 FFF7FEFF 		bl	vPortEnterCritical
 5236              	.LVL468:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5237              		.loc 1 4604 0
 5238 0026 124B     		ldr	r3, .L520
 5239 0028 1B68     		ldr	r3, [r3]
 5240 002a 5C6D     		ldr	r4, [r3, #84]
 5241              	.LVL469:
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5242              		.loc 1 4606 0
 5243 002c 24B1     		cbz	r4, .L515
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5244              		.loc 1 4608 0
 5245 002e CDB9     		cbnz	r5, .L519
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5246              		.loc 1 4614 0
 5247 0030 0F4B     		ldr	r3, .L520
 5248 0032 1B68     		ldr	r3, [r3]
 5249 0034 621E     		subs	r2, r4, #1
 5250 0036 5A65     		str	r2, [r3, #84]
 5251              	.L515:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5252              		.loc 1 4622 0
 5253 0038 0D4B     		ldr	r3, .L520
 5254 003a 1B68     		ldr	r3, [r3]
 5255 003c 0022     		movs	r2, #0
 5256 003e 83F85820 		strb	r2, [r3, #88]
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5257              		.loc 1 4624 0
 5258 0042 FFF7FEFF 		bl	vPortExitCritical
 5259              	.LVL470:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccJO9w1Z.s 			page 197


 5260              		.loc 1 4627 0
 5261 0046 2046     		mov	r0, r4
 5262 0048 38BD     		pop	{r3, r4, r5, pc}
 5263              	.LVL471:
 5264              	.L518:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5265              		.loc 1 4580 0
 5266 004a 1146     		mov	r1, r2
 5267 004c 2046     		mov	r0, r4
 5268 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5269              	.LVL472:
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5270              		.loc 1 4587 0
 5271 0052 4FF08052 		mov	r2, #268435456
 5272 0056 074B     		ldr	r3, .L520+4
 5273 0058 1A60     		str	r2, [r3]
 5274              		.syntax unified
 5275              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5276 005a BFF34F8F 		dsb
 5277              	@ 0 "" 2
 5278              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5279 005e BFF36F8F 		isb
 5280              	@ 0 "" 2
 5281              		.thumb
 5282              		.syntax unified
 5283 0062 DCE7     		b	.L514
 5284              	.LVL473:
 5285              	.L519:
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5286              		.loc 1 4610 0
 5287 0064 024B     		ldr	r3, .L520
 5288 0066 1B68     		ldr	r3, [r3]
 5289 0068 0022     		movs	r2, #0
 5290 006a 5A65     		str	r2, [r3, #84]
 5291 006c E4E7     		b	.L515
 5292              	.L521:
 5293 006e 00BF     		.align	2
 5294              	.L520:
 5295 0070 00000000 		.word	.LANCHOR10
 5296 0074 04ED00E0 		.word	-536810236
 5297              		.cfi_endproc
 5298              	.LFE57:
 5300              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5301              		.align	1
 5302              		.global	xTaskNotifyWait
 5303              		.syntax unified
 5304              		.thumb
 5305              		.thumb_func
 5306              		.fpu fpv4-sp-d16
 5308              	xTaskNotifyWait:
 5309              	.LFB58:
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5310              		.loc 1 4635 0
 5311              		.cfi_startproc
 5312              		@ args = 0, pretend = 0, frame = 0
 5313              		@ frame_needed = 0, uses_anonymous_args = 0
 5314              	.LVL474:
ARM GAS  /tmp/ccJO9w1Z.s 			page 198


 5315 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5316              	.LCFI55:
 5317              		.cfi_def_cfa_offset 24
 5318              		.cfi_offset 3, -24
 5319              		.cfi_offset 4, -20
 5320              		.cfi_offset 5, -16
 5321              		.cfi_offset 6, -12
 5322              		.cfi_offset 7, -8
 5323              		.cfi_offset 14, -4
 5324 0002 0746     		mov	r7, r0
 5325 0004 0D46     		mov	r5, r1
 5326 0006 1446     		mov	r4, r2
 5327 0008 1E46     		mov	r6, r3
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5328              		.loc 1 4638 0
 5329 000a FFF7FEFF 		bl	vPortEnterCritical
 5330              	.LVL475:
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5331              		.loc 1 4641 0
 5332 000e 204B     		ldr	r3, .L530
 5333 0010 1B68     		ldr	r3, [r3]
 5334 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5335 0016 DBB2     		uxtb	r3, r3
 5336 0018 022B     		cmp	r3, #2
 5337 001a 0AD0     		beq	.L523
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5338              		.loc 1 4646 0
 5339 001c 1C4B     		ldr	r3, .L530
 5340 001e 1A68     		ldr	r2, [r3]
 5341 0020 506D     		ldr	r0, [r2, #84]
 5342 0022 20EA0700 		bic	r0, r0, r7
 5343 0026 5065     		str	r0, [r2, #84]
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5344              		.loc 1 4649 0
 5345 0028 1B68     		ldr	r3, [r3]
 5346 002a 0122     		movs	r2, #1
 5347 002c 83F85820 		strb	r2, [r3, #88]
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5348              		.loc 1 4651 0
 5349 0030 CEB9     		cbnz	r6, .L528
 5350              	.L523:
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5351              		.loc 1 4672 0
 5352 0032 FFF7FEFF 		bl	vPortExitCritical
 5353              	.LVL476:
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5354              		.loc 1 4674 0
 5355 0036 FFF7FEFF 		bl	vPortEnterCritical
 5356              	.LVL477:
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5357              		.loc 1 4678 0
 5358 003a 1CB1     		cbz	r4, .L524
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5359              		.loc 1 4682 0
 5360 003c 144B     		ldr	r3, .L530
 5361 003e 1B68     		ldr	r3, [r3]
 5362 0040 5B6D     		ldr	r3, [r3, #84]
ARM GAS  /tmp/ccJO9w1Z.s 			page 199


 5363 0042 2360     		str	r3, [r4]
 5364              	.L524:
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5365              		.loc 1 4689 0
 5366 0044 124B     		ldr	r3, .L530
 5367 0046 1B68     		ldr	r3, [r3]
 5368 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5369 004c DBB2     		uxtb	r3, r3
 5370 004e 022B     		cmp	r3, #2
 5371 0050 16D0     		beq	.L529
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5372              		.loc 1 4692 0
 5373 0052 0024     		movs	r4, #0
 5374              	.LVL478:
 5375              	.L525:
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5376              		.loc 1 4702 0
 5377 0054 0E4B     		ldr	r3, .L530
 5378 0056 1B68     		ldr	r3, [r3]
 5379 0058 0022     		movs	r2, #0
 5380 005a 83F85820 		strb	r2, [r3, #88]
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5381              		.loc 1 4704 0
 5382 005e FFF7FEFF 		bl	vPortExitCritical
 5383              	.LVL479:
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5384              		.loc 1 4707 0
 5385 0062 2046     		mov	r0, r4
 5386 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5387              	.LVL480:
 5388              	.L528:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5389              		.loc 1 4653 0
 5390 0066 1146     		mov	r1, r2
 5391 0068 3046     		mov	r0, r6
 5392 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5393              	.LVL481:
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5394              		.loc 1 4660 0
 5395 006e 4FF08052 		mov	r2, #268435456
 5396 0072 084B     		ldr	r3, .L530+4
 5397 0074 1A60     		str	r2, [r3]
 5398              		.syntax unified
 5399              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5400 0076 BFF34F8F 		dsb
 5401              	@ 0 "" 2
 5402              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5403 007a BFF36F8F 		isb
 5404              	@ 0 "" 2
 5405              		.thumb
 5406              		.syntax unified
 5407 007e D8E7     		b	.L523
 5408              	.L529:
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5409              		.loc 1 4698 0
 5410 0080 034B     		ldr	r3, .L530
 5411 0082 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccJO9w1Z.s 			page 200


 5412 0084 536D     		ldr	r3, [r2, #84]
 5413 0086 23EA0505 		bic	r5, r3, r5
 5414              	.LVL482:
 5415 008a 5565     		str	r5, [r2, #84]
 5416              	.LVL483:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5417              		.loc 1 4699 0
 5418 008c 0124     		movs	r4, #1
 5419              	.LVL484:
 5420 008e E1E7     		b	.L525
 5421              	.L531:
 5422              		.align	2
 5423              	.L530:
 5424 0090 00000000 		.word	.LANCHOR10
 5425 0094 04ED00E0 		.word	-536810236
 5426              		.cfi_endproc
 5427              	.LFE58:
 5429              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5430              		.align	1
 5431              		.global	xTaskGenericNotify
 5432              		.syntax unified
 5433              		.thumb
 5434              		.thumb_func
 5435              		.fpu fpv4-sp-d16
 5437              	xTaskGenericNotify:
 5438              	.LFB59:
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5439              		.loc 1 4715 0
 5440              		.cfi_startproc
 5441              		@ args = 0, pretend = 0, frame = 0
 5442              		@ frame_needed = 0, uses_anonymous_args = 0
 5443              	.LVL485:
 5444 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5445              	.LCFI56:
 5446              		.cfi_def_cfa_offset 24
 5447              		.cfi_offset 3, -24
 5448              		.cfi_offset 4, -20
 5449              		.cfi_offset 5, -16
 5450              		.cfi_offset 6, -12
 5451              		.cfi_offset 7, -8
 5452              		.cfi_offset 14, -4
 5453              	.LVL486:
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5454              		.loc 1 4720 0
 5455 0002 A8B1     		cbz	r0, .L552
 5456 0004 0446     		mov	r4, r0
 5457 0006 1F46     		mov	r7, r3
 5458 0008 1646     		mov	r6, r2
 5459 000a 0D46     		mov	r5, r1
 5460              	.LVL487:
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5461              		.loc 1 4723 0
 5462 000c FFF7FEFF 		bl	vPortEnterCritical
 5463              	.LVL488:
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5464              		.loc 1 4725 0
 5465 0010 0FB1     		cbz	r7, .L535
ARM GAS  /tmp/ccJO9w1Z.s 			page 201


4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5466              		.loc 1 4727 0
 5467 0012 636D     		ldr	r3, [r4, #84]
 5468 0014 3B60     		str	r3, [r7]
 5469              	.L535:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5470              		.loc 1 4730 0
 5471 0016 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5472 001a DBB2     		uxtb	r3, r3
 5473              	.LVL489:
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5474              		.loc 1 4732 0
 5475 001c 0222     		movs	r2, #2
 5476 001e 84F85820 		strb	r2, [r4, #88]
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5477              		.loc 1 4734 0
 5478 0022 042E     		cmp	r6, #4
 5479 0024 3ED8     		bhi	.L536
 5480 0026 DFE806F0 		tbb	[pc, r6]
 5481              	.L538:
 5482 002a 4A       		.byte	(.L548-.L538)/2
 5483 002b 0C       		.byte	(.L539-.L538)/2
 5484 002c 30       		.byte	(.L540-.L538)/2
 5485 002d 35       		.byte	(.L541-.L538)/2
 5486 002e 38       		.byte	(.L542-.L538)/2
 5487              	.LVL490:
 5488 002f 00       		.p2align 1
 5489              	.L552:
 5490              	.LBB226:
 5491              	.LBB227:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5492              		.loc 2 195 0
 5493              		.syntax unified
 5494              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5495 0030 4FF05003 			mov r3, #80												
 5496 0034 83F31188 		msr basepri, r3											
 5497 0038 BFF36F8F 		isb														
 5498 003c BFF34F8F 		dsb														
 5499              	
 5500              	@ 0 "" 2
 5501              	.LVL491:
 5502              		.thumb
 5503              		.syntax unified
 5504              	.L534:
 5505 0040 FEE7     		b	.L534
 5506              	.LVL492:
 5507              	.L539:
 5508              	.LBE227:
 5509              	.LBE226:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5510              		.loc 1 4737 0
 5511 0042 626D     		ldr	r2, [r4, #84]
 5512 0044 1543     		orrs	r5, r5, r2
 5513              	.LVL493:
 5514 0046 6565     		str	r5, [r4, #84]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5515              		.loc 1 4717 0
ARM GAS  /tmp/ccJO9w1Z.s 			page 202


 5516 0048 0125     		movs	r5, #1
 5517              	.L537:
 5518              	.LVL494:
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5519              		.loc 1 4778 0
 5520 004a 012B     		cmp	r3, #1
 5521 004c 4BD1     		bne	.L544
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5522              		.loc 1 4780 0
 5523 004e 261D     		adds	r6, r4, #4
 5524 0050 3046     		mov	r0, r6
 5525 0052 FFF7FEFF 		bl	uxListRemove
 5526              	.LVL495:
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5527              		.loc 1 4781 0
 5528 0056 E36A     		ldr	r3, [r4, #44]
 5529 0058 254A     		ldr	r2, .L553
 5530 005a 1268     		ldr	r2, [r2]
 5531 005c 9342     		cmp	r3, r2
 5532 005e 01D9     		bls	.L545
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5533              		.loc 1 4781 0 is_stmt 0 discriminator 1
 5534 0060 234A     		ldr	r2, .L553
 5535 0062 1360     		str	r3, [r2]
 5536              	.L545:
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5537              		.loc 1 4781 0 discriminator 3
 5538 0064 03EB8303 		add	r3, r3, r3, lsl #2
 5539 0068 9A00     		lsls	r2, r3, #2
 5540 006a 3146     		mov	r1, r6
 5541 006c 2148     		ldr	r0, .L553+4
 5542 006e 1044     		add	r0, r0, r2
 5543 0070 FFF7FEFF 		bl	vListInsertEnd
 5544              	.LVL496:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5545              		.loc 1 4784 0 is_stmt 1 discriminator 3
 5546 0074 A36A     		ldr	r3, [r4, #40]
 5547 0076 43B3     		cbz	r3, .L546
 5548              	.LBB228:
 5549              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5550              		.loc 2 195 0
 5551              		.syntax unified
 5552              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5553 0078 4FF05003 			mov r3, #80												
 5554 007c 83F31188 		msr basepri, r3											
 5555 0080 BFF36F8F 		isb														
 5556 0084 BFF34F8F 		dsb														
 5557              	
 5558              	@ 0 "" 2
 5559              	.LVL497:
 5560              		.thumb
 5561              		.syntax unified
 5562              	.L547:
 5563 0088 FEE7     		b	.L547
 5564              	.LVL498:
 5565              	.L540:
ARM GAS  /tmp/ccJO9w1Z.s 			page 203


 5566              	.LBE229:
 5567              	.LBE228:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5568              		.loc 1 4741 0
 5569 008a 626D     		ldr	r2, [r4, #84]
 5570 008c 0132     		adds	r2, r2, #1
 5571 008e 6265     		str	r2, [r4, #84]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5572              		.loc 1 4717 0
 5573 0090 0125     		movs	r5, #1
 5574              	.LVL499:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5575              		.loc 1 4742 0
 5576 0092 DAE7     		b	.L537
 5577              	.LVL500:
 5578              	.L541:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5579              		.loc 1 4745 0
 5580 0094 6565     		str	r5, [r4, #84]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5581              		.loc 1 4717 0
 5582 0096 0125     		movs	r5, #1
 5583              	.LVL501:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5584              		.loc 1 4746 0
 5585 0098 D7E7     		b	.L537
 5586              	.LVL502:
 5587              	.L542:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5588              		.loc 1 4749 0
 5589 009a 022B     		cmp	r3, #2
 5590 009c 11D0     		beq	.L549
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5591              		.loc 1 4751 0
 5592 009e 6565     		str	r5, [r4, #84]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5593              		.loc 1 4717 0
 5594 00a0 0125     		movs	r5, #1
 5595              	.LVL503:
 5596 00a2 D2E7     		b	.L537
 5597              	.LVL504:
 5598              	.L536:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5599              		.loc 1 4769 0
 5600 00a4 626D     		ldr	r2, [r4, #84]
 5601 00a6 B2F1FF3F 		cmp	r2, #-1
 5602 00aa 0CD0     		beq	.L550
 5603              	.LBB230:
 5604              	.LBB231:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5605              		.loc 2 195 0
 5606              		.syntax unified
 5607              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5608 00ac 4FF05003 			mov r3, #80												
 5609 00b0 83F31188 		msr basepri, r3											
 5610 00b4 BFF36F8F 		isb														
 5611 00b8 BFF34F8F 		dsb														
ARM GAS  /tmp/ccJO9w1Z.s 			page 204


 5612              	
 5613              	@ 0 "" 2
 5614              	.LVL505:
 5615              		.thumb
 5616              		.syntax unified
 5617              	.L543:
 5618 00bc FEE7     		b	.L543
 5619              	.LVL506:
 5620              	.L548:
 5621              	.LBE231:
 5622              	.LBE230:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5623              		.loc 1 4717 0
 5624 00be 0125     		movs	r5, #1
 5625              	.LVL507:
 5626 00c0 C3E7     		b	.L537
 5627              	.LVL508:
 5628              	.L549:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5629              		.loc 1 4756 0
 5630 00c2 0025     		movs	r5, #0
 5631              	.LVL509:
 5632 00c4 C1E7     		b	.L537
 5633              	.LVL510:
 5634              	.L550:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5635              		.loc 1 4717 0
 5636 00c6 0125     		movs	r5, #1
 5637              	.LVL511:
 5638 00c8 BFE7     		b	.L537
 5639              	.LVL512:
 5640              	.L546:
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5641              		.loc 1 4802 0
 5642 00ca E26A     		ldr	r2, [r4, #44]
 5643 00cc 0A4B     		ldr	r3, .L553+8
 5644 00ce 1B68     		ldr	r3, [r3]
 5645 00d0 DB6A     		ldr	r3, [r3, #44]
 5646 00d2 9A42     		cmp	r2, r3
 5647 00d4 07D9     		bls	.L544
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5648              		.loc 1 4806 0
 5649 00d6 4FF08052 		mov	r2, #268435456
 5650 00da 084B     		ldr	r3, .L553+12
 5651 00dc 1A60     		str	r2, [r3]
 5652              		.syntax unified
 5653              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5654 00de BFF34F8F 		dsb
 5655              	@ 0 "" 2
 5656              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5657 00e2 BFF36F8F 		isb
 5658              	@ 0 "" 2
 5659              		.thumb
 5660              		.syntax unified
 5661              	.L544:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5662              		.loc 1 4818 0
ARM GAS  /tmp/ccJO9w1Z.s 			page 205


 5663 00e6 FFF7FEFF 		bl	vPortExitCritical
 5664              	.LVL513:
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5665              		.loc 1 4821 0
 5666 00ea 2846     		mov	r0, r5
 5667 00ec F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5668              	.LVL514:
 5669              	.L554:
 5670 00ee 00BF     		.align	2
 5671              	.L553:
 5672 00f0 00000000 		.word	.LANCHOR13
 5673 00f4 00000000 		.word	.LANCHOR4
 5674 00f8 00000000 		.word	.LANCHOR10
 5675 00fc 04ED00E0 		.word	-536810236
 5676              		.cfi_endproc
 5677              	.LFE59:
 5679              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5680              		.align	1
 5681              		.global	xTaskGenericNotifyFromISR
 5682              		.syntax unified
 5683              		.thumb
 5684              		.thumb_func
 5685              		.fpu fpv4-sp-d16
 5687              	xTaskGenericNotifyFromISR:
 5688              	.LFB60:
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5689              		.loc 1 4829 0
 5690              		.cfi_startproc
 5691              		@ args = 4, pretend = 0, frame = 0
 5692              		@ frame_needed = 0, uses_anonymous_args = 0
 5693              	.LVL515:
 5694 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5695              	.LCFI57:
 5696              		.cfi_def_cfa_offset 32
 5697              		.cfi_offset 3, -32
 5698              		.cfi_offset 4, -28
 5699              		.cfi_offset 5, -24
 5700              		.cfi_offset 6, -20
 5701              		.cfi_offset 7, -16
 5702              		.cfi_offset 8, -12
 5703              		.cfi_offset 9, -8
 5704              		.cfi_offset 14, -4
 5705 0004 089E     		ldr	r6, [sp, #32]
 5706              	.LVL516:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5707              		.loc 1 4835 0
 5708 0006 18B3     		cbz	r0, .L578
 5709 0008 0446     		mov	r4, r0
 5710 000a 9946     		mov	r9, r3
 5711 000c 9046     		mov	r8, r2
 5712 000e 0D46     		mov	r5, r1
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5713              		.loc 1 4853 0
 5714 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5715              	.LVL517:
 5716              	.LBB232:
 5717              	.LBB233:
ARM GAS  /tmp/ccJO9w1Z.s 			page 206


 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5718              		.loc 2 211 0
 5719              		.syntax unified
 5720              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5721 0014 EFF31187 			mrs r7, basepri											
 5722 0018 4FF05003 		mov r3, #80												
 5723 001c 83F31188 		msr basepri, r3											
 5724 0020 BFF36F8F 		isb														
 5725 0024 BFF34F8F 		dsb														
 5726              	
 5727              	@ 0 "" 2
 5728              		.thumb
 5729              		.syntax unified
 5730              	.LBE233:
 5731              	.LBE232:
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5732              		.loc 1 4859 0
 5733 0028 B9F1000F 		cmp	r9, #0
 5734 002c 02D0     		beq	.L558
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5735              		.loc 1 4861 0
 5736 002e 636D     		ldr	r3, [r4, #84]
 5737 0030 C9F80030 		str	r3, [r9]
 5738              	.L558:
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5739              		.loc 1 4864 0
 5740 0034 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5741 0038 DBB2     		uxtb	r3, r3
 5742              	.LVL518:
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5743              		.loc 1 4865 0
 5744 003a 0222     		movs	r2, #2
 5745 003c 84F85820 		strb	r2, [r4, #88]
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5746              		.loc 1 4867 0
 5747 0040 B8F1040F 		cmp	r8, #4
 5748 0044 2BD8     		bhi	.L559
 5749 0046 DFE808F0 		tbb	[pc, r8]
 5750              	.L561:
 5751 004a 37       		.byte	(.L574-.L561)/2
 5752 004b 0C       		.byte	(.L562-.L561)/2
 5753 004c 1D       		.byte	(.L563-.L561)/2
 5754 004d 22       		.byte	(.L564-.L561)/2
 5755 004e 25       		.byte	(.L565-.L561)/2
 5756              	.LVL519:
 5757 004f 00       		.p2align 1
 5758              	.L578:
 5759              	.LBB234:
 5760              	.LBB235:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5761              		.loc 2 195 0
 5762              		.syntax unified
 5763              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5764 0050 4FF05003 			mov r3, #80												
 5765 0054 83F31188 		msr basepri, r3											
 5766 0058 BFF36F8F 		isb														
 5767 005c BFF34F8F 		dsb														
ARM GAS  /tmp/ccJO9w1Z.s 			page 207


 5768              	
 5769              	@ 0 "" 2
 5770              	.LVL520:
 5771              		.thumb
 5772              		.syntax unified
 5773              	.L557:
 5774 0060 FEE7     		b	.L557
 5775              	.LVL521:
 5776              	.L562:
 5777              	.LBE235:
 5778              	.LBE234:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5779              		.loc 1 4870 0
 5780 0062 626D     		ldr	r2, [r4, #84]
 5781 0064 1543     		orrs	r5, r5, r2
 5782              	.LVL522:
 5783 0066 6565     		str	r5, [r4, #84]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5784              		.loc 1 4832 0
 5785 0068 0125     		movs	r5, #1
 5786              	.L560:
 5787              	.LVL523:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5788              		.loc 1 4910 0
 5789 006a 012B     		cmp	r3, #1
 5790 006c 4DD1     		bne	.L567
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5791              		.loc 1 4913 0
 5792 006e A36A     		ldr	r3, [r4, #40]
 5793              	.LVL524:
 5794 0070 43B3     		cbz	r3, .L568
 5795              	.LBB236:
 5796              	.LBB237:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5797              		.loc 2 195 0
 5798              		.syntax unified
 5799              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5800 0072 4FF05003 			mov r3, #80												
 5801 0076 83F31188 		msr basepri, r3											
 5802 007a BFF36F8F 		isb														
 5803 007e BFF34F8F 		dsb														
 5804              	
 5805              	@ 0 "" 2
 5806              	.LVL525:
 5807              		.thumb
 5808              		.syntax unified
 5809              	.L569:
 5810 0082 FEE7     		b	.L569
 5811              	.LVL526:
 5812              	.L563:
 5813              	.LBE237:
 5814              	.LBE236:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5815              		.loc 1 4874 0
 5816 0084 626D     		ldr	r2, [r4, #84]
 5817 0086 0132     		adds	r2, r2, #1
 5818 0088 6265     		str	r2, [r4, #84]
ARM GAS  /tmp/ccJO9w1Z.s 			page 208


4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5819              		.loc 1 4832 0
 5820 008a 0125     		movs	r5, #1
 5821              	.LVL527:
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5822              		.loc 1 4875 0
 5823 008c EDE7     		b	.L560
 5824              	.LVL528:
 5825              	.L564:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5826              		.loc 1 4878 0
 5827 008e 6565     		str	r5, [r4, #84]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5828              		.loc 1 4832 0
 5829 0090 0125     		movs	r5, #1
 5830              	.LVL529:
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5831              		.loc 1 4879 0
 5832 0092 EAE7     		b	.L560
 5833              	.LVL530:
 5834              	.L565:
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5835              		.loc 1 4882 0
 5836 0094 022B     		cmp	r3, #2
 5837 0096 11D0     		beq	.L575
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5838              		.loc 1 4884 0
 5839 0098 6565     		str	r5, [r4, #84]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5840              		.loc 1 4832 0
 5841 009a 0125     		movs	r5, #1
 5842              	.LVL531:
 5843 009c E5E7     		b	.L560
 5844              	.LVL532:
 5845              	.L559:
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5846              		.loc 1 4902 0
 5847 009e 626D     		ldr	r2, [r4, #84]
 5848 00a0 B2F1FF3F 		cmp	r2, #-1
 5849 00a4 0CD0     		beq	.L576
 5850              	.LBB238:
 5851              	.LBB239:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5852              		.loc 2 195 0
 5853              		.syntax unified
 5854              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5855 00a6 4FF05003 			mov r3, #80												
 5856 00aa 83F31188 		msr basepri, r3											
 5857 00ae BFF36F8F 		isb														
 5858 00b2 BFF34F8F 		dsb														
 5859              	
 5860              	@ 0 "" 2
 5861              	.LVL533:
 5862              		.thumb
 5863              		.syntax unified
 5864              	.L566:
 5865 00b6 FEE7     		b	.L566
ARM GAS  /tmp/ccJO9w1Z.s 			page 209


 5866              	.LVL534:
 5867              	.L574:
 5868              	.LBE239:
 5869              	.LBE238:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5870              		.loc 1 4832 0
 5871 00b8 0125     		movs	r5, #1
 5872              	.LVL535:
 5873 00ba D6E7     		b	.L560
 5874              	.LVL536:
 5875              	.L575:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5876              		.loc 1 4889 0
 5877 00bc 0025     		movs	r5, #0
 5878              	.LVL537:
 5879 00be D4E7     		b	.L560
 5880              	.LVL538:
 5881              	.L576:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5882              		.loc 1 4832 0
 5883 00c0 0125     		movs	r5, #1
 5884              	.LVL539:
 5885 00c2 D2E7     		b	.L560
 5886              	.LVL540:
 5887              	.L568:
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5888              		.loc 1 4915 0
 5889 00c4 164B     		ldr	r3, .L579
 5890 00c6 1B68     		ldr	r3, [r3]
 5891 00c8 23BB     		cbnz	r3, .L570
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5892              		.loc 1 4917 0
 5893 00ca 04F10408 		add	r8, r4, #4
 5894 00ce 4046     		mov	r0, r8
 5895 00d0 FFF7FEFF 		bl	uxListRemove
 5896              	.LVL541:
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5897              		.loc 1 4918 0
 5898 00d4 E36A     		ldr	r3, [r4, #44]
 5899 00d6 134A     		ldr	r2, .L579+4
 5900 00d8 1268     		ldr	r2, [r2]
 5901 00da 9342     		cmp	r3, r2
 5902 00dc 01D9     		bls	.L571
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5903              		.loc 1 4918 0 is_stmt 0 discriminator 1
 5904 00de 114A     		ldr	r2, .L579+4
 5905 00e0 1360     		str	r3, [r2]
 5906              	.L571:
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5907              		.loc 1 4918 0 discriminator 3
 5908 00e2 03EB8303 		add	r3, r3, r3, lsl #2
 5909 00e6 9A00     		lsls	r2, r3, #2
 5910 00e8 4146     		mov	r1, r8
 5911 00ea 0F48     		ldr	r0, .L579+8
 5912 00ec 1044     		add	r0, r0, r2
 5913 00ee FFF7FEFF 		bl	vListInsertEnd
 5914              	.LVL542:
ARM GAS  /tmp/ccJO9w1Z.s 			page 210


 5915              	.L572:
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5916              		.loc 1 4927 0 is_stmt 1
 5917 00f2 E26A     		ldr	r2, [r4, #44]
 5918 00f4 0D4B     		ldr	r3, .L579+12
 5919 00f6 1B68     		ldr	r3, [r3]
 5920 00f8 DB6A     		ldr	r3, [r3, #44]
 5921 00fa 9A42     		cmp	r2, r3
 5922 00fc 05D9     		bls	.L567
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5923              		.loc 1 4931 0
 5924 00fe 0EB1     		cbz	r6, .L573
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5925              		.loc 1 4933 0
 5926 0100 0123     		movs	r3, #1
 5927 0102 3360     		str	r3, [r6]
 5928              	.L573:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5929              		.loc 1 4939 0
 5930 0104 0122     		movs	r2, #1
 5931 0106 0A4B     		ldr	r3, .L579+16
 5932 0108 1A60     		str	r2, [r3]
 5933              	.L567:
 5934              	.LVL543:
 5935              	.LBB240:
 5936              	.LBB241:
 5937              		.loc 2 229 0
 5938              		.syntax unified
 5939              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5940 010a 87F31188 			msr basepri, r7	
 5941              	@ 0 "" 2
 5942              	.LVL544:
 5943              		.thumb
 5944              		.syntax unified
 5945              	.LBE241:
 5946              	.LBE240:
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5947              		.loc 1 4950 0
 5948 010e 2846     		mov	r0, r5
 5949 0110 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5950              	.LVL545:
 5951              	.L570:
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5952              		.loc 1 4924 0
 5953 0114 04F11801 		add	r1, r4, #24
 5954 0118 0648     		ldr	r0, .L579+20
 5955 011a FFF7FEFF 		bl	vListInsertEnd
 5956              	.LVL546:
 5957 011e E8E7     		b	.L572
 5958              	.L580:
 5959              		.align	2
 5960              	.L579:
 5961 0120 00000000 		.word	.LANCHOR16
 5962 0124 00000000 		.word	.LANCHOR13
 5963 0128 00000000 		.word	.LANCHOR4
 5964 012c 00000000 		.word	.LANCHOR10
 5965 0130 00000000 		.word	.LANCHOR19
ARM GAS  /tmp/ccJO9w1Z.s 			page 211


 5966 0134 00000000 		.word	.LANCHOR1
 5967              		.cfi_endproc
 5968              	.LFE60:
 5970              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5971              		.align	1
 5972              		.global	vTaskNotifyGiveFromISR
 5973              		.syntax unified
 5974              		.thumb
 5975              		.thumb_func
 5976              		.fpu fpv4-sp-d16
 5978              	vTaskNotifyGiveFromISR:
 5979              	.LFB61:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5980              		.loc 1 4958 0
 5981              		.cfi_startproc
 5982              		@ args = 0, pretend = 0, frame = 0
 5983              		@ frame_needed = 0, uses_anonymous_args = 0
 5984              	.LVL547:
 5985 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5986              	.LCFI58:
 5987              		.cfi_def_cfa_offset 24
 5988              		.cfi_offset 3, -24
 5989              		.cfi_offset 4, -20
 5990              		.cfi_offset 5, -16
 5991              		.cfi_offset 6, -12
 5992              		.cfi_offset 7, -8
 5993              		.cfi_offset 14, -4
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5994              		.loc 1 4963 0
 5995 0002 18B3     		cbz	r0, .L592
 5996 0004 0446     		mov	r4, r0
 5997 0006 0D46     		mov	r5, r1
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5998              		.loc 1 4981 0
 5999 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 6000              	.LVL548:
 6001              	.LBB242:
 6002              	.LBB243:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6003              		.loc 2 211 0
 6004              		.syntax unified
 6005              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6006 000c EFF31186 			mrs r6, basepri											
 6007 0010 4FF05003 		mov r3, #80												
 6008 0014 83F31188 		msr basepri, r3											
 6009 0018 BFF36F8F 		isb														
 6010 001c BFF34F8F 		dsb														
 6011              	
 6012              	@ 0 "" 2
 6013              		.thumb
 6014              		.syntax unified
 6015              	.LBE243:
 6016              	.LBE242:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 6017              		.loc 1 4987 0
 6018 0020 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 6019 0024 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccJO9w1Z.s 			page 212


 6020              	.LVL549:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6021              		.loc 1 4988 0
 6022 0026 0222     		movs	r2, #2
 6023 0028 84F85820 		strb	r2, [r4, #88]
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6024              		.loc 1 4992 0
 6025 002c 626D     		ldr	r2, [r4, #84]
 6026 002e 0132     		adds	r2, r2, #1
 6027 0030 6265     		str	r2, [r4, #84]
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6028              		.loc 1 4998 0
 6029 0032 012B     		cmp	r3, #1
 6030 0034 35D1     		bne	.L584
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6031              		.loc 1 5001 0
 6032 0036 A36A     		ldr	r3, [r4, #40]
 6033              	.LVL550:
 6034 0038 8BB1     		cbz	r3, .L585
 6035              	.LBB244:
 6036              	.LBB245:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6037              		.loc 2 195 0
 6038              		.syntax unified
 6039              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6040 003a 4FF05003 			mov r3, #80												
 6041 003e 83F31188 		msr basepri, r3											
 6042 0042 BFF36F8F 		isb														
 6043 0046 BFF34F8F 		dsb														
 6044              	
 6045              	@ 0 "" 2
 6046              	.LVL551:
 6047              		.thumb
 6048              		.syntax unified
 6049              	.L586:
 6050 004a FEE7     		b	.L586
 6051              	.LVL552:
 6052              	.L592:
 6053              	.LBE245:
 6054              	.LBE244:
 6055              	.LBB246:
 6056              	.LBB247:
 6057              		.syntax unified
 6058              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6059 004c 4FF05003 			mov r3, #80												
 6060 0050 83F31188 		msr basepri, r3											
 6061 0054 BFF36F8F 		isb														
 6062 0058 BFF34F8F 		dsb														
 6063              	
 6064              	@ 0 "" 2
 6065              	.LVL553:
 6066              		.thumb
 6067              		.syntax unified
 6068              	.L583:
 6069 005c FEE7     		b	.L583
 6070              	.LVL554:
 6071              	.L585:
ARM GAS  /tmp/ccJO9w1Z.s 			page 213


 6072              	.LBE247:
 6073              	.LBE246:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6074              		.loc 1 5003 0
 6075 005e 154B     		ldr	r3, .L593
 6076 0060 1B68     		ldr	r3, [r3]
 6077 0062 0BBB     		cbnz	r3, .L587
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6078              		.loc 1 5005 0
 6079 0064 271D     		adds	r7, r4, #4
 6080 0066 3846     		mov	r0, r7
 6081 0068 FFF7FEFF 		bl	uxListRemove
 6082              	.LVL555:
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6083              		.loc 1 5006 0
 6084 006c E36A     		ldr	r3, [r4, #44]
 6085 006e 124A     		ldr	r2, .L593+4
 6086 0070 1268     		ldr	r2, [r2]
 6087 0072 9342     		cmp	r3, r2
 6088 0074 01D9     		bls	.L588
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6089              		.loc 1 5006 0 is_stmt 0 discriminator 1
 6090 0076 104A     		ldr	r2, .L593+4
 6091 0078 1360     		str	r3, [r2]
 6092              	.L588:
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6093              		.loc 1 5006 0 discriminator 3
 6094 007a 03EB8303 		add	r3, r3, r3, lsl #2
 6095 007e 9A00     		lsls	r2, r3, #2
 6096 0080 3946     		mov	r1, r7
 6097 0082 0E48     		ldr	r0, .L593+8
 6098 0084 1044     		add	r0, r0, r2
 6099 0086 FFF7FEFF 		bl	vListInsertEnd
 6100              	.LVL556:
 6101              	.L589:
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6102              		.loc 1 5015 0 is_stmt 1
 6103 008a E26A     		ldr	r2, [r4, #44]
 6104 008c 0C4B     		ldr	r3, .L593+12
 6105 008e 1B68     		ldr	r3, [r3]
 6106 0090 DB6A     		ldr	r3, [r3, #44]
 6107 0092 9A42     		cmp	r2, r3
 6108 0094 05D9     		bls	.L584
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6109              		.loc 1 5019 0
 6110 0096 0DB1     		cbz	r5, .L590
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6111              		.loc 1 5021 0
 6112 0098 0123     		movs	r3, #1
 6113 009a 2B60     		str	r3, [r5]
 6114              	.L590:
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6115              		.loc 1 5027 0
 6116 009c 0122     		movs	r2, #1
 6117 009e 094B     		ldr	r3, .L593+16
 6118 00a0 1A60     		str	r2, [r3]
 6119              	.L584:
ARM GAS  /tmp/ccJO9w1Z.s 			page 214


 6120              	.LVL557:
 6121              	.LBB248:
 6122              	.LBB249:
 6123              		.loc 2 229 0
 6124              		.syntax unified
 6125              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6126 00a2 86F31188 			msr basepri, r6	
 6127              	@ 0 "" 2
 6128              	.LVL558:
 6129              		.thumb
 6130              		.syntax unified
 6131 00a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6132              	.LVL559:
 6133              	.L587:
 6134              	.LBE249:
 6135              	.LBE248:
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6136              		.loc 1 5012 0
 6137 00a8 04F11801 		add	r1, r4, #24
 6138 00ac 0648     		ldr	r0, .L593+20
 6139 00ae FFF7FEFF 		bl	vListInsertEnd
 6140              	.LVL560:
 6141 00b2 EAE7     		b	.L589
 6142              	.L594:
 6143              		.align	2
 6144              	.L593:
 6145 00b4 00000000 		.word	.LANCHOR16
 6146 00b8 00000000 		.word	.LANCHOR13
 6147 00bc 00000000 		.word	.LANCHOR4
 6148 00c0 00000000 		.word	.LANCHOR10
 6149 00c4 00000000 		.word	.LANCHOR19
 6150 00c8 00000000 		.word	.LANCHOR1
 6151              		.cfi_endproc
 6152              	.LFE61:
 6154              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6155              		.align	1
 6156              		.global	xTaskNotifyStateClear
 6157              		.syntax unified
 6158              		.thumb
 6159              		.thumb_func
 6160              		.fpu fpv4-sp-d16
 6162              	xTaskNotifyStateClear:
 6163              	.LFB62:
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6164              		.loc 1 5045 0
 6165              		.cfi_startproc
 6166              		@ args = 0, pretend = 0, frame = 0
 6167              		@ frame_needed = 0, uses_anonymous_args = 0
 6168              	.LVL561:
 6169 0000 10B5     		push	{r4, lr}
 6170              	.LCFI59:
 6171              		.cfi_def_cfa_offset 8
 6172              		.cfi_offset 4, -8
 6173              		.cfi_offset 14, -4
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6174              		.loc 1 5051 0
 6175 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccJO9w1Z.s 			page 215


 6176 0004 58B1     		cbz	r0, .L600
 6177              	.LVL562:
 6178              	.L596:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6179              		.loc 1 5053 0 discriminator 4
 6180 0006 FFF7FEFF 		bl	vPortEnterCritical
 6181              	.LVL563:
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6182              		.loc 1 5055 0 discriminator 4
 6183 000a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 6184 000e DBB2     		uxtb	r3, r3
 6185 0010 022B     		cmp	r3, #2
 6186 0012 07D0     		beq	.L601
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6187              		.loc 1 5062 0
 6188 0014 0024     		movs	r4, #0
 6189              	.LVL564:
 6190              	.L597:
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6191              		.loc 1 5065 0
 6192 0016 FFF7FEFF 		bl	vPortExitCritical
 6193              	.LVL565:
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6194              		.loc 1 5068 0
 6195 001a 2046     		mov	r0, r4
 6196 001c 10BD     		pop	{r4, pc}
 6197              	.LVL566:
 6198              	.L600:
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6199              		.loc 1 5051 0 discriminator 1
 6200 001e 044B     		ldr	r3, .L602
 6201 0020 1C68     		ldr	r4, [r3]
 6202              	.LVL567:
 6203 0022 F0E7     		b	.L596
 6204              	.LVL568:
 6205              	.L601:
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6206              		.loc 1 5057 0
 6207 0024 0023     		movs	r3, #0
 6208 0026 84F85830 		strb	r3, [r4, #88]
 6209              	.LVL569:
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6210              		.loc 1 5058 0
 6211 002a 0124     		movs	r4, #1
 6212              	.LVL570:
 6213 002c F3E7     		b	.L597
 6214              	.L603:
 6215 002e 00BF     		.align	2
 6216              	.L602:
 6217 0030 00000000 		.word	.LANCHOR10
 6218              		.cfi_endproc
 6219              	.LFE62:
 6221              		.global	pxCurrentTCB
 6222              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6223              		.align	2
 6224              		.set	.LANCHOR10,. + 0
 6227              	pxCurrentTCB:
ARM GAS  /tmp/ccJO9w1Z.s 			page 216


 6228 0000 00000000 		.space	4
 6229              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6230              		.align	2
 6231              		.set	.LANCHOR2,. + 0
 6234              	pxDelayedTaskList:
 6235 0000 00000000 		.space	4
 6236              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6237              		.align	2
 6238              		.set	.LANCHOR8,. + 0
 6241              	pxOverflowDelayedTaskList:
 6242 0000 00000000 		.space	4
 6243              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6244              		.align	2
 6245              		.set	.LANCHOR4,. + 0
 6248              	pxReadyTasksLists:
 6249 0000 00000000 		.space	1120
 6249      00000000 
 6249      00000000 
 6249      00000000 
 6249      00000000 
 6250              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6251              		.align	2
 6252              		.set	.LANCHOR9,. + 0
 6255              	uxCurrentNumberOfTasks:
 6256 0000 00000000 		.space	4
 6257              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6258              		.align	2
 6259              		.set	.LANCHOR14,. + 0
 6262              	uxDeletedTasksWaitingCleanUp:
 6263 0000 00000000 		.space	4
 6264              		.section	.bss.uxPendedTicks,"aw",%nobits
 6265              		.align	2
 6266              		.set	.LANCHOR18,. + 0
 6269              	uxPendedTicks:
 6270 0000 00000000 		.space	4
 6271              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6272              		.align	2
 6273              		.set	.LANCHOR16,. + 0
 6276              	uxSchedulerSuspended:
 6277 0000 00000000 		.space	4
 6278              		.section	.bss.uxTaskNumber,"aw",%nobits
 6279              		.align	2
 6280              		.set	.LANCHOR12,. + 0
 6283              	uxTaskNumber:
 6284 0000 00000000 		.space	4
 6285              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6286              		.align	2
 6287              		.set	.LANCHOR13,. + 0
 6290              	uxTopReadyPriority:
 6291 0000 00000000 		.space	4
 6292              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6293              		.align	2
 6294              		.set	.LANCHOR5,. + 0
 6297              	xDelayedTaskList1:
 6298 0000 00000000 		.space	20
 6298      00000000 
 6298      00000000 
ARM GAS  /tmp/ccJO9w1Z.s 			page 217


 6298      00000000 
 6298      00000000 
 6299              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6300              		.align	2
 6301              		.set	.LANCHOR6,. + 0
 6304              	xDelayedTaskList2:
 6305 0000 00000000 		.space	20
 6305      00000000 
 6305      00000000 
 6305      00000000 
 6305      00000000 
 6306              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6307              		.align	2
 6308              		.set	.LANCHOR3,. + 0
 6311              	xNextTaskUnblockTime:
 6312 0000 00000000 		.space	4
 6313              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6314              		.align	2
 6315              		.set	.LANCHOR17,. + 0
 6318              	xNumOfOverflows:
 6319 0000 00000000 		.space	4
 6320              		.section	.bss.xPendingReadyList,"aw",%nobits
 6321              		.align	2
 6322              		.set	.LANCHOR1,. + 0
 6325              	xPendingReadyList:
 6326 0000 00000000 		.space	20
 6326      00000000 
 6326      00000000 
 6326      00000000 
 6326      00000000 
 6327              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6328              		.align	2
 6329              		.set	.LANCHOR11,. + 0
 6332              	xSchedulerRunning:
 6333 0000 00000000 		.space	4
 6334              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6335              		.align	2
 6336              		.set	.LANCHOR0,. + 0
 6339              	xSuspendedTaskList:
 6340 0000 00000000 		.space	20
 6340      00000000 
 6340      00000000 
 6340      00000000 
 6340      00000000 
 6341              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6342              		.align	2
 6343              		.set	.LANCHOR7,. + 0
 6346              	xTasksWaitingTermination:
 6347 0000 00000000 		.space	20
 6347      00000000 
 6347      00000000 
 6347      00000000 
 6347      00000000 
 6348              		.section	.bss.xTickCount,"aw",%nobits
 6349              		.align	2
 6350              		.set	.LANCHOR15,. + 0
 6353              	xTickCount:
ARM GAS  /tmp/ccJO9w1Z.s 			page 218


 6354 0000 00000000 		.space	4
 6355              		.section	.bss.xYieldPending,"aw",%nobits
 6356              		.align	2
 6357              		.set	.LANCHOR19,. + 0
 6360              	xYieldPending:
 6361 0000 00000000 		.space	4
 6362              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6363              		.align	2
 6364              	.LC0:
 6365 0000 49444C45 		.ascii	"IDLE\000"
 6365      00
 6366              		.text
 6367              	.Letext0:
 6368              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 6369              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 6370              		.file 5 "/usr/include/newlib/sys/lock.h"
 6371              		.file 6 "/usr/include/newlib/sys/_types.h"
 6372              		.file 7 "/usr/include/newlib/sys/reent.h"
 6373              		.file 8 "/usr/include/newlib/stdlib.h"
 6374              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 6375              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 6376              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6377              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6378              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6379              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6380              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6381              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 6382              		.file 17 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccJO9w1Z.s 			page 219


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccJO9w1Z.s:18     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccJO9w1Z.s:24     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccJO9w1Z.s:92     .text.prvTaskIsTaskSuspended:0000000000000038 $d
     /tmp/ccJO9w1Z.s:98     .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccJO9w1Z.s:104    .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccJO9w1Z.s:138    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccJO9w1Z.s:144    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccJO9w1Z.s:177    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/ccJO9w1Z.s:183    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccJO9w1Z.s:189    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccJO9w1Z.s:316    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccJO9w1Z.s:322    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccJO9w1Z.s:388    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccJO9w1Z.s:400    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccJO9w1Z.s:406    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccJO9w1Z.s:517    .text.prvAddNewTaskToReadyList:0000000000000090 $d
     /tmp/ccJO9w1Z.s:528    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccJO9w1Z.s:534    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccJO9w1Z.s:598    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccJO9w1Z.s:604    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccJO9w1Z.s:671    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/ccJO9w1Z.s:678    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccJO9w1Z.s:684    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccJO9w1Z.s:724    .text.prvIdleTask:0000000000000020 $d
     /tmp/ccJO9w1Z.s:730    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccJO9w1Z.s:736    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccJO9w1Z.s:823    .text.prvAddCurrentTaskToDelayedList:0000000000000064 $d
     /tmp/ccJO9w1Z.s:833    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccJO9w1Z.s:840    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccJO9w1Z.s:965    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccJO9w1Z.s:972    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccJO9w1Z.s:1079   .text.vTaskDelete:0000000000000000 $t
     /tmp/ccJO9w1Z.s:1086   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccJO9w1Z.s:1220   .text.vTaskDelete:0000000000000098 $d
     /tmp/ccJO9w1Z.s:1232   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccJO9w1Z.s:1239   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccJO9w1Z.s:1374   .text.eTaskGetState:000000000000007c $d
     /tmp/ccJO9w1Z.s:1383   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccJO9w1Z.s:1390   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccJO9w1Z.s:1429   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/ccJO9w1Z.s:1434   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccJO9w1Z.s:1441   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccJO9w1Z.s:1504   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccJO9w1Z.s:1509   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccJO9w1Z.s:1516   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccJO9w1Z.s:1688   .text.vTaskPrioritySet:00000000000000c0 $d
     /tmp/ccJO9w1Z.s:1696   .text.vTaskResume:0000000000000000 $t
     /tmp/ccJO9w1Z.s:1703   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccJO9w1Z.s:1809   .text.vTaskResume:0000000000000078 $d
     /tmp/ccJO9w1Z.s:1817   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccJO9w1Z.s:1824   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccJO9w1Z.s:1964   .text.xTaskResumeFromISR:0000000000000094 $d
     /tmp/ccJO9w1Z.s:1973   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccJO9w1Z.s:1980   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccJO9w1Z.s:2111   .text.vTaskStartScheduler:0000000000000088 $d
ARM GAS  /tmp/ccJO9w1Z.s 			page 220


     /tmp/ccJO9w1Z.s:2122   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccJO9w1Z.s:2129   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccJO9w1Z.s:2166   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/ccJO9w1Z.s:2171   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccJO9w1Z.s:2178   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccJO9w1Z.s:2195   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccJO9w1Z.s:2200   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccJO9w1Z.s:2207   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccJO9w1Z.s:2223   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccJO9w1Z.s:2228   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccJO9w1Z.s:2235   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccJO9w1Z.s:2258   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccJO9w1Z.s:2263   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccJO9w1Z.s:2270   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccJO9w1Z.s:2285   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccJO9w1Z.s:2290   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccJO9w1Z.s:2297   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccJO9w1Z.s:2343   .text.pcTaskGetName:0000000000000024 $d
     /tmp/ccJO9w1Z.s:2350   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccJO9w1Z.s:2357   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccJO9w1Z.s:2561   .text.xTaskIncrementTick:00000000000000ec $d
     /tmp/ccJO9w1Z.s:2576   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccJO9w1Z.s:2583   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccJO9w1Z.s:2775   .text.xTaskResumeAll:00000000000000d8 $d
     /tmp/ccJO9w1Z.s:2788   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccJO9w1Z.s:2795   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccJO9w1Z.s:2966   .text.vTaskDelayUntil:00000000000000a0 $d
     /tmp/ccJO9w1Z.s:2974   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccJO9w1Z.s:2981   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccJO9w1Z.s:3058   .text.vTaskDelay:0000000000000048 $d
     /tmp/ccJO9w1Z.s:3064   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccJO9w1Z.s:3071   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccJO9w1Z.s:3196   .text.vTaskSwitchContext:0000000000000088 $d
     /tmp/ccJO9w1Z.s:3207   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccJO9w1Z.s:3214   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccJO9w1Z.s:3365   .text.vTaskSuspend:00000000000000ac $d
     /tmp/ccJO9w1Z.s:3375   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccJO9w1Z.s:3382   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccJO9w1Z.s:3434   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccJO9w1Z.s:3439   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccJO9w1Z.s:3446   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccJO9w1Z.s:3533   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/ccJO9w1Z.s:3539   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccJO9w1Z.s:3546   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccJO9w1Z.s:3605   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
     /tmp/ccJO9w1Z.s:3612   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccJO9w1Z.s:3619   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccJO9w1Z.s:3724   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/ccJO9w1Z.s:3734   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccJO9w1Z.s:3741   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccJO9w1Z.s:3847   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/ccJO9w1Z.s:3858   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccJO9w1Z.s:3865   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccJO9w1Z.s:3919   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/ccJO9w1Z.s:3925   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccJO9w1Z.s:3932   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccJO9w1Z.s:3952   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
ARM GAS  /tmp/ccJO9w1Z.s 			page 221


     /tmp/ccJO9w1Z.s:3958   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccJO9w1Z.s:3965   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccJO9w1Z.s:4099   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/ccJO9w1Z.s:4106   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4113   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccJO9w1Z.s:4128   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccJO9w1Z.s:4133   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4140   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccJO9w1Z.s:4166   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4173   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccJO9w1Z.s:4193   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4200   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccJO9w1Z.s:4312   .text.vTaskGetInfo:0000000000000074 $d
     /tmp/ccJO9w1Z.s:4317   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4323   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccJO9w1Z.s:4424   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4431   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccJO9w1Z.s:4547   .text.uxTaskGetSystemState:0000000000000098 $d
     /tmp/ccJO9w1Z.s:4557   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4564   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccJO9w1Z.s:4597   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
     /tmp/ccJO9w1Z.s:4602   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4609   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccJO9w1Z.s:4625   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccJO9w1Z.s:4630   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4637   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccJO9w1Z.s:4668   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccJO9w1Z.s:4674   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4681   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccJO9w1Z.s:4801   .text.xTaskPriorityInherit:000000000000008c $d
     /tmp/ccJO9w1Z.s:4808   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4815   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccJO9w1Z.s:4953   .text.xTaskPriorityDisinherit:0000000000000084 $d
     /tmp/ccJO9w1Z.s:4960   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccJO9w1Z.s:4967   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccJO9w1Z.s:5112   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000094 $d
     /tmp/ccJO9w1Z.s:5119   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccJO9w1Z.s:5126   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccJO9w1Z.s:5149   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccJO9w1Z.s:5154   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccJO9w1Z.s:5161   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccJO9w1Z.s:5187   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccJO9w1Z.s:5192   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccJO9w1Z.s:5199   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccJO9w1Z.s:5295   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/ccJO9w1Z.s:5301   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccJO9w1Z.s:5308   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccJO9w1Z.s:5424   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/ccJO9w1Z.s:5430   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccJO9w1Z.s:5437   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccJO9w1Z.s:5482   .text.xTaskGenericNotify:000000000000002a $d
     /tmp/ccJO9w1Z.s:5672   .text.xTaskGenericNotify:00000000000000f0 $d
     /tmp/ccJO9w1Z.s:5680   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccJO9w1Z.s:5687   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccJO9w1Z.s:5751   .text.xTaskGenericNotifyFromISR:000000000000004a $d
     /tmp/ccJO9w1Z.s:5961   .text.xTaskGenericNotifyFromISR:0000000000000120 $d
     /tmp/ccJO9w1Z.s:5971   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
ARM GAS  /tmp/ccJO9w1Z.s 			page 222


     /tmp/ccJO9w1Z.s:5978   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccJO9w1Z.s:6145   .text.vTaskNotifyGiveFromISR:00000000000000b4 $d
     /tmp/ccJO9w1Z.s:6155   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccJO9w1Z.s:6162   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccJO9w1Z.s:6217   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/ccJO9w1Z.s:6227   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccJO9w1Z.s:6223   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6230   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6234   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccJO9w1Z.s:6237   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6241   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccJO9w1Z.s:6244   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6248   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccJO9w1Z.s:6251   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6255   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccJO9w1Z.s:6258   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6262   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccJO9w1Z.s:6265   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6269   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccJO9w1Z.s:6272   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6276   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccJO9w1Z.s:6279   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6283   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccJO9w1Z.s:6286   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6290   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccJO9w1Z.s:6293   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6297   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccJO9w1Z.s:6300   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6304   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccJO9w1Z.s:6307   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6311   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccJO9w1Z.s:6314   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6318   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccJO9w1Z.s:6321   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6325   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccJO9w1Z.s:6328   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6332   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccJO9w1Z.s:6335   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6339   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccJO9w1Z.s:6342   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6346   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccJO9w1Z.s:6349   .bss.xTickCount:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6353   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccJO9w1Z.s:6356   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccJO9w1Z.s:6360   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccJO9w1Z.s:6363   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccJO9w1Z.s:5488   .text.xTaskGenericNotify:000000000000002f $d
     /tmp/ccJO9w1Z.s:5488   .text.xTaskGenericNotify:0000000000000030 $t
     /tmp/ccJO9w1Z.s:5757   .text.xTaskGenericNotifyFromISR:000000000000004f $d
     /tmp/ccJO9w1Z.s:5757   .text.xTaskGenericNotifyFromISR:0000000000000050 $t

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
ARM GAS  /tmp/ccJO9w1Z.s 			page 223


vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
