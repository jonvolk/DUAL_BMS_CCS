ARM GAS  /tmp/ccL3CtUt.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB16:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  /tmp/ccL3CtUt.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
ARM GAS  /tmp/ccL3CtUt.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
ARM GAS  /tmp/ccL3CtUt.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
ARM GAS  /tmp/ccL3CtUt.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
ARM GAS  /tmp/ccL3CtUt.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
ARM GAS  /tmp/ccL3CtUt.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccL3CtUt.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
ARM GAS  /tmp/ccL3CtUt.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
ARM GAS  /tmp/ccL3CtUt.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
ARM GAS  /tmp/ccL3CtUt.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccL3CtUt.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
ARM GAS  /tmp/ccL3CtUt.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  /tmp/ccL3CtUt.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccL3CtUt.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccL3CtUt.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
ARM GAS  /tmp/ccL3CtUt.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
ARM GAS  /tmp/ccL3CtUt.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
ARM GAS  /tmp/ccL3CtUt.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
ARM GAS  /tmp/ccL3CtUt.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
ARM GAS  /tmp/ccL3CtUt.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
ARM GAS  /tmp/ccL3CtUt.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
ARM GAS  /tmp/ccL3CtUt.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  /tmp/ccL3CtUt.s 			page 32


1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1798 0
ARM GAS  /tmp/ccL3CtUt.s 			page 33


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1806 0
  34 0000 28B1     		cbz	r0, .L8
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1809 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0C4A     		ldr	r2, .L10
  38 0006 9142     		cmp	r1, r2
  39 0008 0AD0     		beq	.L9
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
  40              		.loc 1 1799 0
  41 000a 0020     		movs	r0, #0
  42              	.LVL1:
  43 000c 7047     		bx	lr
  44              	.LVL2:
  45              	.L8:
  46              	.LBB117:
  47              	.LBB118:
  48              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  /tmp/ccL3CtUt.s 			page 34


  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
ARM GAS  /tmp/ccL3CtUt.s 			page 35


  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
ARM GAS  /tmp/ccL3CtUt.s 			page 36


 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
ARM GAS  /tmp/ccL3CtUt.s 			page 37


  49              		.loc 2 195 0
  50              		.syntax unified
  51              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  52 000e 4FF05003 			mov r3, #80												
  53 0012 83F31188 		msr basepri, r3											
  54 0016 BFF36F8F 		isb														
  55 001a BFF34F8F 		dsb														
  56              	
  57              	@ 0 "" 2
  58              	.LVL3:
  59              		.thumb
  60              		.syntax unified
  61              	.L3:
  62 001e FEE7     		b	.L3
  63              	.L9:
  64              	.LBE118:
  65              	.LBE117:
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  66              		.loc 1 1812 0
  67 0020 836A     		ldr	r3, [r0, #40]
  68 0022 064A     		ldr	r2, .L10+4
  69 0024 9342     		cmp	r3, r2
  70 0026 02D0     		beq	.L6
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  71              		.loc 1 1816 0
  72 0028 1BB1     		cbz	r3, .L7
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  73              		.loc 1 1799 0
  74 002a 0020     		movs	r0, #0
  75              	.LVL4:
  76 002c 7047     		bx	lr
  77              	.LVL5:
  78              	.L6:
  79 002e 0020     		movs	r0, #0
  80              	.LVL6:
  81 0030 7047     		bx	lr
  82              	.LVL7:
  83              	.L7:
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  84              		.loc 1 1818 0
  85 0032 0120     		movs	r0, #1
  86              	.LVL8:
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccL3CtUt.s 			page 38


1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  87              		.loc 1 1836 0
  88 0034 7047     		bx	lr
  89              	.L11:
  90 0036 00BF     		.align	2
  91              	.L10:
  92 0038 00000000 		.word	.LANCHOR0
  93 003c 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE16:
  97              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	prvTaskCheckFreeStackSpace:
 105              	.LFB46:
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccL3CtUt.s 			page 39


1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccL3CtUt.s 			page 40


1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
ARM GAS  /tmp/ccL3CtUt.s 			page 41


1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
ARM GAS  /tmp/ccL3CtUt.s 			page 42


2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
ARM GAS  /tmp/ccL3CtUt.s 			page 43


2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
ARM GAS  /tmp/ccL3CtUt.s 			page 44


2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
ARM GAS  /tmp/ccL3CtUt.s 			page 45


2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccL3CtUt.s 			page 46


2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccL3CtUt.s 			page 47


2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccL3CtUt.s 			page 48


2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccL3CtUt.s 			page 49


2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
ARM GAS  /tmp/ccL3CtUt.s 			page 50


2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
ARM GAS  /tmp/ccL3CtUt.s 			page 51


2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
ARM GAS  /tmp/ccL3CtUt.s 			page 52


2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
ARM GAS  /tmp/ccL3CtUt.s 			page 53


2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccL3CtUt.s 			page 54


2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
ARM GAS  /tmp/ccL3CtUt.s 			page 55


2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 56


2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccL3CtUt.s 			page 57


2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccL3CtUt.s 			page 58


2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  /tmp/ccL3CtUt.s 			page 59


3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccL3CtUt.s 			page 60


3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  /tmp/ccL3CtUt.s 			page 61


3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 62


3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
ARM GAS  /tmp/ccL3CtUt.s 			page 63


3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
ARM GAS  /tmp/ccL3CtUt.s 			page 64


3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
ARM GAS  /tmp/ccL3CtUt.s 			page 65


3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
ARM GAS  /tmp/ccL3CtUt.s 			page 66


3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccL3CtUt.s 			page 67


3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccL3CtUt.s 			page 68


3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 69


3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
ARM GAS  /tmp/ccL3CtUt.s 			page 70


3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccL3CtUt.s 			page 71


3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 106              		.loc 1 3739 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 111              	.LVL9:
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 112              		.loc 1 3740 0
 113 0000 0023     		movs	r3, #0
ARM GAS  /tmp/ccL3CtUt.s 			page 72


3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 114              		.loc 1 3742 0
 115 0002 01E0     		b	.L13
 116              	.LVL10:
 117              	.L14:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 118              		.loc 1 3744 0
 119 0004 0130     		adds	r0, r0, #1
 120              	.LVL11:
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 121              		.loc 1 3745 0
 122 0006 0133     		adds	r3, r3, #1
 123              	.LVL12:
 124              	.L13:
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 125              		.loc 1 3742 0
 126 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 127 000a A52A     		cmp	r2, #165
 128 000c FAD0     		beq	.L14
 129              	.LVL13:
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 130              		.loc 1 3751 0
 131 000e C3F38F00 		ubfx	r0, r3, #2, #16
 132              	.LVL14:
 133 0012 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE46:
 137              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 138              		.align	1
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv4-sp-d16
 144              	prvResetNextTaskUnblockTime:
 145              	.LFB49:
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
ARM GAS  /tmp/ccL3CtUt.s 			page 73


3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 74


3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
ARM GAS  /tmp/ccL3CtUt.s 			page 75


3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 146              		.loc 1 3881 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 151              		.loc 1 3884 0
 152 0000 084B     		ldr	r3, .L19
 153 0002 1B68     		ldr	r3, [r3]
 154 0004 1B68     		ldr	r3, [r3]
 155 0006 3BB1     		cbz	r3, .L18
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 156              		.loc 1 3898 0
 157 0008 064B     		ldr	r3, .L19
 158 000a 1B68     		ldr	r3, [r3]
 159 000c DB68     		ldr	r3, [r3, #12]
 160 000e DB68     		ldr	r3, [r3, #12]
 161              	.LVL15:
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 162              		.loc 1 3899 0
 163 0010 5A68     		ldr	r2, [r3, #4]
 164 0012 054B     		ldr	r3, .L19+4
 165              	.LVL16:
 166 0014 1A60     		str	r2, [r3]
 167 0016 7047     		bx	lr
 168              	.L18:
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 169              		.loc 1 3890 0
 170 0018 4FF0FF32 		mov	r2, #-1
 171 001c 024B     		ldr	r3, .L19+4
 172 001e 1A60     		str	r2, [r3]
 173 0020 7047     		bx	lr
 174              	.L20:
 175 0022 00BF     		.align	2
 176              	.L19:
 177 0024 00000000 		.word	.LANCHOR2
 178 0028 00000000 		.word	.LANCHOR3
 179              		.cfi_endproc
 180              	.LFE49:
 182              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 183              		.align	1
ARM GAS  /tmp/ccL3CtUt.s 			page 76


 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu fpv4-sp-d16
 189              	prvInitialiseNewTask:
 190              	.LFB6:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 191              		.loc 1 829 0
 192              		.cfi_startproc
 193              		@ args = 16, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              	.LVL17:
 196 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 197              		.cfi_def_cfa_offset 32
 198              		.cfi_offset 4, -32
 199              		.cfi_offset 5, -28
 200              		.cfi_offset 6, -24
 201              		.cfi_offset 7, -20
 202              		.cfi_offset 8, -16
 203              		.cfi_offset 9, -12
 204              		.cfi_offset 10, -8
 205              		.cfi_offset 14, -4
 206 0004 8146     		mov	r9, r0
 207 0006 0D46     		mov	r5, r1
 208 0008 1746     		mov	r7, r2
 209 000a 9A46     		mov	r10, r3
 210 000c 089E     		ldr	r6, [sp, #32]
 211 000e DDF82480 		ldr	r8, [sp, #36]
 212 0012 0A9C     		ldr	r4, [sp, #40]
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 213              		.loc 1 851 0
 214 0014 9200     		lsls	r2, r2, #2
 215              	.LVL18:
 216 0016 A521     		movs	r1, #165
 217              	.LVL19:
 218 0018 206B     		ldr	r0, [r4, #48]
 219              	.LVL20:
 220 001a FFF7FEFF 		bl	memset
 221              	.LVL21:
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 222              		.loc 1 861 0
 223 001e 236B     		ldr	r3, [r4, #48]
 224 0020 07F18042 		add	r2, r7, #1073741824
 225 0024 013A     		subs	r2, r2, #1
 226 0026 03EB8207 		add	r7, r3, r2, lsl #2
 227              	.LVL22:
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 228              		.loc 1 862 0
 229 002a 27F00707 		bic	r7, r7, #7
 230              	.LVL23:
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 231              		.loc 1 889 0
 232 002e 85B3     		cbz	r5, .L33
 233 0030 0023     		movs	r3, #0
 234              	.LVL24:
 235              	.L22:
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccL3CtUt.s 			page 77


 236              		.loc 1 891 0 discriminator 1
 237 0032 0F2B     		cmp	r3, #15
 238 0034 07D8     		bhi	.L24
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 239              		.loc 1 893 0
 240 0036 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 241 0038 E218     		adds	r2, r4, r3
 242 003a 82F83410 		strb	r1, [r2, #52]
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 243              		.loc 1 898 0
 244 003e EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 245 0040 0AB1     		cbz	r2, .L24
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 246              		.loc 1 891 0 discriminator 2
 247 0042 0133     		adds	r3, r3, #1
 248              	.LVL25:
 249 0044 F5E7     		b	.L22
 250              	.L24:
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 251              		.loc 1 910 0
 252 0046 0023     		movs	r3, #0
 253              	.LVL26:
 254 0048 84F84330 		strb	r3, [r4, #67]
 255              	.L26:
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 256              		.loc 1 921 0
 257 004c 372E     		cmp	r6, #55
 258 004e 00D9     		bls	.L27
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 259              		.loc 1 923 0
 260 0050 3726     		movs	r6, #55
 261              	.L27:
 262              	.LVL27:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 263              		.loc 1 930 0
 264 0052 E662     		str	r6, [r4, #44]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 265              		.loc 1 933 0
 266 0054 E664     		str	r6, [r4, #76]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 267              		.loc 1 934 0
 268 0056 0025     		movs	r5, #0
 269              	.LVL28:
 270 0058 2565     		str	r5, [r4, #80]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 271              		.loc 1 938 0
 272 005a 201D     		adds	r0, r4, #4
 273 005c FFF7FEFF 		bl	vListInitialiseItem
 274              	.LVL29:
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 275              		.loc 1 939 0
 276 0060 04F11800 		add	r0, r4, #24
 277 0064 FFF7FEFF 		bl	vListInitialiseItem
 278              	.LVL30:
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279              		.loc 1 943 0
 280 0068 2461     		str	r4, [r4, #16]
ARM GAS  /tmp/ccL3CtUt.s 			page 78


 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 281              		.loc 1 946 0
 282 006a C6F13806 		rsb	r6, r6, #56
 283              	.LVL31:
 284 006e A661     		str	r6, [r4, #24]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 285              		.loc 1 947 0
 286 0070 6462     		str	r4, [r4, #36]
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 287              		.loc 1 989 0
 288 0072 6565     		str	r5, [r4, #84]
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 289              		.loc 1 990 0
 290 0074 84F85850 		strb	r5, [r4, #88]
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 291              		.loc 1 1053 0
 292 0078 5246     		mov	r2, r10
 293 007a 4946     		mov	r1, r9
 294 007c 3846     		mov	r0, r7
 295 007e FFF7FEFF 		bl	pxPortInitialiseStack
 296              	.LVL32:
 297 0082 2060     		str	r0, [r4]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 298              		.loc 1 1059 0
 299 0084 B8F1000F 		cmp	r8, #0
 300 0088 01D0     		beq	.L21
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 301              		.loc 1 1063 0
 302 008a C8F80040 		str	r4, [r8]
 303              	.L21:
 304 008e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 305              	.LVL33:
 306              	.L33:
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 307              		.loc 1 916 0
 308 0092 0023     		movs	r3, #0
 309 0094 84F83430 		strb	r3, [r4, #52]
 310 0098 D8E7     		b	.L26
 311              		.cfi_endproc
 312              	.LFE6:
 314              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 315              		.align	1
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu fpv4-sp-d16
 321              	prvInitialiseTaskLists:
 322              	.LFB42:
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 323              		.loc 1 3547 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327 0000 38B5     		push	{r3, r4, r5, lr}
 328              		.cfi_def_cfa_offset 16
 329              		.cfi_offset 3, -16
 330              		.cfi_offset 4, -12
ARM GAS  /tmp/ccL3CtUt.s 			page 79


 331              		.cfi_offset 5, -8
 332              		.cfi_offset 14, -4
 333              	.LVL34:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 334              		.loc 1 3550 0
 335 0002 0024     		movs	r4, #0
 336 0004 07E0     		b	.L35
 337              	.LVL35:
 338              	.L36:
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 339              		.loc 1 3552 0 discriminator 3
 340 0006 04EB8402 		add	r2, r4, r4, lsl #2
 341 000a 9300     		lsls	r3, r2, #2
 342 000c 0E48     		ldr	r0, .L38
 343 000e 1844     		add	r0, r0, r3
 344 0010 FFF7FEFF 		bl	vListInitialise
 345              	.LVL36:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 346              		.loc 1 3550 0 discriminator 3
 347 0014 0134     		adds	r4, r4, #1
 348              	.LVL37:
 349              	.L35:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 350              		.loc 1 3550 0 is_stmt 0 discriminator 1
 351 0016 372C     		cmp	r4, #55
 352 0018 F5D9     		bls	.L36
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 353              		.loc 1 3555 0 is_stmt 1
 354 001a 0C4D     		ldr	r5, .L38+4
 355 001c 2846     		mov	r0, r5
 356 001e FFF7FEFF 		bl	vListInitialise
 357              	.LVL38:
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 358              		.loc 1 3556 0
 359 0022 0B4C     		ldr	r4, .L38+8
 360              	.LVL39:
 361 0024 2046     		mov	r0, r4
 362 0026 FFF7FEFF 		bl	vListInitialise
 363              	.LVL40:
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 364              		.loc 1 3557 0
 365 002a 0A48     		ldr	r0, .L38+12
 366 002c FFF7FEFF 		bl	vListInitialise
 367              	.LVL41:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 368              		.loc 1 3561 0
 369 0030 0948     		ldr	r0, .L38+16
 370 0032 FFF7FEFF 		bl	vListInitialise
 371              	.LVL42:
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 372              		.loc 1 3567 0
 373 0036 0948     		ldr	r0, .L38+20
 374 0038 FFF7FEFF 		bl	vListInitialise
 375              	.LVL43:
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 376              		.loc 1 3573 0
 377 003c 084B     		ldr	r3, .L38+24
ARM GAS  /tmp/ccL3CtUt.s 			page 80


 378 003e 1D60     		str	r5, [r3]
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 379              		.loc 1 3574 0
 380 0040 084B     		ldr	r3, .L38+28
 381 0042 1C60     		str	r4, [r3]
 382 0044 38BD     		pop	{r3, r4, r5, pc}
 383              	.L39:
 384 0046 00BF     		.align	2
 385              	.L38:
 386 0048 00000000 		.word	.LANCHOR4
 387 004c 00000000 		.word	.LANCHOR5
 388 0050 00000000 		.word	.LANCHOR6
 389 0054 00000000 		.word	.LANCHOR1
 390 0058 00000000 		.word	.LANCHOR7
 391 005c 00000000 		.word	.LANCHOR0
 392 0060 00000000 		.word	.LANCHOR2
 393 0064 00000000 		.word	.LANCHOR8
 394              		.cfi_endproc
 395              	.LFE42:
 397              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 398              		.align	1
 399              		.syntax unified
 400              		.thumb
 401              		.thumb_func
 402              		.fpu fpv4-sp-d16
 404              	prvAddNewTaskToReadyList:
 405              	.LFB7:
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 406              		.loc 1 1073 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410              	.LVL44:
 411 0000 10B5     		push	{r4, lr}
 412              		.cfi_def_cfa_offset 8
 413              		.cfi_offset 4, -8
 414              		.cfi_offset 14, -4
 415 0002 0446     		mov	r4, r0
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 416              		.loc 1 1076 0
 417 0004 FFF7FEFF 		bl	vPortEnterCritical
 418              	.LVL45:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 419              		.loc 1 1078 0
 420 0008 214A     		ldr	r2, .L47
 421 000a 1368     		ldr	r3, [r2]
 422 000c 0133     		adds	r3, r3, #1
 423 000e 1360     		str	r3, [r2]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 424              		.loc 1 1079 0
 425 0010 204B     		ldr	r3, .L47+4
 426 0012 1B68     		ldr	r3, [r3]
 427 0014 002B     		cmp	r3, #0
 428 0016 32D0     		beq	.L46
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 429              		.loc 1 1102 0
 430 0018 1F4B     		ldr	r3, .L47+8
ARM GAS  /tmp/ccL3CtUt.s 			page 81


 431 001a 1B68     		ldr	r3, [r3]
 432 001c 3BB9     		cbnz	r3, .L42
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 433              		.loc 1 1104 0
 434 001e 1D4B     		ldr	r3, .L47+4
 435 0020 1B68     		ldr	r3, [r3]
 436 0022 DA6A     		ldr	r2, [r3, #44]
 437 0024 E36A     		ldr	r3, [r4, #44]
 438 0026 9A42     		cmp	r2, r3
 439 0028 01D8     		bhi	.L42
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 440              		.loc 1 1106 0
 441 002a 1A4B     		ldr	r3, .L47+4
 442 002c 1C60     		str	r4, [r3]
 443              	.L42:
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 444              		.loc 1 1119 0
 445 002e 1B4A     		ldr	r2, .L47+12
 446 0030 1368     		ldr	r3, [r2]
 447 0032 0133     		adds	r3, r3, #1
 448 0034 1360     		str	r3, [r2]
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 449              		.loc 1 1124 0
 450 0036 6364     		str	r3, [r4, #68]
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 451              		.loc 1 1129 0
 452 0038 E36A     		ldr	r3, [r4, #44]
 453 003a 194A     		ldr	r2, .L47+16
 454 003c 1268     		ldr	r2, [r2]
 455 003e 9342     		cmp	r3, r2
 456 0040 01D9     		bls	.L43
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 457              		.loc 1 1129 0 is_stmt 0 discriminator 1
 458 0042 174A     		ldr	r2, .L47+16
 459 0044 1360     		str	r3, [r2]
 460              	.L43:
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461              		.loc 1 1129 0 discriminator 3
 462 0046 03EB8303 		add	r3, r3, r3, lsl #2
 463 004a 9A00     		lsls	r2, r3, #2
 464 004c 211D     		adds	r1, r4, #4
 465 004e 1548     		ldr	r0, .L47+20
 466 0050 1044     		add	r0, r0, r2
 467 0052 FFF7FEFF 		bl	vListInsertEnd
 468              	.LVL46:
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469              		.loc 1 1133 0 is_stmt 1 discriminator 3
 470 0056 FFF7FEFF 		bl	vPortExitCritical
 471              	.LVL47:
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 472              		.loc 1 1135 0 discriminator 3
 473 005a 0F4B     		ldr	r3, .L47+8
 474 005c 1B68     		ldr	r3, [r3]
 475 005e 6BB1     		cbz	r3, .L40
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 476              		.loc 1 1139 0
 477 0060 0C4B     		ldr	r3, .L47+4
ARM GAS  /tmp/ccL3CtUt.s 			page 82


 478 0062 1B68     		ldr	r3, [r3]
 479 0064 DA6A     		ldr	r2, [r3, #44]
 480 0066 E36A     		ldr	r3, [r4, #44]
 481 0068 9A42     		cmp	r2, r3
 482 006a 07D2     		bcs	.L40
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 483              		.loc 1 1141 0
 484 006c 4FF08052 		mov	r2, #268435456
 485 0070 0D4B     		ldr	r3, .L47+24
 486 0072 1A60     		str	r2, [r3]
 487              		.syntax unified
 488              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 489 0074 BFF34F8F 		dsb
 490              	@ 0 "" 2
 491              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 492 0078 BFF36F8F 		isb
 493              	@ 0 "" 2
 494              		.thumb
 495              		.syntax unified
 496              	.L40:
 497 007c 10BD     		pop	{r4, pc}
 498              	.LVL48:
 499              	.L46:
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500              		.loc 1 1083 0
 501 007e 054B     		ldr	r3, .L47+4
 502 0080 1C60     		str	r4, [r3]
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 503              		.loc 1 1085 0
 504 0082 1368     		ldr	r3, [r2]
 505 0084 012B     		cmp	r3, #1
 506 0086 D2D1     		bne	.L42
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 507              		.loc 1 1090 0
 508 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 509              	.LVL49:
 510 008c CFE7     		b	.L42
 511              	.L48:
 512 008e 00BF     		.align	2
 513              	.L47:
 514 0090 00000000 		.word	.LANCHOR9
 515 0094 00000000 		.word	.LANCHOR10
 516 0098 00000000 		.word	.LANCHOR11
 517 009c 00000000 		.word	.LANCHOR12
 518 00a0 00000000 		.word	.LANCHOR13
 519 00a4 00000000 		.word	.LANCHOR4
 520 00a8 04ED00E0 		.word	-536810236
 521              		.cfi_endproc
 522              	.LFE7:
 524              		.section	.text.prvDeleteTCB,"ax",%progbits
 525              		.align	1
 526              		.syntax unified
 527              		.thumb
 528              		.thumb_func
 529              		.fpu fpv4-sp-d16
 531              	prvDeleteTCB:
 532              	.LFB48:
ARM GAS  /tmp/ccL3CtUt.s 			page 83


3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 533              		.loc 1 3827 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
 537              	.LVL50:
 538 0000 10B5     		push	{r4, lr}
 539              		.cfi_def_cfa_offset 8
 540              		.cfi_offset 4, -8
 541              		.cfi_offset 14, -4
 542 0002 0446     		mov	r4, r0
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 543              		.loc 1 3853 0
 544 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
 545 0008 63B1     		cbz	r3, .L55
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 546              		.loc 1 3860 0
 547 000a 012B     		cmp	r3, #1
 548 000c 11D0     		beq	.L56
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 549              		.loc 1 3870 0
 550 000e 022B     		cmp	r3, #2
 551 0010 12D0     		beq	.L49
 552              	.LBB119:
 553              	.LBB120:
 554              		.loc 2 195 0
 555              		.syntax unified
 556              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 557 0012 4FF05003 			mov r3, #80												
 558 0016 83F31188 		msr basepri, r3											
 559 001a BFF36F8F 		isb														
 560 001e BFF34F8F 		dsb														
 561              	
 562              	@ 0 "" 2
 563              	.LVL51:
 564              		.thumb
 565              		.syntax unified
 566              	.L53:
 567 0022 FEE7     		b	.L53
 568              	.L55:
 569              	.LBE120:
 570              	.LBE119:
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 571              		.loc 1 3857 0
 572 0024 006B     		ldr	r0, [r0, #48]
 573              	.LVL52:
 574 0026 FFF7FEFF 		bl	vPortFree
 575              	.LVL53:
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 576              		.loc 1 3858 0
 577 002a 2046     		mov	r0, r4
 578 002c FFF7FEFF 		bl	vPortFree
 579              	.LVL54:
 580 0030 10BD     		pop	{r4, pc}
 581              	.LVL55:
 582              	.L56:
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccL3CtUt.s 			page 84


 583              		.loc 1 3864 0
 584 0032 FFF7FEFF 		bl	vPortFree
 585              	.LVL56:
 586 0036 10BD     		pop	{r4, pc}
 587              	.LVL57:
 588              	.L49:
 589 0038 10BD     		pop	{r4, pc}
 590              		.cfi_endproc
 591              	.LFE48:
 593              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 594              		.align	1
 595              		.syntax unified
 596              		.thumb
 597              		.thumb_func
 598              		.fpu fpv4-sp-d16
 600              	prvCheckTasksWaitingTermination:
 601              	.LFB43:
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 602              		.loc 1 3579 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              	.LBB121:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 607              		.loc 1 3589 0
 608 0000 0F4B     		ldr	r3, .L64
 609 0002 1B68     		ldr	r3, [r3]
 610 0004 D3B1     		cbz	r3, .L63
 611              	.LBE121:
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 612              		.loc 1 3579 0
 613 0006 10B5     		push	{r4, lr}
 614              		.cfi_def_cfa_offset 8
 615              		.cfi_offset 4, -8
 616              		.cfi_offset 14, -4
 617              	.L59:
 618              	.LBB122:
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 619              		.loc 1 3591 0
 620 0008 FFF7FEFF 		bl	vPortEnterCritical
 621              	.LVL58:
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 622              		.loc 1 3593 0
 623 000c 0D4B     		ldr	r3, .L64+4
 624 000e DB68     		ldr	r3, [r3, #12]
 625 0010 DC68     		ldr	r4, [r3, #12]
 626              	.LVL59:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 627              		.loc 1 3594 0
 628 0012 201D     		adds	r0, r4, #4
 629 0014 FFF7FEFF 		bl	uxListRemove
 630              	.LVL60:
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 631              		.loc 1 3595 0
 632 0018 0B4A     		ldr	r2, .L64+8
 633 001a 1368     		ldr	r3, [r2]
 634 001c 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccL3CtUt.s 			page 85


 635 001e 1360     		str	r3, [r2]
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 636              		.loc 1 3596 0
 637 0020 074A     		ldr	r2, .L64
 638 0022 1368     		ldr	r3, [r2]
 639 0024 013B     		subs	r3, r3, #1
 640 0026 1360     		str	r3, [r2]
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 641              		.loc 1 3598 0
 642 0028 FFF7FEFF 		bl	vPortExitCritical
 643              	.LVL61:
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 644              		.loc 1 3600 0
 645 002c 2046     		mov	r0, r4
 646 002e FFF7FEFF 		bl	prvDeleteTCB
 647              	.LVL62:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 648              		.loc 1 3589 0
 649 0032 034B     		ldr	r3, .L64
 650 0034 1B68     		ldr	r3, [r3]
 651 0036 002B     		cmp	r3, #0
 652 0038 E6D1     		bne	.L59
 653              	.LBE122:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 654              		.loc 1 3604 0
 655 003a 10BD     		pop	{r4, pc}
 656              	.LVL63:
 657              	.L63:
 658              		.cfi_def_cfa_offset 0
 659              		.cfi_restore 4
 660              		.cfi_restore 14
 661 003c 7047     		bx	lr
 662              	.L65:
 663 003e 00BF     		.align	2
 664              	.L64:
 665 0040 00000000 		.word	.LANCHOR14
 666 0044 00000000 		.word	.LANCHOR7
 667 0048 00000000 		.word	.LANCHOR9
 668              		.cfi_endproc
 669              	.LFE43:
 671              		.section	.text.prvIdleTask,"ax",%progbits
 672              		.align	1
 673              		.syntax unified
 674              		.thumb
 675              		.thumb_func
 676              		.fpu fpv4-sp-d16
 678              	prvIdleTask:
 679              	.LFB41:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 680              		.loc 1 3335 0
 681              		.cfi_startproc
 682              		@ Volatile: function does not return.
 683              		@ args = 0, pretend = 0, frame = 0
 684              		@ frame_needed = 0, uses_anonymous_args = 0
 685              	.LVL64:
 686 0000 08B5     		push	{r3, lr}
 687              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccL3CtUt.s 			page 86


 688              		.cfi_offset 3, -8
 689              		.cfi_offset 14, -4
 690              	.LVL65:
 691              	.L67:
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 692              		.loc 1 3351 0
 693 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 694              	.LVL66:
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 695              		.loc 1 3374 0
 696 0006 064B     		ldr	r3, .L70
 697 0008 1B68     		ldr	r3, [r3]
 698 000a 012B     		cmp	r3, #1
 699 000c F9D9     		bls	.L67
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 700              		.loc 1 3376 0
 701 000e 4FF08052 		mov	r2, #268435456
 702 0012 044B     		ldr	r3, .L70+4
 703 0014 1A60     		str	r2, [r3]
 704              		.syntax unified
 705              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 706 0016 BFF34F8F 		dsb
 707              	@ 0 "" 2
 708              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 709 001a BFF36F8F 		isb
 710              	@ 0 "" 2
 711              		.thumb
 712              		.syntax unified
 713 001e F0E7     		b	.L67
 714              	.L71:
 715              		.align	2
 716              	.L70:
 717 0020 00000000 		.word	.LANCHOR4
 718 0024 04ED00E0 		.word	-536810236
 719              		.cfi_endproc
 720              	.LFE41:
 722              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 723              		.align	1
 724              		.syntax unified
 725              		.thumb
 726              		.thumb_func
 727              		.fpu fpv4-sp-d16
 729              	prvAddCurrentTaskToDelayedList:
 730              	.LFB63:
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
ARM GAS  /tmp/ccL3CtUt.s 			page 87


3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
ARM GAS  /tmp/ccL3CtUt.s 			page 88


3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccL3CtUt.s 			page 89


4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  /tmp/ccL3CtUt.s 			page 90


4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
ARM GAS  /tmp/ccL3CtUt.s 			page 91


4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccL3CtUt.s 			page 92


4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
ARM GAS  /tmp/ccL3CtUt.s 			page 93


4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
ARM GAS  /tmp/ccL3CtUt.s 			page 94


4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
ARM GAS  /tmp/ccL3CtUt.s 			page 95


4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
ARM GAS  /tmp/ccL3CtUt.s 			page 96


4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccL3CtUt.s 			page 97


4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
ARM GAS  /tmp/ccL3CtUt.s 			page 98


4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccL3CtUt.s 			page 99


4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
ARM GAS  /tmp/ccL3CtUt.s 			page 100


4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccL3CtUt.s 			page 101


4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
ARM GAS  /tmp/ccL3CtUt.s 			page 102


4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccL3CtUt.s 			page 103


4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
ARM GAS  /tmp/ccL3CtUt.s 			page 104


4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
ARM GAS  /tmp/ccL3CtUt.s 			page 105


4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 106


4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 107


5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 731              		.loc 1 5082 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 0, uses_anonymous_args = 0
 735              	.LVL67:
 736 0000 70B5     		push	{r4, r5, r6, lr}
 737              		.cfi_def_cfa_offset 16
 738              		.cfi_offset 4, -16
 739              		.cfi_offset 5, -12
 740              		.cfi_offset 6, -8
 741              		.cfi_offset 14, -4
 742 0002 0446     		mov	r4, r0
 743 0004 0E46     		mov	r6, r1
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 744              		.loc 1 5084 0
 745 0006 174B     		ldr	r3, .L79
 746 0008 1D68     		ldr	r5, [r3]
 747              	.LVL68:
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccL3CtUt.s 			page 108


5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 748              		.loc 1 5097 0
 749 000a 174B     		ldr	r3, .L79+4
 750 000c 1868     		ldr	r0, [r3]
 751              	.LVL69:
 752 000e 0430     		adds	r0, r0, #4
 753 0010 FFF7FEFF 		bl	uxListRemove
 754              	.LVL70:
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 755              		.loc 1 5110 0
 756 0014 B4F1FF3F 		cmp	r4, #-1
 757 0018 13D0     		beq	.L77
 758              	.L73:
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 759              		.loc 1 5122 0
 760 001a 2C44     		add	r4, r4, r5
 761              	.LVL71:
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 762              		.loc 1 5125 0
 763 001c 124B     		ldr	r3, .L79+4
 764 001e 1B68     		ldr	r3, [r3]
 765 0020 5C60     		str	r4, [r3, #4]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 766              		.loc 1 5127 0
 767 0022 A542     		cmp	r5, r4
 768 0024 16D8     		bhi	.L78
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccL3CtUt.s 			page 109


5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 769              		.loc 1 5137 0
 770 0026 114B     		ldr	r3, .L79+8
 771 0028 1868     		ldr	r0, [r3]
 772 002a 0F4B     		ldr	r3, .L79+4
 773 002c 1968     		ldr	r1, [r3]
 774 002e 0431     		adds	r1, r1, #4
 775 0030 FFF7FEFF 		bl	vListInsert
 776              	.LVL72:
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 777              		.loc 1 5142 0
 778 0034 0E4B     		ldr	r3, .L79+12
 779 0036 1B68     		ldr	r3, [r3]
 780 0038 9C42     		cmp	r4, r3
 781 003a 01D2     		bcs	.L72
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 782              		.loc 1 5144 0
 783 003c 0C4B     		ldr	r3, .L79+12
 784 003e 1C60     		str	r4, [r3]
 785              	.L72:
 786 0040 70BD     		pop	{r4, r5, r6, pc}
 787              	.LVL73:
 788              	.L77:
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 789              		.loc 1 5110 0 discriminator 1
 790 0042 002E     		cmp	r6, #0
 791 0044 E9D0     		beq	.L73
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 792              		.loc 1 5115 0
 793 0046 084B     		ldr	r3, .L79+4
 794 0048 1968     		ldr	r1, [r3]
 795 004a 0431     		adds	r1, r1, #4
 796 004c 0948     		ldr	r0, .L79+16
 797 004e FFF7FEFF 		bl	vListInsertEnd
 798              	.LVL74:
 799 0052 70BD     		pop	{r4, r5, r6, pc}
 800              	.LVL75:
 801              	.L78:
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 802              		.loc 1 5131 0
 803 0054 084B     		ldr	r3, .L79+20
 804 0056 1868     		ldr	r0, [r3]
 805 0058 034B     		ldr	r3, .L79+4
 806 005a 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccL3CtUt.s 			page 110


 807 005c 0431     		adds	r1, r1, #4
 808 005e FFF7FEFF 		bl	vListInsert
 809              	.LVL76:
 810 0062 70BD     		pop	{r4, r5, r6, pc}
 811              	.LVL77:
 812              	.L80:
 813              		.align	2
 814              	.L79:
 815 0064 00000000 		.word	.LANCHOR15
 816 0068 00000000 		.word	.LANCHOR10
 817 006c 00000000 		.word	.LANCHOR2
 818 0070 00000000 		.word	.LANCHOR3
 819 0074 00000000 		.word	.LANCHOR0
 820 0078 00000000 		.word	.LANCHOR8
 821              		.cfi_endproc
 822              	.LFE63:
 824              		.section	.text.xTaskCreateStatic,"ax",%progbits
 825              		.align	1
 826              		.global	xTaskCreateStatic
 827              		.syntax unified
 828              		.thumb
 829              		.thumb_func
 830              		.fpu fpv4-sp-d16
 832              	xTaskCreateStatic:
 833              	.LFB4:
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 834              		.loc 1 585 0
 835              		.cfi_startproc
 836              		@ args = 12, pretend = 0, frame = 8
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              	.LVL78:
 839 0000 70B5     		push	{r4, r5, r6, lr}
 840              		.cfi_def_cfa_offset 16
 841              		.cfi_offset 4, -16
 842              		.cfi_offset 5, -12
 843              		.cfi_offset 6, -8
 844              		.cfi_offset 14, -4
 845 0002 86B0     		sub	sp, sp, #24
 846              		.cfi_def_cfa_offset 40
 847 0004 0B9D     		ldr	r5, [sp, #44]
 848 0006 0C9C     		ldr	r4, [sp, #48]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 849              		.loc 1 589 0
 850 0008 75B1     		cbz	r5, .L89
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851              		.loc 1 590 0
 852 000a B4B1     		cbz	r4, .L90
 853              	.LBB123:
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 854              		.loc 1 597 0
 855 000c 5C26     		movs	r6, #92
 856 000e 0496     		str	r6, [sp, #16]
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 857              		.loc 1 598 0
 858 0010 049E     		ldr	r6, [sp, #16]
 859 0012 5C2E     		cmp	r6, #92
 860 0014 1AD0     		beq	.L86
ARM GAS  /tmp/ccL3CtUt.s 			page 111


 861              	.LBB124:
 862              	.LBB125:
 863              		.loc 2 195 0
 864              		.syntax unified
 865              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 866 0016 4FF05003 			mov r3, #80												
 867 001a 83F31188 		msr basepri, r3											
 868 001e BFF36F8F 		isb														
 869 0022 BFF34F8F 		dsb														
 870              	
 871              	@ 0 "" 2
 872              	.LVL79:
 873              		.thumb
 874              		.syntax unified
 875              	.L87:
 876 0026 FEE7     		b	.L87
 877              	.LVL80:
 878              	.L89:
 879              	.LBE125:
 880              	.LBE124:
 881              	.LBE123:
 882              	.LBB126:
 883              	.LBB127:
 884              		.syntax unified
 885              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 886 0028 4FF05003 			mov r3, #80												
 887 002c 83F31188 		msr basepri, r3											
 888 0030 BFF36F8F 		isb														
 889 0034 BFF34F8F 		dsb														
 890              	
 891              	@ 0 "" 2
 892              	.LVL81:
 893              		.thumb
 894              		.syntax unified
 895              	.L83:
 896 0038 FEE7     		b	.L83
 897              	.LVL82:
 898              	.L90:
 899              	.LBE127:
 900              	.LBE126:
 901              	.LBB128:
 902              	.LBB129:
 903              		.syntax unified
 904              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 905 003a 4FF05003 			mov r3, #80												
 906 003e 83F31188 		msr basepri, r3											
 907 0042 BFF36F8F 		isb														
 908 0046 BFF34F8F 		dsb														
 909              	
 910              	@ 0 "" 2
 911              	.LVL83:
 912              		.thumb
 913              		.syntax unified
 914              	.L85:
 915 004a FEE7     		b	.L85
 916              	.LVL84:
 917              	.L86:
ARM GAS  /tmp/ccL3CtUt.s 			page 112


 918              	.LBE129:
 919              	.LBE128:
 920              	.LBB130:
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 921              		.loc 1 599 0
 922 004c 049E     		ldr	r6, [sp, #16]
 923              	.LVL85:
 924              	.LBE130:
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925              		.loc 1 609 0
 926 004e 2563     		str	r5, [r4, #48]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 927              		.loc 1 615 0
 928 0050 0225     		movs	r5, #2
 929 0052 84F85950 		strb	r5, [r4, #89]
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 930              		.loc 1 619 0
 931 0056 0025     		movs	r5, #0
 932 0058 0395     		str	r5, [sp, #12]
 933 005a 0294     		str	r4, [sp, #8]
 934 005c 05AD     		add	r5, sp, #20
 935 005e 0195     		str	r5, [sp, #4]
 936 0060 0A9D     		ldr	r5, [sp, #40]
 937 0062 0095     		str	r5, [sp]
 938 0064 FFF7FEFF 		bl	prvInitialiseNewTask
 939              	.LVL86:
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 940              		.loc 1 620 0
 941 0068 2046     		mov	r0, r4
 942 006a FFF7FEFF 		bl	prvAddNewTaskToReadyList
 943              	.LVL87:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 944              		.loc 1 628 0
 945 006e 0598     		ldr	r0, [sp, #20]
 946 0070 06B0     		add	sp, sp, #24
 947              		.cfi_def_cfa_offset 16
 948              		@ sp needed
 949 0072 70BD     		pop	{r4, r5, r6, pc}
 950              		.cfi_endproc
 951              	.LFE4:
 953              		.section	.text.xTaskCreate,"ax",%progbits
 954              		.align	1
 955              		.global	xTaskCreate
 956              		.syntax unified
 957              		.thumb
 958              		.thumb_func
 959              		.fpu fpv4-sp-d16
 961              	xTaskCreate:
 962              	.LFB5:
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 963              		.loc 1 736 0
 964              		.cfi_startproc
 965              		@ args = 8, pretend = 0, frame = 0
 966              		@ frame_needed = 0, uses_anonymous_args = 0
 967              	.LVL88:
 968 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 969              		.cfi_def_cfa_offset 28
ARM GAS  /tmp/ccL3CtUt.s 			page 113


 970              		.cfi_offset 4, -28
 971              		.cfi_offset 5, -24
 972              		.cfi_offset 6, -20
 973              		.cfi_offset 7, -16
 974              		.cfi_offset 8, -12
 975              		.cfi_offset 9, -8
 976              		.cfi_offset 14, -4
 977 0004 85B0     		sub	sp, sp, #20
 978              		.cfi_def_cfa_offset 48
 979 0006 0646     		mov	r6, r0
 980 0008 0F46     		mov	r7, r1
 981 000a 1546     		mov	r5, r2
 982 000c 9846     		mov	r8, r3
 983              	.LBB131:
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 984              		.loc 1 770 0
 985 000e 9000     		lsls	r0, r2, #2
 986              	.LVL89:
 987 0010 FFF7FEFF 		bl	pvPortMalloc
 988              	.LVL90:
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 989              		.loc 1 772 0
 990 0014 10B3     		cbz	r0, .L95
 991 0016 8146     		mov	r9, r0
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 992              		.loc 1 775 0
 993 0018 5C20     		movs	r0, #92
 994              	.LVL91:
 995 001a FFF7FEFF 		bl	pvPortMalloc
 996              	.LVL92:
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997              		.loc 1 777 0
 998 001e 0446     		mov	r4, r0
 999 0020 C0B1     		cbz	r0, .L93
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1000              		.loc 1 780 0
 1001 0022 C0F83090 		str	r9, [r0, #48]
 1002              	.LVL93:
 1003              	.L92:
 1004              	.LBE131:
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1005              		.loc 1 796 0
 1006 0026 DCB1     		cbz	r4, .L96
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1007              		.loc 1 802 0
 1008 0028 0023     		movs	r3, #0
 1009 002a 84F85930 		strb	r3, [r4, #89]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1010              		.loc 1 806 0
 1011 002e 0393     		str	r3, [sp, #12]
 1012 0030 0294     		str	r4, [sp, #8]
 1013 0032 0D9B     		ldr	r3, [sp, #52]
 1014 0034 0193     		str	r3, [sp, #4]
 1015 0036 0C9B     		ldr	r3, [sp, #48]
 1016 0038 0093     		str	r3, [sp]
 1017 003a 4346     		mov	r3, r8
 1018 003c 2A46     		mov	r2, r5
ARM GAS  /tmp/ccL3CtUt.s 			page 114


 1019 003e 3946     		mov	r1, r7
 1020 0040 3046     		mov	r0, r6
 1021 0042 FFF7FEFF 		bl	prvInitialiseNewTask
 1022              	.LVL94:
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1023              		.loc 1 807 0
 1024 0046 2046     		mov	r0, r4
 1025 0048 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1026              	.LVL95:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1027              		.loc 1 808 0
 1028 004c 0120     		movs	r0, #1
 1029              	.LVL96:
 1030              	.L91:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1031              		.loc 1 816 0
 1032 004e 05B0     		add	sp, sp, #20
 1033              		.cfi_remember_state
 1034              		.cfi_def_cfa_offset 28
 1035              		@ sp needed
 1036 0050 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1037              	.LVL97:
 1038              	.L93:
 1039              		.cfi_restore_state
 1040              	.LBB132:
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1041              		.loc 1 786 0
 1042 0054 4846     		mov	r0, r9
 1043              	.LVL98:
 1044 0056 FFF7FEFF 		bl	vPortFree
 1045              	.LVL99:
 1046 005a E4E7     		b	.L92
 1047              	.LVL100:
 1048              	.L95:
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1049              		.loc 1 791 0
 1050 005c 0024     		movs	r4, #0
 1051 005e E2E7     		b	.L92
 1052              	.LVL101:
 1053              	.L96:
 1054              	.LBE132:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1055              		.loc 1 812 0
 1056 0060 4FF0FF30 		mov	r0, #-1
 1057              	.LVL102:
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1058              		.loc 1 815 0
 1059 0064 F3E7     		b	.L91
 1060              		.cfi_endproc
 1061              	.LFE5:
 1063              		.section	.text.vTaskDelete,"ax",%progbits
 1064              		.align	1
 1065              		.global	vTaskDelete
 1066              		.syntax unified
 1067              		.thumb
 1068              		.thumb_func
 1069              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccL3CtUt.s 			page 115


 1071              	vTaskDelete:
 1072              	.LFB8:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1073              		.loc 1 1158 0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077              	.LVL103:
 1078 0000 38B5     		push	{r3, r4, r5, lr}
 1079              		.cfi_def_cfa_offset 16
 1080              		.cfi_offset 3, -16
 1081              		.cfi_offset 4, -12
 1082              		.cfi_offset 5, -8
 1083              		.cfi_offset 14, -4
 1084 0002 0446     		mov	r4, r0
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1085              		.loc 1 1161 0
 1086 0004 FFF7FEFF 		bl	vPortEnterCritical
 1087              	.LVL104:
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1088              		.loc 1 1165 0
 1089 0008 24B3     		cbz	r4, .L107
 1090              	.LVL105:
 1091              	.L99:
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1092              		.loc 1 1168 0 discriminator 4
 1093 000a 251D     		adds	r5, r4, #4
 1094 000c 2846     		mov	r0, r5
 1095 000e FFF7FEFF 		bl	uxListRemove
 1096              	.LVL106:
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1097              		.loc 1 1178 0 discriminator 4
 1098 0012 A36A     		ldr	r3, [r4, #40]
 1099 0014 1BB1     		cbz	r3, .L100
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1100              		.loc 1 1180 0
 1101 0016 04F11800 		add	r0, r4, #24
 1102 001a FFF7FEFF 		bl	uxListRemove
 1103              	.LVL107:
 1104              	.L100:
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1105              		.loc 1 1191 0
 1106 001e 1E4A     		ldr	r2, .L110
 1107 0020 1368     		ldr	r3, [r2]
 1108 0022 0133     		adds	r3, r3, #1
 1109 0024 1360     		str	r3, [r2]
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1110              		.loc 1 1193 0
 1111 0026 1D4B     		ldr	r3, .L110+4
 1112 0028 1B68     		ldr	r3, [r3]
 1113 002a 9C42     		cmp	r4, r3
 1114 002c 15D0     		beq	.L108
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1115              		.loc 1 1216 0
 1116 002e 1C4A     		ldr	r2, .L110+8
 1117 0030 1368     		ldr	r3, [r2]
 1118 0032 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccL3CtUt.s 			page 116


 1119 0034 1360     		str	r3, [r2]
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1120              		.loc 1 1217 0
 1121 0036 2046     		mov	r0, r4
 1122 0038 FFF7FEFF 		bl	prvDeleteTCB
 1123              	.LVL108:
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1124              		.loc 1 1221 0
 1125 003c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1126              	.LVL109:
 1127              	.L102:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1128              		.loc 1 1226 0
 1129 0040 FFF7FEFF 		bl	vPortExitCritical
 1130              	.LVL110:
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1131              		.loc 1 1230 0
 1132 0044 174B     		ldr	r3, .L110+12
 1133 0046 1B68     		ldr	r3, [r3]
 1134 0048 1BB1     		cbz	r3, .L98
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1135              		.loc 1 1232 0
 1136 004a 144B     		ldr	r3, .L110+4
 1137 004c 1B68     		ldr	r3, [r3]
 1138 004e 9C42     		cmp	r4, r3
 1139 0050 0CD0     		beq	.L109
 1140              	.L98:
 1141 0052 38BD     		pop	{r3, r4, r5, pc}
 1142              	.LVL111:
 1143              	.L107:
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1144              		.loc 1 1165 0 discriminator 1
 1145 0054 114B     		ldr	r3, .L110+4
 1146 0056 1C68     		ldr	r4, [r3]
 1147              	.LVL112:
 1148 0058 D7E7     		b	.L99
 1149              	.LVL113:
 1150              	.L108:
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1151              		.loc 1 1200 0
 1152 005a 2946     		mov	r1, r5
 1153 005c 1248     		ldr	r0, .L110+16
 1154 005e FFF7FEFF 		bl	vListInsertEnd
 1155              	.LVL114:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1156              		.loc 1 1205 0
 1157 0062 124A     		ldr	r2, .L110+20
 1158 0064 1368     		ldr	r3, [r2]
 1159 0066 0133     		adds	r3, r3, #1
 1160 0068 1360     		str	r3, [r2]
 1161 006a E9E7     		b	.L102
 1162              	.L109:
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1163              		.loc 1 1234 0
 1164 006c 104B     		ldr	r3, .L110+24
 1165 006e 1B68     		ldr	r3, [r3]
 1166 0070 43B1     		cbz	r3, .L104
ARM GAS  /tmp/ccL3CtUt.s 			page 117


 1167              	.LBB133:
 1168              	.LBB134:
 1169              		.loc 2 195 0
 1170              		.syntax unified
 1171              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1172 0072 4FF05003 			mov r3, #80												
 1173 0076 83F31188 		msr basepri, r3											
 1174 007a BFF36F8F 		isb														
 1175 007e BFF34F8F 		dsb														
 1176              	
 1177              	@ 0 "" 2
 1178              	.LVL115:
 1179              		.thumb
 1180              		.syntax unified
 1181              	.L105:
 1182 0082 FEE7     		b	.L105
 1183              	.L104:
 1184              	.LBE134:
 1185              	.LBE133:
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1186              		.loc 1 1235 0
 1187 0084 4FF08052 		mov	r2, #268435456
 1188 0088 0A4B     		ldr	r3, .L110+28
 1189 008a 1A60     		str	r2, [r3]
 1190              		.syntax unified
 1191              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1192 008c BFF34F8F 		dsb
 1193              	@ 0 "" 2
 1194              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1195 0090 BFF36F8F 		isb
 1196              	@ 0 "" 2
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1197              		.loc 1 1242 0
 1198              		.thumb
 1199              		.syntax unified
 1200 0094 DDE7     		b	.L98
 1201              	.L111:
 1202 0096 00BF     		.align	2
 1203              	.L110:
 1204 0098 00000000 		.word	.LANCHOR12
 1205 009c 00000000 		.word	.LANCHOR10
 1206 00a0 00000000 		.word	.LANCHOR9
 1207 00a4 00000000 		.word	.LANCHOR11
 1208 00a8 00000000 		.word	.LANCHOR7
 1209 00ac 00000000 		.word	.LANCHOR14
 1210 00b0 00000000 		.word	.LANCHOR16
 1211 00b4 04ED00E0 		.word	-536810236
 1212              		.cfi_endproc
 1213              	.LFE8:
 1215              		.section	.text.eTaskGetState,"ax",%progbits
 1216              		.align	1
 1217              		.global	eTaskGetState
 1218              		.syntax unified
 1219              		.thumb
 1220              		.thumb_func
 1221              		.fpu fpv4-sp-d16
 1223              	eTaskGetState:
ARM GAS  /tmp/ccL3CtUt.s 			page 118


 1224              	.LFB11:
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1225              		.loc 1 1379 0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 0
 1228              		@ frame_needed = 0, uses_anonymous_args = 0
 1229              	.LVL116:
 1230 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1231              		.cfi_def_cfa_offset 24
 1232              		.cfi_offset 3, -24
 1233              		.cfi_offset 4, -20
 1234              		.cfi_offset 5, -16
 1235              		.cfi_offset 6, -12
 1236              		.cfi_offset 7, -8
 1237              		.cfi_offset 14, -4
 1238              	.LVL117:
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1239              		.loc 1 1384 0
 1240 0002 D0B1     		cbz	r0, .L125
 1241 0004 0446     		mov	r4, r0
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1242              		.loc 1 1386 0
 1243 0006 1D4B     		ldr	r3, .L127
 1244 0008 1B68     		ldr	r3, [r3]
 1245 000a 9842     		cmp	r0, r3
 1246 000c 27D0     		beq	.L117
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1247              		.loc 1 1393 0
 1248 000e FFF7FEFF 		bl	vPortEnterCritical
 1249              	.LVL118:
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1250              		.loc 1 1395 0
 1251 0012 6569     		ldr	r5, [r4, #20]
 1252              	.LVL119:
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1253              		.loc 1 1396 0
 1254 0014 1A4B     		ldr	r3, .L127+4
 1255 0016 1F68     		ldr	r7, [r3]
 1256              	.LVL120:
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1257              		.loc 1 1397 0
 1258 0018 1A4B     		ldr	r3, .L127+8
 1259 001a 1E68     		ldr	r6, [r3]
 1260              	.LVL121:
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1261              		.loc 1 1399 0
 1262 001c FFF7FEFF 		bl	vPortExitCritical
 1263              	.LVL122:
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1264              		.loc 1 1401 0
 1265 0020 BD42     		cmp	r5, r7
 1266 0022 1ED0     		beq	.L118
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1267              		.loc 1 1401 0 is_stmt 0 discriminator 1
 1268 0024 B542     		cmp	r5, r6
 1269 0026 1ED0     		beq	.L119
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccL3CtUt.s 			page 119


 1270              		.loc 1 1409 0 is_stmt 1
 1271 0028 174B     		ldr	r3, .L127+12
 1272 002a 9D42     		cmp	r5, r3
 1273 002c 0ED0     		beq	.L126
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1274              		.loc 1 1445 0
 1275 002e 174B     		ldr	r3, .L127+16
 1276 0030 9D42     		cmp	r5, r3
 1277 0032 1ED0     		beq	.L122
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1278              		.loc 1 1445 0 is_stmt 0 discriminator 1
 1279 0034 FDB9     		cbnz	r5, .L123
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1280              		.loc 1 1450 0 is_stmt 1
 1281 0036 0420     		movs	r0, #4
 1282 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1283              	.LVL123:
 1284              	.L125:
 1285              	.LBB135:
 1286              	.LBB136:
 1287              		.loc 2 195 0
 1288              		.syntax unified
 1289              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1290 003a 4FF05003 			mov r3, #80												
 1291 003e 83F31188 		msr basepri, r3											
 1292 0042 BFF36F8F 		isb														
 1293 0046 BFF34F8F 		dsb														
 1294              	
 1295              	@ 0 "" 2
 1296              	.LVL124:
 1297              		.thumb
 1298              		.syntax unified
 1299              	.L114:
 1300 004a FEE7     		b	.L114
 1301              	.LVL125:
 1302              	.L126:
 1303              	.LBE136:
 1304              	.LBE135:
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1305              		.loc 1 1414 0
 1306 004c A36A     		ldr	r3, [r4, #40]
 1307 004e 63B9     		cbnz	r3, .L120
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 1308              		.loc 1 1422 0
 1309 0050 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 1310 0054 DBB2     		uxtb	r3, r3
 1311 0056 012B     		cmp	r3, #1
 1312 0058 09D1     		bne	.L121
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1313              		.loc 1 1424 0
 1314 005a 0220     		movs	r0, #2
 1315 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1316              	.LVL126:
 1317              	.L117:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1318              		.loc 1 1389 0
 1319 005e 0020     		movs	r0, #0
ARM GAS  /tmp/ccL3CtUt.s 			page 120


 1320              	.LVL127:
 1321 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1322              	.LVL128:
 1323              	.L118:
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1324              		.loc 1 1405 0
 1325 0062 0220     		movs	r0, #2
 1326 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1327              	.LVL129:
 1328              	.L119:
 1329 0066 0220     		movs	r0, #2
 1330 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1331              	.LVL130:
 1332              	.L120:
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1333              		.loc 1 1439 0
 1334 006a 0220     		movs	r0, #2
 1335 006c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1336              	.LVL131:
 1337              	.L121:
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 1338              		.loc 1 1428 0
 1339 006e 0320     		movs	r0, #3
 1340 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1341              	.LVL132:
 1342              	.L122:
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1343              		.loc 1 1450 0
 1344 0072 0420     		movs	r0, #4
 1345 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1346              	.LVL133:
 1347              	.L123:
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1348              		.loc 1 1458 0
 1349 0076 0120     		movs	r0, #1
 1350              	.LVL134:
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1351              		.loc 1 1463 0
 1352 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1353              	.LVL135:
 1354              	.L128:
 1355 007a 00BF     		.align	2
 1356              	.L127:
 1357 007c 00000000 		.word	.LANCHOR10
 1358 0080 00000000 		.word	.LANCHOR2
 1359 0084 00000000 		.word	.LANCHOR8
 1360 0088 00000000 		.word	.LANCHOR0
 1361 008c 00000000 		.word	.LANCHOR7
 1362              		.cfi_endproc
 1363              	.LFE11:
 1365              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1366              		.align	1
 1367              		.global	uxTaskPriorityGet
 1368              		.syntax unified
 1369              		.thumb
 1370              		.thumb_func
 1371              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccL3CtUt.s 			page 121


 1373              	uxTaskPriorityGet:
 1374              	.LFB12:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1375              		.loc 1 1471 0
 1376              		.cfi_startproc
 1377              		@ args = 0, pretend = 0, frame = 0
 1378              		@ frame_needed = 0, uses_anonymous_args = 0
 1379              	.LVL136:
 1380 0000 10B5     		push	{r4, lr}
 1381              		.cfi_def_cfa_offset 8
 1382              		.cfi_offset 4, -8
 1383              		.cfi_offset 14, -4
 1384 0002 0446     		mov	r4, r0
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1385              		.loc 1 1475 0
 1386 0004 FFF7FEFF 		bl	vPortEnterCritical
 1387              	.LVL137:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1388              		.loc 1 1479 0
 1389 0008 24B1     		cbz	r4, .L133
 1390              	.LVL138:
 1391              	.L130:
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1392              		.loc 1 1480 0 discriminator 4
 1393 000a E46A     		ldr	r4, [r4, #44]
 1394              	.LVL139:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1395              		.loc 1 1482 0 discriminator 4
 1396 000c FFF7FEFF 		bl	vPortExitCritical
 1397              	.LVL140:
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1398              		.loc 1 1485 0 discriminator 4
 1399 0010 2046     		mov	r0, r4
 1400 0012 10BD     		pop	{r4, pc}
 1401              	.LVL141:
 1402              	.L133:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1403              		.loc 1 1479 0 discriminator 1
 1404 0014 014B     		ldr	r3, .L134
 1405 0016 1C68     		ldr	r4, [r3]
 1406              	.LVL142:
 1407 0018 F7E7     		b	.L130
 1408              	.L135:
 1409 001a 00BF     		.align	2
 1410              	.L134:
 1411 001c 00000000 		.word	.LANCHOR10
 1412              		.cfi_endproc
 1413              	.LFE12:
 1415              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1416              		.align	1
 1417              		.global	uxTaskPriorityGetFromISR
 1418              		.syntax unified
 1419              		.thumb
 1420              		.thumb_func
 1421              		.fpu fpv4-sp-d16
 1423              	uxTaskPriorityGetFromISR:
 1424              	.LFB13:
ARM GAS  /tmp/ccL3CtUt.s 			page 122


1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1425              		.loc 1 1493 0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 0
 1428              		@ frame_needed = 0, uses_anonymous_args = 0
 1429              	.LVL143:
 1430 0000 10B5     		push	{r4, lr}
 1431              		.cfi_def_cfa_offset 8
 1432              		.cfi_offset 4, -8
 1433              		.cfi_offset 14, -4
 1434 0002 0446     		mov	r4, r0
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1435              		.loc 1 1513 0
 1436 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1437              	.LVL144:
 1438              	.LBB137:
 1439              	.LBB138:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1440              		.loc 2 211 0
 1441              		.syntax unified
 1442              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1443 0008 EFF31183 			mrs r3, basepri											
 1444 000c 4FF05002 		mov r2, #80												
 1445 0010 82F31188 		msr basepri, r2											
 1446 0014 BFF36F8F 		isb														
 1447 0018 BFF34F8F 		dsb														
 1448              	
 1449              	@ 0 "" 2
 1450              		.thumb
 1451              		.syntax unified
 1452              	.LBE138:
 1453              	.LBE137:
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1454              		.loc 1 1519 0
 1455 001c 1CB1     		cbz	r4, .L140
 1456              	.LVL145:
 1457              	.L137:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1458              		.loc 1 1520 0 discriminator 4
 1459 001e E06A     		ldr	r0, [r4, #44]
 1460              	.LVL146:
 1461              	.LBB139:
ARM GAS  /tmp/ccL3CtUt.s 			page 123


 1462              	.LBB140:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1463              		.loc 2 229 0 discriminator 4
 1464              		.syntax unified
 1465              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1466 0020 83F31188 			msr basepri, r3	
 1467              	@ 0 "" 2
 1468              	.LVL147:
 1469              		.thumb
 1470              		.syntax unified
 1471              	.LBE140:
 1472              	.LBE139:
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1473              		.loc 1 1525 0 discriminator 4
 1474 0024 10BD     		pop	{r4, pc}
 1475              	.LVL148:
 1476              	.L140:
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1477              		.loc 1 1519 0 discriminator 1
 1478 0026 014A     		ldr	r2, .L141
 1479 0028 1468     		ldr	r4, [r2]
 1480              	.LVL149:
 1481 002a F8E7     		b	.L137
 1482              	.L142:
 1483              		.align	2
 1484              	.L141:
 1485 002c 00000000 		.word	.LANCHOR10
 1486              		.cfi_endproc
 1487              	.LFE13:
 1489              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1490              		.align	1
 1491              		.global	vTaskPrioritySet
 1492              		.syntax unified
 1493              		.thumb
 1494              		.thumb_func
 1495              		.fpu fpv4-sp-d16
 1497              	vTaskPrioritySet:
 1498              	.LFB14:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1499              		.loc 1 1533 0
ARM GAS  /tmp/ccL3CtUt.s 			page 124


 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503              	.LVL150:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1504              		.loc 1 1538 0
 1505 0000 3729     		cmp	r1, #55
 1506 0002 08D9     		bls	.L144
 1507              	.LBB141:
 1508              	.LBB142:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1509              		.loc 2 195 0
 1510              		.syntax unified
 1511              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1512 0004 4FF05003 			mov r3, #80												
 1513 0008 83F31188 		msr basepri, r3											
 1514 000c BFF36F8F 		isb														
 1515 0010 BFF34F8F 		dsb														
 1516              	
 1517              	@ 0 "" 2
 1518              	.LVL151:
 1519              		.thumb
 1520              		.syntax unified
 1521              	.L145:
 1522 0014 FEE7     		b	.L145
 1523              	.L144:
 1524              	.LBE142:
 1525              	.LBE141:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1526              		.loc 1 1533 0
 1527 0016 70B5     		push	{r4, r5, r6, lr}
 1528              		.cfi_def_cfa_offset 16
 1529              		.cfi_offset 4, -16
 1530              		.cfi_offset 5, -12
 1531              		.cfi_offset 6, -8
 1532              		.cfi_offset 14, -4
 1533 0018 0446     		mov	r4, r0
 1534 001a 0D46     		mov	r5, r1
 1535              	.LVL152:
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1536              		.loc 1 1550 0
 1537 001c FFF7FEFF 		bl	vPortEnterCritical
 1538              	.LVL153:
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1539              		.loc 1 1554 0
 1540 0020 0CB9     		cbnz	r4, .L146
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1541              		.loc 1 1554 0 is_stmt 0 discriminator 1
 1542 0022 274B     		ldr	r3, .L159
 1543 0024 1C68     		ldr	r4, [r3]
 1544              	.LVL154:
 1545              	.L146:
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1546              		.loc 1 1560 0 is_stmt 1 discriminator 4
 1547 0026 E26C     		ldr	r2, [r4, #76]
 1548              	.LVL155:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccL3CtUt.s 			page 125


 1549              		.loc 1 1568 0 discriminator 4
 1550 0028 9542     		cmp	r5, r2
 1551 002a 39D0     		beq	.L147
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1552              		.loc 1 1572 0
 1553 002c 3BD9     		bls	.L148
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1554              		.loc 1 1574 0
 1555 002e 244B     		ldr	r3, .L159
 1556 0030 1B68     		ldr	r3, [r3]
 1557 0032 9C42     		cmp	r4, r3
 1558 0034 3DD0     		beq	.L154
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1559              		.loc 1 1579 0
 1560 0036 224B     		ldr	r3, .L159
 1561 0038 1B68     		ldr	r3, [r3]
 1562 003a DB6A     		ldr	r3, [r3, #44]
 1563 003c 9D42     		cmp	r5, r3
 1564 003e 3AD2     		bcs	.L155
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1565              		.loc 1 1536 0
 1566 0040 0026     		movs	r6, #0
 1567              	.L149:
 1568              	.LVL156:
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1569              		.loc 1 1612 0
 1570 0042 E36A     		ldr	r3, [r4, #44]
 1571              	.LVL157:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1572              		.loc 1 1618 0
 1573 0044 9A42     		cmp	r2, r3
 1574 0046 00D1     		bne	.L150
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1575              		.loc 1 1620 0
 1576 0048 E562     		str	r5, [r4, #44]
 1577              	.L150:
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1578              		.loc 1 1628 0
 1579 004a E564     		str	r5, [r4, #76]
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1580              		.loc 1 1638 0
 1581 004c A269     		ldr	r2, [r4, #24]
 1582              	.LVL158:
 1583 004e 002A     		cmp	r2, #0
 1584 0050 02DB     		blt	.L151
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1585              		.loc 1 1640 0
 1586 0052 C5F13805 		rsb	r5, r5, #56
 1587              	.LVL159:
 1588 0056 A561     		str	r5, [r4, #24]
 1589              	.L151:
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1590              		.loc 1 1651 0
 1591 0058 6169     		ldr	r1, [r4, #20]
 1592 005a 03EB8303 		add	r3, r3, r3, lsl #2
 1593              	.LVL160:
 1594 005e 9A00     		lsls	r2, r3, #2
ARM GAS  /tmp/ccL3CtUt.s 			page 126


 1595 0060 184B     		ldr	r3, .L159+4
 1596 0062 1344     		add	r3, r3, r2
 1597 0064 9942     		cmp	r1, r3
 1598 0066 12D1     		bne	.L152
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1599              		.loc 1 1656 0
 1600 0068 251D     		adds	r5, r4, #4
 1601 006a 2846     		mov	r0, r5
 1602 006c FFF7FEFF 		bl	uxListRemove
 1603              	.LVL161:
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1604              		.loc 1 1667 0
 1605 0070 E36A     		ldr	r3, [r4, #44]
 1606 0072 154A     		ldr	r2, .L159+8
 1607 0074 1268     		ldr	r2, [r2]
 1608 0076 9342     		cmp	r3, r2
 1609 0078 01D9     		bls	.L153
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1610              		.loc 1 1667 0 is_stmt 0 discriminator 1
 1611 007a 134A     		ldr	r2, .L159+8
 1612 007c 1360     		str	r3, [r2]
 1613              	.L153:
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1614              		.loc 1 1667 0 discriminator 3
 1615 007e 03EB8303 		add	r3, r3, r3, lsl #2
 1616 0082 9A00     		lsls	r2, r3, #2
 1617 0084 2946     		mov	r1, r5
 1618 0086 0F48     		ldr	r0, .L159+4
 1619 0088 1044     		add	r0, r0, r2
 1620 008a FFF7FEFF 		bl	vListInsertEnd
 1621              	.LVL162:
 1622              	.L152:
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1623              		.loc 1 1674 0 is_stmt 1
 1624 008e 3EB1     		cbz	r6, .L147
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1625              		.loc 1 1676 0
 1626 0090 4FF08052 		mov	r2, #268435456
 1627 0094 0D4B     		ldr	r3, .L159+12
 1628 0096 1A60     		str	r2, [r3]
 1629              		.syntax unified
 1630              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1631 0098 BFF34F8F 		dsb
 1632              	@ 0 "" 2
 1633              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1634 009c BFF36F8F 		isb
 1635              	@ 0 "" 2
 1636              	.LVL163:
 1637              		.thumb
 1638              		.syntax unified
 1639              	.L147:
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1640              		.loc 1 1688 0
 1641 00a0 FFF7FEFF 		bl	vPortExitCritical
 1642              	.LVL164:
 1643 00a4 70BD     		pop	{r4, r5, r6, pc}
 1644              	.LVL165:
ARM GAS  /tmp/ccL3CtUt.s 			page 127


 1645              	.L148:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1646              		.loc 1 1595 0
 1647 00a6 064B     		ldr	r3, .L159
 1648 00a8 1B68     		ldr	r3, [r3]
 1649 00aa 9C42     		cmp	r4, r3
 1650 00ac 05D0     		beq	.L156
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1651              		.loc 1 1536 0
 1652 00ae 0026     		movs	r6, #0
 1653 00b0 C7E7     		b	.L149
 1654              	.L154:
 1655 00b2 0026     		movs	r6, #0
 1656 00b4 C5E7     		b	.L149
 1657              	.L155:
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1658              		.loc 1 1581 0
 1659 00b6 0126     		movs	r6, #1
 1660 00b8 C3E7     		b	.L149
 1661              	.L156:
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1662              		.loc 1 1600 0
 1663 00ba 0126     		movs	r6, #1
 1664 00bc C1E7     		b	.L149
 1665              	.L160:
 1666 00be 00BF     		.align	2
 1667              	.L159:
 1668 00c0 00000000 		.word	.LANCHOR10
 1669 00c4 00000000 		.word	.LANCHOR4
 1670 00c8 00000000 		.word	.LANCHOR13
 1671 00cc 04ED00E0 		.word	-536810236
 1672              		.cfi_endproc
 1673              	.LFE14:
 1675              		.section	.text.vTaskResume,"ax",%progbits
 1676              		.align	1
 1677              		.global	vTaskResume
 1678              		.syntax unified
 1679              		.thumb
 1680              		.thumb_func
 1681              		.fpu fpv4-sp-d16
 1683              	vTaskResume:
 1684              	.LFB17:
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1685              		.loc 1 1844 0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 0
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
 1689              	.LVL166:
 1690 0000 38B5     		push	{r3, r4, r5, lr}
 1691              		.cfi_def_cfa_offset 16
 1692              		.cfi_offset 3, -16
 1693              		.cfi_offset 4, -12
 1694              		.cfi_offset 5, -8
 1695              		.cfi_offset 14, -4
 1696              	.LVL167:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1697              		.loc 1 1848 0
ARM GAS  /tmp/ccL3CtUt.s 			page 128


 1698 0002 68B1     		cbz	r0, .L168
 1699 0004 0446     		mov	r4, r0
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1700              		.loc 1 1852 0
 1701 0006 1C4B     		ldr	r3, .L170
 1702 0008 1B68     		ldr	r3, [r3]
 1703 000a 9842     		cmp	r0, r3
 1704 000c 07D0     		beq	.L161
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1705              		.loc 1 1854 0
 1706 000e FFF7FEFF 		bl	vPortEnterCritical
 1707              	.LVL168:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1708              		.loc 1 1856 0
 1709 0012 2046     		mov	r0, r4
 1710 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1711              	.LVL169:
 1712 0018 58B9     		cbnz	r0, .L169
 1713              	.L165:
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1714              		.loc 1 1883 0
 1715 001a FFF7FEFF 		bl	vPortExitCritical
 1716              	.LVL170:
 1717              	.L161:
 1718 001e 38BD     		pop	{r3, r4, r5, pc}
 1719              	.LVL171:
 1720              	.L168:
 1721              	.LBB143:
 1722              	.LBB144:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1723              		.loc 2 195 0
 1724              		.syntax unified
 1725              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1726 0020 4FF05003 			mov r3, #80												
 1727 0024 83F31188 		msr basepri, r3											
 1728 0028 BFF36F8F 		isb														
 1729 002c BFF34F8F 		dsb														
 1730              	
 1731              	@ 0 "" 2
 1732              	.LVL172:
 1733              		.thumb
 1734              		.syntax unified
 1735              	.L163:
 1736 0030 FEE7     		b	.L163
 1737              	.LVL173:
 1738              	.L169:
 1739              	.LBE144:
 1740              	.LBE143:
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1741              		.loc 1 1862 0
 1742 0032 251D     		adds	r5, r4, #4
 1743 0034 2846     		mov	r0, r5
 1744 0036 FFF7FEFF 		bl	uxListRemove
 1745              	.LVL174:
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1746              		.loc 1 1863 0
 1747 003a E36A     		ldr	r3, [r4, #44]
ARM GAS  /tmp/ccL3CtUt.s 			page 129


 1748 003c 0F4A     		ldr	r2, .L170+4
 1749 003e 1268     		ldr	r2, [r2]
 1750 0040 9342     		cmp	r3, r2
 1751 0042 01D9     		bls	.L166
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1752              		.loc 1 1863 0 is_stmt 0 discriminator 1
 1753 0044 0D4A     		ldr	r2, .L170+4
 1754 0046 1360     		str	r3, [r2]
 1755              	.L166:
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1756              		.loc 1 1863 0 discriminator 3
 1757 0048 03EB8303 		add	r3, r3, r3, lsl #2
 1758 004c 9A00     		lsls	r2, r3, #2
 1759 004e 2946     		mov	r1, r5
 1760 0050 0B48     		ldr	r0, .L170+8
 1761 0052 1044     		add	r0, r0, r2
 1762 0054 FFF7FEFF 		bl	vListInsertEnd
 1763              	.LVL175:
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1764              		.loc 1 1866 0 is_stmt 1 discriminator 3
 1765 0058 E26A     		ldr	r2, [r4, #44]
 1766 005a 074B     		ldr	r3, .L170
 1767 005c 1B68     		ldr	r3, [r3]
 1768 005e DB6A     		ldr	r3, [r3, #44]
 1769 0060 9A42     		cmp	r2, r3
 1770 0062 DAD3     		bcc	.L165
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1771              		.loc 1 1871 0
 1772 0064 4FF08052 		mov	r2, #268435456
 1773 0068 064B     		ldr	r3, .L170+12
 1774 006a 1A60     		str	r2, [r3]
 1775              		.syntax unified
 1776              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1777 006c BFF34F8F 		dsb
 1778              	@ 0 "" 2
 1779              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1780 0070 BFF36F8F 		isb
 1781              	@ 0 "" 2
 1782              		.thumb
 1783              		.syntax unified
 1784 0074 D1E7     		b	.L165
 1785              	.L171:
 1786 0076 00BF     		.align	2
 1787              	.L170:
 1788 0078 00000000 		.word	.LANCHOR10
 1789 007c 00000000 		.word	.LANCHOR13
 1790 0080 00000000 		.word	.LANCHOR4
 1791 0084 04ED00E0 		.word	-536810236
 1792              		.cfi_endproc
 1793              	.LFE17:
 1795              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1796              		.align	1
 1797              		.global	xTaskResumeFromISR
 1798              		.syntax unified
 1799              		.thumb
 1800              		.thumb_func
 1801              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccL3CtUt.s 			page 130


 1803              	xTaskResumeFromISR:
 1804              	.LFB18:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1805              		.loc 1 1898 0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 0
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 1809              	.LVL176:
 1810 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1811              		.cfi_def_cfa_offset 24
 1812              		.cfi_offset 3, -24
 1813              		.cfi_offset 4, -20
 1814              		.cfi_offset 5, -16
 1815              		.cfi_offset 6, -12
 1816              		.cfi_offset 7, -8
 1817              		.cfi_offset 14, -4
 1818              	.LVL177:
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1819              		.loc 1 1903 0
 1820 0002 0028     		cmp	r0, #0
 1821 0004 32D0     		beq	.L182
 1822 0006 0446     		mov	r4, r0
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1823              		.loc 1 1921 0
 1824 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1825              	.LVL178:
 1826              	.LBB145:
 1827              	.LBB146:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1828              		.loc 2 211 0
 1829              		.syntax unified
 1830              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1831 000c EFF31187 			mrs r7, basepri											
 1832 0010 4FF05003 		mov r3, #80												
 1833 0014 83F31188 		msr basepri, r3											
 1834 0018 BFF36F8F 		isb														
 1835 001c BFF34F8F 		dsb														
 1836              	
 1837              	@ 0 "" 2
 1838              		.thumb
 1839              		.syntax unified
 1840              	.LBE146:
 1841              	.LBE145:
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1842              		.loc 1 1925 0
 1843 0020 2046     		mov	r0, r4
 1844 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1845              	.LVL179:
 1846 0026 0028     		cmp	r0, #0
 1847 0028 32D0     		beq	.L179
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1848              		.loc 1 1930 0
 1849 002a 1A4B     		ldr	r3, .L183
 1850 002c 1B68     		ldr	r3, [r3]
 1851 002e 43BB     		cbnz	r3, .L176
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1852              		.loc 1 1934 0
ARM GAS  /tmp/ccL3CtUt.s 			page 131


 1853 0030 E26A     		ldr	r2, [r4, #44]
 1854 0032 194B     		ldr	r3, .L183+4
 1855 0034 1B68     		ldr	r3, [r3]
 1856 0036 DB6A     		ldr	r3, [r3, #44]
 1857 0038 9A42     		cmp	r2, r3
 1858 003a 20D2     		bcs	.L180
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1859              		.loc 1 1899 0
 1860 003c 0025     		movs	r5, #0
 1861              	.L177:
 1862              	.LVL180:
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1863              		.loc 1 1943 0
 1864 003e 261D     		adds	r6, r4, #4
 1865 0040 3046     		mov	r0, r6
 1866 0042 FFF7FEFF 		bl	uxListRemove
 1867              	.LVL181:
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1868              		.loc 1 1944 0
 1869 0046 E36A     		ldr	r3, [r4, #44]
 1870 0048 144A     		ldr	r2, .L183+8
 1871 004a 1268     		ldr	r2, [r2]
 1872 004c 9342     		cmp	r3, r2
 1873 004e 01D9     		bls	.L178
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1874              		.loc 1 1944 0 is_stmt 0 discriminator 1
 1875 0050 124A     		ldr	r2, .L183+8
 1876 0052 1360     		str	r3, [r2]
 1877              	.L178:
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1878              		.loc 1 1944 0 discriminator 3
 1879 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1880 0058 9A00     		lsls	r2, r3, #2
 1881 005a 3146     		mov	r1, r6
 1882 005c 1048     		ldr	r0, .L183+12
 1883 005e 1044     		add	r0, r0, r2
 1884 0060 FFF7FEFF 		bl	vListInsertEnd
 1885              	.LVL182:
 1886              	.L175:
 1887              	.LBB147:
 1888              	.LBB148:
 1889              		.loc 2 229 0 is_stmt 1
 1890              		.syntax unified
 1891              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1892 0064 87F31188 			msr basepri, r7	
 1893              	@ 0 "" 2
 1894              	.LVL183:
 1895              		.thumb
 1896              		.syntax unified
 1897              	.LBE148:
 1898              	.LBE147:
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1899              		.loc 1 1962 0
 1900 0068 2846     		mov	r0, r5
 1901 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1902              	.LVL184:
 1903              	.L182:
ARM GAS  /tmp/ccL3CtUt.s 			page 132


 1904              	.LBB149:
 1905              	.LBB150:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1906              		.loc 2 195 0
 1907              		.syntax unified
 1908              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1909 006c 4FF05003 			mov r3, #80												
 1910 0070 83F31188 		msr basepri, r3											
 1911 0074 BFF36F8F 		isb														
 1912 0078 BFF34F8F 		dsb														
 1913              	
 1914              	@ 0 "" 2
 1915              	.LVL185:
 1916              		.thumb
 1917              		.syntax unified
 1918              	.L174:
 1919 007c FEE7     		b	.L174
 1920              	.LVL186:
 1921              	.L180:
 1922              	.LBE150:
 1923              	.LBE149:
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1924              		.loc 1 1936 0
 1925 007e 0125     		movs	r5, #1
 1926 0080 DDE7     		b	.L177
 1927              	.L176:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1928              		.loc 1 1951 0
 1929 0082 04F11801 		add	r1, r4, #24
 1930 0086 0748     		ldr	r0, .L183+16
 1931 0088 FFF7FEFF 		bl	vListInsertEnd
 1932              	.LVL187:
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1933              		.loc 1 1899 0
 1934 008c 0025     		movs	r5, #0
 1935 008e E9E7     		b	.L175
 1936              	.L179:
 1937 0090 0025     		movs	r5, #0
 1938 0092 E7E7     		b	.L175
 1939              	.L184:
 1940              		.align	2
 1941              	.L183:
 1942 0094 00000000 		.word	.LANCHOR16
 1943 0098 00000000 		.word	.LANCHOR10
 1944 009c 00000000 		.word	.LANCHOR13
 1945 00a0 00000000 		.word	.LANCHOR4
 1946 00a4 00000000 		.word	.LANCHOR1
 1947              		.cfi_endproc
 1948              	.LFE18:
 1950              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1951              		.align	1
 1952              		.global	vTaskStartScheduler
 1953              		.syntax unified
 1954              		.thumb
 1955              		.thumb_func
 1956              		.fpu fpv4-sp-d16
 1958              	vTaskStartScheduler:
ARM GAS  /tmp/ccL3CtUt.s 			page 133


 1959              	.LFB19:
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1960              		.loc 1 1968 0
 1961              		.cfi_startproc
 1962              		@ args = 0, pretend = 0, frame = 16
 1963              		@ frame_needed = 0, uses_anonymous_args = 0
 1964 0000 10B5     		push	{r4, lr}
 1965              		.cfi_def_cfa_offset 8
 1966              		.cfi_offset 4, -8
 1967              		.cfi_offset 14, -4
 1968 0002 88B0     		sub	sp, sp, #32
 1969              		.cfi_def_cfa_offset 40
 1970              	.LBB151:
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1971              		.loc 1 1974 0
 1972 0004 0024     		movs	r4, #0
 1973 0006 0594     		str	r4, [sp, #20]
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1974              		.loc 1 1975 0
 1975 0008 0694     		str	r4, [sp, #24]
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1976              		.loc 1 1980 0
 1977 000a 07AA     		add	r2, sp, #28
 1978 000c 06A9     		add	r1, sp, #24
 1979 000e 05A8     		add	r0, sp, #20
 1980 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1981              	.LVL188:
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1982              		.loc 1 1981 0
 1983 0014 059B     		ldr	r3, [sp, #20]
 1984 0016 0293     		str	r3, [sp, #8]
 1985 0018 069B     		ldr	r3, [sp, #24]
 1986 001a 0193     		str	r3, [sp, #4]
 1987 001c 0094     		str	r4, [sp]
 1988 001e 2346     		mov	r3, r4
 1989 0020 079A     		ldr	r2, [sp, #28]
 1990 0022 1949     		ldr	r1, .L196
 1991 0024 1948     		ldr	r0, .L196+4
 1992 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1993              	.LVL189:
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1994              		.loc 1 1989 0
 1995 002a 48B1     		cbz	r0, .L191
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1996              		.loc 1 1991 0
 1997 002c 0120     		movs	r0, #1
 1998              	.L186:
 1999              	.LVL190:
 2000              	.LBE151:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2001              		.loc 1 2012 0
 2002 002e 0128     		cmp	r0, #1
 2003 0030 08D0     		beq	.L193
 2004              	.L187:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2005              		.loc 1 2023 0
 2006 0032 0128     		cmp	r0, #1
ARM GAS  /tmp/ccL3CtUt.s 			page 134


 2007 0034 09D0     		beq	.L194
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2008              		.loc 1 2080 0
 2009 0036 B0F1FF3F 		cmp	r0, #-1
 2010 003a 1BD0     		beq	.L195
 2011              	.LVL191:
 2012              	.L185:
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2013              		.loc 1 2086 0
 2014 003c 08B0     		add	sp, sp, #32
 2015              		.cfi_remember_state
 2016              		.cfi_def_cfa_offset 8
 2017              		@ sp needed
 2018 003e 10BD     		pop	{r4, pc}
 2019              	.L191:
 2020              		.cfi_restore_state
 2021              	.LBB152:
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2022              		.loc 1 1995 0
 2023 0040 0020     		movs	r0, #0
 2024 0042 F4E7     		b	.L186
 2025              	.LVL192:
 2026              	.L193:
 2027              	.LBE152:
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2028              		.loc 1 2014 0
 2029 0044 FFF7FEFF 		bl	xTimerCreateTimerTask
 2030              	.LVL193:
 2031 0048 F3E7     		b	.L187
 2032              	.L194:
 2033              	.LBB153:
 2034              	.LBB154:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2035              		.loc 2 195 0
 2036              		.syntax unified
 2037              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2038 004a 4FF05003 			mov r3, #80												
 2039 004e 83F31188 		msr basepri, r3											
 2040 0052 BFF36F8F 		isb														
 2041 0056 BFF34F8F 		dsb														
 2042              	
 2043              	@ 0 "" 2
 2044              		.thumb
 2045              		.syntax unified
 2046              	.LBE154:
 2047              	.LBE153:
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2048              		.loc 1 2049 0
 2049 005a 4FF0FF32 		mov	r2, #-1
 2050 005e 0C4B     		ldr	r3, .L196+8
 2051 0060 1A60     		str	r2, [r3]
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2052              		.loc 1 2050 0
 2053 0062 0122     		movs	r2, #1
 2054 0064 0B4B     		ldr	r3, .L196+12
 2055 0066 1A60     		str	r2, [r3]
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 135


 2056              		.loc 1 2051 0
 2057 0068 0022     		movs	r2, #0
 2058 006a 0B4B     		ldr	r3, .L196+16
 2059 006c 1A60     		str	r2, [r3]
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2060              		.loc 1 2065 0
 2061 006e FFF7FEFF 		bl	xPortStartScheduler
 2062              	.LVL194:
 2063 0072 E3E7     		b	.L185
 2064              	.LVL195:
 2065              	.L195:
 2066              	.LBB155:
 2067              	.LBB156:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2068              		.loc 2 195 0
 2069              		.syntax unified
 2070              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2071 0074 4FF05003 			mov r3, #80												
 2072 0078 83F31188 		msr basepri, r3											
 2073 007c BFF36F8F 		isb														
 2074 0080 BFF34F8F 		dsb														
 2075              	
 2076              	@ 0 "" 2
 2077              	.LVL196:
 2078              		.thumb
 2079              		.syntax unified
 2080              	.L190:
 2081 0084 FEE7     		b	.L190
 2082              	.L197:
 2083 0086 00BF     		.align	2
 2084              	.L196:
 2085 0088 00000000 		.word	.LC0
 2086 008c 00000000 		.word	prvIdleTask
 2087 0090 00000000 		.word	.LANCHOR3
 2088 0094 00000000 		.word	.LANCHOR11
 2089 0098 00000000 		.word	.LANCHOR15
 2090              	.LBE156:
 2091              	.LBE155:
 2092              		.cfi_endproc
 2093              	.LFE19:
 2095              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2096              		.align	1
 2097              		.global	vTaskEndScheduler
 2098              		.syntax unified
 2099              		.thumb
 2100              		.thumb_func
 2101              		.fpu fpv4-sp-d16
 2103              	vTaskEndScheduler:
 2104              	.LFB20:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2105              		.loc 1 2090 0
 2106              		.cfi_startproc
 2107              		@ args = 0, pretend = 0, frame = 0
 2108              		@ frame_needed = 0, uses_anonymous_args = 0
 2109 0000 08B5     		push	{r3, lr}
 2110              		.cfi_def_cfa_offset 8
 2111              		.cfi_offset 3, -8
ARM GAS  /tmp/ccL3CtUt.s 			page 136


 2112              		.cfi_offset 14, -4
 2113              	.LBB157:
 2114              	.LBB158:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2115              		.loc 2 195 0
 2116              		.syntax unified
 2117              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2118 0002 4FF05003 			mov r3, #80												
 2119 0006 83F31188 		msr basepri, r3											
 2120 000a BFF36F8F 		isb														
 2121 000e BFF34F8F 		dsb														
 2122              	
 2123              	@ 0 "" 2
 2124              		.thumb
 2125              		.syntax unified
 2126              	.LBE158:
 2127              	.LBE157:
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2128              		.loc 1 2095 0
 2129 0012 0022     		movs	r2, #0
 2130 0014 024B     		ldr	r3, .L200
 2131 0016 1A60     		str	r2, [r3]
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2132              		.loc 1 2096 0
 2133 0018 FFF7FEFF 		bl	vPortEndScheduler
 2134              	.LVL197:
 2135 001c 08BD     		pop	{r3, pc}
 2136              	.L201:
 2137 001e 00BF     		.align	2
 2138              	.L200:
 2139 0020 00000000 		.word	.LANCHOR11
 2140              		.cfi_endproc
 2141              	.LFE20:
 2143              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2144              		.align	1
 2145              		.global	vTaskSuspendAll
 2146              		.syntax unified
 2147              		.thumb
 2148              		.thumb_func
 2149              		.fpu fpv4-sp-d16
 2151              	vTaskSuspendAll:
 2152              	.LFB21:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2153              		.loc 1 2101 0
 2154              		.cfi_startproc
 2155              		@ args = 0, pretend = 0, frame = 0
 2156              		@ frame_needed = 0, uses_anonymous_args = 0
 2157              		@ link register save eliminated.
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2158              		.loc 1 2106 0
 2159 0000 024A     		ldr	r2, .L203
 2160 0002 1368     		ldr	r3, [r2]
 2161 0004 0133     		adds	r3, r3, #1
 2162 0006 1360     		str	r3, [r2]
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2163              		.loc 1 2107 0
 2164 0008 7047     		bx	lr
ARM GAS  /tmp/ccL3CtUt.s 			page 137


 2165              	.L204:
 2166 000a 00BF     		.align	2
 2167              	.L203:
 2168 000c 00000000 		.word	.LANCHOR16
 2169              		.cfi_endproc
 2170              	.LFE21:
 2172              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2173              		.align	1
 2174              		.global	xTaskGetTickCount
 2175              		.syntax unified
 2176              		.thumb
 2177              		.thumb_func
 2178              		.fpu fpv4-sp-d16
 2180              	xTaskGetTickCount:
 2181              	.LFB23:
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2182              		.loc 1 2285 0
 2183              		.cfi_startproc
 2184              		@ args = 0, pretend = 0, frame = 0
 2185              		@ frame_needed = 0, uses_anonymous_args = 0
 2186              		@ link register save eliminated.
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2187              		.loc 1 2291 0
 2188 0000 014B     		ldr	r3, .L206
 2189 0002 1868     		ldr	r0, [r3]
 2190              	.LVL198:
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2191              		.loc 1 2296 0
 2192 0004 7047     		bx	lr
 2193              	.L207:
 2194 0006 00BF     		.align	2
 2195              	.L206:
 2196 0008 00000000 		.word	.LANCHOR15
 2197              		.cfi_endproc
 2198              	.LFE23:
 2200              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2201              		.align	1
 2202              		.global	xTaskGetTickCountFromISR
 2203              		.syntax unified
 2204              		.thumb
 2205              		.thumb_func
 2206              		.fpu fpv4-sp-d16
 2208              	xTaskGetTickCountFromISR:
 2209              	.LFB24:
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2210              		.loc 1 2300 0
 2211              		.cfi_startproc
 2212              		@ args = 0, pretend = 0, frame = 0
 2213              		@ frame_needed = 0, uses_anonymous_args = 0
 2214 0000 08B5     		push	{r3, lr}
 2215              		.cfi_def_cfa_offset 8
 2216              		.cfi_offset 3, -8
 2217              		.cfi_offset 14, -4
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2218              		.loc 1 2318 0
 2219 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2220              	.LVL199:
ARM GAS  /tmp/ccL3CtUt.s 			page 138


2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2221              		.loc 1 2322 0
 2222 0006 014B     		ldr	r3, .L210
 2223 0008 1868     		ldr	r0, [r3]
 2224              	.LVL200:
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2225              		.loc 1 2327 0
 2226 000a 08BD     		pop	{r3, pc}
 2227              	.L211:
 2228              		.align	2
 2229              	.L210:
 2230 000c 00000000 		.word	.LANCHOR15
 2231              		.cfi_endproc
 2232              	.LFE24:
 2234              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2235              		.align	1
 2236              		.global	uxTaskGetNumberOfTasks
 2237              		.syntax unified
 2238              		.thumb
 2239              		.thumb_func
 2240              		.fpu fpv4-sp-d16
 2242              	uxTaskGetNumberOfTasks:
 2243              	.LFB25:
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2244              		.loc 1 2331 0
 2245              		.cfi_startproc
 2246              		@ args = 0, pretend = 0, frame = 0
 2247              		@ frame_needed = 0, uses_anonymous_args = 0
 2248              		@ link register save eliminated.
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2249              		.loc 1 2334 0
 2250 0000 014B     		ldr	r3, .L213
 2251 0002 1868     		ldr	r0, [r3]
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2252              		.loc 1 2335 0
 2253 0004 7047     		bx	lr
 2254              	.L214:
 2255 0006 00BF     		.align	2
 2256              	.L213:
 2257 0008 00000000 		.word	.LANCHOR9
 2258              		.cfi_endproc
 2259              	.LFE25:
 2261              		.section	.text.pcTaskGetName,"ax",%progbits
 2262              		.align	1
 2263              		.global	pcTaskGetName
 2264              		.syntax unified
 2265              		.thumb
 2266              		.thumb_func
 2267              		.fpu fpv4-sp-d16
 2269              	pcTaskGetName:
 2270              	.LFB26:
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2271              		.loc 1 2339 0
 2272              		.cfi_startproc
 2273              		@ args = 0, pretend = 0, frame = 0
 2274              		@ frame_needed = 0, uses_anonymous_args = 0
 2275              		@ link register save eliminated.
ARM GAS  /tmp/ccL3CtUt.s 			page 139


 2276              	.LVL201:
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2277              		.loc 1 2344 0
 2278 0000 0346     		mov	r3, r0
 2279 0002 18B1     		cbz	r0, .L219
 2280              	.LVL202:
 2281              	.L216:
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2282              		.loc 1 2345 0 discriminator 4
 2283 0004 2BB1     		cbz	r3, .L220
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2284              		.loc 1 2347 0
 2285 0006 03F13400 		add	r0, r3, #52
 2286 000a 7047     		bx	lr
 2287              	.LVL203:
 2288              	.L219:
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2289              		.loc 1 2344 0 discriminator 1
 2290 000c 054B     		ldr	r3, .L221
 2291 000e 1B68     		ldr	r3, [r3]
 2292              	.LVL204:
 2293 0010 F8E7     		b	.L216
 2294              	.LVL205:
 2295              	.L220:
 2296              	.LBB159:
 2297              	.LBB160:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2298              		.loc 2 195 0
 2299              		.syntax unified
 2300              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2301 0012 4FF05003 			mov r3, #80												
 2302 0016 83F31188 		msr basepri, r3											
 2303 001a BFF36F8F 		isb														
 2304 001e BFF34F8F 		dsb														
 2305              	
 2306              	@ 0 "" 2
 2307              	.LVL206:
 2308              		.thumb
 2309              		.syntax unified
 2310              	.L218:
 2311 0022 FEE7     		b	.L218
 2312              	.L222:
 2313              		.align	2
 2314              	.L221:
 2315 0024 00000000 		.word	.LANCHOR10
 2316              	.LBE160:
 2317              	.LBE159:
 2318              		.cfi_endproc
 2319              	.LFE26:
 2321              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2322              		.align	1
 2323              		.global	xTaskIncrementTick
 2324              		.syntax unified
 2325              		.thumb
 2326              		.thumb_func
 2327              		.fpu fpv4-sp-d16
 2329              	xTaskIncrementTick:
ARM GAS  /tmp/ccL3CtUt.s 			page 140


 2330              	.LFB28:
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2331              		.loc 1 2666 0
 2332              		.cfi_startproc
 2333              		@ args = 0, pretend = 0, frame = 0
 2334              		@ frame_needed = 0, uses_anonymous_args = 0
 2335 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2336              		.cfi_def_cfa_offset 24
 2337              		.cfi_offset 3, -24
 2338              		.cfi_offset 4, -20
 2339              		.cfi_offset 5, -16
 2340              		.cfi_offset 6, -12
 2341              		.cfi_offset 7, -8
 2342              		.cfi_offset 14, -4
 2343              	.LVL207:
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2344              		.loc 1 2675 0
 2345 0002 3A4B     		ldr	r3, .L245
 2346 0004 1B68     		ldr	r3, [r3]
 2347 0006 002B     		cmp	r3, #0
 2348 0008 64D1     		bne	.L224
 2349              	.LBB161:
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2350              		.loc 1 2679 0
 2351 000a 394B     		ldr	r3, .L245+4
 2352 000c 1D68     		ldr	r5, [r3]
 2353 000e 0135     		adds	r5, r5, #1
 2354              	.LVL208:
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2355              		.loc 1 2683 0
 2356 0010 1D60     		str	r5, [r3]
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2357              		.loc 1 2685 0
 2358 0012 C5B9     		cbnz	r5, .L225
 2359              	.LBB162:
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2360              		.loc 1 2687 0
 2361 0014 374B     		ldr	r3, .L245+8
 2362 0016 1B68     		ldr	r3, [r3]
 2363 0018 1B68     		ldr	r3, [r3]
 2364 001a 43B1     		cbz	r3, .L226
 2365              	.LBB163:
 2366              	.LBB164:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2367              		.loc 2 195 0
 2368              		.syntax unified
 2369              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2370 001c 4FF05003 			mov r3, #80												
 2371 0020 83F31188 		msr basepri, r3											
 2372 0024 BFF36F8F 		isb														
 2373 0028 BFF34F8F 		dsb														
 2374              	
 2375              	@ 0 "" 2
 2376              	.LVL209:
 2377              		.thumb
 2378              		.syntax unified
 2379              	.L227:
ARM GAS  /tmp/ccL3CtUt.s 			page 141


 2380 002c FEE7     		b	.L227
 2381              	.L226:
 2382              	.LBE164:
 2383              	.LBE163:
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2384              		.loc 1 2687 0 discriminator 2
 2385 002e 314A     		ldr	r2, .L245+8
 2386 0030 1168     		ldr	r1, [r2]
 2387              	.LVL210:
 2388 0032 314B     		ldr	r3, .L245+12
 2389 0034 1868     		ldr	r0, [r3]
 2390 0036 1060     		str	r0, [r2]
 2391 0038 1960     		str	r1, [r3]
 2392 003a 304A     		ldr	r2, .L245+16
 2393 003c 1368     		ldr	r3, [r2]
 2394 003e 0133     		adds	r3, r3, #1
 2395 0040 1360     		str	r3, [r2]
 2396 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2397              	.LVL211:
 2398              	.L225:
 2399              	.LBE162:
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2400              		.loc 1 2698 0
 2401 0046 2E4B     		ldr	r3, .L245+20
 2402 0048 1B68     		ldr	r3, [r3]
 2403 004a 9D42     		cmp	r5, r3
 2404 004c 38D2     		bcs	.L238
 2405              	.LBE161:
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2406              		.loc 1 2669 0
 2407 004e 0024     		movs	r4, #0
 2408              	.LVL212:
 2409              	.L229:
 2410              	.LBB165:
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2411              		.loc 1 2781 0
 2412 0050 2C4B     		ldr	r3, .L245+24
 2413 0052 1B68     		ldr	r3, [r3]
 2414 0054 DB6A     		ldr	r3, [r3, #44]
 2415 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2416 005a 9A00     		lsls	r2, r3, #2
 2417 005c 2A4B     		ldr	r3, .L245+28
 2418 005e 9B58     		ldr	r3, [r3, r2]
 2419 0060 012B     		cmp	r3, #1
 2420 0062 3CD9     		bls	.L236
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2421              		.loc 1 2783 0
 2422 0064 0124     		movs	r4, #1
 2423              	.LVL213:
 2424 0066 3AE0     		b	.L236
 2425              	.LVL214:
 2426              	.L239:
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2427              		.loc 1 2764 0
 2428 0068 0124     		movs	r4, #1
 2429              	.LVL215:
 2430              	.L228:
ARM GAS  /tmp/ccL3CtUt.s 			page 142


2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2431              		.loc 1 2702 0
 2432 006a 224B     		ldr	r3, .L245+8
 2433 006c 1B68     		ldr	r3, [r3]
 2434 006e 1B68     		ldr	r3, [r3]
 2435 0070 43B3     		cbz	r3, .L243
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2436              		.loc 1 2718 0
 2437 0072 204B     		ldr	r3, .L245+8
 2438 0074 1B68     		ldr	r3, [r3]
 2439 0076 DB68     		ldr	r3, [r3, #12]
 2440 0078 DE68     		ldr	r6, [r3, #12]
 2441              	.LVL216:
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2442              		.loc 1 2719 0
 2443 007a 7368     		ldr	r3, [r6, #4]
 2444              	.LVL217:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2445              		.loc 1 2721 0
 2446 007c 9D42     		cmp	r5, r3
 2447 007e 26D3     		bcc	.L244
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2448              		.loc 1 2737 0
 2449 0080 371D     		adds	r7, r6, #4
 2450 0082 3846     		mov	r0, r7
 2451 0084 FFF7FEFF 		bl	uxListRemove
 2452              	.LVL218:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2453              		.loc 1 2741 0
 2454 0088 B36A     		ldr	r3, [r6, #40]
 2455 008a 1BB1     		cbz	r3, .L232
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2456              		.loc 1 2743 0
 2457 008c 06F11800 		add	r0, r6, #24
 2458 0090 FFF7FEFF 		bl	uxListRemove
 2459              	.LVL219:
 2460              	.L232:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2461              		.loc 1 2752 0
 2462 0094 F36A     		ldr	r3, [r6, #44]
 2463 0096 1D4A     		ldr	r2, .L245+32
 2464 0098 1268     		ldr	r2, [r2]
 2465 009a 9342     		cmp	r3, r2
 2466 009c 01D9     		bls	.L233
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2467              		.loc 1 2752 0 is_stmt 0 discriminator 1
 2468 009e 1B4A     		ldr	r2, .L245+32
 2469 00a0 1360     		str	r3, [r2]
 2470              	.L233:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2471              		.loc 1 2752 0 discriminator 3
 2472 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2473 00a6 9A00     		lsls	r2, r3, #2
 2474 00a8 3946     		mov	r1, r7
 2475 00aa 1748     		ldr	r0, .L245+28
 2476 00ac 1044     		add	r0, r0, r2
 2477 00ae FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccL3CtUt.s 			page 143


 2478              	.LVL220:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2479              		.loc 1 2762 0 is_stmt 1 discriminator 3
 2480 00b2 F26A     		ldr	r2, [r6, #44]
 2481 00b4 134B     		ldr	r3, .L245+24
 2482 00b6 1B68     		ldr	r3, [r3]
 2483 00b8 DB6A     		ldr	r3, [r3, #44]
 2484 00ba 9A42     		cmp	r2, r3
 2485 00bc D4D2     		bcs	.L239
 2486 00be D4E7     		b	.L228
 2487              	.LVL221:
 2488              	.L238:
 2489 00c0 0024     		movs	r4, #0
 2490 00c2 D2E7     		b	.L228
 2491              	.LVL222:
 2492              	.L243:
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2493              		.loc 1 2709 0
 2494 00c4 4FF0FF32 		mov	r2, #-1
 2495 00c8 0D4B     		ldr	r3, .L245+20
 2496 00ca 1A60     		str	r2, [r3]
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2497              		.loc 1 2710 0
 2498 00cc C0E7     		b	.L229
 2499              	.LVL223:
 2500              	.L244:
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2501              		.loc 1 2728 0
 2502 00ce 0C4A     		ldr	r2, .L245+20
 2503 00d0 1360     		str	r3, [r2]
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2504              		.loc 1 2729 0
 2505 00d2 BDE7     		b	.L229
 2506              	.LVL224:
 2507              	.L224:
 2508              	.LBE165:
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2509              		.loc 1 2809 0
 2510 00d4 0E4A     		ldr	r2, .L245+36
 2511 00d6 1368     		ldr	r3, [r2]
 2512 00d8 0133     		adds	r3, r3, #1
 2513 00da 1360     		str	r3, [r2]
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2514              		.loc 1 2669 0
 2515 00dc 0024     		movs	r4, #0
 2516              	.LVL225:
 2517              	.L236:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2518              		.loc 1 2822 0
 2519 00de 0D4B     		ldr	r3, .L245+40
 2520 00e0 1B68     		ldr	r3, [r3]
 2521 00e2 03B1     		cbz	r3, .L223
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2522              		.loc 1 2824 0
 2523 00e4 0124     		movs	r4, #1
 2524              	.LVL226:
 2525              	.L223:
ARM GAS  /tmp/ccL3CtUt.s 			page 144


2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2526              		.loc 1 2834 0
 2527 00e6 2046     		mov	r0, r4
 2528 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2529              	.L246:
 2530 00ea 00BF     		.align	2
 2531              	.L245:
 2532 00ec 00000000 		.word	.LANCHOR16
 2533 00f0 00000000 		.word	.LANCHOR15
 2534 00f4 00000000 		.word	.LANCHOR2
 2535 00f8 00000000 		.word	.LANCHOR8
 2536 00fc 00000000 		.word	.LANCHOR17
 2537 0100 00000000 		.word	.LANCHOR3
 2538 0104 00000000 		.word	.LANCHOR10
 2539 0108 00000000 		.word	.LANCHOR4
 2540 010c 00000000 		.word	.LANCHOR13
 2541 0110 00000000 		.word	.LANCHOR18
 2542 0114 00000000 		.word	.LANCHOR19
 2543              		.cfi_endproc
 2544              	.LFE28:
 2546              		.section	.text.xTaskResumeAll,"ax",%progbits
 2547              		.align	1
 2548              		.global	xTaskResumeAll
 2549              		.syntax unified
 2550              		.thumb
 2551              		.thumb_func
 2552              		.fpu fpv4-sp-d16
 2554              	xTaskResumeAll:
 2555              	.LFB22:
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2556              		.loc 1 2175 0
 2557              		.cfi_startproc
 2558              		@ args = 0, pretend = 0, frame = 0
 2559              		@ frame_needed = 0, uses_anonymous_args = 0
 2560 0000 38B5     		push	{r3, r4, r5, lr}
 2561              		.cfi_def_cfa_offset 16
 2562              		.cfi_offset 3, -16
 2563              		.cfi_offset 4, -12
 2564              		.cfi_offset 5, -8
 2565              		.cfi_offset 14, -4
 2566              	.LVL227:
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2567              		.loc 1 2181 0
 2568 0002 354B     		ldr	r3, .L265
 2569 0004 1B68     		ldr	r3, [r3]
 2570 0006 43B9     		cbnz	r3, .L248
 2571              	.LBB166:
 2572              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2573              		.loc 2 195 0
 2574              		.syntax unified
 2575              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2576 0008 4FF05003 			mov r3, #80												
 2577 000c 83F31188 		msr basepri, r3											
 2578 0010 BFF36F8F 		isb														
 2579 0014 BFF34F8F 		dsb														
 2580              	
ARM GAS  /tmp/ccL3CtUt.s 			page 145


 2581              	@ 0 "" 2
 2582              	.LVL228:
 2583              		.thumb
 2584              		.syntax unified
 2585              	.L249:
 2586 0018 FEE7     		b	.L249
 2587              	.L248:
 2588              	.LBE167:
 2589              	.LBE166:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2590              		.loc 1 2188 0
 2591 001a FFF7FEFF 		bl	vPortEnterCritical
 2592              	.LVL229:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2593              		.loc 1 2190 0
 2594 001e 2E4B     		ldr	r3, .L265
 2595 0020 1A68     		ldr	r2, [r3]
 2596 0022 013A     		subs	r2, r2, #1
 2597 0024 1A60     		str	r2, [r3]
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2598              		.loc 1 2192 0
 2599 0026 1B68     		ldr	r3, [r3]
 2600 0028 002B     		cmp	r3, #0
 2601 002a 50D1     		bne	.L259
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2602              		.loc 1 2194 0
 2603 002c 2B4B     		ldr	r3, .L265+4
 2604 002e 1B68     		ldr	r3, [r3]
 2605 0030 23B9     		cbnz	r3, .L260
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2606              		.loc 1 2177 0
 2607 0032 0024     		movs	r4, #0
 2608              	.LVL230:
 2609              	.L250:
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2610              		.loc 1 2278 0
 2611 0034 FFF7FEFF 		bl	vPortExitCritical
 2612              	.LVL231:
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2613              		.loc 1 2281 0
 2614 0038 2046     		mov	r0, r4
 2615 003a 38BD     		pop	{r3, r4, r5, pc}
 2616              	.LVL232:
 2617              	.L260:
 2618 003c 0024     		movs	r4, #0
 2619              	.LVL233:
 2620              	.L251:
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2621              		.loc 1 2198 0
 2622 003e 284B     		ldr	r3, .L265+8
 2623 0040 1B68     		ldr	r3, [r3]
 2624 0042 1BB3     		cbz	r3, .L263
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2625              		.loc 1 2200 0
 2626 0044 264B     		ldr	r3, .L265+8
 2627 0046 DB68     		ldr	r3, [r3, #12]
 2628 0048 DC68     		ldr	r4, [r3, #12]
ARM GAS  /tmp/ccL3CtUt.s 			page 146


 2629              	.LVL234:
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2630              		.loc 1 2201 0
 2631 004a 04F11800 		add	r0, r4, #24
 2632 004e FFF7FEFF 		bl	uxListRemove
 2633              	.LVL235:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2634              		.loc 1 2202 0
 2635 0052 251D     		adds	r5, r4, #4
 2636 0054 2846     		mov	r0, r5
 2637 0056 FFF7FEFF 		bl	uxListRemove
 2638              	.LVL236:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2639              		.loc 1 2203 0
 2640 005a E36A     		ldr	r3, [r4, #44]
 2641 005c 214A     		ldr	r2, .L265+12
 2642 005e 1268     		ldr	r2, [r2]
 2643 0060 9342     		cmp	r3, r2
 2644 0062 01D9     		bls	.L252
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2645              		.loc 1 2203 0 is_stmt 0 discriminator 1
 2646 0064 1F4A     		ldr	r2, .L265+12
 2647 0066 1360     		str	r3, [r2]
 2648              	.L252:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2649              		.loc 1 2203 0 discriminator 3
 2650 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2651 006c 9A00     		lsls	r2, r3, #2
 2652 006e 2946     		mov	r1, r5
 2653 0070 1D48     		ldr	r0, .L265+16
 2654 0072 1044     		add	r0, r0, r2
 2655 0074 FFF7FEFF 		bl	vListInsertEnd
 2656              	.LVL237:
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2657              		.loc 1 2207 0 is_stmt 1 discriminator 3
 2658 0078 E26A     		ldr	r2, [r4, #44]
 2659 007a 1C4B     		ldr	r3, .L265+20
 2660 007c 1B68     		ldr	r3, [r3]
 2661 007e DB6A     		ldr	r3, [r3, #44]
 2662 0080 9A42     		cmp	r2, r3
 2663 0082 DCD3     		bcc	.L251
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2664              		.loc 1 2209 0
 2665 0084 0122     		movs	r2, #1
 2666 0086 1A4B     		ldr	r3, .L265+24
 2667 0088 1A60     		str	r2, [r3]
 2668 008a D8E7     		b	.L251
 2669              	.L263:
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2670              		.loc 1 2217 0
 2671 008c 0CB1     		cbz	r4, .L255
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2672              		.loc 1 2225 0
 2673 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2674              	.LVL238:
 2675              	.L255:
 2676              	.LBB168:
ARM GAS  /tmp/ccL3CtUt.s 			page 147


2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2677              		.loc 1 2233 0
 2678 0092 184B     		ldr	r3, .L265+28
 2679 0094 1C68     		ldr	r4, [r3]
 2680              	.LVL239:
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2681              		.loc 1 2235 0
 2682 0096 74B9     		cbnz	r4, .L258
 2683              	.L256:
 2684              	.LBE168:
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2685              		.loc 1 2258 0
 2686 0098 154B     		ldr	r3, .L265+24
 2687 009a 1B68     		ldr	r3, [r3]
 2688 009c CBB1     		cbz	r3, .L261
 2689              	.LVL240:
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2690              		.loc 1 2265 0
 2691 009e 4FF08052 		mov	r2, #268435456
 2692 00a2 154B     		ldr	r3, .L265+32
 2693 00a4 1A60     		str	r2, [r3]
 2694              		.syntax unified
 2695              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2696 00a6 BFF34F8F 		dsb
 2697              	@ 0 "" 2
 2698              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2699 00aa BFF36F8F 		isb
 2700              	@ 0 "" 2
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2701              		.loc 1 2262 0
 2702              		.thumb
 2703              		.syntax unified
 2704 00ae 0124     		movs	r4, #1
 2705              	.LVL241:
 2706 00b0 C0E7     		b	.L250
 2707              	.LVL242:
 2708              	.L257:
 2709              	.LBB169:
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2710              		.loc 1 2248 0
 2711 00b2 013C     		subs	r4, r4, #1
 2712              	.LVL243:
 2713 00b4 07D0     		beq	.L264
 2714              	.L258:
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2715              		.loc 1 2239 0
 2716 00b6 FFF7FEFF 		bl	xTaskIncrementTick
 2717              	.LVL244:
 2718 00ba 0028     		cmp	r0, #0
 2719 00bc F9D0     		beq	.L257
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2720              		.loc 1 2241 0
 2721 00be 0122     		movs	r2, #1
 2722 00c0 0B4B     		ldr	r3, .L265+24
 2723 00c2 1A60     		str	r2, [r3]
 2724 00c4 F5E7     		b	.L257
 2725              	.L264:
ARM GAS  /tmp/ccL3CtUt.s 			page 148


2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2726              		.loc 1 2250 0
 2727 00c6 0022     		movs	r2, #0
 2728 00c8 0A4B     		ldr	r3, .L265+28
 2729 00ca 1A60     		str	r2, [r3]
 2730 00cc E4E7     		b	.L256
 2731              	.LVL245:
 2732              	.L259:
 2733              	.LBE169:
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2734              		.loc 1 2177 0
 2735 00ce 0024     		movs	r4, #0
 2736 00d0 B0E7     		b	.L250
 2737              	.LVL246:
 2738              	.L261:
 2739 00d2 0024     		movs	r4, #0
 2740              	.LVL247:
 2741 00d4 AEE7     		b	.L250
 2742              	.L266:
 2743 00d6 00BF     		.align	2
 2744              	.L265:
 2745 00d8 00000000 		.word	.LANCHOR16
 2746 00dc 00000000 		.word	.LANCHOR9
 2747 00e0 00000000 		.word	.LANCHOR1
 2748 00e4 00000000 		.word	.LANCHOR13
 2749 00e8 00000000 		.word	.LANCHOR4
 2750 00ec 00000000 		.word	.LANCHOR10
 2751 00f0 00000000 		.word	.LANCHOR19
 2752 00f4 00000000 		.word	.LANCHOR18
 2753 00f8 04ED00E0 		.word	-536810236
 2754              		.cfi_endproc
 2755              	.LFE22:
 2757              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2758              		.align	1
 2759              		.global	vTaskDelayUntil
 2760              		.syntax unified
 2761              		.thumb
 2762              		.thumb_func
 2763              		.fpu fpv4-sp-d16
 2765              	vTaskDelayUntil:
 2766              	.LFB9:
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2767              		.loc 1 1250 0
 2768              		.cfi_startproc
 2769              		@ args = 0, pretend = 0, frame = 0
 2770              		@ frame_needed = 0, uses_anonymous_args = 0
 2771              	.LVL248:
 2772 0000 38B5     		push	{r3, r4, r5, lr}
 2773              		.cfi_def_cfa_offset 16
 2774              		.cfi_offset 3, -16
 2775              		.cfi_offset 4, -12
 2776              		.cfi_offset 5, -8
 2777              		.cfi_offset 14, -4
 2778              	.LVL249:
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2779              		.loc 1 1254 0
 2780 0002 50B1     		cbz	r0, .L283
ARM GAS  /tmp/ccL3CtUt.s 			page 149


 2781 0004 0546     		mov	r5, r0
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2782              		.loc 1 1255 0
 2783 0006 89B9     		cbnz	r1, .L270
 2784              	.LBB170:
 2785              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2786              		.loc 2 195 0
 2787              		.syntax unified
 2788              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2789 0008 4FF05003 			mov r3, #80												
 2790 000c 83F31188 		msr basepri, r3											
 2791 0010 BFF36F8F 		isb														
 2792 0014 BFF34F8F 		dsb														
 2793              	
 2794              	@ 0 "" 2
 2795              	.LVL250:
 2796              		.thumb
 2797              		.syntax unified
 2798              	.L271:
 2799 0018 FEE7     		b	.L271
 2800              	.L283:
 2801              	.LBE171:
 2802              	.LBE170:
 2803              	.LBB172:
 2804              	.LBB173:
 2805              		.syntax unified
 2806              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2807 001a 4FF05003 			mov r3, #80												
 2808 001e 83F31188 		msr basepri, r3											
 2809 0022 BFF36F8F 		isb														
 2810 0026 BFF34F8F 		dsb														
 2811              	
 2812              	@ 0 "" 2
 2813              	.LVL251:
 2814              		.thumb
 2815              		.syntax unified
 2816              	.L269:
 2817 002a FEE7     		b	.L269
 2818              	.L270:
 2819              	.LBE173:
 2820              	.LBE172:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2821              		.loc 1 1256 0
 2822 002c 1C4B     		ldr	r3, .L284
 2823 002e 1B68     		ldr	r3, [r3]
 2824 0030 43B1     		cbz	r3, .L272
 2825              	.LBB174:
 2826              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2827              		.loc 2 195 0
 2828              		.syntax unified
 2829              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2830 0032 4FF05003 			mov r3, #80												
 2831 0036 83F31188 		msr basepri, r3											
 2832 003a BFF36F8F 		isb														
 2833 003e BFF34F8F 		dsb														
ARM GAS  /tmp/ccL3CtUt.s 			page 150


 2834              	
 2835              	@ 0 "" 2
 2836              	.LVL252:
 2837              		.thumb
 2838              		.syntax unified
 2839              	.L273:
 2840 0042 FEE7     		b	.L273
 2841              	.L272:
 2842 0044 0C46     		mov	r4, r1
 2843              	.LBE175:
 2844              	.LBE174:
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2845              		.loc 1 1258 0
 2846 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2847              	.LVL253:
 2848              	.LBB176:
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2849              		.loc 1 1262 0
 2850 004a 164B     		ldr	r3, .L284+4
 2851 004c 1868     		ldr	r0, [r3]
 2852              	.LVL254:
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2853              		.loc 1 1265 0
 2854 004e 2A68     		ldr	r2, [r5]
 2855 0050 1444     		add	r4, r4, r2
 2856              	.LVL255:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2857              		.loc 1 1267 0
 2858 0052 9042     		cmp	r0, r2
 2859 0054 16D2     		bcs	.L274
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2860              		.loc 1 1274 0
 2861 0056 A242     		cmp	r2, r4
 2862 0058 1AD9     		bls	.L278
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2863              		.loc 1 1274 0 is_stmt 0 discriminator 1
 2864 005a A042     		cmp	r0, r4
 2865 005c 1AD3     		bcc	.L279
 2866              	.LBE176:
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2867              		.loc 1 1252 0 is_stmt 1
 2868 005e 0022     		movs	r2, #0
 2869              	.L275:
 2870              	.LVL256:
 2871              	.LBB177:
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2872              		.loc 1 1299 0
 2873 0060 2C60     		str	r4, [r5]
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2874              		.loc 1 1301 0
 2875 0062 1AB1     		cbz	r2, .L276
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2876              		.loc 1 1307 0
 2877 0064 0021     		movs	r1, #0
 2878 0066 201A     		subs	r0, r4, r0
 2879              	.LVL257:
 2880 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  /tmp/ccL3CtUt.s 			page 151


 2881              	.LVL258:
 2882              	.L276:
 2883              	.LBE177:
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2884              		.loc 1 1314 0
 2885 006c FFF7FEFF 		bl	xTaskResumeAll
 2886              	.LVL259:
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2887              		.loc 1 1318 0
 2888 0070 38B9     		cbnz	r0, .L267
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2889              		.loc 1 1320 0
 2890 0072 4FF08052 		mov	r2, #268435456
 2891 0076 0C4B     		ldr	r3, .L284+8
 2892 0078 1A60     		str	r2, [r3]
 2893              		.syntax unified
 2894              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2895 007a BFF34F8F 		dsb
 2896              	@ 0 "" 2
 2897              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2898 007e BFF36F8F 		isb
 2899              	@ 0 "" 2
 2900              		.thumb
 2901              		.syntax unified
 2902              	.L267:
 2903 0082 38BD     		pop	{r3, r4, r5, pc}
 2904              	.LVL260:
 2905              	.L274:
 2906              	.LBB178:
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2907              		.loc 1 1288 0
 2908 0084 A242     		cmp	r2, r4
 2909 0086 07D8     		bhi	.L280
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2910              		.loc 1 1288 0 is_stmt 0 discriminator 1
 2911 0088 A042     		cmp	r0, r4
 2912 008a 07D3     		bcc	.L281
 2913              	.LBE178:
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2914              		.loc 1 1252 0 is_stmt 1
 2915 008c 0022     		movs	r2, #0
 2916 008e E7E7     		b	.L275
 2917              	.L278:
 2918 0090 0022     		movs	r2, #0
 2919 0092 E5E7     		b	.L275
 2920              	.L279:
 2921              	.LBB179:
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2922              		.loc 1 1276 0
 2923 0094 0122     		movs	r2, #1
 2924 0096 E3E7     		b	.L275
 2925              	.L280:
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2926              		.loc 1 1290 0
 2927 0098 0122     		movs	r2, #1
 2928 009a E1E7     		b	.L275
 2929              	.L281:
ARM GAS  /tmp/ccL3CtUt.s 			page 152


 2930 009c 0122     		movs	r2, #1
 2931 009e DFE7     		b	.L275
 2932              	.L285:
 2933              		.align	2
 2934              	.L284:
 2935 00a0 00000000 		.word	.LANCHOR16
 2936 00a4 00000000 		.word	.LANCHOR15
 2937 00a8 04ED00E0 		.word	-536810236
 2938              	.LBE179:
 2939              		.cfi_endproc
 2940              	.LFE9:
 2942              		.section	.text.vTaskDelay,"ax",%progbits
 2943              		.align	1
 2944              		.global	vTaskDelay
 2945              		.syntax unified
 2946              		.thumb
 2947              		.thumb_func
 2948              		.fpu fpv4-sp-d16
 2950              	vTaskDelay:
 2951              	.LFB10:
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2952              		.loc 1 1334 0
 2953              		.cfi_startproc
 2954              		@ args = 0, pretend = 0, frame = 0
 2955              		@ frame_needed = 0, uses_anonymous_args = 0
 2956              	.LVL261:
 2957 0000 10B5     		push	{r4, lr}
 2958              		.cfi_def_cfa_offset 8
 2959              		.cfi_offset 4, -8
 2960              		.cfi_offset 14, -4
 2961              	.LVL262:
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2962              		.loc 1 1338 0
 2963 0002 A8B1     		cbz	r0, .L291
 2964 0004 0446     		mov	r4, r0
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2965              		.loc 1 1340 0
 2966 0006 104B     		ldr	r3, .L293
 2967 0008 1B68     		ldr	r3, [r3]
 2968 000a 43B1     		cbz	r3, .L288
 2969              	.LBB180:
 2970              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2971              		.loc 2 195 0
 2972              		.syntax unified
 2973              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2974 000c 4FF05003 			mov r3, #80												
 2975 0010 83F31188 		msr basepri, r3											
 2976 0014 BFF36F8F 		isb														
 2977 0018 BFF34F8F 		dsb														
 2978              	
 2979              	@ 0 "" 2
 2980              	.LVL263:
 2981              		.thumb
 2982              		.syntax unified
 2983              	.L289:
 2984 001c FEE7     		b	.L289
ARM GAS  /tmp/ccL3CtUt.s 			page 153


 2985              	.L288:
 2986              	.LBE181:
 2987              	.LBE180:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2988              		.loc 1 1341 0
 2989 001e FFF7FEFF 		bl	vTaskSuspendAll
 2990              	.LVL264:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2991              		.loc 1 1352 0
 2992 0022 0021     		movs	r1, #0
 2993 0024 2046     		mov	r0, r4
 2994 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2995              	.LVL265:
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2996              		.loc 1 1354 0
 2997 002a FFF7FEFF 		bl	xTaskResumeAll
 2998              	.LVL266:
 2999 002e 00E0     		b	.L287
 3000              	.LVL267:
 3001              	.L291:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3002              		.loc 1 1335 0
 3003 0030 0020     		movs	r0, #0
 3004              	.LVL268:
 3005              	.L287:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3006              		.loc 1 1363 0
 3007 0032 38B9     		cbnz	r0, .L286
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3008              		.loc 1 1365 0
 3009 0034 4FF08052 		mov	r2, #268435456
 3010 0038 044B     		ldr	r3, .L293+4
 3011 003a 1A60     		str	r2, [r3]
 3012              		.syntax unified
 3013              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3014 003c BFF34F8F 		dsb
 3015              	@ 0 "" 2
 3016              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3017 0040 BFF36F8F 		isb
 3018              	@ 0 "" 2
 3019              		.thumb
 3020              		.syntax unified
 3021              	.L286:
 3022 0044 10BD     		pop	{r4, pc}
 3023              	.L294:
 3024 0046 00BF     		.align	2
 3025              	.L293:
 3026 0048 00000000 		.word	.LANCHOR16
 3027 004c 04ED00E0 		.word	-536810236
 3028              		.cfi_endproc
 3029              	.LFE10:
 3031              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3032              		.align	1
 3033              		.global	vTaskSwitchContext
 3034              		.syntax unified
 3035              		.thumb
 3036              		.thumb_func
ARM GAS  /tmp/ccL3CtUt.s 			page 154


 3037              		.fpu fpv4-sp-d16
 3039              	vTaskSwitchContext:
 3040              	.LFB29:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3041              		.loc 1 2948 0
 3042              		.cfi_startproc
 3043              		@ args = 0, pretend = 0, frame = 0
 3044              		@ frame_needed = 0, uses_anonymous_args = 0
 3045              		@ link register save eliminated.
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3046              		.loc 1 2949 0
 3047 0000 214B     		ldr	r3, .L311
 3048 0002 1B68     		ldr	r3, [r3]
 3049 0004 6BB9     		cbnz	r3, .L307
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3050              		.loc 1 2957 0
 3051 0006 0022     		movs	r2, #0
 3052 0008 204B     		ldr	r3, .L311+4
 3053 000a 1A60     		str	r2, [r3]
 3054              	.LBB182:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3055              		.loc 1 2999 0
 3056 000c 204B     		ldr	r3, .L311+8
 3057 000e 1B68     		ldr	r3, [r3]
 3058              	.LVL269:
 3059              	.L298:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3060              		.loc 1 2999 0 is_stmt 0 discriminator 4
 3061 0010 03EB8301 		add	r1, r3, r3, lsl #2
 3062 0014 8A00     		lsls	r2, r1, #2
 3063 0016 1F49     		ldr	r1, .L311+12
 3064 0018 8A58     		ldr	r2, [r1, r2]
 3065 001a 7AB9     		cbnz	r2, .L308
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3066              		.loc 1 2999 0 discriminator 5
 3067 001c 2BB1     		cbz	r3, .L309
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3068              		.loc 1 2999 0 discriminator 3
 3069 001e 013B     		subs	r3, r3, #1
 3070              	.LVL270:
 3071 0020 F6E7     		b	.L298
 3072              	.LVL271:
 3073              	.L307:
 3074              	.LBE182:
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3075              		.loc 1 2953 0 is_stmt 1
 3076 0022 0122     		movs	r2, #1
 3077 0024 194B     		ldr	r3, .L311+4
 3078 0026 1A60     		str	r2, [r3]
 3079 0028 7047     		bx	lr
 3080              	.LVL272:
 3081              	.L309:
 3082              	.LBB187:
 3083              	.LBB183:
 3084              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3085              		.loc 2 195 0
ARM GAS  /tmp/ccL3CtUt.s 			page 155


 3086              		.syntax unified
 3087              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3088 002a 4FF05003 			mov r3, #80												
 3089 002e 83F31188 		msr basepri, r3											
 3090 0032 BFF36F8F 		isb														
 3091 0036 BFF34F8F 		dsb														
 3092              	
 3093              	@ 0 "" 2
 3094              	.LVL273:
 3095              		.thumb
 3096              		.syntax unified
 3097              	.L300:
 3098 003a FEE7     		b	.L300
 3099              	.LVL274:
 3100              	.L308:
 3101              	.LBE184:
 3102              	.LBE183:
 3103              	.LBE187:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3104              		.loc 1 2948 0 discriminator 6
 3105 003c 10B4     		push	{r4}
 3106              		.cfi_def_cfa_offset 4
 3107              		.cfi_offset 4, -4
 3108              	.LVL275:
 3109              	.LBB188:
 3110              	.LBB185:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3111              		.loc 1 2999 0 discriminator 6
 3112 003e 0846     		mov	r0, r1
 3113 0040 9A00     		lsls	r2, r3, #2
 3114 0042 D418     		adds	r4, r2, r3
 3115 0044 A100     		lsls	r1, r4, #2
 3116 0046 0144     		add	r1, r1, r0
 3117 0048 4C68     		ldr	r4, [r1, #4]
 3118 004a 6468     		ldr	r4, [r4, #4]
 3119 004c 4C60     		str	r4, [r1, #4]
 3120 004e 1A44     		add	r2, r2, r3
 3121 0050 9100     		lsls	r1, r2, #2
 3122 0052 0831     		adds	r1, r1, #8
 3123 0054 0844     		add	r0, r0, r1
 3124 0056 8442     		cmp	r4, r0
 3125 0058 0DD0     		beq	.L310
 3126              	.L302:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3127              		.loc 1 2999 0 is_stmt 0 discriminator 9
 3128 005a 03EB8302 		add	r2, r3, r3, lsl #2
 3129 005e 9100     		lsls	r1, r2, #2
 3130 0060 0C4A     		ldr	r2, .L311+12
 3131 0062 0A44     		add	r2, r2, r1
 3132 0064 5268     		ldr	r2, [r2, #4]
 3133 0066 D168     		ldr	r1, [r2, #12]
 3134 0068 0B4A     		ldr	r2, .L311+16
 3135 006a 1160     		str	r1, [r2]
 3136              	.LBE185:
 3137 006c 084A     		ldr	r2, .L311+8
 3138 006e 1360     		str	r3, [r2]
 3139              	.LBE188:
ARM GAS  /tmp/ccL3CtUt.s 			page 156


3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3140              		.loc 1 3017 0 is_stmt 1 discriminator 9
 3141 0070 5DF8044B 		ldr	r4, [sp], #4
 3142              		.cfi_remember_state
 3143              		.cfi_restore 4
 3144              		.cfi_def_cfa_offset 0
 3145 0074 7047     		bx	lr
 3146              	.L310:
 3147              		.cfi_restore_state
 3148              	.LBB189:
 3149              	.LBB186:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3150              		.loc 1 2999 0 discriminator 7
 3151 0076 6068     		ldr	r0, [r4, #4]
 3152 0078 03EB8302 		add	r2, r3, r3, lsl #2
 3153 007c 9100     		lsls	r1, r2, #2
 3154 007e 054A     		ldr	r2, .L311+12
 3155 0080 0A44     		add	r2, r2, r1
 3156 0082 5060     		str	r0, [r2, #4]
 3157 0084 E9E7     		b	.L302
 3158              	.L312:
 3159 0086 00BF     		.align	2
 3160              	.L311:
 3161 0088 00000000 		.word	.LANCHOR16
 3162 008c 00000000 		.word	.LANCHOR19
 3163 0090 00000000 		.word	.LANCHOR13
 3164 0094 00000000 		.word	.LANCHOR4
 3165 0098 00000000 		.word	.LANCHOR10
 3166              	.LBE186:
 3167              	.LBE189:
 3168              		.cfi_endproc
 3169              	.LFE29:
 3171              		.section	.text.vTaskSuspend,"ax",%progbits
 3172              		.align	1
 3173              		.global	vTaskSuspend
 3174              		.syntax unified
 3175              		.thumb
 3176              		.thumb_func
 3177              		.fpu fpv4-sp-d16
 3179              	vTaskSuspend:
 3180              	.LFB15:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3181              		.loc 1 1697 0
 3182              		.cfi_startproc
 3183              		@ args = 0, pretend = 0, frame = 0
 3184              		@ frame_needed = 0, uses_anonymous_args = 0
 3185              	.LVL276:
 3186 0000 38B5     		push	{r3, r4, r5, lr}
 3187              		.cfi_def_cfa_offset 16
 3188              		.cfi_offset 3, -16
 3189              		.cfi_offset 4, -12
 3190              		.cfi_offset 5, -8
 3191              		.cfi_offset 14, -4
 3192 0002 0446     		mov	r4, r0
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3193              		.loc 1 1700 0
 3194 0004 FFF7FEFF 		bl	vPortEnterCritical
ARM GAS  /tmp/ccL3CtUt.s 			page 157


 3195              	.LVL277:
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3196              		.loc 1 1704 0
 3197 0008 E4B1     		cbz	r4, .L324
 3198              	.LVL278:
 3199              	.L314:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3200              		.loc 1 1710 0 discriminator 4
 3201 000a 251D     		adds	r5, r4, #4
 3202 000c 2846     		mov	r0, r5
 3203 000e FFF7FEFF 		bl	uxListRemove
 3204              	.LVL279:
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3205              		.loc 1 1720 0 discriminator 4
 3206 0012 A36A     		ldr	r3, [r4, #40]
 3207 0014 1BB1     		cbz	r3, .L315
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3208              		.loc 1 1722 0
 3209 0016 04F11800 		add	r0, r4, #24
 3210 001a FFF7FEFF 		bl	uxListRemove
 3211              	.LVL280:
 3212              	.L315:
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3213              		.loc 1 1729 0
 3214 001e 2946     		mov	r1, r5
 3215 0020 2248     		ldr	r0, .L328
 3216 0022 FFF7FEFF 		bl	vListInsertEnd
 3217              	.LVL281:
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3218              		.loc 1 1733 0
 3219 0026 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3220 002a DBB2     		uxtb	r3, r3
 3221 002c 012B     		cmp	r3, #1
 3222 002e 0CD0     		beq	.L325
 3223              	.L316:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3224              		.loc 1 1742 0
 3225 0030 FFF7FEFF 		bl	vPortExitCritical
 3226              	.LVL282:
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3227              		.loc 1 1744 0
 3228 0034 1E4B     		ldr	r3, .L328+4
 3229 0036 1B68     		ldr	r3, [r3]
 3230 0038 5BB9     		cbnz	r3, .L326
 3231              	.L317:
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3232              		.loc 1 1759 0
 3233 003a 1E4B     		ldr	r3, .L328+8
 3234 003c 1B68     		ldr	r3, [r3]
 3235 003e 9C42     		cmp	r4, r3
 3236 0040 0ED0     		beq	.L327
 3237              	.L313:
 3238 0042 38BD     		pop	{r3, r4, r5, pc}
 3239              	.LVL283:
 3240              	.L324:
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3241              		.loc 1 1704 0 discriminator 1
ARM GAS  /tmp/ccL3CtUt.s 			page 158


 3242 0044 1B4B     		ldr	r3, .L328+8
 3243 0046 1C68     		ldr	r4, [r3]
 3244              	.LVL284:
 3245 0048 DFE7     		b	.L314
 3246              	.LVL285:
 3247              	.L325:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3248              		.loc 1 1737 0
 3249 004a 0023     		movs	r3, #0
 3250 004c 84F85830 		strb	r3, [r4, #88]
 3251 0050 EEE7     		b	.L316
 3252              	.L326:
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3253              		.loc 1 1748 0
 3254 0052 FFF7FEFF 		bl	vPortEnterCritical
 3255              	.LVL286:
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3256              		.loc 1 1750 0
 3257 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3258              	.LVL287:
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3259              		.loc 1 1752 0
 3260 005a FFF7FEFF 		bl	vPortExitCritical
 3261              	.LVL288:
 3262 005e ECE7     		b	.L317
 3263              	.L327:
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3264              		.loc 1 1761 0
 3265 0060 134B     		ldr	r3, .L328+4
 3266 0062 1B68     		ldr	r3, [r3]
 3267 0064 A3B1     		cbz	r3, .L319
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3268              		.loc 1 1764 0
 3269 0066 144B     		ldr	r3, .L328+12
 3270 0068 1B68     		ldr	r3, [r3]
 3271 006a 43B1     		cbz	r3, .L320
 3272              	.LBB190:
 3273              	.LBB191:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3274              		.loc 2 195 0
 3275              		.syntax unified
 3276              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3277 006c 4FF05003 			mov r3, #80												
 3278 0070 83F31188 		msr basepri, r3											
 3279 0074 BFF36F8F 		isb														
 3280 0078 BFF34F8F 		dsb														
 3281              	
 3282              	@ 0 "" 2
 3283              	.LVL289:
 3284              		.thumb
 3285              		.syntax unified
 3286              	.L321:
 3287 007c FEE7     		b	.L321
 3288              	.L320:
 3289              	.LBE191:
 3290              	.LBE190:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccL3CtUt.s 			page 159


 3291              		.loc 1 1765 0
 3292 007e 4FF08052 		mov	r2, #268435456
 3293 0082 0E4B     		ldr	r3, .L328+16
 3294 0084 1A60     		str	r2, [r3]
 3295              		.syntax unified
 3296              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3297 0086 BFF34F8F 		dsb
 3298              	@ 0 "" 2
 3299              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3300 008a BFF36F8F 		isb
 3301              	@ 0 "" 2
 3302              		.thumb
 3303              		.syntax unified
 3304 008e 38BD     		pop	{r3, r4, r5, pc}
 3305              	.LVL290:
 3306              	.L319:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3307              		.loc 1 1772 0
 3308 0090 064B     		ldr	r3, .L328
 3309 0092 1A68     		ldr	r2, [r3]
 3310 0094 0A4B     		ldr	r3, .L328+20
 3311 0096 1B68     		ldr	r3, [r3]
 3312 0098 9A42     		cmp	r2, r3
 3313 009a 03D1     		bne	.L322
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3314              		.loc 1 1778 0
 3315 009c 0022     		movs	r2, #0
 3316 009e 054B     		ldr	r3, .L328+8
 3317 00a0 1A60     		str	r2, [r3]
 3318 00a2 38BD     		pop	{r3, r4, r5, pc}
 3319              	.LVL291:
 3320              	.L322:
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3321              		.loc 1 1782 0
 3322 00a4 FFF7FEFF 		bl	vTaskSwitchContext
 3323              	.LVL292:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3324              		.loc 1 1790 0
 3325 00a8 CBE7     		b	.L313
 3326              	.L329:
 3327 00aa 00BF     		.align	2
 3328              	.L328:
 3329 00ac 00000000 		.word	.LANCHOR0
 3330 00b0 00000000 		.word	.LANCHOR11
 3331 00b4 00000000 		.word	.LANCHOR10
 3332 00b8 00000000 		.word	.LANCHOR16
 3333 00bc 04ED00E0 		.word	-536810236
 3334 00c0 00000000 		.word	.LANCHOR9
 3335              		.cfi_endproc
 3336              	.LFE15:
 3338              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3339              		.align	1
 3340              		.global	vTaskPlaceOnEventList
 3341              		.syntax unified
 3342              		.thumb
 3343              		.thumb_func
 3344              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccL3CtUt.s 			page 160


 3346              	vTaskPlaceOnEventList:
 3347              	.LFB30:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3348              		.loc 1 3021 0
 3349              		.cfi_startproc
 3350              		@ args = 0, pretend = 0, frame = 0
 3351              		@ frame_needed = 0, uses_anonymous_args = 0
 3352              	.LVL293:
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3353              		.loc 1 3022 0
 3354 0000 40B9     		cbnz	r0, .L331
 3355              	.LBB192:
 3356              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3357              		.loc 2 195 0
 3358              		.syntax unified
 3359              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3360 0002 4FF05003 			mov r3, #80												
 3361 0006 83F31188 		msr basepri, r3											
 3362 000a BFF36F8F 		isb														
 3363 000e BFF34F8F 		dsb														
 3364              	
 3365              	@ 0 "" 2
 3366              	.LVL294:
 3367              		.thumb
 3368              		.syntax unified
 3369              	.L332:
 3370 0012 FEE7     		b	.L332
 3371              	.L331:
 3372              	.LBE193:
 3373              	.LBE192:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3374              		.loc 1 3021 0
 3375 0014 10B5     		push	{r4, lr}
 3376              		.cfi_def_cfa_offset 8
 3377              		.cfi_offset 4, -8
 3378              		.cfi_offset 14, -4
 3379 0016 0C46     		mov	r4, r1
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3380              		.loc 1 3031 0
 3381 0018 044B     		ldr	r3, .L335
 3382 001a 1968     		ldr	r1, [r3]
 3383              	.LVL295:
 3384 001c 1831     		adds	r1, r1, #24
 3385 001e FFF7FEFF 		bl	vListInsert
 3386              	.LVL296:
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3387              		.loc 1 3033 0
 3388 0022 0121     		movs	r1, #1
 3389 0024 2046     		mov	r0, r4
 3390 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3391              	.LVL297:
 3392 002a 10BD     		pop	{r4, pc}
 3393              	.LVL298:
 3394              	.L336:
 3395              		.align	2
 3396              	.L335:
ARM GAS  /tmp/ccL3CtUt.s 			page 161


 3397 002c 00000000 		.word	.LANCHOR10
 3398              		.cfi_endproc
 3399              	.LFE30:
 3401              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3402              		.align	1
 3403              		.global	vTaskPlaceOnUnorderedEventList
 3404              		.syntax unified
 3405              		.thumb
 3406              		.thumb_func
 3407              		.fpu fpv4-sp-d16
 3409              	vTaskPlaceOnUnorderedEventList:
 3410              	.LFB31:
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3411              		.loc 1 3038 0
 3412              		.cfi_startproc
 3413              		@ args = 0, pretend = 0, frame = 0
 3414              		@ frame_needed = 0, uses_anonymous_args = 0
 3415              	.LVL299:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3416              		.loc 1 3039 0
 3417 0000 60B1     		cbz	r0, .L344
 3418 0002 0346     		mov	r3, r0
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3419              		.loc 1 3043 0
 3420 0004 1348     		ldr	r0, .L345
 3421              	.LVL300:
 3422 0006 0068     		ldr	r0, [r0]
 3423 0008 88B9     		cbnz	r0, .L340
 3424              	.LBB194:
 3425              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3426              		.loc 2 195 0
 3427              		.syntax unified
 3428              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3429 000a 4FF05003 			mov r3, #80												
 3430 000e 83F31188 		msr basepri, r3											
 3431 0012 BFF36F8F 		isb														
 3432 0016 BFF34F8F 		dsb														
 3433              	
 3434              	@ 0 "" 2
 3435              	.LVL301:
 3436              		.thumb
 3437              		.syntax unified
 3438              	.L341:
 3439 001a FEE7     		b	.L341
 3440              	.LVL302:
 3441              	.L344:
 3442              	.LBE195:
 3443              	.LBE194:
 3444              	.LBB196:
 3445              	.LBB197:
 3446              		.syntax unified
 3447              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3448 001c 4FF05003 			mov r3, #80												
 3449 0020 83F31188 		msr basepri, r3											
 3450 0024 BFF36F8F 		isb														
 3451 0028 BFF34F8F 		dsb														
ARM GAS  /tmp/ccL3CtUt.s 			page 162


 3452              	
 3453              	@ 0 "" 2
 3454              	.LVL303:
 3455              		.thumb
 3456              		.syntax unified
 3457              	.L339:
 3458 002c FEE7     		b	.L339
 3459              	.LVL304:
 3460              	.L340:
 3461              	.LBE197:
 3462              	.LBE196:
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3463              		.loc 1 3038 0
 3464 002e 10B5     		push	{r4, lr}
 3465              		.cfi_def_cfa_offset 8
 3466              		.cfi_offset 4, -8
 3467              		.cfi_offset 14, -4
 3468 0030 1846     		mov	r0, r3
 3469 0032 1446     		mov	r4, r2
 3470 0034 0B46     		mov	r3, r1
 3471              	.LVL305:
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3472              		.loc 1 3048 0
 3473 0036 084A     		ldr	r2, .L345+4
 3474              	.LVL306:
 3475 0038 1168     		ldr	r1, [r2]
 3476              	.LVL307:
 3477 003a 43F00043 		orr	r3, r3, #-2147483648
 3478              	.LVL308:
 3479 003e 8B61     		str	r3, [r1, #24]
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3480              		.loc 1 3055 0
 3481 0040 1168     		ldr	r1, [r2]
 3482 0042 1831     		adds	r1, r1, #24
 3483 0044 FFF7FEFF 		bl	vListInsertEnd
 3484              	.LVL309:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3485              		.loc 1 3057 0
 3486 0048 0121     		movs	r1, #1
 3487 004a 2046     		mov	r0, r4
 3488 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3489              	.LVL310:
 3490 0050 10BD     		pop	{r4, pc}
 3491              	.LVL311:
 3492              	.L346:
 3493 0052 00BF     		.align	2
 3494              	.L345:
 3495 0054 00000000 		.word	.LANCHOR16
 3496 0058 00000000 		.word	.LANCHOR10
 3497              		.cfi_endproc
 3498              	.LFE31:
 3500              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3501              		.align	1
 3502              		.global	vTaskPlaceOnEventListRestricted
 3503              		.syntax unified
 3504              		.thumb
 3505              		.thumb_func
ARM GAS  /tmp/ccL3CtUt.s 			page 163


 3506              		.fpu fpv4-sp-d16
 3508              	vTaskPlaceOnEventListRestricted:
 3509              	.LFB32:
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3510              		.loc 1 3064 0
 3511              		.cfi_startproc
 3512              		@ args = 0, pretend = 0, frame = 0
 3513              		@ frame_needed = 0, uses_anonymous_args = 0
 3514              	.LVL312:
 3515 0000 38B5     		push	{r3, r4, r5, lr}
 3516              		.cfi_def_cfa_offset 16
 3517              		.cfi_offset 3, -16
 3518              		.cfi_offset 4, -12
 3519              		.cfi_offset 5, -8
 3520              		.cfi_offset 14, -4
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3521              		.loc 1 3065 0
 3522 0002 70B1     		cbz	r0, .L353
 3523 0004 0C46     		mov	r4, r1
 3524 0006 1546     		mov	r5, r2
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3525              		.loc 1 3077 0
 3526 0008 0A4A     		ldr	r2, .L354
 3527              	.LVL313:
 3528 000a 1168     		ldr	r1, [r2]
 3529              	.LVL314:
 3530 000c 1831     		adds	r1, r1, #24
 3531 000e FFF7FEFF 		bl	vListInsertEnd
 3532              	.LVL315:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3533              		.loc 1 3082 0
 3534 0012 0DB1     		cbz	r5, .L350
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3535              		.loc 1 3084 0
 3536 0014 4FF0FF34 		mov	r4, #-1
 3537              	.LVL316:
 3538              	.L350:
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3539              		.loc 1 3088 0
 3540 0018 2946     		mov	r1, r5
 3541 001a 2046     		mov	r0, r4
 3542 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3543              	.LVL317:
 3544 0020 38BD     		pop	{r3, r4, r5, pc}
 3545              	.LVL318:
 3546              	.L353:
 3547              	.LBB198:
 3548              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3549              		.loc 2 195 0
 3550              		.syntax unified
 3551              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3552 0022 4FF05003 			mov r3, #80												
 3553 0026 83F31188 		msr basepri, r3											
 3554 002a BFF36F8F 		isb														
 3555 002e BFF34F8F 		dsb														
 3556              	
ARM GAS  /tmp/ccL3CtUt.s 			page 164


 3557              	@ 0 "" 2
 3558              	.LVL319:
 3559              		.thumb
 3560              		.syntax unified
 3561              	.L349:
 3562 0032 FEE7     		b	.L349
 3563              	.L355:
 3564              		.align	2
 3565              	.L354:
 3566 0034 00000000 		.word	.LANCHOR10
 3567              	.LBE199:
 3568              	.LBE198:
 3569              		.cfi_endproc
 3570              	.LFE32:
 3572              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3573              		.align	1
 3574              		.global	xTaskRemoveFromEventList
 3575              		.syntax unified
 3576              		.thumb
 3577              		.thumb_func
 3578              		.fpu fpv4-sp-d16
 3580              	xTaskRemoveFromEventList:
 3581              	.LFB33:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3582              		.loc 1 3095 0
 3583              		.cfi_startproc
 3584              		@ args = 0, pretend = 0, frame = 0
 3585              		@ frame_needed = 0, uses_anonymous_args = 0
 3586              	.LVL320:
 3587 0000 38B5     		push	{r3, r4, r5, lr}
 3588              		.cfi_def_cfa_offset 16
 3589              		.cfi_offset 3, -16
 3590              		.cfi_offset 4, -12
 3591              		.cfi_offset 5, -8
 3592              		.cfi_offset 14, -4
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3593              		.loc 1 3112 0
 3594 0002 C368     		ldr	r3, [r0, #12]
 3595 0004 DC68     		ldr	r4, [r3, #12]
 3596              	.LVL321:
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3597              		.loc 1 3113 0
 3598 0006 24B3     		cbz	r4, .L365
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3599              		.loc 1 3114 0
 3600 0008 04F11805 		add	r5, r4, #24
 3601 000c 2846     		mov	r0, r5
 3602              	.LVL322:
 3603 000e FFF7FEFF 		bl	uxListRemove
 3604              	.LVL323:
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3605              		.loc 1 3116 0
 3606 0012 184B     		ldr	r3, .L366
 3607 0014 1B68     		ldr	r3, [r3]
 3608 0016 2BBB     		cbnz	r3, .L359
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3609              		.loc 1 3118 0
ARM GAS  /tmp/ccL3CtUt.s 			page 165


 3610 0018 251D     		adds	r5, r4, #4
 3611 001a 2846     		mov	r0, r5
 3612 001c FFF7FEFF 		bl	uxListRemove
 3613              	.LVL324:
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3614              		.loc 1 3119 0
 3615 0020 E36A     		ldr	r3, [r4, #44]
 3616 0022 154A     		ldr	r2, .L366+4
 3617 0024 1268     		ldr	r2, [r2]
 3618 0026 9342     		cmp	r3, r2
 3619 0028 01D9     		bls	.L360
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3620              		.loc 1 3119 0 is_stmt 0 discriminator 1
 3621 002a 134A     		ldr	r2, .L366+4
 3622 002c 1360     		str	r3, [r2]
 3623              	.L360:
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3624              		.loc 1 3119 0 discriminator 3
 3625 002e 03EB8303 		add	r3, r3, r3, lsl #2
 3626 0032 9A00     		lsls	r2, r3, #2
 3627 0034 2946     		mov	r1, r5
 3628 0036 1148     		ldr	r0, .L366+8
 3629 0038 1044     		add	r0, r0, r2
 3630 003a FFF7FEFF 		bl	vListInsertEnd
 3631              	.LVL325:
 3632              	.L361:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3633              		.loc 1 3142 0 is_stmt 1
 3634 003e E26A     		ldr	r2, [r4, #44]
 3635 0040 0F4B     		ldr	r3, .L366+12
 3636 0042 1B68     		ldr	r3, [r3]
 3637 0044 DB6A     		ldr	r3, [r3, #44]
 3638 0046 9A42     		cmp	r2, r3
 3639 0048 11D9     		bls	.L363
 3640              	.LVL326:
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3641              		.loc 1 3151 0
 3642 004a 0120     		movs	r0, #1
 3643 004c 0D4B     		ldr	r3, .L366+16
 3644 004e 1860     		str	r0, [r3]
 3645 0050 38BD     		pop	{r3, r4, r5, pc}
 3646              	.LVL327:
 3647              	.L365:
 3648              	.LBB200:
 3649              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3650              		.loc 2 195 0
 3651              		.syntax unified
 3652              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3653 0052 4FF05003 			mov r3, #80												
 3654 0056 83F31188 		msr basepri, r3											
 3655 005a BFF36F8F 		isb														
 3656 005e BFF34F8F 		dsb														
 3657              	
 3658              	@ 0 "" 2
 3659              	.LVL328:
 3660              		.thumb
ARM GAS  /tmp/ccL3CtUt.s 			page 166


 3661              		.syntax unified
 3662              	.L358:
 3663 0062 FEE7     		b	.L358
 3664              	.LVL329:
 3665              	.L359:
 3666              	.LBE201:
 3667              	.LBE200:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3668              		.loc 1 3139 0
 3669 0064 2946     		mov	r1, r5
 3670 0066 0848     		ldr	r0, .L366+20
 3671 0068 FFF7FEFF 		bl	vListInsertEnd
 3672              	.LVL330:
 3673 006c E7E7     		b	.L361
 3674              	.L363:
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3675              		.loc 1 3155 0
 3676 006e 0020     		movs	r0, #0
 3677              	.LVL331:
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3678              		.loc 1 3159 0
 3679 0070 38BD     		pop	{r3, r4, r5, pc}
 3680              	.LVL332:
 3681              	.L367:
 3682 0072 00BF     		.align	2
 3683              	.L366:
 3684 0074 00000000 		.word	.LANCHOR16
 3685 0078 00000000 		.word	.LANCHOR13
 3686 007c 00000000 		.word	.LANCHOR4
 3687 0080 00000000 		.word	.LANCHOR10
 3688 0084 00000000 		.word	.LANCHOR19
 3689 0088 00000000 		.word	.LANCHOR1
 3690              		.cfi_endproc
 3691              	.LFE33:
 3693              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3694              		.align	1
 3695              		.global	vTaskRemoveFromUnorderedEventList
 3696              		.syntax unified
 3697              		.thumb
 3698              		.thumb_func
 3699              		.fpu fpv4-sp-d16
 3701              	vTaskRemoveFromUnorderedEventList:
 3702              	.LFB34:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3703              		.loc 1 3163 0
 3704              		.cfi_startproc
 3705              		@ args = 0, pretend = 0, frame = 0
 3706              		@ frame_needed = 0, uses_anonymous_args = 0
 3707              	.LVL333:
 3708 0000 38B5     		push	{r3, r4, r5, lr}
 3709              		.cfi_def_cfa_offset 16
 3710              		.cfi_offset 3, -16
 3711              		.cfi_offset 4, -12
 3712              		.cfi_offset 5, -8
 3713              		.cfi_offset 14, -4
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3714              		.loc 1 3168 0
ARM GAS  /tmp/ccL3CtUt.s 			page 167


 3715 0002 1C4B     		ldr	r3, .L377
 3716 0004 1B68     		ldr	r3, [r3]
 3717 0006 43B9     		cbnz	r3, .L369
 3718              	.LBB202:
 3719              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3720              		.loc 2 195 0
 3721              		.syntax unified
 3722              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3723 0008 4FF05003 			mov r3, #80												
 3724 000c 83F31188 		msr basepri, r3											
 3725 0010 BFF36F8F 		isb														
 3726 0014 BFF34F8F 		dsb														
 3727              	
 3728              	@ 0 "" 2
 3729              	.LVL334:
 3730              		.thumb
 3731              		.syntax unified
 3732              	.L370:
 3733 0018 FEE7     		b	.L370
 3734              	.L369:
 3735              	.LBE203:
 3736              	.LBE202:
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3737              		.loc 1 3171 0
 3738 001a 41F00041 		orr	r1, r1, #-2147483648
 3739              	.LVL335:
 3740 001e 0160     		str	r1, [r0]
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3741              		.loc 1 3175 0
 3742 0020 C468     		ldr	r4, [r0, #12]
 3743              	.LVL336:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3744              		.loc 1 3176 0
 3745 0022 F4B1     		cbz	r4, .L376
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3746              		.loc 1 3177 0
 3747 0024 FFF7FEFF 		bl	uxListRemove
 3748              	.LVL337:
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3749              		.loc 1 3182 0
 3750 0028 251D     		adds	r5, r4, #4
 3751 002a 2846     		mov	r0, r5
 3752 002c FFF7FEFF 		bl	uxListRemove
 3753              	.LVL338:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3754              		.loc 1 3183 0
 3755 0030 E36A     		ldr	r3, [r4, #44]
 3756 0032 114A     		ldr	r2, .L377+4
 3757 0034 1268     		ldr	r2, [r2]
 3758 0036 9342     		cmp	r3, r2
 3759 0038 01D9     		bls	.L373
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3760              		.loc 1 3183 0 is_stmt 0 discriminator 1
 3761 003a 0F4A     		ldr	r2, .L377+4
 3762 003c 1360     		str	r3, [r2]
 3763              	.L373:
ARM GAS  /tmp/ccL3CtUt.s 			page 168


3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3764              		.loc 1 3183 0 discriminator 3
 3765 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3766 0042 9A00     		lsls	r2, r3, #2
 3767 0044 2946     		mov	r1, r5
 3768 0046 0D48     		ldr	r0, .L377+8
 3769 0048 1044     		add	r0, r0, r2
 3770 004a FFF7FEFF 		bl	vListInsertEnd
 3771              	.LVL339:
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3772              		.loc 1 3185 0 is_stmt 1 discriminator 3
 3773 004e E26A     		ldr	r2, [r4, #44]
 3774 0050 0B4B     		ldr	r3, .L377+12
 3775 0052 1B68     		ldr	r3, [r3]
 3776 0054 DB6A     		ldr	r3, [r3, #44]
 3777 0056 9A42     		cmp	r2, r3
 3778 0058 02D9     		bls	.L368
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3779              		.loc 1 3191 0
 3780 005a 0122     		movs	r2, #1
 3781 005c 094B     		ldr	r3, .L377+16
 3782 005e 1A60     		str	r2, [r3]
 3783              	.L368:
 3784 0060 38BD     		pop	{r3, r4, r5, pc}
 3785              	.LVL340:
 3786              	.L376:
 3787              	.LBB204:
 3788              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3789              		.loc 2 195 0
 3790              		.syntax unified
 3791              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3792 0062 4FF05003 			mov r3, #80												
 3793 0066 83F31188 		msr basepri, r3											
 3794 006a BFF36F8F 		isb														
 3795 006e BFF34F8F 		dsb														
 3796              	
 3797              	@ 0 "" 2
 3798              	.LVL341:
 3799              		.thumb
 3800              		.syntax unified
 3801              	.L372:
 3802 0072 FEE7     		b	.L372
 3803              	.L378:
 3804              		.align	2
 3805              	.L377:
 3806 0074 00000000 		.word	.LANCHOR16
 3807 0078 00000000 		.word	.LANCHOR13
 3808 007c 00000000 		.word	.LANCHOR4
 3809 0080 00000000 		.word	.LANCHOR10
 3810 0084 00000000 		.word	.LANCHOR19
 3811              	.LBE205:
 3812              	.LBE204:
 3813              		.cfi_endproc
 3814              	.LFE34:
 3816              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3817              		.align	1
ARM GAS  /tmp/ccL3CtUt.s 			page 169


 3818              		.global	vTaskSetTimeOutState
 3819              		.syntax unified
 3820              		.thumb
 3821              		.thumb_func
 3822              		.fpu fpv4-sp-d16
 3824              	vTaskSetTimeOutState:
 3825              	.LFB35:
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3826              		.loc 1 3197 0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 3830              	.LVL342:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3831              		.loc 1 3198 0
 3832 0000 40B9     		cbnz	r0, .L380
 3833              	.LBB206:
 3834              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3835              		.loc 2 195 0
 3836              		.syntax unified
 3837              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3838 0002 4FF05003 			mov r3, #80												
 3839 0006 83F31188 		msr basepri, r3											
 3840 000a BFF36F8F 		isb														
 3841 000e BFF34F8F 		dsb														
 3842              	
 3843              	@ 0 "" 2
 3844              	.LVL343:
 3845              		.thumb
 3846              		.syntax unified
 3847              	.L381:
 3848 0012 FEE7     		b	.L381
 3849              	.L380:
 3850              	.LBE207:
 3851              	.LBE206:
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3852              		.loc 1 3197 0
 3853 0014 10B5     		push	{r4, lr}
 3854              		.cfi_def_cfa_offset 8
 3855              		.cfi_offset 4, -8
 3856              		.cfi_offset 14, -4
 3857 0016 0446     		mov	r4, r0
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3858              		.loc 1 3199 0
 3859 0018 FFF7FEFF 		bl	vPortEnterCritical
 3860              	.LVL344:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3861              		.loc 1 3201 0
 3862 001c 044B     		ldr	r3, .L384
 3863 001e 1B68     		ldr	r3, [r3]
 3864 0020 2360     		str	r3, [r4]
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3865              		.loc 1 3202 0
 3866 0022 044B     		ldr	r3, .L384+4
 3867 0024 1B68     		ldr	r3, [r3]
 3868 0026 6360     		str	r3, [r4, #4]
ARM GAS  /tmp/ccL3CtUt.s 			page 170


3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3869              		.loc 1 3204 0
 3870 0028 FFF7FEFF 		bl	vPortExitCritical
 3871              	.LVL345:
 3872 002c 10BD     		pop	{r4, pc}
 3873              	.LVL346:
 3874              	.L385:
 3875 002e 00BF     		.align	2
 3876              	.L384:
 3877 0030 00000000 		.word	.LANCHOR17
 3878 0034 00000000 		.word	.LANCHOR15
 3879              		.cfi_endproc
 3880              	.LFE35:
 3882              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3883              		.align	1
 3884              		.global	vTaskInternalSetTimeOutState
 3885              		.syntax unified
 3886              		.thumb
 3887              		.thumb_func
 3888              		.fpu fpv4-sp-d16
 3890              	vTaskInternalSetTimeOutState:
 3891              	.LFB36:
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3892              		.loc 1 3209 0
 3893              		.cfi_startproc
 3894              		@ args = 0, pretend = 0, frame = 0
 3895              		@ frame_needed = 0, uses_anonymous_args = 0
 3896              		@ link register save eliminated.
 3897              	.LVL347:
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3898              		.loc 1 3211 0
 3899 0000 034B     		ldr	r3, .L387
 3900 0002 1B68     		ldr	r3, [r3]
 3901 0004 0360     		str	r3, [r0]
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3902              		.loc 1 3212 0
 3903 0006 034B     		ldr	r3, .L387+4
 3904 0008 1B68     		ldr	r3, [r3]
 3905 000a 4360     		str	r3, [r0, #4]
 3906 000c 7047     		bx	lr
 3907              	.L388:
 3908 000e 00BF     		.align	2
 3909              	.L387:
 3910 0010 00000000 		.word	.LANCHOR17
 3911 0014 00000000 		.word	.LANCHOR15
 3912              		.cfi_endproc
 3913              	.LFE36:
 3915              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3916              		.align	1
 3917              		.global	xTaskCheckForTimeOut
 3918              		.syntax unified
 3919              		.thumb
 3920              		.thumb_func
 3921              		.fpu fpv4-sp-d16
 3923              	xTaskCheckForTimeOut:
 3924              	.LFB37:
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
ARM GAS  /tmp/ccL3CtUt.s 			page 171


 3925              		.loc 1 3217 0
 3926              		.cfi_startproc
 3927              		@ args = 0, pretend = 0, frame = 0
 3928              		@ frame_needed = 0, uses_anonymous_args = 0
 3929              	.LVL348:
 3930 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3931              		.cfi_def_cfa_offset 24
 3932              		.cfi_offset 3, -24
 3933              		.cfi_offset 4, -20
 3934              		.cfi_offset 5, -16
 3935              		.cfi_offset 6, -12
 3936              		.cfi_offset 7, -8
 3937              		.cfi_offset 14, -4
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3938              		.loc 1 3220 0
 3939 0002 E0B1     		cbz	r0, .L400
 3940 0004 0546     		mov	r5, r0
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3941              		.loc 1 3221 0
 3942 0006 19B3     		cbz	r1, .L401
 3943 0008 0C46     		mov	r4, r1
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3944              		.loc 1 3223 0
 3945 000a FFF7FEFF 		bl	vPortEnterCritical
 3946              	.LVL349:
 3947              	.LBB208:
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3948              		.loc 1 3226 0
 3949 000e 1A4B     		ldr	r3, .L403
 3950 0010 1868     		ldr	r0, [r3]
 3951              	.LVL350:
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3952              		.loc 1 3227 0
 3953 0012 6968     		ldr	r1, [r5, #4]
 3954 0014 421A     		subs	r2, r0, r1
 3955              	.LVL351:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3956              		.loc 1 3241 0
 3957 0016 2368     		ldr	r3, [r4]
 3958 0018 B3F1FF3F 		cmp	r3, #-1
 3959 001c 28D0     		beq	.L397
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3960              		.loc 1 3251 0
 3961 001e 2F68     		ldr	r7, [r5]
 3962 0020 164E     		ldr	r6, .L403+4
 3963 0022 3668     		ldr	r6, [r6]
 3964 0024 B742     		cmp	r7, r6
 3965 0026 01D0     		beq	.L395
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3966              		.loc 1 3251 0 is_stmt 0 discriminator 1
 3967 0028 8842     		cmp	r0, r1
 3968 002a 23D2     		bcs	.L398
 3969              	.L395:
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3970              		.loc 1 3260 0 is_stmt 1
 3971 002c 9A42     		cmp	r2, r3
 3972 002e 18D3     		bcc	.L402
ARM GAS  /tmp/ccL3CtUt.s 			page 172


3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3973              		.loc 1 3269 0
 3974 0030 0023     		movs	r3, #0
 3975 0032 2360     		str	r3, [r4]
 3976              	.LVL352:
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3977              		.loc 1 3270 0
 3978 0034 0124     		movs	r4, #1
 3979              	.LVL353:
 3980              	.L394:
 3981              	.LBE208:
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3982              		.loc 1 3273 0
 3983 0036 FFF7FEFF 		bl	vPortExitCritical
 3984              	.LVL354:
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3985              		.loc 1 3276 0
 3986 003a 2046     		mov	r0, r4
 3987 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3988              	.LVL355:
 3989              	.L400:
 3990              	.LBB209:
 3991              	.LBB210:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3992              		.loc 2 195 0
 3993              		.syntax unified
 3994              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3995 003e 4FF05003 			mov r3, #80												
 3996 0042 83F31188 		msr basepri, r3											
 3997 0046 BFF36F8F 		isb														
 3998 004a BFF34F8F 		dsb														
 3999              	
 4000              	@ 0 "" 2
 4001              	.LVL356:
 4002              		.thumb
 4003              		.syntax unified
 4004              	.L391:
 4005 004e FEE7     		b	.L391
 4006              	.L401:
 4007              	.LBE210:
 4008              	.LBE209:
 4009              	.LBB211:
 4010              	.LBB212:
 4011              		.syntax unified
 4012              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4013 0050 4FF05003 			mov r3, #80												
 4014 0054 83F31188 		msr basepri, r3											
 4015 0058 BFF36F8F 		isb														
 4016 005c BFF34F8F 		dsb														
 4017              	
 4018              	@ 0 "" 2
 4019              	.LVL357:
 4020              		.thumb
 4021              		.syntax unified
 4022              	.L393:
 4023 0060 FEE7     		b	.L393
 4024              	.LVL358:
ARM GAS  /tmp/ccL3CtUt.s 			page 173


 4025              	.L402:
 4026              	.LBE212:
 4027              	.LBE211:
 4028              	.LBB213:
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4029              		.loc 1 3263 0
 4030 0062 9B1A     		subs	r3, r3, r2
 4031 0064 2360     		str	r3, [r4]
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4032              		.loc 1 3264 0
 4033 0066 2846     		mov	r0, r5
 4034              	.LVL359:
 4035 0068 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 4036              	.LVL360:
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4037              		.loc 1 3265 0
 4038 006c 0024     		movs	r4, #0
 4039              	.LVL361:
 4040 006e E2E7     		b	.L394
 4041              	.LVL362:
 4042              	.L397:
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4043              		.loc 1 3246 0
 4044 0070 0024     		movs	r4, #0
 4045              	.LVL363:
 4046 0072 E0E7     		b	.L394
 4047              	.LVL364:
 4048              	.L398:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4049              		.loc 1 3258 0
 4050 0074 0124     		movs	r4, #1
 4051              	.LVL365:
 4052 0076 DEE7     		b	.L394
 4053              	.L404:
 4054              		.align	2
 4055              	.L403:
 4056 0078 00000000 		.word	.LANCHOR15
 4057 007c 00000000 		.word	.LANCHOR17
 4058              	.LBE213:
 4059              		.cfi_endproc
 4060              	.LFE37:
 4062              		.section	.text.vTaskMissedYield,"ax",%progbits
 4063              		.align	1
 4064              		.global	vTaskMissedYield
 4065              		.syntax unified
 4066              		.thumb
 4067              		.thumb_func
 4068              		.fpu fpv4-sp-d16
 4070              	vTaskMissedYield:
 4071              	.LFB38:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4072              		.loc 1 3280 0
 4073              		.cfi_startproc
 4074              		@ args = 0, pretend = 0, frame = 0
 4075              		@ frame_needed = 0, uses_anonymous_args = 0
 4076              		@ link register save eliminated.
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccL3CtUt.s 			page 174


 4077              		.loc 1 3281 0
 4078 0000 0122     		movs	r2, #1
 4079 0002 014B     		ldr	r3, .L406
 4080 0004 1A60     		str	r2, [r3]
 4081 0006 7047     		bx	lr
 4082              	.L407:
 4083              		.align	2
 4084              	.L406:
 4085 0008 00000000 		.word	.LANCHOR19
 4086              		.cfi_endproc
 4087              	.LFE38:
 4089              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4090              		.align	1
 4091              		.global	uxTaskGetTaskNumber
 4092              		.syntax unified
 4093              		.thumb
 4094              		.thumb_func
 4095              		.fpu fpv4-sp-d16
 4097              	uxTaskGetTaskNumber:
 4098              	.LFB39:
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4099              		.loc 1 3288 0
 4100              		.cfi_startproc
 4101              		@ args = 0, pretend = 0, frame = 0
 4102              		@ frame_needed = 0, uses_anonymous_args = 0
 4103              		@ link register save eliminated.
 4104              	.LVL366:
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4105              		.loc 1 3292 0
 4106 0000 08B1     		cbz	r0, .L410
 4107              	.LVL367:
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4108              		.loc 1 3295 0
 4109 0002 806C     		ldr	r0, [r0, #72]
 4110              	.LVL368:
 4111 0004 7047     		bx	lr
 4112              	.LVL369:
 4113              	.L410:
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4114              		.loc 1 3299 0
 4115 0006 0020     		movs	r0, #0
 4116              	.LVL370:
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4117              		.loc 1 3303 0
 4118 0008 7047     		bx	lr
 4119              		.cfi_endproc
 4120              	.LFE39:
 4122              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4123              		.align	1
 4124              		.global	vTaskSetTaskNumber
 4125              		.syntax unified
 4126              		.thumb
 4127              		.thumb_func
 4128              		.fpu fpv4-sp-d16
 4130              	vTaskSetTaskNumber:
 4131              	.LFB40:
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
ARM GAS  /tmp/ccL3CtUt.s 			page 175


 4132              		.loc 1 3311 0
 4133              		.cfi_startproc
 4134              		@ args = 0, pretend = 0, frame = 0
 4135              		@ frame_needed = 0, uses_anonymous_args = 0
 4136              		@ link register save eliminated.
 4137              	.LVL371:
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4138              		.loc 1 3314 0
 4139 0000 00B1     		cbz	r0, .L411
 4140              	.LVL372:
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4141              		.loc 1 3317 0
 4142 0002 8164     		str	r1, [r0, #72]
 4143              	.LVL373:
 4144              	.L411:
 4145 0004 7047     		bx	lr
 4146              		.cfi_endproc
 4147              	.LFE40:
 4149              		.section	.text.vTaskGetInfo,"ax",%progbits
 4150              		.align	1
 4151              		.global	vTaskGetInfo
 4152              		.syntax unified
 4153              		.thumb
 4154              		.thumb_func
 4155              		.fpu fpv4-sp-d16
 4157              	vTaskGetInfo:
 4158              	.LFB44:
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4159              		.loc 1 3610 0
 4160              		.cfi_startproc
 4161              		@ args = 0, pretend = 0, frame = 0
 4162              		@ frame_needed = 0, uses_anonymous_args = 0
 4163              	.LVL374:
 4164 0000 70B5     		push	{r4, r5, r6, lr}
 4165              		.cfi_def_cfa_offset 16
 4166              		.cfi_offset 4, -16
 4167              		.cfi_offset 5, -12
 4168              		.cfi_offset 6, -8
 4169              		.cfi_offset 14, -4
 4170 0002 0C46     		mov	r4, r1
 4171 0004 1646     		mov	r6, r2
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4172              		.loc 1 3614 0
 4173 0006 0546     		mov	r5, r0
 4174 0008 D0B1     		cbz	r0, .L422
 4175              	.LVL375:
 4176              	.L414:
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4177              		.loc 1 3616 0 discriminator 4
 4178 000a 2560     		str	r5, [r4]
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4179              		.loc 1 3617 0 discriminator 4
 4180 000c 05F13402 		add	r2, r5, #52
 4181 0010 6260     		str	r2, [r4, #4]
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4182              		.loc 1 3618 0 discriminator 4
 4183 0012 EA6A     		ldr	r2, [r5, #44]
ARM GAS  /tmp/ccL3CtUt.s 			page 176


 4184 0014 2261     		str	r2, [r4, #16]
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4185              		.loc 1 3619 0 discriminator 4
 4186 0016 2A6B     		ldr	r2, [r5, #48]
 4187 0018 E261     		str	r2, [r4, #28]
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4188              		.loc 1 3620 0 discriminator 4
 4189 001a 6A6C     		ldr	r2, [r5, #68]
 4190 001c A260     		str	r2, [r4, #8]
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4191              		.loc 1 3624 0 discriminator 4
 4192 001e EA6C     		ldr	r2, [r5, #76]
 4193 0020 6261     		str	r2, [r4, #20]
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4194              		.loc 1 3638 0 discriminator 4
 4195 0022 0022     		movs	r2, #0
 4196 0024 A261     		str	r2, [r4, #24]
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4197              		.loc 1 3645 0 discriminator 4
 4198 0026 052B     		cmp	r3, #5
 4199 0028 19D0     		beq	.L415
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4200              		.loc 1 3647 0
 4201 002a 124A     		ldr	r2, .L426
 4202 002c 1268     		ldr	r2, [r2]
 4203 002e 9542     		cmp	r5, r2
 4204 0030 09D0     		beq	.L423
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4205              		.loc 1 3653 0
 4206 0032 2373     		strb	r3, [r4, #12]
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4207              		.loc 1 3660 0
 4208 0034 032B     		cmp	r3, #3
 4209 0036 09D0     		beq	.L424
 4210              	.LVL376:
 4211              	.L417:
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4212              		.loc 1 3682 0
 4213 0038 B6B9     		cbnz	r6, .L425
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4214              		.loc 1 3696 0
 4215 003a 0023     		movs	r3, #0
 4216 003c 2384     		strh	r3, [r4, #32]	@ movhi
 4217 003e 70BD     		pop	{r4, r5, r6, pc}
 4218              	.LVL377:
 4219              	.L422:
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4220              		.loc 1 3614 0 discriminator 1
 4221 0040 0C4A     		ldr	r2, .L426
 4222              	.LVL378:
 4223 0042 1568     		ldr	r5, [r2]
 4224              	.LVL379:
 4225 0044 E1E7     		b	.L414
 4226              	.LVL380:
 4227              	.L423:
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4228              		.loc 1 3649 0
ARM GAS  /tmp/ccL3CtUt.s 			page 177


 4229 0046 0023     		movs	r3, #0
 4230              	.LVL381:
 4231 0048 2373     		strb	r3, [r4, #12]
 4232 004a F5E7     		b	.L417
 4233              	.LVL382:
 4234              	.L424:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4235              		.loc 1 3662 0
 4236 004c FFF7FEFF 		bl	vTaskSuspendAll
 4237              	.LVL383:
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4238              		.loc 1 3664 0
 4239 0050 AB6A     		ldr	r3, [r5, #40]
 4240 0052 0BB1     		cbz	r3, .L418
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 4241              		.loc 1 3666 0
 4242 0054 0223     		movs	r3, #2
 4243 0056 2373     		strb	r3, [r4, #12]
 4244              	.L418:
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4245              		.loc 1 3669 0
 4246 0058 FFF7FEFF 		bl	xTaskResumeAll
 4247              	.LVL384:
 4248 005c ECE7     		b	.L417
 4249              	.LVL385:
 4250              	.L415:
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4251              		.loc 1 3677 0
 4252 005e 2846     		mov	r0, r5
 4253 0060 FFF7FEFF 		bl	eTaskGetState
 4254              	.LVL386:
 4255 0064 2073     		strb	r0, [r4, #12]
 4256 0066 E7E7     		b	.L417
 4257              	.L425:
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4258              		.loc 1 3690 0
 4259 0068 286B     		ldr	r0, [r5, #48]
 4260 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4261              	.LVL387:
 4262 006e 2084     		strh	r0, [r4, #32]	@ movhi
 4263 0070 70BD     		pop	{r4, r5, r6, pc}
 4264              	.LVL388:
 4265              	.L427:
 4266 0072 00BF     		.align	2
 4267              	.L426:
 4268 0074 00000000 		.word	.LANCHOR10
 4269              		.cfi_endproc
 4270              	.LFE44:
 4272              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4273              		.align	1
 4274              		.syntax unified
 4275              		.thumb
 4276              		.thumb_func
 4277              		.fpu fpv4-sp-d16
 4279              	prvListTasksWithinSingleList:
 4280              	.LFB45:
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
ARM GAS  /tmp/ccL3CtUt.s 			page 178


 4281              		.loc 1 3706 0
 4282              		.cfi_startproc
 4283              		@ args = 0, pretend = 0, frame = 0
 4284              		@ frame_needed = 0, uses_anonymous_args = 0
 4285              	.LVL389:
 4286 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4287              		.cfi_def_cfa_offset 32
 4288              		.cfi_offset 4, -32
 4289              		.cfi_offset 5, -28
 4290              		.cfi_offset 6, -24
 4291              		.cfi_offset 7, -20
 4292              		.cfi_offset 8, -16
 4293              		.cfi_offset 9, -12
 4294              		.cfi_offset 10, -8
 4295              		.cfi_offset 14, -4
 4296              	.LVL390:
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4297              		.loc 1 3710 0
 4298 0004 0B68     		ldr	r3, [r1]
 4299 0006 3BB3     		cbz	r3, .L433
 4300              	.LVL391:
 4301              	.LBB214:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4302              		.loc 1 3712 0
 4303 0008 4B68     		ldr	r3, [r1, #4]
 4304 000a 5B68     		ldr	r3, [r3, #4]
 4305 000c 4B60     		str	r3, [r1, #4]
 4306 000e 01F10809 		add	r9, r1, #8
 4307 0012 4B45     		cmp	r3, r9
 4308 0014 07D0     		beq	.L435
 4309              	.L430:
 4310 0016 9046     		mov	r8, r2
 4311 0018 0D46     		mov	r5, r1
 4312 001a 0746     		mov	r7, r0
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4313              		.loc 1 3712 0 is_stmt 0 discriminator 3
 4314 001c 4B68     		ldr	r3, [r1, #4]
 4315 001e D3F80CA0 		ldr	r10, [r3, #12]
 4316              	.LVL392:
 4317              	.LBE214:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4318              		.loc 1 3708 0 is_stmt 1 discriminator 3
 4319 0022 0024     		movs	r4, #0
 4320 0024 10E0     		b	.L432
 4321              	.LVL393:
 4322              	.L435:
 4323              	.LBB215:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4324              		.loc 1 3712 0 discriminator 1
 4325 0026 5B68     		ldr	r3, [r3, #4]
 4326 0028 4B60     		str	r3, [r1, #4]
 4327 002a F4E7     		b	.L430
 4328              	.LVL394:
 4329              	.L431:
 4330              	.LBE215:
 4331              	.LBB216:
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
ARM GAS  /tmp/ccL3CtUt.s 			page 179


 4332              		.loc 1 3720 0 discriminator 3
 4333 002c 6B68     		ldr	r3, [r5, #4]
 4334 002e DE68     		ldr	r6, [r3, #12]
 4335              	.LVL395:
 4336              	.LBE216:
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4337              		.loc 1 3721 0 discriminator 3
 4338 0030 04EBC403 		add	r3, r4, r4, lsl #3
 4339 0034 9900     		lsls	r1, r3, #2
 4340 0036 4346     		mov	r3, r8
 4341 0038 0122     		movs	r2, #1
 4342 003a 3944     		add	r1, r1, r7
 4343 003c 3046     		mov	r0, r6
 4344 003e FFF7FEFF 		bl	vTaskGetInfo
 4345              	.LVL396:
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4346              		.loc 1 3722 0 discriminator 3
 4347 0042 0134     		adds	r4, r4, #1
 4348              	.LVL397:
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4349              		.loc 1 3723 0 discriminator 3
 4350 0044 B245     		cmp	r10, r6
 4351 0046 08D0     		beq	.L428
 4352              	.LVL398:
 4353              	.L432:
 4354              	.LBB217:
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4355              		.loc 1 3720 0
 4356 0048 6B68     		ldr	r3, [r5, #4]
 4357 004a 5B68     		ldr	r3, [r3, #4]
 4358 004c 6B60     		str	r3, [r5, #4]
 4359 004e 9945     		cmp	r9, r3
 4360 0050 ECD1     		bne	.L431
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4361              		.loc 1 3720 0 is_stmt 0 discriminator 1
 4362 0052 5B68     		ldr	r3, [r3, #4]
 4363 0054 6B60     		str	r3, [r5, #4]
 4364 0056 E9E7     		b	.L431
 4365              	.LVL399:
 4366              	.L433:
 4367              	.LBE217:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4368              		.loc 1 3708 0 is_stmt 1
 4369 0058 0024     		movs	r4, #0
 4370              	.LVL400:
 4371              	.L428:
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4372              		.loc 1 3731 0
 4373 005a 2046     		mov	r0, r4
 4374 005c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4375              		.cfi_endproc
 4376              	.LFE45:
 4378              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4379              		.align	1
 4380              		.global	uxTaskGetSystemState
 4381              		.syntax unified
 4382              		.thumb
ARM GAS  /tmp/ccL3CtUt.s 			page 180


 4383              		.thumb_func
 4384              		.fpu fpv4-sp-d16
 4386              	uxTaskGetSystemState:
 4387              	.LFB27:
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4388              		.loc 1 2486 0
 4389              		.cfi_startproc
 4390              		@ args = 0, pretend = 0, frame = 0
 4391              		@ frame_needed = 0, uses_anonymous_args = 0
 4392              	.LVL401:
 4393 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4394              		.cfi_def_cfa_offset 24
 4395              		.cfi_offset 3, -24
 4396              		.cfi_offset 4, -20
 4397              		.cfi_offset 5, -16
 4398              		.cfi_offset 6, -12
 4399              		.cfi_offset 7, -8
 4400              		.cfi_offset 14, -4
 4401 0002 0746     		mov	r7, r0
 4402 0004 0C46     		mov	r4, r1
 4403 0006 1646     		mov	r6, r2
 4404              	.LVL402:
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4405              		.loc 1 2489 0
 4406 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4407              	.LVL403:
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4408              		.loc 1 2492 0
 4409 000c 224B     		ldr	r3, .L441
 4410 000e 1B68     		ldr	r3, [r3]
 4411 0010 A342     		cmp	r3, r4
 4412 0012 3ED8     		bhi	.L439
 4413 0014 3824     		movs	r4, #56
 4414              	.LVL404:
 4415 0016 0025     		movs	r5, #0
 4416              	.LVL405:
 4417              	.L438:
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4418              		.loc 1 2498 0 discriminator 1
 4419 0018 013C     		subs	r4, r4, #1
 4420              	.LVL406:
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4421              		.loc 1 2499 0 discriminator 1
 4422 001a 05EBC503 		add	r3, r5, r5, lsl #3
 4423 001e 9800     		lsls	r0, r3, #2
 4424 0020 04EB8402 		add	r2, r4, r4, lsl #2
 4425 0024 9300     		lsls	r3, r2, #2
 4426 0026 0122     		movs	r2, #1
 4427 0028 1C49     		ldr	r1, .L441+4
 4428 002a 1944     		add	r1, r1, r3
 4429 002c 3844     		add	r0, r0, r7
 4430 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4431              	.LVL407:
 4432 0032 0544     		add	r5, r5, r0
 4433              	.LVL408:
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4434              		.loc 1 2501 0 discriminator 1
ARM GAS  /tmp/ccL3CtUt.s 			page 181


 4435 0034 002C     		cmp	r4, #0
 4436 0036 EFD1     		bne	.L438
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4437              		.loc 1 2505 0
 4438 0038 05EBC503 		add	r3, r5, r5, lsl #3
 4439 003c 9800     		lsls	r0, r3, #2
 4440 003e 184B     		ldr	r3, .L441+8
 4441 0040 1968     		ldr	r1, [r3]
 4442 0042 0222     		movs	r2, #2
 4443 0044 3844     		add	r0, r0, r7
 4444 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4445              	.LVL409:
 4446 004a 2C18     		adds	r4, r5, r0
 4447              	.LVL410:
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4448              		.loc 1 2506 0
 4449 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4450 0050 9800     		lsls	r0, r3, #2
 4451 0052 144B     		ldr	r3, .L441+12
 4452 0054 1968     		ldr	r1, [r3]
 4453 0056 0222     		movs	r2, #2
 4454 0058 3844     		add	r0, r0, r7
 4455 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4456              	.LVL411:
 4457 005e 0444     		add	r4, r4, r0
 4458              	.LVL412:
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4459              		.loc 1 2512 0
 4460 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4461 0064 9800     		lsls	r0, r3, #2
 4462 0066 0422     		movs	r2, #4
 4463 0068 0F49     		ldr	r1, .L441+16
 4464 006a 3844     		add	r0, r0, r7
 4465 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4466              	.LVL413:
 4467 0070 0444     		add	r4, r4, r0
 4468              	.LVL414:
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4469              		.loc 1 2520 0
 4470 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4471 0076 9800     		lsls	r0, r3, #2
 4472 0078 0322     		movs	r2, #3
 4473 007a 0C49     		ldr	r1, .L441+20
 4474 007c 3844     		add	r0, r0, r7
 4475 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4476              	.LVL415:
 4477 0082 0444     		add	r4, r4, r0
 4478              	.LVL416:
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4479              		.loc 1 2537 0
 4480 0084 0EB1     		cbz	r6, .L437
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4481              		.loc 1 2539 0
 4482 0086 0023     		movs	r3, #0
 4483 0088 3360     		str	r3, [r6]
 4484              	.LVL417:
 4485              	.L437:
ARM GAS  /tmp/ccL3CtUt.s 			page 182


2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4486              		.loc 1 2549 0
 4487 008a FFF7FEFF 		bl	xTaskResumeAll
 4488              	.LVL418:
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4489              		.loc 1 2552 0
 4490 008e 2046     		mov	r0, r4
 4491 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4492              	.LVL419:
 4493              	.L439:
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4494              		.loc 1 2487 0
 4495 0092 0024     		movs	r4, #0
 4496              	.LVL420:
 4497 0094 F9E7     		b	.L437
 4498              	.L442:
 4499 0096 00BF     		.align	2
 4500              	.L441:
 4501 0098 00000000 		.word	.LANCHOR9
 4502 009c 00000000 		.word	.LANCHOR4
 4503 00a0 00000000 		.word	.LANCHOR2
 4504 00a4 00000000 		.word	.LANCHOR8
 4505 00a8 00000000 		.word	.LANCHOR7
 4506 00ac 00000000 		.word	.LANCHOR0
 4507              		.cfi_endproc
 4508              	.LFE27:
 4510              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4511              		.align	1
 4512              		.global	uxTaskGetStackHighWaterMark
 4513              		.syntax unified
 4514              		.thumb
 4515              		.thumb_func
 4516              		.fpu fpv4-sp-d16
 4518              	uxTaskGetStackHighWaterMark:
 4519              	.LFB47:
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4520              		.loc 1 3799 0
 4521              		.cfi_startproc
 4522              		@ args = 0, pretend = 0, frame = 0
 4523              		@ frame_needed = 0, uses_anonymous_args = 0
 4524              	.LVL421:
 4525 0000 08B5     		push	{r3, lr}
 4526              		.cfi_def_cfa_offset 8
 4527              		.cfi_offset 3, -8
 4528              		.cfi_offset 14, -4
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4529              		.loc 1 3804 0
 4530 0002 0346     		mov	r3, r0
 4531 0004 18B1     		cbz	r0, .L446
 4532              	.LVL422:
 4533              	.L444:
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4534              		.loc 1 3816 0 discriminator 4
 4535 0006 186B     		ldr	r0, [r3, #48]
 4536 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4537              	.LVL423:
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 183


 4538              		.loc 1 3819 0 discriminator 4
 4539 000c 08BD     		pop	{r3, pc}
 4540              	.LVL424:
 4541              	.L446:
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4542              		.loc 1 3804 0 discriminator 1
 4543 000e 014B     		ldr	r3, .L447
 4544 0010 1B68     		ldr	r3, [r3]
 4545              	.LVL425:
 4546 0012 F8E7     		b	.L444
 4547              	.L448:
 4548              		.align	2
 4549              	.L447:
 4550 0014 00000000 		.word	.LANCHOR10
 4551              		.cfi_endproc
 4552              	.LFE47:
 4554              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4555              		.align	1
 4556              		.global	xTaskGetCurrentTaskHandle
 4557              		.syntax unified
 4558              		.thumb
 4559              		.thumb_func
 4560              		.fpu fpv4-sp-d16
 4562              	xTaskGetCurrentTaskHandle:
 4563              	.LFB50:
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4564              		.loc 1 3907 0
 4565              		.cfi_startproc
 4566              		@ args = 0, pretend = 0, frame = 0
 4567              		@ frame_needed = 0, uses_anonymous_args = 0
 4568              		@ link register save eliminated.
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4569              		.loc 1 3913 0
 4570 0000 014B     		ldr	r3, .L450
 4571 0002 1868     		ldr	r0, [r3]
 4572              	.LVL426:
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4573              		.loc 1 3916 0
 4574 0004 7047     		bx	lr
 4575              	.L451:
 4576 0006 00BF     		.align	2
 4577              	.L450:
 4578 0008 00000000 		.word	.LANCHOR10
 4579              		.cfi_endproc
 4580              	.LFE50:
 4582              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4583              		.align	1
 4584              		.global	xTaskGetSchedulerState
 4585              		.syntax unified
 4586              		.thumb
 4587              		.thumb_func
 4588              		.fpu fpv4-sp-d16
 4590              	xTaskGetSchedulerState:
 4591              	.LFB51:
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4592              		.loc 1 3924 0
 4593              		.cfi_startproc
ARM GAS  /tmp/ccL3CtUt.s 			page 184


 4594              		@ args = 0, pretend = 0, frame = 0
 4595              		@ frame_needed = 0, uses_anonymous_args = 0
 4596              		@ link register save eliminated.
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4597              		.loc 1 3927 0
 4598 0000 054B     		ldr	r3, .L456
 4599 0002 1B68     		ldr	r3, [r3]
 4600 0004 23B1     		cbz	r3, .L454
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4601              		.loc 1 3933 0
 4602 0006 054B     		ldr	r3, .L456+4
 4603 0008 1B68     		ldr	r3, [r3]
 4604 000a 1BB9     		cbnz	r3, .L455
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4605              		.loc 1 3935 0
 4606 000c 0220     		movs	r0, #2
 4607 000e 7047     		bx	lr
 4608              	.L454:
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4609              		.loc 1 3929 0
 4610 0010 0120     		movs	r0, #1
 4611 0012 7047     		bx	lr
 4612              	.L455:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4613              		.loc 1 3939 0
 4614 0014 0020     		movs	r0, #0
 4615              	.LVL427:
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4616              		.loc 1 3944 0
 4617 0016 7047     		bx	lr
 4618              	.L457:
 4619              		.align	2
 4620              	.L456:
 4621 0018 00000000 		.word	.LANCHOR11
 4622 001c 00000000 		.word	.LANCHOR16
 4623              		.cfi_endproc
 4624              	.LFE51:
 4626              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4627              		.align	1
 4628              		.global	xTaskPriorityInherit
 4629              		.syntax unified
 4630              		.thumb
 4631              		.thumb_func
 4632              		.fpu fpv4-sp-d16
 4634              	xTaskPriorityInherit:
 4635              	.LFB52:
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 4636              		.loc 1 3952 0
 4637              		.cfi_startproc
 4638              		@ args = 0, pretend = 0, frame = 0
 4639              		@ frame_needed = 0, uses_anonymous_args = 0
 4640              	.LVL428:
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4641              		.loc 1 3959 0
 4642 0000 0028     		cmp	r0, #0
 4643 0002 40D0     		beq	.L464
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
ARM GAS  /tmp/ccL3CtUt.s 			page 185


 4644              		.loc 1 3952 0
 4645 0004 38B5     		push	{r3, r4, r5, lr}
 4646              		.cfi_def_cfa_offset 16
 4647              		.cfi_offset 3, -16
 4648              		.cfi_offset 4, -12
 4649              		.cfi_offset 5, -8
 4650              		.cfi_offset 14, -4
 4651 0006 0546     		mov	r5, r0
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4652              		.loc 1 3964 0
 4653 0008 C26A     		ldr	r2, [r0, #44]
 4654 000a 2049     		ldr	r1, .L472
 4655 000c 0968     		ldr	r1, [r1]
 4656 000e C96A     		ldr	r1, [r1, #44]
 4657 0010 8A42     		cmp	r2, r1
 4658 0012 2ED2     		bcs	.L460
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4659              		.loc 1 3969 0
 4660 0014 8169     		ldr	r1, [r0, #24]
 4661 0016 0029     		cmp	r1, #0
 4662 0018 05DB     		blt	.L461
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4663              		.loc 1 3971 0
 4664 001a 1C49     		ldr	r1, .L472
 4665 001c 0968     		ldr	r1, [r1]
 4666 001e C96A     		ldr	r1, [r1, #44]
 4667 0020 C1F13801 		rsb	r1, r1, #56
 4668 0024 8161     		str	r1, [r0, #24]
 4669              	.L461:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4670              		.loc 1 3980 0
 4671 0026 6869     		ldr	r0, [r5, #20]
 4672              	.LVL429:
 4673 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4674 002c 9100     		lsls	r1, r2, #2
 4675 002e 184A     		ldr	r2, .L472+4
 4676 0030 0A44     		add	r2, r2, r1
 4677 0032 9042     		cmp	r0, r2
 4678 0034 05D0     		beq	.L470
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4679              		.loc 1 3998 0
 4680 0036 154A     		ldr	r2, .L472
 4681 0038 1268     		ldr	r2, [r2]
 4682 003a D26A     		ldr	r2, [r2, #44]
 4683 003c EA62     		str	r2, [r5, #44]
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4684              		.loc 1 4004 0
 4685 003e 0120     		movs	r0, #1
 4686 0040 38BD     		pop	{r3, r4, r5, pc}
 4687              	.LVL430:
 4688              	.L470:
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4689              		.loc 1 3982 0
 4690 0042 2C1D     		adds	r4, r5, #4
 4691 0044 2046     		mov	r0, r4
 4692 0046 FFF7FEFF 		bl	uxListRemove
 4693              	.LVL431:
ARM GAS  /tmp/ccL3CtUt.s 			page 186


3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4694              		.loc 1 3992 0
 4695 004a 104B     		ldr	r3, .L472
 4696 004c 1B68     		ldr	r3, [r3]
 4697 004e DB6A     		ldr	r3, [r3, #44]
 4698 0050 EB62     		str	r3, [r5, #44]
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4699              		.loc 1 3993 0
 4700 0052 104A     		ldr	r2, .L472+8
 4701 0054 1268     		ldr	r2, [r2]
 4702 0056 9342     		cmp	r3, r2
 4703 0058 01D9     		bls	.L463
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4704              		.loc 1 3993 0 is_stmt 0 discriminator 1
 4705 005a 0E4A     		ldr	r2, .L472+8
 4706 005c 1360     		str	r3, [r2]
 4707              	.L463:
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4708              		.loc 1 3993 0 discriminator 3
 4709 005e 03EB8303 		add	r3, r3, r3, lsl #2
 4710 0062 9A00     		lsls	r2, r3, #2
 4711 0064 2146     		mov	r1, r4
 4712 0066 0A48     		ldr	r0, .L472+4
 4713 0068 1044     		add	r0, r0, r2
 4714 006a FFF7FEFF 		bl	vListInsertEnd
 4715              	.LVL432:
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4716              		.loc 1 4004 0 is_stmt 1 discriminator 3
 4717 006e 0120     		movs	r0, #1
 4718 0070 38BD     		pop	{r3, r4, r5, pc}
 4719              	.LVL433:
 4720              	.L460:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4721              		.loc 1 4008 0
 4722 0072 C26C     		ldr	r2, [r0, #76]
 4723 0074 054B     		ldr	r3, .L472
 4724 0076 1B68     		ldr	r3, [r3]
 4725 0078 DB6A     		ldr	r3, [r3, #44]
 4726 007a 9A42     		cmp	r2, r3
 4727 007c 01D2     		bcs	.L471
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4728              		.loc 1 4017 0
 4729 007e 0120     		movs	r0, #1
 4730              	.LVL434:
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4731              		.loc 1 4031 0
 4732 0080 38BD     		pop	{r3, r4, r5, pc}
 4733              	.LVL435:
 4734              	.L471:
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4735              		.loc 1 3954 0
 4736 0082 0020     		movs	r0, #0
 4737              	.LVL436:
 4738 0084 38BD     		pop	{r3, r4, r5, pc}
 4739              	.LVL437:
 4740              	.L464:
 4741              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccL3CtUt.s 			page 187


 4742              		.cfi_restore 3
 4743              		.cfi_restore 4
 4744              		.cfi_restore 5
 4745              		.cfi_restore 14
 4746 0086 0020     		movs	r0, #0
 4747              	.LVL438:
 4748 0088 7047     		bx	lr
 4749              	.L473:
 4750 008a 00BF     		.align	2
 4751              	.L472:
 4752 008c 00000000 		.word	.LANCHOR10
 4753 0090 00000000 		.word	.LANCHOR4
 4754 0094 00000000 		.word	.LANCHOR13
 4755              		.cfi_endproc
 4756              	.LFE52:
 4758              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4759              		.align	1
 4760              		.global	xTaskPriorityDisinherit
 4761              		.syntax unified
 4762              		.thumb
 4763              		.thumb_func
 4764              		.fpu fpv4-sp-d16
 4766              	xTaskPriorityDisinherit:
 4767              	.LFB53:
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4768              		.loc 1 4039 0
 4769              		.cfi_startproc
 4770              		@ args = 0, pretend = 0, frame = 0
 4771              		@ frame_needed = 0, uses_anonymous_args = 0
 4772              	.LVL439:
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4773              		.loc 1 4043 0
 4774 0000 0028     		cmp	r0, #0
 4775 0002 39D0     		beq	.L481
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4776              		.loc 1 4039 0
 4777 0004 38B5     		push	{r3, r4, r5, lr}
 4778              		.cfi_def_cfa_offset 16
 4779              		.cfi_offset 3, -16
 4780              		.cfi_offset 4, -12
 4781              		.cfi_offset 5, -8
 4782              		.cfi_offset 14, -4
 4783 0006 0446     		mov	r4, r0
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4784              		.loc 1 4049 0
 4785 0008 1E4A     		ldr	r2, .L488
 4786 000a 1268     		ldr	r2, [r2]
 4787 000c 9042     		cmp	r0, r2
 4788 000e 08D0     		beq	.L476
 4789              	.LBB218:
 4790              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4791              		.loc 2 195 0
 4792              		.syntax unified
 4793              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4794 0010 4FF05003 			mov r3, #80												
 4795 0014 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccL3CtUt.s 			page 188


 4796 0018 BFF36F8F 		isb														
 4797 001c BFF34F8F 		dsb														
 4798              	
 4799              	@ 0 "" 2
 4800              	.LVL440:
 4801              		.thumb
 4802              		.syntax unified
 4803              	.L477:
 4804 0020 FEE7     		b	.L477
 4805              	.L476:
 4806              	.LBE219:
 4807              	.LBE218:
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4808              		.loc 1 4050 0
 4809 0022 026D     		ldr	r2, [r0, #80]
 4810 0024 42B9     		cbnz	r2, .L478
 4811              	.LBB220:
 4812              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4813              		.loc 2 195 0
 4814              		.syntax unified
 4815              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4816 0026 4FF05003 			mov r3, #80												
 4817 002a 83F31188 		msr basepri, r3											
 4818 002e BFF36F8F 		isb														
 4819 0032 BFF34F8F 		dsb														
 4820              	
 4821              	@ 0 "" 2
 4822              	.LVL441:
 4823              		.thumb
 4824              		.syntax unified
 4825              	.L479:
 4826 0036 FEE7     		b	.L479
 4827              	.L478:
 4828              	.LBE221:
 4829              	.LBE220:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4830              		.loc 1 4051 0
 4831 0038 013A     		subs	r2, r2, #1
 4832 003a 0265     		str	r2, [r0, #80]
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4833              		.loc 1 4055 0
 4834 003c C06A     		ldr	r0, [r0, #44]
 4835              	.LVL442:
 4836 003e E16C     		ldr	r1, [r4, #76]
 4837 0040 8842     		cmp	r0, r1
 4838 0042 1BD0     		beq	.L482
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4839              		.loc 1 4058 0
 4840 0044 E2B9     		cbnz	r2, .L483
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4841              		.loc 1 4065 0
 4842 0046 251D     		adds	r5, r4, #4
 4843 0048 2846     		mov	r0, r5
 4844 004a FFF7FEFF 		bl	uxListRemove
 4845              	.LVL443:
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 189


 4846              		.loc 1 4077 0
 4847 004e E36C     		ldr	r3, [r4, #76]
 4848 0050 E362     		str	r3, [r4, #44]
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4849              		.loc 1 4082 0
 4850 0052 C3F13802 		rsb	r2, r3, #56
 4851 0056 A261     		str	r2, [r4, #24]
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4852              		.loc 1 4083 0
 4853 0058 0B4A     		ldr	r2, .L488+4
 4854 005a 1268     		ldr	r2, [r2]
 4855 005c 9342     		cmp	r3, r2
 4856 005e 01D9     		bls	.L480
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4857              		.loc 1 4083 0 is_stmt 0 discriminator 1
 4858 0060 094A     		ldr	r2, .L488+4
 4859 0062 1360     		str	r3, [r2]
 4860              	.L480:
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4861              		.loc 1 4083 0 discriminator 3
 4862 0064 03EB8303 		add	r3, r3, r3, lsl #2
 4863 0068 9A00     		lsls	r2, r3, #2
 4864 006a 2946     		mov	r1, r5
 4865 006c 0748     		ldr	r0, .L488+8
 4866 006e 1044     		add	r0, r0, r2
 4867 0070 FFF7FEFF 		bl	vListInsertEnd
 4868              	.LVL444:
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4869              		.loc 1 4093 0 is_stmt 1 discriminator 3
 4870 0074 0120     		movs	r0, #1
 4871 0076 38BD     		pop	{r3, r4, r5, pc}
 4872              	.LVL445:
 4873              	.L481:
 4874              		.cfi_def_cfa_offset 0
 4875              		.cfi_restore 3
 4876              		.cfi_restore 4
 4877              		.cfi_restore 5
 4878              		.cfi_restore 14
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4879              		.loc 1 4041 0
 4880 0078 0020     		movs	r0, #0
 4881              	.LVL446:
 4882 007a 7047     		bx	lr
 4883              	.LVL447:
 4884              	.L482:
 4885              		.cfi_def_cfa_offset 16
 4886              		.cfi_offset 3, -16
 4887              		.cfi_offset 4, -12
 4888              		.cfi_offset 5, -8
 4889              		.cfi_offset 14, -4
 4890 007c 0020     		movs	r0, #0
 4891 007e 38BD     		pop	{r3, r4, r5, pc}
 4892              	.LVL448:
 4893              	.L483:
 4894 0080 0020     		movs	r0, #0
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4895              		.loc 1 4111 0
ARM GAS  /tmp/ccL3CtUt.s 			page 190


 4896 0082 38BD     		pop	{r3, r4, r5, pc}
 4897              	.LVL449:
 4898              	.L489:
 4899              		.align	2
 4900              	.L488:
 4901 0084 00000000 		.word	.LANCHOR10
 4902 0088 00000000 		.word	.LANCHOR13
 4903 008c 00000000 		.word	.LANCHOR4
 4904              		.cfi_endproc
 4905              	.LFE53:
 4907              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4908              		.align	1
 4909              		.global	vTaskPriorityDisinheritAfterTimeout
 4910              		.syntax unified
 4911              		.thumb
 4912              		.thumb_func
 4913              		.fpu fpv4-sp-d16
 4915              	vTaskPriorityDisinheritAfterTimeout:
 4916              	.LFB54:
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4917              		.loc 1 4119 0
 4918              		.cfi_startproc
 4919              		@ args = 0, pretend = 0, frame = 0
 4920              		@ frame_needed = 0, uses_anonymous_args = 0
 4921              	.LVL450:
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4922              		.loc 1 4124 0
 4923 0000 0028     		cmp	r0, #0
 4924 0002 46D0     		beq	.L500
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4925              		.loc 1 4119 0
 4926 0004 38B5     		push	{r3, r4, r5, lr}
 4927              		.cfi_def_cfa_offset 16
 4928              		.cfi_offset 3, -16
 4929              		.cfi_offset 4, -12
 4930              		.cfi_offset 5, -8
 4931              		.cfi_offset 14, -4
 4932 0006 0446     		mov	r4, r0
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4933              		.loc 1 4128 0
 4934 0008 006D     		ldr	r0, [r0, #80]
 4935              	.LVL451:
 4936 000a 40B9     		cbnz	r0, .L492
 4937              	.LBB222:
 4938              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4939              		.loc 2 195 0
 4940              		.syntax unified
 4941              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4942 000c 4FF05003 			mov r3, #80												
 4943 0010 83F31188 		msr basepri, r3											
 4944 0014 BFF36F8F 		isb														
 4945 0018 BFF34F8F 		dsb														
 4946              	
 4947              	@ 0 "" 2
 4948              	.LVL452:
 4949              		.thumb
ARM GAS  /tmp/ccL3CtUt.s 			page 191


 4950              		.syntax unified
 4951              	.L493:
 4952 001c FEE7     		b	.L493
 4953              	.L492:
 4954              	.LBE223:
 4955              	.LBE222:
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4956              		.loc 1 4134 0
 4957 001e E26C     		ldr	r2, [r4, #76]
 4958 0020 8A42     		cmp	r2, r1
 4959 0022 00D2     		bcs	.L494
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4960              		.loc 1 4136 0
 4961 0024 0A46     		mov	r2, r1
 4962              	.L494:
 4963              	.LVL453:
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4964              		.loc 1 4144 0
 4965 0026 E16A     		ldr	r1, [r4, #44]
 4966              	.LVL454:
 4967 0028 8A42     		cmp	r2, r1
 4968 002a 01D0     		beq	.L490
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4969              		.loc 1 4150 0
 4970 002c 0128     		cmp	r0, #1
 4971 002e 00D0     		beq	.L503
 4972              	.LVL455:
 4973              	.L490:
 4974 0030 38BD     		pop	{r3, r4, r5, pc}
 4975              	.LVL456:
 4976              	.L503:
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4977              		.loc 1 4155 0
 4978 0032 1848     		ldr	r0, .L504
 4979 0034 0068     		ldr	r0, [r0]
 4980 0036 8442     		cmp	r4, r0
 4981 0038 08D1     		bne	.L495
 4982              	.LBB224:
 4983              	.LBB225:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4984              		.loc 2 195 0
 4985              		.syntax unified
 4986              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4987 003a 4FF05003 			mov r3, #80												
 4988 003e 83F31188 		msr basepri, r3											
 4989 0042 BFF36F8F 		isb														
 4990 0046 BFF34F8F 		dsb														
 4991              	
 4992              	@ 0 "" 2
 4993              	.LVL457:
 4994              		.thumb
 4995              		.syntax unified
 4996              	.L496:
 4997 004a FEE7     		b	.L496
 4998              	.L495:
 4999              	.LVL458:
 5000              	.LBE225:
ARM GAS  /tmp/ccL3CtUt.s 			page 192


 5001              	.LBE224:
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5002              		.loc 1 4162 0
 5003 004c E262     		str	r2, [r4, #44]
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5004              		.loc 1 4166 0
 5005 004e A069     		ldr	r0, [r4, #24]
 5006 0050 0028     		cmp	r0, #0
 5007 0052 02DB     		blt	.L497
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5008              		.loc 1 4168 0
 5009 0054 C2F13802 		rsb	r2, r2, #56
 5010              	.LVL459:
 5011 0058 A261     		str	r2, [r4, #24]
 5012              	.L497:
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5013              		.loc 1 4181 0
 5014 005a 6369     		ldr	r3, [r4, #20]
 5015 005c 01EB8101 		add	r1, r1, r1, lsl #2
 5016              	.LVL460:
 5017 0060 8800     		lsls	r0, r1, #2
 5018 0062 0D4A     		ldr	r2, .L504+4
 5019 0064 0244     		add	r2, r2, r0
 5020 0066 9342     		cmp	r3, r2
 5021 0068 E2D1     		bne	.L490
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 5022              		.loc 1 4183 0
 5023 006a 251D     		adds	r5, r4, #4
 5024 006c 2846     		mov	r0, r5
 5025 006e FFF7FEFF 		bl	uxListRemove
 5026              	.LVL461:
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5027              		.loc 1 4192 0
 5028 0072 E36A     		ldr	r3, [r4, #44]
 5029 0074 094A     		ldr	r2, .L504+8
 5030 0076 1268     		ldr	r2, [r2]
 5031 0078 9342     		cmp	r3, r2
 5032 007a 01D9     		bls	.L498
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5033              		.loc 1 4192 0 is_stmt 0 discriminator 1
 5034 007c 074A     		ldr	r2, .L504+8
 5035 007e 1360     		str	r3, [r2]
 5036              	.L498:
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5037              		.loc 1 4192 0 discriminator 3
 5038 0080 03EB8303 		add	r3, r3, r3, lsl #2
 5039 0084 9A00     		lsls	r2, r3, #2
 5040 0086 2946     		mov	r1, r5
 5041 0088 0348     		ldr	r0, .L504+4
 5042 008a 1044     		add	r0, r0, r2
 5043 008c FFF7FEFF 		bl	vListInsertEnd
 5044              	.LVL462:
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5045              		.loc 1 4213 0 is_stmt 1 discriminator 3
 5046 0090 CEE7     		b	.L490
 5047              	.LVL463:
 5048              	.L500:
ARM GAS  /tmp/ccL3CtUt.s 			page 193


 5049              		.cfi_def_cfa_offset 0
 5050              		.cfi_restore 3
 5051              		.cfi_restore 4
 5052              		.cfi_restore 5
 5053              		.cfi_restore 14
 5054 0092 7047     		bx	lr
 5055              	.L505:
 5056              		.align	2
 5057              	.L504:
 5058 0094 00000000 		.word	.LANCHOR10
 5059 0098 00000000 		.word	.LANCHOR4
 5060 009c 00000000 		.word	.LANCHOR13
 5061              		.cfi_endproc
 5062              	.LFE54:
 5064              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5065              		.align	1
 5066              		.global	uxTaskResetEventItemValue
 5067              		.syntax unified
 5068              		.thumb
 5069              		.thumb_func
 5070              		.fpu fpv4-sp-d16
 5072              	uxTaskResetEventItemValue:
 5073              	.LFB55:
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5074              		.loc 1 4534 0
 5075              		.cfi_startproc
 5076              		@ args = 0, pretend = 0, frame = 0
 5077              		@ frame_needed = 0, uses_anonymous_args = 0
 5078              		@ link register save eliminated.
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5079              		.loc 1 4537 0
 5080 0000 044B     		ldr	r3, .L507
 5081 0002 1A68     		ldr	r2, [r3]
 5082 0004 9069     		ldr	r0, [r2, #24]
 5083              	.LVL464:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5084              		.loc 1 4541 0
 5085 0006 1A68     		ldr	r2, [r3]
 5086 0008 1B68     		ldr	r3, [r3]
 5087 000a DB6A     		ldr	r3, [r3, #44]
 5088 000c C3F13803 		rsb	r3, r3, #56
 5089 0010 9361     		str	r3, [r2, #24]
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5090              		.loc 1 4544 0
 5091 0012 7047     		bx	lr
 5092              	.L508:
 5093              		.align	2
 5094              	.L507:
 5095 0014 00000000 		.word	.LANCHOR10
 5096              		.cfi_endproc
 5097              	.LFE55:
 5099              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5100              		.align	1
 5101              		.global	pvTaskIncrementMutexHeldCount
 5102              		.syntax unified
 5103              		.thumb
 5104              		.thumb_func
ARM GAS  /tmp/ccL3CtUt.s 			page 194


 5105              		.fpu fpv4-sp-d16
 5107              	pvTaskIncrementMutexHeldCount:
 5108              	.LFB56:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5109              		.loc 1 4550 0
 5110              		.cfi_startproc
 5111              		@ args = 0, pretend = 0, frame = 0
 5112              		@ frame_needed = 0, uses_anonymous_args = 0
 5113              		@ link register save eliminated.
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5114              		.loc 1 4553 0
 5115 0000 054B     		ldr	r3, .L511
 5116 0002 1B68     		ldr	r3, [r3]
 5117 0004 23B1     		cbz	r3, .L510
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5118              		.loc 1 4555 0
 5119 0006 044B     		ldr	r3, .L511
 5120 0008 1A68     		ldr	r2, [r3]
 5121 000a 136D     		ldr	r3, [r2, #80]
 5122 000c 0133     		adds	r3, r3, #1
 5123 000e 1365     		str	r3, [r2, #80]
 5124              	.L510:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5125              		.loc 1 4558 0
 5126 0010 014B     		ldr	r3, .L511
 5127 0012 1868     		ldr	r0, [r3]
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5128              		.loc 1 4559 0
 5129 0014 7047     		bx	lr
 5130              	.L512:
 5131 0016 00BF     		.align	2
 5132              	.L511:
 5133 0018 00000000 		.word	.LANCHOR10
 5134              		.cfi_endproc
 5135              	.LFE56:
 5137              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5138              		.align	1
 5139              		.global	ulTaskNotifyTake
 5140              		.syntax unified
 5141              		.thumb
 5142              		.thumb_func
 5143              		.fpu fpv4-sp-d16
 5145              	ulTaskNotifyTake:
 5146              	.LFB57:
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5147              		.loc 1 4567 0
 5148              		.cfi_startproc
 5149              		@ args = 0, pretend = 0, frame = 0
 5150              		@ frame_needed = 0, uses_anonymous_args = 0
 5151              	.LVL465:
 5152 0000 38B5     		push	{r3, r4, r5, lr}
 5153              		.cfi_def_cfa_offset 16
 5154              		.cfi_offset 3, -16
 5155              		.cfi_offset 4, -12
 5156              		.cfi_offset 5, -8
 5157              		.cfi_offset 14, -4
 5158 0002 0546     		mov	r5, r0
ARM GAS  /tmp/ccL3CtUt.s 			page 195


 5159 0004 0C46     		mov	r4, r1
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5160              		.loc 1 4570 0
 5161 0006 FFF7FEFF 		bl	vPortEnterCritical
 5162              	.LVL466:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5163              		.loc 1 4573 0
 5164 000a 194B     		ldr	r3, .L520
 5165 000c 1B68     		ldr	r3, [r3]
 5166 000e 5B6D     		ldr	r3, [r3, #84]
 5167 0010 2BB9     		cbnz	r3, .L514
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5168              		.loc 1 4576 0
 5169 0012 174B     		ldr	r3, .L520
 5170 0014 1B68     		ldr	r3, [r3]
 5171 0016 0122     		movs	r2, #1
 5172 0018 83F85820 		strb	r2, [r3, #88]
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5173              		.loc 1 4578 0
 5174 001c ACB9     		cbnz	r4, .L518
 5175              	.L514:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5176              		.loc 1 4599 0
 5177 001e FFF7FEFF 		bl	vPortExitCritical
 5178              	.LVL467:
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5179              		.loc 1 4601 0
 5180 0022 FFF7FEFF 		bl	vPortEnterCritical
 5181              	.LVL468:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5182              		.loc 1 4604 0
 5183 0026 124B     		ldr	r3, .L520
 5184 0028 1B68     		ldr	r3, [r3]
 5185 002a 5C6D     		ldr	r4, [r3, #84]
 5186              	.LVL469:
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5187              		.loc 1 4606 0
 5188 002c 24B1     		cbz	r4, .L515
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5189              		.loc 1 4608 0
 5190 002e CDB9     		cbnz	r5, .L519
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5191              		.loc 1 4614 0
 5192 0030 0F4B     		ldr	r3, .L520
 5193 0032 1B68     		ldr	r3, [r3]
 5194 0034 621E     		subs	r2, r4, #1
 5195 0036 5A65     		str	r2, [r3, #84]
 5196              	.L515:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5197              		.loc 1 4622 0
 5198 0038 0D4B     		ldr	r3, .L520
 5199 003a 1B68     		ldr	r3, [r3]
 5200 003c 0022     		movs	r2, #0
 5201 003e 83F85820 		strb	r2, [r3, #88]
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5202              		.loc 1 4624 0
 5203 0042 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccL3CtUt.s 			page 196


 5204              	.LVL470:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5205              		.loc 1 4627 0
 5206 0046 2046     		mov	r0, r4
 5207 0048 38BD     		pop	{r3, r4, r5, pc}
 5208              	.LVL471:
 5209              	.L518:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5210              		.loc 1 4580 0
 5211 004a 1146     		mov	r1, r2
 5212 004c 2046     		mov	r0, r4
 5213 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5214              	.LVL472:
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5215              		.loc 1 4587 0
 5216 0052 4FF08052 		mov	r2, #268435456
 5217 0056 074B     		ldr	r3, .L520+4
 5218 0058 1A60     		str	r2, [r3]
 5219              		.syntax unified
 5220              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5221 005a BFF34F8F 		dsb
 5222              	@ 0 "" 2
 5223              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5224 005e BFF36F8F 		isb
 5225              	@ 0 "" 2
 5226              		.thumb
 5227              		.syntax unified
 5228 0062 DCE7     		b	.L514
 5229              	.LVL473:
 5230              	.L519:
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5231              		.loc 1 4610 0
 5232 0064 024B     		ldr	r3, .L520
 5233 0066 1B68     		ldr	r3, [r3]
 5234 0068 0022     		movs	r2, #0
 5235 006a 5A65     		str	r2, [r3, #84]
 5236 006c E4E7     		b	.L515
 5237              	.L521:
 5238 006e 00BF     		.align	2
 5239              	.L520:
 5240 0070 00000000 		.word	.LANCHOR10
 5241 0074 04ED00E0 		.word	-536810236
 5242              		.cfi_endproc
 5243              	.LFE57:
 5245              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5246              		.align	1
 5247              		.global	xTaskNotifyWait
 5248              		.syntax unified
 5249              		.thumb
 5250              		.thumb_func
 5251              		.fpu fpv4-sp-d16
 5253              	xTaskNotifyWait:
 5254              	.LFB58:
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5255              		.loc 1 4635 0
 5256              		.cfi_startproc
 5257              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccL3CtUt.s 			page 197


 5258              		@ frame_needed = 0, uses_anonymous_args = 0
 5259              	.LVL474:
 5260 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5261              		.cfi_def_cfa_offset 24
 5262              		.cfi_offset 3, -24
 5263              		.cfi_offset 4, -20
 5264              		.cfi_offset 5, -16
 5265              		.cfi_offset 6, -12
 5266              		.cfi_offset 7, -8
 5267              		.cfi_offset 14, -4
 5268 0002 0746     		mov	r7, r0
 5269 0004 0D46     		mov	r5, r1
 5270 0006 1446     		mov	r4, r2
 5271 0008 1E46     		mov	r6, r3
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5272              		.loc 1 4638 0
 5273 000a FFF7FEFF 		bl	vPortEnterCritical
 5274              	.LVL475:
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5275              		.loc 1 4641 0
 5276 000e 204B     		ldr	r3, .L530
 5277 0010 1B68     		ldr	r3, [r3]
 5278 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5279 0016 DBB2     		uxtb	r3, r3
 5280 0018 022B     		cmp	r3, #2
 5281 001a 0AD0     		beq	.L523
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5282              		.loc 1 4646 0
 5283 001c 1C4B     		ldr	r3, .L530
 5284 001e 1A68     		ldr	r2, [r3]
 5285 0020 506D     		ldr	r0, [r2, #84]
 5286 0022 20EA0700 		bic	r0, r0, r7
 5287 0026 5065     		str	r0, [r2, #84]
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5288              		.loc 1 4649 0
 5289 0028 1B68     		ldr	r3, [r3]
 5290 002a 0122     		movs	r2, #1
 5291 002c 83F85820 		strb	r2, [r3, #88]
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5292              		.loc 1 4651 0
 5293 0030 CEB9     		cbnz	r6, .L528
 5294              	.L523:
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5295              		.loc 1 4672 0
 5296 0032 FFF7FEFF 		bl	vPortExitCritical
 5297              	.LVL476:
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5298              		.loc 1 4674 0
 5299 0036 FFF7FEFF 		bl	vPortEnterCritical
 5300              	.LVL477:
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5301              		.loc 1 4678 0
 5302 003a 1CB1     		cbz	r4, .L524
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5303              		.loc 1 4682 0
 5304 003c 144B     		ldr	r3, .L530
 5305 003e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccL3CtUt.s 			page 198


 5306 0040 5B6D     		ldr	r3, [r3, #84]
 5307 0042 2360     		str	r3, [r4]
 5308              	.L524:
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5309              		.loc 1 4689 0
 5310 0044 124B     		ldr	r3, .L530
 5311 0046 1B68     		ldr	r3, [r3]
 5312 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5313 004c DBB2     		uxtb	r3, r3
 5314 004e 022B     		cmp	r3, #2
 5315 0050 16D0     		beq	.L529
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5316              		.loc 1 4692 0
 5317 0052 0024     		movs	r4, #0
 5318              	.LVL478:
 5319              	.L525:
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5320              		.loc 1 4702 0
 5321 0054 0E4B     		ldr	r3, .L530
 5322 0056 1B68     		ldr	r3, [r3]
 5323 0058 0022     		movs	r2, #0
 5324 005a 83F85820 		strb	r2, [r3, #88]
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5325              		.loc 1 4704 0
 5326 005e FFF7FEFF 		bl	vPortExitCritical
 5327              	.LVL479:
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5328              		.loc 1 4707 0
 5329 0062 2046     		mov	r0, r4
 5330 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5331              	.LVL480:
 5332              	.L528:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5333              		.loc 1 4653 0
 5334 0066 1146     		mov	r1, r2
 5335 0068 3046     		mov	r0, r6
 5336 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5337              	.LVL481:
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5338              		.loc 1 4660 0
 5339 006e 4FF08052 		mov	r2, #268435456
 5340 0072 084B     		ldr	r3, .L530+4
 5341 0074 1A60     		str	r2, [r3]
 5342              		.syntax unified
 5343              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5344 0076 BFF34F8F 		dsb
 5345              	@ 0 "" 2
 5346              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5347 007a BFF36F8F 		isb
 5348              	@ 0 "" 2
 5349              		.thumb
 5350              		.syntax unified
 5351 007e D8E7     		b	.L523
 5352              	.L529:
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5353              		.loc 1 4698 0
 5354 0080 034B     		ldr	r3, .L530
ARM GAS  /tmp/ccL3CtUt.s 			page 199


 5355 0082 1A68     		ldr	r2, [r3]
 5356 0084 536D     		ldr	r3, [r2, #84]
 5357 0086 23EA0505 		bic	r5, r3, r5
 5358              	.LVL482:
 5359 008a 5565     		str	r5, [r2, #84]
 5360              	.LVL483:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5361              		.loc 1 4699 0
 5362 008c 0124     		movs	r4, #1
 5363              	.LVL484:
 5364 008e E1E7     		b	.L525
 5365              	.L531:
 5366              		.align	2
 5367              	.L530:
 5368 0090 00000000 		.word	.LANCHOR10
 5369 0094 04ED00E0 		.word	-536810236
 5370              		.cfi_endproc
 5371              	.LFE58:
 5373              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5374              		.align	1
 5375              		.global	xTaskGenericNotify
 5376              		.syntax unified
 5377              		.thumb
 5378              		.thumb_func
 5379              		.fpu fpv4-sp-d16
 5381              	xTaskGenericNotify:
 5382              	.LFB59:
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5383              		.loc 1 4715 0
 5384              		.cfi_startproc
 5385              		@ args = 0, pretend = 0, frame = 0
 5386              		@ frame_needed = 0, uses_anonymous_args = 0
 5387              	.LVL485:
 5388 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5389              		.cfi_def_cfa_offset 24
 5390              		.cfi_offset 3, -24
 5391              		.cfi_offset 4, -20
 5392              		.cfi_offset 5, -16
 5393              		.cfi_offset 6, -12
 5394              		.cfi_offset 7, -8
 5395              		.cfi_offset 14, -4
 5396              	.LVL486:
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 5397              		.loc 1 4720 0
 5398 0002 A8B1     		cbz	r0, .L552
 5399 0004 0446     		mov	r4, r0
 5400 0006 1F46     		mov	r7, r3
 5401 0008 1646     		mov	r6, r2
 5402 000a 0D46     		mov	r5, r1
 5403              	.LVL487:
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5404              		.loc 1 4723 0
 5405 000c FFF7FEFF 		bl	vPortEnterCritical
 5406              	.LVL488:
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5407              		.loc 1 4725 0
 5408 0010 0FB1     		cbz	r7, .L535
ARM GAS  /tmp/ccL3CtUt.s 			page 200


4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5409              		.loc 1 4727 0
 5410 0012 636D     		ldr	r3, [r4, #84]
 5411 0014 3B60     		str	r3, [r7]
 5412              	.L535:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5413              		.loc 1 4730 0
 5414 0016 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5415 001a DBB2     		uxtb	r3, r3
 5416              	.LVL489:
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5417              		.loc 1 4732 0
 5418 001c 0222     		movs	r2, #2
 5419 001e 84F85820 		strb	r2, [r4, #88]
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5420              		.loc 1 4734 0
 5421 0022 042E     		cmp	r6, #4
 5422 0024 3ED8     		bhi	.L536
 5423 0026 DFE806F0 		tbb	[pc, r6]
 5424              	.L538:
 5425 002a 4A       		.byte	(.L548-.L538)/2
 5426 002b 0C       		.byte	(.L539-.L538)/2
 5427 002c 30       		.byte	(.L540-.L538)/2
 5428 002d 35       		.byte	(.L541-.L538)/2
 5429 002e 38       		.byte	(.L542-.L538)/2
 5430              	.LVL490:
 5431 002f 00       		.p2align 1
 5432              	.L552:
 5433              	.LBB226:
 5434              	.LBB227:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5435              		.loc 2 195 0
 5436              		.syntax unified
 5437              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5438 0030 4FF05003 			mov r3, #80												
 5439 0034 83F31188 		msr basepri, r3											
 5440 0038 BFF36F8F 		isb														
 5441 003c BFF34F8F 		dsb														
 5442              	
 5443              	@ 0 "" 2
 5444              	.LVL491:
 5445              		.thumb
 5446              		.syntax unified
 5447              	.L534:
 5448 0040 FEE7     		b	.L534
 5449              	.LVL492:
 5450              	.L539:
 5451              	.LBE227:
 5452              	.LBE226:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5453              		.loc 1 4737 0
 5454 0042 626D     		ldr	r2, [r4, #84]
 5455 0044 1543     		orrs	r5, r5, r2
 5456              	.LVL493:
 5457 0046 6565     		str	r5, [r4, #84]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5458              		.loc 1 4717 0
ARM GAS  /tmp/ccL3CtUt.s 			page 201


 5459 0048 0125     		movs	r5, #1
 5460              	.L537:
 5461              	.LVL494:
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5462              		.loc 1 4778 0
 5463 004a 012B     		cmp	r3, #1
 5464 004c 4BD1     		bne	.L544
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5465              		.loc 1 4780 0
 5466 004e 261D     		adds	r6, r4, #4
 5467 0050 3046     		mov	r0, r6
 5468 0052 FFF7FEFF 		bl	uxListRemove
 5469              	.LVL495:
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5470              		.loc 1 4781 0
 5471 0056 E36A     		ldr	r3, [r4, #44]
 5472 0058 254A     		ldr	r2, .L553
 5473 005a 1268     		ldr	r2, [r2]
 5474 005c 9342     		cmp	r3, r2
 5475 005e 01D9     		bls	.L545
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5476              		.loc 1 4781 0 is_stmt 0 discriminator 1
 5477 0060 234A     		ldr	r2, .L553
 5478 0062 1360     		str	r3, [r2]
 5479              	.L545:
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5480              		.loc 1 4781 0 discriminator 3
 5481 0064 03EB8303 		add	r3, r3, r3, lsl #2
 5482 0068 9A00     		lsls	r2, r3, #2
 5483 006a 3146     		mov	r1, r6
 5484 006c 2148     		ldr	r0, .L553+4
 5485 006e 1044     		add	r0, r0, r2
 5486 0070 FFF7FEFF 		bl	vListInsertEnd
 5487              	.LVL496:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5488              		.loc 1 4784 0 is_stmt 1 discriminator 3
 5489 0074 A36A     		ldr	r3, [r4, #40]
 5490 0076 43B3     		cbz	r3, .L546
 5491              	.LBB228:
 5492              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5493              		.loc 2 195 0
 5494              		.syntax unified
 5495              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5496 0078 4FF05003 			mov r3, #80												
 5497 007c 83F31188 		msr basepri, r3											
 5498 0080 BFF36F8F 		isb														
 5499 0084 BFF34F8F 		dsb														
 5500              	
 5501              	@ 0 "" 2
 5502              	.LVL497:
 5503              		.thumb
 5504              		.syntax unified
 5505              	.L547:
 5506 0088 FEE7     		b	.L547
 5507              	.LVL498:
 5508              	.L540:
ARM GAS  /tmp/ccL3CtUt.s 			page 202


 5509              	.LBE229:
 5510              	.LBE228:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5511              		.loc 1 4741 0
 5512 008a 626D     		ldr	r2, [r4, #84]
 5513 008c 0132     		adds	r2, r2, #1
 5514 008e 6265     		str	r2, [r4, #84]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5515              		.loc 1 4717 0
 5516 0090 0125     		movs	r5, #1
 5517              	.LVL499:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5518              		.loc 1 4742 0
 5519 0092 DAE7     		b	.L537
 5520              	.LVL500:
 5521              	.L541:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5522              		.loc 1 4745 0
 5523 0094 6565     		str	r5, [r4, #84]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5524              		.loc 1 4717 0
 5525 0096 0125     		movs	r5, #1
 5526              	.LVL501:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5527              		.loc 1 4746 0
 5528 0098 D7E7     		b	.L537
 5529              	.LVL502:
 5530              	.L542:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5531              		.loc 1 4749 0
 5532 009a 022B     		cmp	r3, #2
 5533 009c 11D0     		beq	.L549
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5534              		.loc 1 4751 0
 5535 009e 6565     		str	r5, [r4, #84]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5536              		.loc 1 4717 0
 5537 00a0 0125     		movs	r5, #1
 5538              	.LVL503:
 5539 00a2 D2E7     		b	.L537
 5540              	.LVL504:
 5541              	.L536:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5542              		.loc 1 4769 0
 5543 00a4 626D     		ldr	r2, [r4, #84]
 5544 00a6 B2F1FF3F 		cmp	r2, #-1
 5545 00aa 0CD0     		beq	.L550
 5546              	.LBB230:
 5547              	.LBB231:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5548              		.loc 2 195 0
 5549              		.syntax unified
 5550              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5551 00ac 4FF05003 			mov r3, #80												
 5552 00b0 83F31188 		msr basepri, r3											
 5553 00b4 BFF36F8F 		isb														
 5554 00b8 BFF34F8F 		dsb														
ARM GAS  /tmp/ccL3CtUt.s 			page 203


 5555              	
 5556              	@ 0 "" 2
 5557              	.LVL505:
 5558              		.thumb
 5559              		.syntax unified
 5560              	.L543:
 5561 00bc FEE7     		b	.L543
 5562              	.LVL506:
 5563              	.L548:
 5564              	.LBE231:
 5565              	.LBE230:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5566              		.loc 1 4717 0
 5567 00be 0125     		movs	r5, #1
 5568              	.LVL507:
 5569 00c0 C3E7     		b	.L537
 5570              	.LVL508:
 5571              	.L549:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5572              		.loc 1 4756 0
 5573 00c2 0025     		movs	r5, #0
 5574              	.LVL509:
 5575 00c4 C1E7     		b	.L537
 5576              	.LVL510:
 5577              	.L550:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5578              		.loc 1 4717 0
 5579 00c6 0125     		movs	r5, #1
 5580              	.LVL511:
 5581 00c8 BFE7     		b	.L537
 5582              	.LVL512:
 5583              	.L546:
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5584              		.loc 1 4802 0
 5585 00ca E26A     		ldr	r2, [r4, #44]
 5586 00cc 0A4B     		ldr	r3, .L553+8
 5587 00ce 1B68     		ldr	r3, [r3]
 5588 00d0 DB6A     		ldr	r3, [r3, #44]
 5589 00d2 9A42     		cmp	r2, r3
 5590 00d4 07D9     		bls	.L544
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5591              		.loc 1 4806 0
 5592 00d6 4FF08052 		mov	r2, #268435456
 5593 00da 084B     		ldr	r3, .L553+12
 5594 00dc 1A60     		str	r2, [r3]
 5595              		.syntax unified
 5596              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5597 00de BFF34F8F 		dsb
 5598              	@ 0 "" 2
 5599              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5600 00e2 BFF36F8F 		isb
 5601              	@ 0 "" 2
 5602              		.thumb
 5603              		.syntax unified
 5604              	.L544:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5605              		.loc 1 4818 0
ARM GAS  /tmp/ccL3CtUt.s 			page 204


 5606 00e6 FFF7FEFF 		bl	vPortExitCritical
 5607              	.LVL513:
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5608              		.loc 1 4821 0
 5609 00ea 2846     		mov	r0, r5
 5610 00ec F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5611              	.LVL514:
 5612              	.L554:
 5613 00ee 00BF     		.align	2
 5614              	.L553:
 5615 00f0 00000000 		.word	.LANCHOR13
 5616 00f4 00000000 		.word	.LANCHOR4
 5617 00f8 00000000 		.word	.LANCHOR10
 5618 00fc 04ED00E0 		.word	-536810236
 5619              		.cfi_endproc
 5620              	.LFE59:
 5622              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5623              		.align	1
 5624              		.global	xTaskGenericNotifyFromISR
 5625              		.syntax unified
 5626              		.thumb
 5627              		.thumb_func
 5628              		.fpu fpv4-sp-d16
 5630              	xTaskGenericNotifyFromISR:
 5631              	.LFB60:
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5632              		.loc 1 4829 0
 5633              		.cfi_startproc
 5634              		@ args = 4, pretend = 0, frame = 0
 5635              		@ frame_needed = 0, uses_anonymous_args = 0
 5636              	.LVL515:
 5637 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5638              		.cfi_def_cfa_offset 32
 5639              		.cfi_offset 3, -32
 5640              		.cfi_offset 4, -28
 5641              		.cfi_offset 5, -24
 5642              		.cfi_offset 6, -20
 5643              		.cfi_offset 7, -16
 5644              		.cfi_offset 8, -12
 5645              		.cfi_offset 9, -8
 5646              		.cfi_offset 14, -4
 5647 0004 089E     		ldr	r6, [sp, #32]
 5648              	.LVL516:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5649              		.loc 1 4835 0
 5650 0006 18B3     		cbz	r0, .L578
 5651 0008 0446     		mov	r4, r0
 5652 000a 9946     		mov	r9, r3
 5653 000c 9046     		mov	r8, r2
 5654 000e 0D46     		mov	r5, r1
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5655              		.loc 1 4853 0
 5656 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5657              	.LVL517:
 5658              	.LBB232:
 5659              	.LBB233:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccL3CtUt.s 			page 205


 5660              		.loc 2 211 0
 5661              		.syntax unified
 5662              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5663 0014 EFF31187 			mrs r7, basepri											
 5664 0018 4FF05003 		mov r3, #80												
 5665 001c 83F31188 		msr basepri, r3											
 5666 0020 BFF36F8F 		isb														
 5667 0024 BFF34F8F 		dsb														
 5668              	
 5669              	@ 0 "" 2
 5670              		.thumb
 5671              		.syntax unified
 5672              	.LBE233:
 5673              	.LBE232:
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5674              		.loc 1 4859 0
 5675 0028 B9F1000F 		cmp	r9, #0
 5676 002c 02D0     		beq	.L558
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5677              		.loc 1 4861 0
 5678 002e 636D     		ldr	r3, [r4, #84]
 5679 0030 C9F80030 		str	r3, [r9]
 5680              	.L558:
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5681              		.loc 1 4864 0
 5682 0034 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5683 0038 DBB2     		uxtb	r3, r3
 5684              	.LVL518:
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5685              		.loc 1 4865 0
 5686 003a 0222     		movs	r2, #2
 5687 003c 84F85820 		strb	r2, [r4, #88]
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5688              		.loc 1 4867 0
 5689 0040 B8F1040F 		cmp	r8, #4
 5690 0044 2BD8     		bhi	.L559
 5691 0046 DFE808F0 		tbb	[pc, r8]
 5692              	.L561:
 5693 004a 37       		.byte	(.L574-.L561)/2
 5694 004b 0C       		.byte	(.L562-.L561)/2
 5695 004c 1D       		.byte	(.L563-.L561)/2
 5696 004d 22       		.byte	(.L564-.L561)/2
 5697 004e 25       		.byte	(.L565-.L561)/2
 5698              	.LVL519:
 5699 004f 00       		.p2align 1
 5700              	.L578:
 5701              	.LBB234:
 5702              	.LBB235:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5703              		.loc 2 195 0
 5704              		.syntax unified
 5705              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5706 0050 4FF05003 			mov r3, #80												
 5707 0054 83F31188 		msr basepri, r3											
 5708 0058 BFF36F8F 		isb														
 5709 005c BFF34F8F 		dsb														
 5710              	
ARM GAS  /tmp/ccL3CtUt.s 			page 206


 5711              	@ 0 "" 2
 5712              	.LVL520:
 5713              		.thumb
 5714              		.syntax unified
 5715              	.L557:
 5716 0060 FEE7     		b	.L557
 5717              	.LVL521:
 5718              	.L562:
 5719              	.LBE235:
 5720              	.LBE234:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5721              		.loc 1 4870 0
 5722 0062 626D     		ldr	r2, [r4, #84]
 5723 0064 1543     		orrs	r5, r5, r2
 5724              	.LVL522:
 5725 0066 6565     		str	r5, [r4, #84]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5726              		.loc 1 4832 0
 5727 0068 0125     		movs	r5, #1
 5728              	.L560:
 5729              	.LVL523:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5730              		.loc 1 4910 0
 5731 006a 012B     		cmp	r3, #1
 5732 006c 4DD1     		bne	.L567
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5733              		.loc 1 4913 0
 5734 006e A36A     		ldr	r3, [r4, #40]
 5735              	.LVL524:
 5736 0070 43B3     		cbz	r3, .L568
 5737              	.LBB236:
 5738              	.LBB237:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5739              		.loc 2 195 0
 5740              		.syntax unified
 5741              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5742 0072 4FF05003 			mov r3, #80												
 5743 0076 83F31188 		msr basepri, r3											
 5744 007a BFF36F8F 		isb														
 5745 007e BFF34F8F 		dsb														
 5746              	
 5747              	@ 0 "" 2
 5748              	.LVL525:
 5749              		.thumb
 5750              		.syntax unified
 5751              	.L569:
 5752 0082 FEE7     		b	.L569
 5753              	.LVL526:
 5754              	.L563:
 5755              	.LBE237:
 5756              	.LBE236:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5757              		.loc 1 4874 0
 5758 0084 626D     		ldr	r2, [r4, #84]
 5759 0086 0132     		adds	r2, r2, #1
 5760 0088 6265     		str	r2, [r4, #84]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/ccL3CtUt.s 			page 207


 5761              		.loc 1 4832 0
 5762 008a 0125     		movs	r5, #1
 5763              	.LVL527:
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5764              		.loc 1 4875 0
 5765 008c EDE7     		b	.L560
 5766              	.LVL528:
 5767              	.L564:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5768              		.loc 1 4878 0
 5769 008e 6565     		str	r5, [r4, #84]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5770              		.loc 1 4832 0
 5771 0090 0125     		movs	r5, #1
 5772              	.LVL529:
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5773              		.loc 1 4879 0
 5774 0092 EAE7     		b	.L560
 5775              	.LVL530:
 5776              	.L565:
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5777              		.loc 1 4882 0
 5778 0094 022B     		cmp	r3, #2
 5779 0096 11D0     		beq	.L575
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5780              		.loc 1 4884 0
 5781 0098 6565     		str	r5, [r4, #84]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5782              		.loc 1 4832 0
 5783 009a 0125     		movs	r5, #1
 5784              	.LVL531:
 5785 009c E5E7     		b	.L560
 5786              	.LVL532:
 5787              	.L559:
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5788              		.loc 1 4902 0
 5789 009e 626D     		ldr	r2, [r4, #84]
 5790 00a0 B2F1FF3F 		cmp	r2, #-1
 5791 00a4 0CD0     		beq	.L576
 5792              	.LBB238:
 5793              	.LBB239:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5794              		.loc 2 195 0
 5795              		.syntax unified
 5796              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5797 00a6 4FF05003 			mov r3, #80												
 5798 00aa 83F31188 		msr basepri, r3											
 5799 00ae BFF36F8F 		isb														
 5800 00b2 BFF34F8F 		dsb														
 5801              	
 5802              	@ 0 "" 2
 5803              	.LVL533:
 5804              		.thumb
 5805              		.syntax unified
 5806              	.L566:
 5807 00b6 FEE7     		b	.L566
 5808              	.LVL534:
ARM GAS  /tmp/ccL3CtUt.s 			page 208


 5809              	.L574:
 5810              	.LBE239:
 5811              	.LBE238:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5812              		.loc 1 4832 0
 5813 00b8 0125     		movs	r5, #1
 5814              	.LVL535:
 5815 00ba D6E7     		b	.L560
 5816              	.LVL536:
 5817              	.L575:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5818              		.loc 1 4889 0
 5819 00bc 0025     		movs	r5, #0
 5820              	.LVL537:
 5821 00be D4E7     		b	.L560
 5822              	.LVL538:
 5823              	.L576:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5824              		.loc 1 4832 0
 5825 00c0 0125     		movs	r5, #1
 5826              	.LVL539:
 5827 00c2 D2E7     		b	.L560
 5828              	.LVL540:
 5829              	.L568:
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5830              		.loc 1 4915 0
 5831 00c4 164B     		ldr	r3, .L579
 5832 00c6 1B68     		ldr	r3, [r3]
 5833 00c8 23BB     		cbnz	r3, .L570
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5834              		.loc 1 4917 0
 5835 00ca 04F10408 		add	r8, r4, #4
 5836 00ce 4046     		mov	r0, r8
 5837 00d0 FFF7FEFF 		bl	uxListRemove
 5838              	.LVL541:
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5839              		.loc 1 4918 0
 5840 00d4 E36A     		ldr	r3, [r4, #44]
 5841 00d6 134A     		ldr	r2, .L579+4
 5842 00d8 1268     		ldr	r2, [r2]
 5843 00da 9342     		cmp	r3, r2
 5844 00dc 01D9     		bls	.L571
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5845              		.loc 1 4918 0 is_stmt 0 discriminator 1
 5846 00de 114A     		ldr	r2, .L579+4
 5847 00e0 1360     		str	r3, [r2]
 5848              	.L571:
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5849              		.loc 1 4918 0 discriminator 3
 5850 00e2 03EB8303 		add	r3, r3, r3, lsl #2
 5851 00e6 9A00     		lsls	r2, r3, #2
 5852 00e8 4146     		mov	r1, r8
 5853 00ea 0F48     		ldr	r0, .L579+8
 5854 00ec 1044     		add	r0, r0, r2
 5855 00ee FFF7FEFF 		bl	vListInsertEnd
 5856              	.LVL542:
 5857              	.L572:
ARM GAS  /tmp/ccL3CtUt.s 			page 209


4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5858              		.loc 1 4927 0 is_stmt 1
 5859 00f2 E26A     		ldr	r2, [r4, #44]
 5860 00f4 0D4B     		ldr	r3, .L579+12
 5861 00f6 1B68     		ldr	r3, [r3]
 5862 00f8 DB6A     		ldr	r3, [r3, #44]
 5863 00fa 9A42     		cmp	r2, r3
 5864 00fc 05D9     		bls	.L567
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5865              		.loc 1 4931 0
 5866 00fe 0EB1     		cbz	r6, .L573
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5867              		.loc 1 4933 0
 5868 0100 0123     		movs	r3, #1
 5869 0102 3360     		str	r3, [r6]
 5870              	.L573:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5871              		.loc 1 4939 0
 5872 0104 0122     		movs	r2, #1
 5873 0106 0A4B     		ldr	r3, .L579+16
 5874 0108 1A60     		str	r2, [r3]
 5875              	.L567:
 5876              	.LVL543:
 5877              	.LBB240:
 5878              	.LBB241:
 5879              		.loc 2 229 0
 5880              		.syntax unified
 5881              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5882 010a 87F31188 			msr basepri, r7	
 5883              	@ 0 "" 2
 5884              	.LVL544:
 5885              		.thumb
 5886              		.syntax unified
 5887              	.LBE241:
 5888              	.LBE240:
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5889              		.loc 1 4950 0
 5890 010e 2846     		mov	r0, r5
 5891 0110 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5892              	.LVL545:
 5893              	.L570:
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5894              		.loc 1 4924 0
 5895 0114 04F11801 		add	r1, r4, #24
 5896 0118 0648     		ldr	r0, .L579+20
 5897 011a FFF7FEFF 		bl	vListInsertEnd
 5898              	.LVL546:
 5899 011e E8E7     		b	.L572
 5900              	.L580:
 5901              		.align	2
 5902              	.L579:
 5903 0120 00000000 		.word	.LANCHOR16
 5904 0124 00000000 		.word	.LANCHOR13
 5905 0128 00000000 		.word	.LANCHOR4
 5906 012c 00000000 		.word	.LANCHOR10
 5907 0130 00000000 		.word	.LANCHOR19
 5908 0134 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccL3CtUt.s 			page 210


 5909              		.cfi_endproc
 5910              	.LFE60:
 5912              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5913              		.align	1
 5914              		.global	vTaskNotifyGiveFromISR
 5915              		.syntax unified
 5916              		.thumb
 5917              		.thumb_func
 5918              		.fpu fpv4-sp-d16
 5920              	vTaskNotifyGiveFromISR:
 5921              	.LFB61:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5922              		.loc 1 4958 0
 5923              		.cfi_startproc
 5924              		@ args = 0, pretend = 0, frame = 0
 5925              		@ frame_needed = 0, uses_anonymous_args = 0
 5926              	.LVL547:
 5927 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5928              		.cfi_def_cfa_offset 24
 5929              		.cfi_offset 3, -24
 5930              		.cfi_offset 4, -20
 5931              		.cfi_offset 5, -16
 5932              		.cfi_offset 6, -12
 5933              		.cfi_offset 7, -8
 5934              		.cfi_offset 14, -4
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5935              		.loc 1 4963 0
 5936 0002 18B3     		cbz	r0, .L592
 5937 0004 0446     		mov	r4, r0
 5938 0006 0D46     		mov	r5, r1
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5939              		.loc 1 4981 0
 5940 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5941              	.LVL548:
 5942              	.LBB242:
 5943              	.LBB243:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5944              		.loc 2 211 0
 5945              		.syntax unified
 5946              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5947 000c EFF31186 			mrs r6, basepri											
 5948 0010 4FF05003 		mov r3, #80												
 5949 0014 83F31188 		msr basepri, r3											
 5950 0018 BFF36F8F 		isb														
 5951 001c BFF34F8F 		dsb														
 5952              	
 5953              	@ 0 "" 2
 5954              		.thumb
 5955              		.syntax unified
 5956              	.LBE243:
 5957              	.LBE242:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5958              		.loc 1 4987 0
 5959 0020 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5960 0024 DBB2     		uxtb	r3, r3
 5961              	.LVL549:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccL3CtUt.s 			page 211


 5962              		.loc 1 4988 0
 5963 0026 0222     		movs	r2, #2
 5964 0028 84F85820 		strb	r2, [r4, #88]
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5965              		.loc 1 4992 0
 5966 002c 626D     		ldr	r2, [r4, #84]
 5967 002e 0132     		adds	r2, r2, #1
 5968 0030 6265     		str	r2, [r4, #84]
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5969              		.loc 1 4998 0
 5970 0032 012B     		cmp	r3, #1
 5971 0034 35D1     		bne	.L584
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5972              		.loc 1 5001 0
 5973 0036 A36A     		ldr	r3, [r4, #40]
 5974              	.LVL550:
 5975 0038 8BB1     		cbz	r3, .L585
 5976              	.LBB244:
 5977              	.LBB245:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5978              		.loc 2 195 0
 5979              		.syntax unified
 5980              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5981 003a 4FF05003 			mov r3, #80												
 5982 003e 83F31188 		msr basepri, r3											
 5983 0042 BFF36F8F 		isb														
 5984 0046 BFF34F8F 		dsb														
 5985              	
 5986              	@ 0 "" 2
 5987              	.LVL551:
 5988              		.thumb
 5989              		.syntax unified
 5990              	.L586:
 5991 004a FEE7     		b	.L586
 5992              	.LVL552:
 5993              	.L592:
 5994              	.LBE245:
 5995              	.LBE244:
 5996              	.LBB246:
 5997              	.LBB247:
 5998              		.syntax unified
 5999              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6000 004c 4FF05003 			mov r3, #80												
 6001 0050 83F31188 		msr basepri, r3											
 6002 0054 BFF36F8F 		isb														
 6003 0058 BFF34F8F 		dsb														
 6004              	
 6005              	@ 0 "" 2
 6006              	.LVL553:
 6007              		.thumb
 6008              		.syntax unified
 6009              	.L583:
 6010 005c FEE7     		b	.L583
 6011              	.LVL554:
 6012              	.L585:
 6013              	.LBE247:
 6014              	.LBE246:
ARM GAS  /tmp/ccL3CtUt.s 			page 212


5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6015              		.loc 1 5003 0
 6016 005e 154B     		ldr	r3, .L593
 6017 0060 1B68     		ldr	r3, [r3]
 6018 0062 0BBB     		cbnz	r3, .L587
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6019              		.loc 1 5005 0
 6020 0064 271D     		adds	r7, r4, #4
 6021 0066 3846     		mov	r0, r7
 6022 0068 FFF7FEFF 		bl	uxListRemove
 6023              	.LVL555:
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6024              		.loc 1 5006 0
 6025 006c E36A     		ldr	r3, [r4, #44]
 6026 006e 124A     		ldr	r2, .L593+4
 6027 0070 1268     		ldr	r2, [r2]
 6028 0072 9342     		cmp	r3, r2
 6029 0074 01D9     		bls	.L588
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6030              		.loc 1 5006 0 is_stmt 0 discriminator 1
 6031 0076 104A     		ldr	r2, .L593+4
 6032 0078 1360     		str	r3, [r2]
 6033              	.L588:
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6034              		.loc 1 5006 0 discriminator 3
 6035 007a 03EB8303 		add	r3, r3, r3, lsl #2
 6036 007e 9A00     		lsls	r2, r3, #2
 6037 0080 3946     		mov	r1, r7
 6038 0082 0E48     		ldr	r0, .L593+8
 6039 0084 1044     		add	r0, r0, r2
 6040 0086 FFF7FEFF 		bl	vListInsertEnd
 6041              	.LVL556:
 6042              	.L589:
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6043              		.loc 1 5015 0 is_stmt 1
 6044 008a E26A     		ldr	r2, [r4, #44]
 6045 008c 0C4B     		ldr	r3, .L593+12
 6046 008e 1B68     		ldr	r3, [r3]
 6047 0090 DB6A     		ldr	r3, [r3, #44]
 6048 0092 9A42     		cmp	r2, r3
 6049 0094 05D9     		bls	.L584
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6050              		.loc 1 5019 0
 6051 0096 0DB1     		cbz	r5, .L590
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6052              		.loc 1 5021 0
 6053 0098 0123     		movs	r3, #1
 6054 009a 2B60     		str	r3, [r5]
 6055              	.L590:
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6056              		.loc 1 5027 0
 6057 009c 0122     		movs	r2, #1
 6058 009e 094B     		ldr	r3, .L593+16
 6059 00a0 1A60     		str	r2, [r3]
 6060              	.L584:
 6061              	.LVL557:
 6062              	.LBB248:
ARM GAS  /tmp/ccL3CtUt.s 			page 213


 6063              	.LBB249:
 6064              		.loc 2 229 0
 6065              		.syntax unified
 6066              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6067 00a2 86F31188 			msr basepri, r6	
 6068              	@ 0 "" 2
 6069              	.LVL558:
 6070              		.thumb
 6071              		.syntax unified
 6072 00a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6073              	.LVL559:
 6074              	.L587:
 6075              	.LBE249:
 6076              	.LBE248:
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6077              		.loc 1 5012 0
 6078 00a8 04F11801 		add	r1, r4, #24
 6079 00ac 0648     		ldr	r0, .L593+20
 6080 00ae FFF7FEFF 		bl	vListInsertEnd
 6081              	.LVL560:
 6082 00b2 EAE7     		b	.L589
 6083              	.L594:
 6084              		.align	2
 6085              	.L593:
 6086 00b4 00000000 		.word	.LANCHOR16
 6087 00b8 00000000 		.word	.LANCHOR13
 6088 00bc 00000000 		.word	.LANCHOR4
 6089 00c0 00000000 		.word	.LANCHOR10
 6090 00c4 00000000 		.word	.LANCHOR19
 6091 00c8 00000000 		.word	.LANCHOR1
 6092              		.cfi_endproc
 6093              	.LFE61:
 6095              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6096              		.align	1
 6097              		.global	xTaskNotifyStateClear
 6098              		.syntax unified
 6099              		.thumb
 6100              		.thumb_func
 6101              		.fpu fpv4-sp-d16
 6103              	xTaskNotifyStateClear:
 6104              	.LFB62:
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6105              		.loc 1 5045 0
 6106              		.cfi_startproc
 6107              		@ args = 0, pretend = 0, frame = 0
 6108              		@ frame_needed = 0, uses_anonymous_args = 0
 6109              	.LVL561:
 6110 0000 10B5     		push	{r4, lr}
 6111              		.cfi_def_cfa_offset 8
 6112              		.cfi_offset 4, -8
 6113              		.cfi_offset 14, -4
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6114              		.loc 1 5051 0
 6115 0002 0446     		mov	r4, r0
 6116 0004 58B1     		cbz	r0, .L600
 6117              	.LVL562:
 6118              	.L596:
ARM GAS  /tmp/ccL3CtUt.s 			page 214


5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6119              		.loc 1 5053 0 discriminator 4
 6120 0006 FFF7FEFF 		bl	vPortEnterCritical
 6121              	.LVL563:
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6122              		.loc 1 5055 0 discriminator 4
 6123 000a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 6124 000e DBB2     		uxtb	r3, r3
 6125 0010 022B     		cmp	r3, #2
 6126 0012 07D0     		beq	.L601
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6127              		.loc 1 5062 0
 6128 0014 0024     		movs	r4, #0
 6129              	.LVL564:
 6130              	.L597:
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6131              		.loc 1 5065 0
 6132 0016 FFF7FEFF 		bl	vPortExitCritical
 6133              	.LVL565:
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6134              		.loc 1 5068 0
 6135 001a 2046     		mov	r0, r4
 6136 001c 10BD     		pop	{r4, pc}
 6137              	.LVL566:
 6138              	.L600:
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6139              		.loc 1 5051 0 discriminator 1
 6140 001e 044B     		ldr	r3, .L602
 6141 0020 1C68     		ldr	r4, [r3]
 6142              	.LVL567:
 6143 0022 F0E7     		b	.L596
 6144              	.LVL568:
 6145              	.L601:
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6146              		.loc 1 5057 0
 6147 0024 0023     		movs	r3, #0
 6148 0026 84F85830 		strb	r3, [r4, #88]
 6149              	.LVL569:
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6150              		.loc 1 5058 0
 6151 002a 0124     		movs	r4, #1
 6152              	.LVL570:
 6153 002c F3E7     		b	.L597
 6154              	.L603:
 6155 002e 00BF     		.align	2
 6156              	.L602:
 6157 0030 00000000 		.word	.LANCHOR10
 6158              		.cfi_endproc
 6159              	.LFE62:
 6161              		.global	pxCurrentTCB
 6162              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6163              		.align	2
 6164              		.set	.LANCHOR10,. + 0
 6167              	pxCurrentTCB:
 6168 0000 00000000 		.space	4
 6169              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6170              		.align	2
ARM GAS  /tmp/ccL3CtUt.s 			page 215


 6171              		.set	.LANCHOR2,. + 0
 6174              	pxDelayedTaskList:
 6175 0000 00000000 		.space	4
 6176              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6177              		.align	2
 6178              		.set	.LANCHOR8,. + 0
 6181              	pxOverflowDelayedTaskList:
 6182 0000 00000000 		.space	4
 6183              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6184              		.align	2
 6185              		.set	.LANCHOR4,. + 0
 6188              	pxReadyTasksLists:
 6189 0000 00000000 		.space	1120
 6189      00000000 
 6189      00000000 
 6189      00000000 
 6189      00000000 
 6190              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6191              		.align	2
 6192              		.set	.LANCHOR9,. + 0
 6195              	uxCurrentNumberOfTasks:
 6196 0000 00000000 		.space	4
 6197              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6198              		.align	2
 6199              		.set	.LANCHOR14,. + 0
 6202              	uxDeletedTasksWaitingCleanUp:
 6203 0000 00000000 		.space	4
 6204              		.section	.bss.uxPendedTicks,"aw",%nobits
 6205              		.align	2
 6206              		.set	.LANCHOR18,. + 0
 6209              	uxPendedTicks:
 6210 0000 00000000 		.space	4
 6211              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6212              		.align	2
 6213              		.set	.LANCHOR16,. + 0
 6216              	uxSchedulerSuspended:
 6217 0000 00000000 		.space	4
 6218              		.section	.bss.uxTaskNumber,"aw",%nobits
 6219              		.align	2
 6220              		.set	.LANCHOR12,. + 0
 6223              	uxTaskNumber:
 6224 0000 00000000 		.space	4
 6225              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6226              		.align	2
 6227              		.set	.LANCHOR13,. + 0
 6230              	uxTopReadyPriority:
 6231 0000 00000000 		.space	4
 6232              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6233              		.align	2
 6234              		.set	.LANCHOR5,. + 0
 6237              	xDelayedTaskList1:
 6238 0000 00000000 		.space	20
 6238      00000000 
 6238      00000000 
 6238      00000000 
 6238      00000000 
 6239              		.section	.bss.xDelayedTaskList2,"aw",%nobits
ARM GAS  /tmp/ccL3CtUt.s 			page 216


 6240              		.align	2
 6241              		.set	.LANCHOR6,. + 0
 6244              	xDelayedTaskList2:
 6245 0000 00000000 		.space	20
 6245      00000000 
 6245      00000000 
 6245      00000000 
 6245      00000000 
 6246              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6247              		.align	2
 6248              		.set	.LANCHOR3,. + 0
 6251              	xNextTaskUnblockTime:
 6252 0000 00000000 		.space	4
 6253              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6254              		.align	2
 6255              		.set	.LANCHOR17,. + 0
 6258              	xNumOfOverflows:
 6259 0000 00000000 		.space	4
 6260              		.section	.bss.xPendingReadyList,"aw",%nobits
 6261              		.align	2
 6262              		.set	.LANCHOR1,. + 0
 6265              	xPendingReadyList:
 6266 0000 00000000 		.space	20
 6266      00000000 
 6266      00000000 
 6266      00000000 
 6266      00000000 
 6267              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6268              		.align	2
 6269              		.set	.LANCHOR11,. + 0
 6272              	xSchedulerRunning:
 6273 0000 00000000 		.space	4
 6274              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6275              		.align	2
 6276              		.set	.LANCHOR0,. + 0
 6279              	xSuspendedTaskList:
 6280 0000 00000000 		.space	20
 6280      00000000 
 6280      00000000 
 6280      00000000 
 6280      00000000 
 6281              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6282              		.align	2
 6283              		.set	.LANCHOR7,. + 0
 6286              	xTasksWaitingTermination:
 6287 0000 00000000 		.space	20
 6287      00000000 
 6287      00000000 
 6287      00000000 
 6287      00000000 
 6288              		.section	.bss.xTickCount,"aw",%nobits
 6289              		.align	2
 6290              		.set	.LANCHOR15,. + 0
 6293              	xTickCount:
 6294 0000 00000000 		.space	4
 6295              		.section	.bss.xYieldPending,"aw",%nobits
 6296              		.align	2
ARM GAS  /tmp/ccL3CtUt.s 			page 217


 6297              		.set	.LANCHOR19,. + 0
 6300              	xYieldPending:
 6301 0000 00000000 		.space	4
 6302              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6303              		.align	2
 6304              	.LC0:
 6305 0000 49444C45 		.ascii	"IDLE\000"
 6305      00
 6306              		.text
 6307              	.Letext0:
 6308              		.file 3 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 6309              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 6310              		.file 5 "/usr/include/newlib/sys/lock.h"
 6311              		.file 6 "/usr/include/newlib/sys/_types.h"
 6312              		.file 7 "/usr/include/newlib/sys/reent.h"
 6313              		.file 8 "/usr/include/newlib/stdlib.h"
 6314              		.file 9 "/usr/include/newlib/sys/_stdint.h"
 6315              		.file 10 "Core/Inc/FreeRTOSConfig.h"
 6316              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6317              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6318              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6319              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6320              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6321              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 6322              		.file 17 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccL3CtUt.s 			page 218


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccL3CtUt.s:18     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccL3CtUt.s:24     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccL3CtUt.s:92     .text.prvTaskIsTaskSuspended:0000000000000038 $d
     /tmp/ccL3CtUt.s:98     .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccL3CtUt.s:104    .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccL3CtUt.s:138    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccL3CtUt.s:144    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccL3CtUt.s:177    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/ccL3CtUt.s:183    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccL3CtUt.s:189    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccL3CtUt.s:315    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccL3CtUt.s:321    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccL3CtUt.s:386    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccL3CtUt.s:398    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccL3CtUt.s:404    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccL3CtUt.s:514    .text.prvAddNewTaskToReadyList:0000000000000090 $d
     /tmp/ccL3CtUt.s:525    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccL3CtUt.s:531    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccL3CtUt.s:594    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccL3CtUt.s:600    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccL3CtUt.s:665    .text.prvCheckTasksWaitingTermination:0000000000000040 $d
     /tmp/ccL3CtUt.s:672    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccL3CtUt.s:678    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccL3CtUt.s:717    .text.prvIdleTask:0000000000000020 $d
     /tmp/ccL3CtUt.s:723    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccL3CtUt.s:729    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccL3CtUt.s:815    .text.prvAddCurrentTaskToDelayedList:0000000000000064 $d
     /tmp/ccL3CtUt.s:825    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccL3CtUt.s:832    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccL3CtUt.s:954    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccL3CtUt.s:961    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccL3CtUt.s:1064   .text.vTaskDelete:0000000000000000 $t
     /tmp/ccL3CtUt.s:1071   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccL3CtUt.s:1204   .text.vTaskDelete:0000000000000098 $d
     /tmp/ccL3CtUt.s:1216   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccL3CtUt.s:1223   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccL3CtUt.s:1357   .text.eTaskGetState:000000000000007c $d
     /tmp/ccL3CtUt.s:1366   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccL3CtUt.s:1373   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccL3CtUt.s:1411   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/ccL3CtUt.s:1416   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccL3CtUt.s:1423   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccL3CtUt.s:1485   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccL3CtUt.s:1490   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccL3CtUt.s:1497   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccL3CtUt.s:1668   .text.vTaskPrioritySet:00000000000000c0 $d
     /tmp/ccL3CtUt.s:1676   .text.vTaskResume:0000000000000000 $t
     /tmp/ccL3CtUt.s:1683   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccL3CtUt.s:1788   .text.vTaskResume:0000000000000078 $d
     /tmp/ccL3CtUt.s:1796   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccL3CtUt.s:1803   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccL3CtUt.s:1942   .text.xTaskResumeFromISR:0000000000000094 $d
     /tmp/ccL3CtUt.s:1951   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccL3CtUt.s:1958   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccL3CtUt.s:2085   .text.vTaskStartScheduler:0000000000000088 $d
ARM GAS  /tmp/ccL3CtUt.s 			page 219


     /tmp/ccL3CtUt.s:2096   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccL3CtUt.s:2103   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccL3CtUt.s:2139   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/ccL3CtUt.s:2144   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccL3CtUt.s:2151   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccL3CtUt.s:2168   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccL3CtUt.s:2173   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccL3CtUt.s:2180   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccL3CtUt.s:2196   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccL3CtUt.s:2201   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccL3CtUt.s:2208   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccL3CtUt.s:2230   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccL3CtUt.s:2235   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccL3CtUt.s:2242   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccL3CtUt.s:2257   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccL3CtUt.s:2262   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccL3CtUt.s:2269   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccL3CtUt.s:2315   .text.pcTaskGetName:0000000000000024 $d
     /tmp/ccL3CtUt.s:2322   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccL3CtUt.s:2329   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccL3CtUt.s:2532   .text.xTaskIncrementTick:00000000000000ec $d
     /tmp/ccL3CtUt.s:2547   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccL3CtUt.s:2554   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccL3CtUt.s:2745   .text.xTaskResumeAll:00000000000000d8 $d
     /tmp/ccL3CtUt.s:2758   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccL3CtUt.s:2765   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccL3CtUt.s:2935   .text.vTaskDelayUntil:00000000000000a0 $d
     /tmp/ccL3CtUt.s:2943   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccL3CtUt.s:2950   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccL3CtUt.s:3026   .text.vTaskDelay:0000000000000048 $d
     /tmp/ccL3CtUt.s:3032   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccL3CtUt.s:3039   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccL3CtUt.s:3161   .text.vTaskSwitchContext:0000000000000088 $d
     /tmp/ccL3CtUt.s:3172   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccL3CtUt.s:3179   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccL3CtUt.s:3329   .text.vTaskSuspend:00000000000000ac $d
     /tmp/ccL3CtUt.s:3339   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccL3CtUt.s:3346   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccL3CtUt.s:3397   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccL3CtUt.s:3402   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccL3CtUt.s:3409   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccL3CtUt.s:3495   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/ccL3CtUt.s:3501   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccL3CtUt.s:3508   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccL3CtUt.s:3566   .text.vTaskPlaceOnEventListRestricted:0000000000000034 $d
     /tmp/ccL3CtUt.s:3573   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccL3CtUt.s:3580   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccL3CtUt.s:3684   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/ccL3CtUt.s:3694   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccL3CtUt.s:3701   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccL3CtUt.s:3806   .text.vTaskRemoveFromUnorderedEventList:0000000000000074 $d
     /tmp/ccL3CtUt.s:3817   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccL3CtUt.s:3824   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccL3CtUt.s:3877   .text.vTaskSetTimeOutState:0000000000000030 $d
     /tmp/ccL3CtUt.s:3883   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccL3CtUt.s:3890   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccL3CtUt.s:3910   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
ARM GAS  /tmp/ccL3CtUt.s 			page 220


     /tmp/ccL3CtUt.s:3916   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccL3CtUt.s:3923   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccL3CtUt.s:4056   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/ccL3CtUt.s:4063   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccL3CtUt.s:4070   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccL3CtUt.s:4085   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccL3CtUt.s:4090   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccL3CtUt.s:4097   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccL3CtUt.s:4123   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccL3CtUt.s:4130   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccL3CtUt.s:4150   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccL3CtUt.s:4157   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccL3CtUt.s:4268   .text.vTaskGetInfo:0000000000000074 $d
     /tmp/ccL3CtUt.s:4273   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccL3CtUt.s:4279   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccL3CtUt.s:4379   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccL3CtUt.s:4386   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccL3CtUt.s:4501   .text.uxTaskGetSystemState:0000000000000098 $d
     /tmp/ccL3CtUt.s:4511   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccL3CtUt.s:4518   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccL3CtUt.s:4550   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
     /tmp/ccL3CtUt.s:4555   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccL3CtUt.s:4562   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccL3CtUt.s:4578   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccL3CtUt.s:4583   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccL3CtUt.s:4590   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccL3CtUt.s:4621   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccL3CtUt.s:4627   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccL3CtUt.s:4634   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccL3CtUt.s:4752   .text.xTaskPriorityInherit:000000000000008c $d
     /tmp/ccL3CtUt.s:4759   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccL3CtUt.s:4766   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccL3CtUt.s:4901   .text.xTaskPriorityDisinherit:0000000000000084 $d
     /tmp/ccL3CtUt.s:4908   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccL3CtUt.s:4915   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccL3CtUt.s:5058   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000094 $d
     /tmp/ccL3CtUt.s:5065   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccL3CtUt.s:5072   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccL3CtUt.s:5095   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccL3CtUt.s:5100   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccL3CtUt.s:5107   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccL3CtUt.s:5133   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccL3CtUt.s:5138   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccL3CtUt.s:5145   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccL3CtUt.s:5240   .text.ulTaskNotifyTake:0000000000000070 $d
     /tmp/ccL3CtUt.s:5246   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccL3CtUt.s:5253   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccL3CtUt.s:5368   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/ccL3CtUt.s:5374   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccL3CtUt.s:5381   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccL3CtUt.s:5425   .text.xTaskGenericNotify:000000000000002a $d
     /tmp/ccL3CtUt.s:5615   .text.xTaskGenericNotify:00000000000000f0 $d
     /tmp/ccL3CtUt.s:5623   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccL3CtUt.s:5630   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccL3CtUt.s:5693   .text.xTaskGenericNotifyFromISR:000000000000004a $d
     /tmp/ccL3CtUt.s:5903   .text.xTaskGenericNotifyFromISR:0000000000000120 $d
     /tmp/ccL3CtUt.s:5913   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
ARM GAS  /tmp/ccL3CtUt.s 			page 221


     /tmp/ccL3CtUt.s:5920   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccL3CtUt.s:6086   .text.vTaskNotifyGiveFromISR:00000000000000b4 $d
     /tmp/ccL3CtUt.s:6096   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccL3CtUt.s:6103   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccL3CtUt.s:6157   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/ccL3CtUt.s:6167   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccL3CtUt.s:6163   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccL3CtUt.s:6170   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccL3CtUt.s:6174   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccL3CtUt.s:6177   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccL3CtUt.s:6181   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccL3CtUt.s:6184   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccL3CtUt.s:6188   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccL3CtUt.s:6191   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccL3CtUt.s:6195   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccL3CtUt.s:6198   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccL3CtUt.s:6202   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccL3CtUt.s:6205   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccL3CtUt.s:6209   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccL3CtUt.s:6212   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccL3CtUt.s:6216   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccL3CtUt.s:6219   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccL3CtUt.s:6223   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccL3CtUt.s:6226   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccL3CtUt.s:6230   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccL3CtUt.s:6233   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccL3CtUt.s:6237   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccL3CtUt.s:6240   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccL3CtUt.s:6244   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccL3CtUt.s:6247   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccL3CtUt.s:6251   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccL3CtUt.s:6254   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccL3CtUt.s:6258   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccL3CtUt.s:6261   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccL3CtUt.s:6265   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccL3CtUt.s:6268   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccL3CtUt.s:6272   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccL3CtUt.s:6275   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccL3CtUt.s:6279   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccL3CtUt.s:6282   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccL3CtUt.s:6286   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccL3CtUt.s:6289   .bss.xTickCount:0000000000000000 $d
     /tmp/ccL3CtUt.s:6293   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccL3CtUt.s:6296   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccL3CtUt.s:6300   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccL3CtUt.s:6303   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccL3CtUt.s:5431   .text.xTaskGenericNotify:000000000000002f $d
     /tmp/ccL3CtUt.s:5431   .text.xTaskGenericNotify:0000000000000030 $t
     /tmp/ccL3CtUt.s:5699   .text.xTaskGenericNotifyFromISR:000000000000004f $d
     /tmp/ccL3CtUt.s:5699   .text.xTaskGenericNotifyFromISR:0000000000000050 $t

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
ARM GAS  /tmp/ccL3CtUt.s 			page 222


vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
