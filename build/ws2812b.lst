ARM GAS  /tmp/ccSJArTl.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ws2812b.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DMA_TransferError,"ax",%progbits
  18              		.align	1
  19              		.global	DMA_TransferError
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	DMA_TransferError:
  26              	.LFB135:
  27              		.file 1 "Core/Src/ws2812b.c"
   1:Core/Src/ws2812b.c **** /*
   2:Core/Src/ws2812b.c **** 
   3:Core/Src/ws2812b.c ****   WS2812B CPU and memory efficient library
   4:Core/Src/ws2812b.c **** 
   5:Core/Src/ws2812b.c ****   Date: 28.9.2016
   6:Core/Src/ws2812b.c **** 
   7:Core/Src/ws2812b.c ****   Author: Martin Hubacek
   8:Core/Src/ws2812b.c ****   	  	  http://www.martinhubacek.cz
   9:Core/Src/ws2812b.c ****   	  	  @hubmartin
  10:Core/Src/ws2812b.c **** 
  11:Core/Src/ws2812b.c ****   Licence: MIT License
  12:Core/Src/ws2812b.c **** 
  13:Core/Src/ws2812b.c **** */
  14:Core/Src/ws2812b.c **** 
  15:Core/Src/ws2812b.c **** #include <string.h>
  16:Core/Src/ws2812b.c **** 
  17:Core/Src/ws2812b.c **** #include "stm32f4xx_hal.h"
  18:Core/Src/ws2812b.c **** #include "ws2812b.h"
  19:Core/Src/ws2812b.c **** 
  20:Core/Src/ws2812b.c **** extern WS2812_Struct ws2812b;
  21:Core/Src/ws2812b.c **** 
  22:Core/Src/ws2812b.c **** // Define source arrays for my DMAs
  23:Core/Src/ws2812b.c **** uint32_t WS2812_IO_High[] =  { WS2812B_PINS };
  24:Core/Src/ws2812b.c **** uint32_t WS2812_IO_Low[] = {WS2812B_PINS << 16};
  25:Core/Src/ws2812b.c **** 
  26:Core/Src/ws2812b.c **** // WS2812 framebuffer - buffer for 2 LEDs - two times 24 bits
  27:Core/Src/ws2812b.c **** uint16_t ws2812bDmaBitBuffer[24 * 2];
  28:Core/Src/ws2812b.c **** 
  29:Core/Src/ws2812b.c **** // Gamma correction table
  30:Core/Src/ws2812b.c **** const uint8_t gammaTable[] = {
  31:Core/Src/ws2812b.c ****     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
ARM GAS  /tmp/ccSJArTl.s 			page 2


  32:Core/Src/ws2812b.c ****     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,
  33:Core/Src/ws2812b.c ****     1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,
  34:Core/Src/ws2812b.c ****     2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,
  35:Core/Src/ws2812b.c ****     5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,
  36:Core/Src/ws2812b.c ****    10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16,
  37:Core/Src/ws2812b.c ****    17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25,
  38:Core/Src/ws2812b.c ****    25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,
  39:Core/Src/ws2812b.c ****    37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,
  40:Core/Src/ws2812b.c ****    51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68,
  41:Core/Src/ws2812b.c ****    69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
  42:Core/Src/ws2812b.c ****    90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,
  43:Core/Src/ws2812b.c ****   115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  44:Core/Src/ws2812b.c ****   144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  45:Core/Src/ws2812b.c ****   177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  46:Core/Src/ws2812b.c ****   215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
  47:Core/Src/ws2812b.c **** 
  48:Core/Src/ws2812b.c **** static void ws2812b_gpio_init(void)
  49:Core/Src/ws2812b.c **** {
  50:Core/Src/ws2812b.c **** 	// WS2812B outputs
  51:Core/Src/ws2812b.c **** 	WS2812B_GPIO_CLK_ENABLE();
  52:Core/Src/ws2812b.c **** 	GPIO_InitTypeDef  GPIO_InitStruct;
  53:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Pin       = WS2812B_PINS;
  54:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
  55:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Pull      = GPIO_NOPULL;
  56:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
  57:Core/Src/ws2812b.c **** 	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
  58:Core/Src/ws2812b.c **** 
  59:Core/Src/ws2812b.c **** 	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
  60:Core/Src/ws2812b.c **** 	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
  61:Core/Src/ws2812b.c **** 		__HAL_RCC_GPIOD_CLK_ENABLE();
  62:Core/Src/ws2812b.c **** 
  63:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  64:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Pull = GPIO_NOPULL;
  65:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  66:Core/Src/ws2812b.c **** 
  67:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Pin = LED_BLUE_PIN;
  68:Core/Src/ws2812b.c **** 		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
  69:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
  70:Core/Src/ws2812b.c **** 		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
  71:Core/Src/ws2812b.c **** 	#endif
  72:Core/Src/ws2812b.c **** }
  73:Core/Src/ws2812b.c **** 
  74:Core/Src/ws2812b.c **** 
  75:Core/Src/ws2812b.c **** 
  76:Core/Src/ws2812b.c **** static void TIM1_init(void)
  77:Core/Src/ws2812b.c **** {
  78:Core/Src/ws2812b.c **** 	// TIM2 Periph clock enable
  79:Core/Src/ws2812b.c **** 	__HAL_RCC_TIM1_CLK_ENABLE();
  80:Core/Src/ws2812b.c **** 
  81:Core/Src/ws2812b.c **** 	// This computation of pulse length should work ok,
  82:Core/Src/ws2812b.c **** 	// at some slower core speeds it needs some tuning.
  83:Core/Src/ws2812b.c **** 	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to hav
  84:Core/Src/ws2812b.c **** 	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
  85:Core/Src/ws2812b.c **** 
  86:Core/Src/ws2812b.c **** 	uint32_t cc1 = (10 * tim_period) / 36;
  87:Core/Src/ws2812b.c **** 	uint32_t cc2 = (10 * tim_period) / 15;
  88:Core/Src/ws2812b.c **** 
ARM GAS  /tmp/ccSJArTl.s 			page 3


  89:Core/Src/ws2812b.c **** 	TIM1_handle.Instance = TIM1;
  90:Core/Src/ws2812b.c **** 
  91:Core/Src/ws2812b.c **** 	TIM1_handle.Init.Period            = tim_period;
  92:Core/Src/ws2812b.c **** 	TIM1_handle.Init.RepetitionCounter = 0;
  93:Core/Src/ws2812b.c **** 	TIM1_handle.Init.Prescaler         = 0;
  94:Core/Src/ws2812b.c **** 	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
  95:Core/Src/ws2812b.c **** 	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
  96:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_Init(&TIM1_handle);
  97:Core/Src/ws2812b.c **** 
  98:Core/Src/ws2812b.c **** 	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
  99:Core/Src/ws2812b.c **** 	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 100:Core/Src/ws2812b.c **** 
 101:Core/Src/ws2812b.c **** 	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 102:Core/Src/ws2812b.c **** 	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 103:Core/Src/ws2812b.c **** 	tim2OC1.Pulse        = cc1;
 104:Core/Src/ws2812b.c **** 	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 105:Core/Src/ws2812b.c **** 	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 106:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 107:Core/Src/ws2812b.c **** 
 108:Core/Src/ws2812b.c **** 	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 109:Core/Src/ws2812b.c **** 	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 110:Core/Src/ws2812b.c **** 	tim2OC2.Pulse        = cc2;
 111:Core/Src/ws2812b.c **** 	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 112:Core/Src/ws2812b.c **** 	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 113:Core/Src/ws2812b.c **** 	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 114:Core/Src/ws2812b.c **** 	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 115:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 116:Core/Src/ws2812b.c **** 
 117:Core/Src/ws2812b.c **** 
 118:Core/Src/ws2812b.c **** 	HAL_TIM_Base_Start(&TIM1_handle);
 119:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 120:Core/Src/ws2812b.c **** 
 121:Core/Src/ws2812b.c **** 	__HAL_TIM_DISABLE(&TIM1_handle);
 122:Core/Src/ws2812b.c **** 
 123:Core/Src/ws2812b.c **** }
 124:Core/Src/ws2812b.c **** 
 125:Core/Src/ws2812b.c **** 
 126:Core/Src/ws2812b.c **** 
 127:Core/Src/ws2812b.c **** DMA_HandleTypeDef     dmaUpdate;
 128:Core/Src/ws2812b.c **** DMA_HandleTypeDef     dmaCC1;
 129:Core/Src/ws2812b.c **** DMA_HandleTypeDef     dmaCC2;
 130:Core/Src/ws2812b.c **** #define BUFFER_SIZE		(sizeof(ws2812bDmaBitBuffer)/sizeof(uint16_t))
 131:Core/Src/ws2812b.c **** 
 132:Core/Src/ws2812b.c **** uint32_t dummy;
 133:Core/Src/ws2812b.c **** 
 134:Core/Src/ws2812b.c **** 
 135:Core/Src/ws2812b.c **** static void DMA2_init(void)
 136:Core/Src/ws2812b.c **** {
 137:Core/Src/ws2812b.c **** 
 138:Core/Src/ws2812b.c **** 	// TIM2 Update event
 139:Core/Src/ws2812b.c **** 	__HAL_RCC_DMA2_CLK_ENABLE();
 140:Core/Src/ws2812b.c **** 
 141:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 142:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 143:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 144:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 145:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
ARM GAS  /tmp/ccSJArTl.s 			page 4


 146:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 147:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 148:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 149:Core/Src/ws2812b.c **** 
 150:Core/Src/ws2812b.c **** 	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 151:Core/Src/ws2812b.c **** 	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 152:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 153:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 154:Core/Src/ws2812b.c **** 
 155:Core/Src/ws2812b.c **** 	dmaUpdate.Instance = DMA2_Stream5;
 156:Core/Src/ws2812b.c **** 	//dmaUpdate.XferCpltCallback  = TransferComplete;
 157:Core/Src/ws2812b.c **** 	//dmaUpdate.XferErrorCallback = TransferError;
 158:Core/Src/ws2812b.c **** 
 159:Core/Src/ws2812b.c **** 	HAL_DMA_DeInit(&dmaUpdate);
 160:Core/Src/ws2812b.c **** 	HAL_DMA_Init(&dmaUpdate);
 161:Core/Src/ws2812b.c **** 	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 162:Core/Src/ws2812b.c **** 	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 163:Core/Src/ws2812b.c **** 	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 164:Core/Src/ws2812b.c **** 	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);
 165:Core/Src/ws2812b.c **** 
 166:Core/Src/ws2812b.c **** 
 167:Core/Src/ws2812b.c **** 	// TIM2 CC1 event
 168:Core/Src/ws2812b.c **** 	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 169:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 170:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 171:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 172:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 173:Core/Src/ws2812b.c **** 	dmaCC1.Init.Mode = DMA_CIRCULAR;
 174:Core/Src/ws2812b.c **** 	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 175:Core/Src/ws2812b.c **** 	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 176:Core/Src/ws2812b.c **** 
 177:Core/Src/ws2812b.c **** 	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 178:Core/Src/ws2812b.c **** 	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 179:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 180:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 181:Core/Src/ws2812b.c **** 
 182:Core/Src/ws2812b.c **** 	dmaCC1.Instance = DMA2_Stream1;
 183:Core/Src/ws2812b.c **** 	//dmaUpdate.XferCpltCallback  = TransferComplete;
 184:Core/Src/ws2812b.c **** 	//dmaUpdate.XferErrorCallback = TransferError;
 185:Core/Src/ws2812b.c **** 	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
 186:Core/Src/ws2812b.c **** 	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 187:Core/Src/ws2812b.c **** 	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 188:Core/Src/ws2812b.c **** 	HAL_DMA_DeInit(&dmaCC1);
 189:Core/Src/ws2812b.c **** 	HAL_DMA_Init(&dmaCC1);
 190:Core/Src/ws2812b.c **** 	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_
 191:Core/Src/ws2812b.c **** 	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR
 192:Core/Src/ws2812b.c **** 
 193:Core/Src/ws2812b.c **** 
 194:Core/Src/ws2812b.c **** 	// TIM2 CC2 event
 195:Core/Src/ws2812b.c **** 	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 196:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 197:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 198:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 199:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 200:Core/Src/ws2812b.c **** 	dmaCC2.Init.Mode = DMA_CIRCULAR;
 201:Core/Src/ws2812b.c **** 	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 202:Core/Src/ws2812b.c **** 	dmaCC2.Init.Channel = DMA_CHANNEL_6;
ARM GAS  /tmp/ccSJArTl.s 			page 5


 203:Core/Src/ws2812b.c **** 
 204:Core/Src/ws2812b.c **** 	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 205:Core/Src/ws2812b.c **** 	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 206:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 207:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 208:Core/Src/ws2812b.c **** 
 209:Core/Src/ws2812b.c **** 	dmaCC2.Instance = DMA2_Stream2;
 210:Core/Src/ws2812b.c **** 
 211:Core/Src/ws2812b.c **** 	HAL_DMA_DeInit(&dmaCC2);
 212:Core/Src/ws2812b.c **** 
 213:Core/Src/ws2812b.c **** 	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 214:Core/Src/ws2812b.c **** 	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 215:Core/Src/ws2812b.c **** 	dmaCC2.XferErrorCallback = DMA_TransferError;
 216:Core/Src/ws2812b.c **** 
 217:Core/Src/ws2812b.c **** 	HAL_DMA_Init(&dmaCC2);
 218:Core/Src/ws2812b.c **** 	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 219:Core/Src/ws2812b.c **** 	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 220:Core/Src/ws2812b.c **** 	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 221:Core/Src/ws2812b.c **** 	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);
 222:Core/Src/ws2812b.c **** 
 223:Core/Src/ws2812b.c **** 	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);
 224:Core/Src/ws2812b.c **** 
 225:Core/Src/ws2812b.c **** }
 226:Core/Src/ws2812b.c **** 
 227:Core/Src/ws2812b.c **** 
 228:Core/Src/ws2812b.c **** 
 229:Core/Src/ws2812b.c **** 
 230:Core/Src/ws2812b.c **** 
 231:Core/Src/ws2812b.c **** 
 232:Core/Src/ws2812b.c **** static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
 233:Core/Src/ws2812b.c **** {
 234:Core/Src/ws2812b.c **** 
 235:Core/Src/ws2812b.c **** 	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 236:Core/Src/ws2812b.c **** 	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 237:Core/Src/ws2812b.c **** 	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 238:Core/Src/ws2812b.c **** 
 239:Core/Src/ws2812b.c **** 	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 240:Core/Src/ws2812b.c **** 		bItem->frameBufferCounter = 0;
 241:Core/Src/ws2812b.c **** 
 242:Core/Src/ws2812b.c **** 	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 243:Core/Src/ws2812b.c **** }
 244:Core/Src/ws2812b.c **** 
 245:Core/Src/ws2812b.c **** 
 246:Core/Src/ws2812b.c **** // Transmit the framebuffer
 247:Core/Src/ws2812b.c **** static void WS2812_sendbuf()
 248:Core/Src/ws2812b.c **** {
 249:Core/Src/ws2812b.c **** 	// transmission complete flag
 250:Core/Src/ws2812b.c **** 	ws2812b.transferComplete = 0;
 251:Core/Src/ws2812b.c **** 
 252:Core/Src/ws2812b.c **** 	uint32_t i;
 253:Core/Src/ws2812b.c **** 
 254:Core/Src/ws2812b.c **** 	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 255:Core/Src/ws2812b.c **** 	{
 256:Core/Src/ws2812b.c **** 		ws2812b.item[i].frameBufferCounter = 0;
 257:Core/Src/ws2812b.c **** 
 258:Core/Src/ws2812b.c **** 		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 259:Core/Src/ws2812b.c **** 		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
ARM GAS  /tmp/ccSJArTl.s 			page 6


 260:Core/Src/ws2812b.c **** 	}
 261:Core/Src/ws2812b.c **** 
 262:Core/Src/ws2812b.c **** 	// clear all DMA flags
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 265:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 266:Core/Src/ws2812b.c **** 
 267:Core/Src/ws2812b.c **** 
 268:Core/Src/ws2812b.c **** 
 269:Core/Src/ws2812b.c **** 	// configure the number of bytes to be transferred by the DMA controller
 270:Core/Src/ws2812b.c **** 	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 271:Core/Src/ws2812b.c **** 	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 272:Core/Src/ws2812b.c **** 	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 273:Core/Src/ws2812b.c **** 
 274:Core/Src/ws2812b.c **** 	// clear all TIM2 flags
 275:Core/Src/ws2812b.c **** 	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | 
 276:Core/Src/ws2812b.c **** 
 277:Core/Src/ws2812b.c **** 	// enable DMA channels
 278:Core/Src/ws2812b.c **** 	__HAL_DMA_ENABLE(&dmaUpdate);
 279:Core/Src/ws2812b.c **** 	__HAL_DMA_ENABLE(&dmaCC1);
 280:Core/Src/ws2812b.c **** 	__HAL_DMA_ENABLE(&dmaCC2);
 281:Core/Src/ws2812b.c **** 
 282:Core/Src/ws2812b.c **** 	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
 283:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 284:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 285:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 286:Core/Src/ws2812b.c **** 
 287:Core/Src/ws2812b.c **** 	TIM1->CNT = tim_period-1;
 288:Core/Src/ws2812b.c **** 
 289:Core/Src/ws2812b.c **** 	// start TIM2
 290:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE(&TIM1_handle);
 291:Core/Src/ws2812b.c **** }
 292:Core/Src/ws2812b.c **** 
 293:Core/Src/ws2812b.c **** 
 294:Core/Src/ws2812b.c **** void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
 295:Core/Src/ws2812b.c **** {
  28              		.loc 1 295 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 82B0     		sub	sp, sp, #8
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
 296:Core/Src/ws2812b.c **** 	volatile int i = 0;
  37              		.loc 1 296 0
  38 0002 0023     		movs	r3, #0
  39 0004 0193     		str	r3, [sp, #4]
 297:Core/Src/ws2812b.c **** 	i++;
  40              		.loc 1 297 0
  41 0006 019B     		ldr	r3, [sp, #4]
  42 0008 0133     		adds	r3, r3, #1
  43 000a 0193     		str	r3, [sp, #4]
 298:Core/Src/ws2812b.c **** }
  44              		.loc 1 298 0
  45 000c 02B0     		add	sp, sp, #8
ARM GAS  /tmp/ccSJArTl.s 			page 7


  46              	.LCFI1:
  47              		.cfi_def_cfa_offset 0
  48              		@ sp needed
  49 000e 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE135:
  53              		.section	.text.ws2812b_gpio_init,"ax",%progbits
  54              		.align	1
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu fpv4-sp-d16
  60              	ws2812b_gpio_init:
  61              	.LFB130:
  49:Core/Src/ws2812b.c **** 	// WS2812B outputs
  62              		.loc 1 49 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 32
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  67              	.LCFI2:
  68              		.cfi_def_cfa_offset 20
  69              		.cfi_offset 4, -20
  70              		.cfi_offset 5, -16
  71              		.cfi_offset 6, -12
  72              		.cfi_offset 7, -8
  73              		.cfi_offset 14, -4
  74 0002 89B0     		sub	sp, sp, #36
  75              	.LCFI3:
  76              		.cfi_def_cfa_offset 56
  77              	.LBB2:
  51:Core/Src/ws2812b.c **** 	GPIO_InitTypeDef  GPIO_InitStruct;
  78              		.loc 1 51 0
  79 0004 0025     		movs	r5, #0
  80 0006 0195     		str	r5, [sp, #4]
  81 0008 194C     		ldr	r4, .L5
  82 000a 236B     		ldr	r3, [r4, #48]
  83 000c 43F00403 		orr	r3, r3, #4
  84 0010 2363     		str	r3, [r4, #48]
  85 0012 236B     		ldr	r3, [r4, #48]
  86 0014 03F00403 		and	r3, r3, #4
  87 0018 0193     		str	r3, [sp, #4]
  88 001a 019B     		ldr	r3, [sp, #4]
  89              	.LBE2:
  53:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
  90              		.loc 1 53 0
  91 001c 4FF40056 		mov	r6, #8192
  92 0020 0396     		str	r6, [sp, #12]
  54:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Pull      = GPIO_NOPULL;
  93              		.loc 1 54 0
  94 0022 0127     		movs	r7, #1
  95 0024 0497     		str	r7, [sp, #16]
  55:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
  96              		.loc 1 55 0
  97 0026 0595     		str	r5, [sp, #20]
  56:Core/Src/ws2812b.c **** 	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
  98              		.loc 1 56 0
ARM GAS  /tmp/ccSJArTl.s 			page 8


  99 0028 0695     		str	r5, [sp, #24]
  57:Core/Src/ws2812b.c **** 
 100              		.loc 1 57 0
 101 002a 03A9     		add	r1, sp, #12
 102 002c 1148     		ldr	r0, .L5+4
 103 002e FFF7FEFF 		bl	HAL_GPIO_Init
 104              	.LVL1:
 105              	.LBB3:
  61:Core/Src/ws2812b.c **** 
 106              		.loc 1 61 0
 107 0032 0295     		str	r5, [sp, #8]
 108 0034 236B     		ldr	r3, [r4, #48]
 109 0036 43F00803 		orr	r3, r3, #8
 110 003a 2363     		str	r3, [r4, #48]
 111 003c 236B     		ldr	r3, [r4, #48]
 112 003e 03F00803 		and	r3, r3, #8
 113 0042 0293     		str	r3, [sp, #8]
 114 0044 029B     		ldr	r3, [sp, #8]
 115              	.LBE3:
  63:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Pull = GPIO_NOPULL;
 116              		.loc 1 63 0
 117 0046 0497     		str	r7, [sp, #16]
  64:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 118              		.loc 1 64 0
 119 0048 0595     		str	r5, [sp, #20]
  65:Core/Src/ws2812b.c **** 
 120              		.loc 1 65 0
 121 004a 0223     		movs	r3, #2
 122 004c 0693     		str	r3, [sp, #24]
  67:Core/Src/ws2812b.c **** 		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 123              		.loc 1 67 0
 124 004e 4FF40043 		mov	r3, #32768
 125 0052 0393     		str	r3, [sp, #12]
  68:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 126              		.loc 1 68 0
 127 0054 A4F53054 		sub	r4, r4, #11264
 128 0058 03A9     		add	r1, sp, #12
 129 005a 2046     		mov	r0, r4
 130 005c FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL2:
  69:Core/Src/ws2812b.c **** 		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 132              		.loc 1 69 0
 133 0060 0396     		str	r6, [sp, #12]
  70:Core/Src/ws2812b.c **** 	#endif
 134              		.loc 1 70 0
 135 0062 03A9     		add	r1, sp, #12
 136 0064 2046     		mov	r0, r4
 137 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 138              	.LVL3:
  72:Core/Src/ws2812b.c **** 
 139              		.loc 1 72 0
 140 006a 09B0     		add	sp, sp, #36
 141              	.LCFI4:
 142              		.cfi_def_cfa_offset 20
 143              		@ sp needed
 144 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 145              	.L6:
ARM GAS  /tmp/ccSJArTl.s 			page 9


 146 006e 00BF     		.align	2
 147              	.L5:
 148 0070 00380240 		.word	1073887232
 149 0074 00080240 		.word	1073874944
 150              		.cfi_endproc
 151              	.LFE130:
 153              		.section	.text.DMA2_init,"ax",%progbits
 154              		.align	1
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu fpv4-sp-d16
 160              	DMA2_init:
 161              	.LFB132:
 136:Core/Src/ws2812b.c **** 
 162              		.loc 1 136 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 8
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 167              	.LCFI5:
 168              		.cfi_def_cfa_offset 36
 169              		.cfi_offset 4, -36
 170              		.cfi_offset 5, -32
 171              		.cfi_offset 6, -28
 172              		.cfi_offset 7, -24
 173              		.cfi_offset 8, -20
 174              		.cfi_offset 9, -16
 175              		.cfi_offset 10, -12
 176              		.cfi_offset 11, -8
 177              		.cfi_offset 14, -4
 178 0004 83B0     		sub	sp, sp, #12
 179              	.LCFI6:
 180              		.cfi_def_cfa_offset 48
 181              	.LBB4:
 139:Core/Src/ws2812b.c **** 
 182              		.loc 1 139 0
 183 0006 0025     		movs	r5, #0
 184 0008 0195     		str	r5, [sp, #4]
 185 000a 464B     		ldr	r3, .L9
 186 000c 1A6B     		ldr	r2, [r3, #48]
 187 000e 42F48002 		orr	r2, r2, #4194304
 188 0012 1A63     		str	r2, [r3, #48]
 189 0014 1B6B     		ldr	r3, [r3, #48]
 190 0016 03F48003 		and	r3, r3, #4194304
 191 001a 0193     		str	r3, [sp, #4]
 192 001c 019B     		ldr	r3, [sp, #4]
 193              	.LBE4:
 141:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 194              		.loc 1 141 0
 195 001e 424C     		ldr	r4, .L9+4
 196 0020 4FF0400A 		mov	r10, #64
 197 0024 C4F808A0 		str	r10, [r4, #8]
 142:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 198              		.loc 1 142 0
 199 0028 E560     		str	r5, [r4, #12]
 143:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
ARM GAS  /tmp/ccSJArTl.s 			page 10


 200              		.loc 1 143 0
 201 002a 2561     		str	r5, [r4, #16]
 144:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 202              		.loc 1 144 0
 203 002c 4FF4805B 		mov	fp, #4096
 204 0030 C4F814B0 		str	fp, [r4, #20]
 145:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 205              		.loc 1 145 0
 206 0034 4FF48043 		mov	r3, #16384
 207 0038 A361     		str	r3, [r4, #24]
 146:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 208              		.loc 1 146 0
 209 003a 4FF48079 		mov	r9, #256
 210 003e C4F81C90 		str	r9, [r4, #28]
 147:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 211              		.loc 1 147 0
 212 0042 4FF44038 		mov	r8, #196608
 213 0046 C4F82080 		str	r8, [r4, #32]
 148:Core/Src/ws2812b.c **** 
 214              		.loc 1 148 0
 215 004a 4FF04067 		mov	r7, #201326592
 216 004e 6760     		str	r7, [r4, #4]
 150:Core/Src/ws2812b.c **** 	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 217              		.loc 1 150 0
 218 0050 6562     		str	r5, [r4, #36]
 151:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 219              		.loc 1 151 0
 220 0052 0326     		movs	r6, #3
 221 0054 A662     		str	r6, [r4, #40]
 152:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 222              		.loc 1 152 0
 223 0056 E562     		str	r5, [r4, #44]
 153:Core/Src/ws2812b.c **** 
 224              		.loc 1 153 0
 225 0058 2563     		str	r5, [r4, #48]
 155:Core/Src/ws2812b.c **** 	//dmaUpdate.XferCpltCallback  = TransferComplete;
 226              		.loc 1 155 0
 227 005a 344B     		ldr	r3, .L9+8
 228 005c 2360     		str	r3, [r4]
 159:Core/Src/ws2812b.c **** 	HAL_DMA_Init(&dmaUpdate);
 229              		.loc 1 159 0
 230 005e 2046     		mov	r0, r4
 231 0060 FFF7FEFF 		bl	HAL_DMA_DeInit
 232              	.LVL4:
 160:Core/Src/ws2812b.c **** 	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 233              		.loc 1 160 0
 234 0064 2046     		mov	r0, r4
 235 0066 FFF7FEFF 		bl	HAL_DMA_Init
 236              	.LVL5:
 163:Core/Src/ws2812b.c **** 	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);
 237              		.loc 1 163 0
 238 006a 3023     		movs	r3, #48
 239 006c 304A     		ldr	r2, .L9+12
 240 006e 3149     		ldr	r1, .L9+16
 241 0070 2046     		mov	r0, r4
 242 0072 FFF7FEFF 		bl	HAL_DMA_Start
 243              	.LVL6:
ARM GAS  /tmp/ccSJArTl.s 			page 11


 168:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 244              		.loc 1 168 0
 245 0076 304C     		ldr	r4, .L9+20
 246 0078 C4F808A0 		str	r10, [r4, #8]
 169:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 247              		.loc 1 169 0
 248 007c E560     		str	r5, [r4, #12]
 170:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 249              		.loc 1 170 0
 250 007e 4FF48063 		mov	r3, #1024
 251 0082 2361     		str	r3, [r4, #16]
 171:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 252              		.loc 1 171 0
 253 0084 4FF40063 		mov	r3, #2048
 254 0088 6361     		str	r3, [r4, #20]
 172:Core/Src/ws2812b.c **** 	dmaCC1.Init.Mode = DMA_CIRCULAR;
 255              		.loc 1 172 0
 256 008a 4FF40053 		mov	r3, #8192
 257 008e A361     		str	r3, [r4, #24]
 173:Core/Src/ws2812b.c **** 	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 258              		.loc 1 173 0
 259 0090 C4F81C90 		str	r9, [r4, #28]
 174:Core/Src/ws2812b.c **** 	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 260              		.loc 1 174 0
 261 0094 C4F82080 		str	r8, [r4, #32]
 175:Core/Src/ws2812b.c **** 
 262              		.loc 1 175 0
 263 0098 6760     		str	r7, [r4, #4]
 177:Core/Src/ws2812b.c **** 	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 264              		.loc 1 177 0
 265 009a 6562     		str	r5, [r4, #36]
 178:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 266              		.loc 1 178 0
 267 009c A662     		str	r6, [r4, #40]
 179:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 268              		.loc 1 179 0
 269 009e E562     		str	r5, [r4, #44]
 180:Core/Src/ws2812b.c **** 
 270              		.loc 1 180 0
 271 00a0 2563     		str	r5, [r4, #48]
 182:Core/Src/ws2812b.c **** 	//dmaUpdate.XferCpltCallback  = TransferComplete;
 272              		.loc 1 182 0
 273 00a2 264B     		ldr	r3, .L9+24
 274 00a4 2360     		str	r3, [r4]
 188:Core/Src/ws2812b.c **** 	HAL_DMA_Init(&dmaCC1);
 275              		.loc 1 188 0
 276 00a6 2046     		mov	r0, r4
 277 00a8 FFF7FEFF 		bl	HAL_DMA_DeInit
 278              	.LVL7:
 189:Core/Src/ws2812b.c **** 	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_
 279              		.loc 1 189 0
 280 00ac 2046     		mov	r0, r4
 281 00ae FFF7FEFF 		bl	HAL_DMA_Init
 282              	.LVL8:
 190:Core/Src/ws2812b.c **** 	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR
 283              		.loc 1 190 0
 284 00b2 3023     		movs	r3, #48
ARM GAS  /tmp/ccSJArTl.s 			page 12


 285 00b4 224A     		ldr	r2, .L9+28
 286 00b6 2349     		ldr	r1, .L9+32
 287 00b8 2046     		mov	r0, r4
 288 00ba FFF7FEFF 		bl	HAL_DMA_Start
 289              	.LVL9:
 195:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 290              		.loc 1 195 0
 291 00be 224C     		ldr	r4, .L9+36
 292 00c0 C4F808A0 		str	r10, [r4, #8]
 196:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 293              		.loc 1 196 0
 294 00c4 E560     		str	r5, [r4, #12]
 197:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 295              		.loc 1 197 0
 296 00c6 2561     		str	r5, [r4, #16]
 198:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 297              		.loc 1 198 0
 298 00c8 C4F814B0 		str	fp, [r4, #20]
 199:Core/Src/ws2812b.c **** 	dmaCC2.Init.Mode = DMA_CIRCULAR;
 299              		.loc 1 199 0
 300 00cc 4FF48043 		mov	r3, #16384
 301 00d0 A361     		str	r3, [r4, #24]
 200:Core/Src/ws2812b.c **** 	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 302              		.loc 1 200 0
 303 00d2 C4F81C90 		str	r9, [r4, #28]
 201:Core/Src/ws2812b.c **** 	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 304              		.loc 1 201 0
 305 00d6 C4F82080 		str	r8, [r4, #32]
 202:Core/Src/ws2812b.c **** 
 306              		.loc 1 202 0
 307 00da 6760     		str	r7, [r4, #4]
 204:Core/Src/ws2812b.c **** 	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 308              		.loc 1 204 0
 309 00dc 6562     		str	r5, [r4, #36]
 205:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 310              		.loc 1 205 0
 311 00de A662     		str	r6, [r4, #40]
 206:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 312              		.loc 1 206 0
 313 00e0 E562     		str	r5, [r4, #44]
 207:Core/Src/ws2812b.c **** 
 314              		.loc 1 207 0
 315 00e2 2563     		str	r5, [r4, #48]
 209:Core/Src/ws2812b.c **** 
 316              		.loc 1 209 0
 317 00e4 194B     		ldr	r3, .L9+40
 318 00e6 2360     		str	r3, [r4]
 211:Core/Src/ws2812b.c **** 
 319              		.loc 1 211 0
 320 00e8 2046     		mov	r0, r4
 321 00ea FFF7FEFF 		bl	HAL_DMA_DeInit
 322              	.LVL10:
 213:Core/Src/ws2812b.c **** 	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 323              		.loc 1 213 0
 324 00ee 184B     		ldr	r3, .L9+44
 325 00f0 E363     		str	r3, [r4, #60]
 214:Core/Src/ws2812b.c **** 	dmaCC2.XferErrorCallback = DMA_TransferError;
ARM GAS  /tmp/ccSJArTl.s 			page 13


 326              		.loc 1 214 0
 327 00f2 184B     		ldr	r3, .L9+48
 328 00f4 2364     		str	r3, [r4, #64]
 215:Core/Src/ws2812b.c **** 
 329              		.loc 1 215 0
 330 00f6 184B     		ldr	r3, .L9+52
 331 00f8 E364     		str	r3, [r4, #76]
 217:Core/Src/ws2812b.c **** 	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 332              		.loc 1 217 0
 333 00fa 2046     		mov	r0, r4
 334 00fc FFF7FEFF 		bl	HAL_DMA_Init
 335              	.LVL11:
 218:Core/Src/ws2812b.c **** 	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 336              		.loc 1 218 0
 337 0100 2A46     		mov	r2, r5
 338 0102 2946     		mov	r1, r5
 339 0104 3A20     		movs	r0, #58
 340 0106 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 341              	.LVL12:
 219:Core/Src/ws2812b.c **** 	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 342              		.loc 1 219 0
 343 010a 3A20     		movs	r0, #58
 344 010c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 345              	.LVL13:
 220:Core/Src/ws2812b.c **** 	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);
 346              		.loc 1 220 0
 347 0110 3023     		movs	r3, #48
 348 0112 074A     		ldr	r2, .L9+12
 349 0114 1149     		ldr	r1, .L9+56
 350 0116 2046     		mov	r0, r4
 351 0118 FFF7FEFF 		bl	HAL_DMA_Start_IT
 352              	.LVL14:
 225:Core/Src/ws2812b.c **** 
 353              		.loc 1 225 0
 354 011c 03B0     		add	sp, sp, #12
 355              	.LCFI7:
 356              		.cfi_def_cfa_offset 36
 357              		@ sp needed
 358 011e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 359              	.L10:
 360 0122 00BF     		.align	2
 361              	.L9:
 362 0124 00380240 		.word	1073887232
 363 0128 00000000 		.word	dmaUpdate
 364 012c 88640240 		.word	1073898632
 365 0130 18080240 		.word	1073874968
 366 0134 00000000 		.word	.LANCHOR0
 367 0138 00000000 		.word	dmaCC1
 368 013c 28640240 		.word	1073898536
 369 0140 1A080240 		.word	1073874970
 370 0144 00000000 		.word	ws2812bDmaBitBuffer
 371 0148 00000000 		.word	dmaCC2
 372 014c 40640240 		.word	1073898560
 373 0150 00000000 		.word	DMA_TransferCompleteHandler
 374 0154 00000000 		.word	DMA_TransferHalfHandler
 375 0158 00000000 		.word	DMA_TransferError
 376 015c 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccSJArTl.s 			page 14


 377              		.cfi_endproc
 378              	.LFE132:
 380              		.section	.text.TIM1_init,"ax",%progbits
 381              		.align	1
 382              		.syntax unified
 383              		.thumb
 384              		.thumb_func
 385              		.fpu fpv4-sp-d16
 387              	TIM1_init:
 388              	.LFB131:
  77:Core/Src/ws2812b.c **** 	// TIM2 Periph clock enable
 389              		.loc 1 77 0
 390              		.cfi_startproc
 391              		@ args = 0, pretend = 0, frame = 8
 392              		@ frame_needed = 0, uses_anonymous_args = 0
 393 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 394              	.LCFI8:
 395              		.cfi_def_cfa_offset 24
 396              		.cfi_offset 4, -24
 397              		.cfi_offset 5, -20
 398              		.cfi_offset 6, -16
 399              		.cfi_offset 7, -12
 400              		.cfi_offset 8, -8
 401              		.cfi_offset 14, -4
 402 0004 82B0     		sub	sp, sp, #8
 403              	.LCFI9:
 404              		.cfi_def_cfa_offset 32
 405              	.LBB5:
  79:Core/Src/ws2812b.c **** 
 406              		.loc 1 79 0
 407 0006 0024     		movs	r4, #0
 408 0008 0194     		str	r4, [sp, #4]
 409 000a 354B     		ldr	r3, .L14
 410 000c 5A6C     		ldr	r2, [r3, #68]
 411 000e 42F00102 		orr	r2, r2, #1
 412 0012 5A64     		str	r2, [r3, #68]
 413 0014 5B6C     		ldr	r3, [r3, #68]
 414 0016 03F00103 		and	r3, r3, #1
 415 001a 0193     		str	r3, [sp, #4]
 416 001c 019B     		ldr	r3, [sp, #4]
 417              	.LBE5:
  83:Core/Src/ws2812b.c **** 	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 418              		.loc 1 83 0
 419 001e 314B     		ldr	r3, .L14+4
 420 0020 1A68     		ldr	r2, [r3]
 421 0022 130A     		lsrs	r3, r2, #8
 422 0024 3049     		ldr	r1, .L14+8
 423 0026 A1FB0313 		umull	r1, r3, r1, r3
 424 002a 1B09     		lsrs	r3, r3, #4
 425 002c 2F49     		ldr	r1, .L14+12
 426 002e 0B60     		str	r3, [r1]
  84:Core/Src/ws2812b.c **** 
 427              		.loc 1 84 0
 428 0030 2F49     		ldr	r1, .L14+16
 429 0032 A1FB0212 		umull	r1, r2, r1, r2
 430 0036 D20A     		lsrs	r2, r2, #11
 431 0038 2E49     		ldr	r1, .L14+20
ARM GAS  /tmp/ccSJArTl.s 			page 15


 432 003a 0A60     		str	r2, [r1]
  86:Core/Src/ws2812b.c **** 	uint32_t cc2 = (10 * tim_period) / 15;
 433              		.loc 1 86 0
 434 003c 03EB8301 		add	r1, r3, r3, lsl #2
 435 0040 4A00     		lsls	r2, r1, #1
 436 0042 2D49     		ldr	r1, .L14+24
 437 0044 A1FB0201 		umull	r0, r1, r1, r2
 438 0048 CF08     		lsrs	r7, r1, #3
 439              	.LVL15:
  87:Core/Src/ws2812b.c **** 
 440              		.loc 1 87 0
 441 004a 2C49     		ldr	r1, .L14+28
 442 004c A1FB0212 		umull	r1, r2, r1, r2
 443 0050 D608     		lsrs	r6, r2, #3
 444              	.LVL16:
  89:Core/Src/ws2812b.c **** 
 445              		.loc 1 89 0
 446 0052 2B4D     		ldr	r5, .L14+32
 447 0054 2B4A     		ldr	r2, .L14+36
 448 0056 2A60     		str	r2, [r5]
  91:Core/Src/ws2812b.c **** 	TIM1_handle.Init.RepetitionCounter = 0;
 449              		.loc 1 91 0
 450 0058 EB60     		str	r3, [r5, #12]
  92:Core/Src/ws2812b.c **** 	TIM1_handle.Init.Prescaler         = 0;
 451              		.loc 1 92 0
 452 005a 6C61     		str	r4, [r5, #20]
  93:Core/Src/ws2812b.c **** 	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 453              		.loc 1 93 0
 454 005c 6C60     		str	r4, [r5, #4]
  94:Core/Src/ws2812b.c **** 	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 455              		.loc 1 94 0
 456 005e 2C61     		str	r4, [r5, #16]
  95:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_Init(&TIM1_handle);
 457              		.loc 1 95 0
 458 0060 AC60     		str	r4, [r5, #8]
  96:Core/Src/ws2812b.c **** 
 459              		.loc 1 96 0
 460 0062 2846     		mov	r0, r5
 461 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 462              	.LVL17:
  98:Core/Src/ws2812b.c **** 	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 463              		.loc 1 98 0
 464 0068 2246     		mov	r2, r4
 465 006a 2146     		mov	r1, r4
 466 006c 1920     		movs	r0, #25
 467 006e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 468              	.LVL18:
  99:Core/Src/ws2812b.c **** 
 469              		.loc 1 99 0
 470 0072 1920     		movs	r0, #25
 471 0074 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 472              	.LVL19:
 101:Core/Src/ws2812b.c **** 	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 473              		.loc 1 101 0
 474 0078 2349     		ldr	r1, .L14+40
 475 007a 4FF06008 		mov	r8, #96
 476 007e C1F80080 		str	r8, [r1]
ARM GAS  /tmp/ccSJArTl.s 			page 16


 102:Core/Src/ws2812b.c **** 	tim2OC1.Pulse        = cc1;
 477              		.loc 1 102 0
 478 0082 8C60     		str	r4, [r1, #8]
 103:Core/Src/ws2812b.c **** 	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 479              		.loc 1 103 0
 480 0084 4F60     		str	r7, [r1, #4]
 104:Core/Src/ws2812b.c **** 	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 481              		.loc 1 104 0
 482 0086 CC60     		str	r4, [r1, #12]
 105:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 483              		.loc 1 105 0
 484 0088 0C61     		str	r4, [r1, #16]
 106:Core/Src/ws2812b.c **** 
 485              		.loc 1 106 0
 486 008a 2246     		mov	r2, r4
 487 008c 2846     		mov	r0, r5
 488 008e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 489              	.LVL20:
 108:Core/Src/ws2812b.c **** 	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 490              		.loc 1 108 0
 491 0092 1E49     		ldr	r1, .L14+44
 492 0094 C1F80080 		str	r8, [r1]
 109:Core/Src/ws2812b.c **** 	tim2OC2.Pulse        = cc2;
 493              		.loc 1 109 0
 494 0098 8C60     		str	r4, [r1, #8]
 110:Core/Src/ws2812b.c **** 	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 495              		.loc 1 110 0
 496 009a 4E60     		str	r6, [r1, #4]
 111:Core/Src/ws2812b.c **** 	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 497              		.loc 1 111 0
 498 009c CC60     		str	r4, [r1, #12]
 112:Core/Src/ws2812b.c **** 	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 499              		.loc 1 112 0
 500 009e 0C61     		str	r4, [r1, #16]
 113:Core/Src/ws2812b.c **** 	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 501              		.loc 1 113 0
 502 00a0 4C61     		str	r4, [r1, #20]
 114:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 503              		.loc 1 114 0
 504 00a2 8C61     		str	r4, [r1, #24]
 115:Core/Src/ws2812b.c **** 
 505              		.loc 1 115 0
 506 00a4 0422     		movs	r2, #4
 507 00a6 2846     		mov	r0, r5
 508 00a8 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 509              	.LVL21:
 118:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 510              		.loc 1 118 0
 511 00ac 2846     		mov	r0, r5
 512 00ae FFF7FEFF 		bl	HAL_TIM_Base_Start
 513              	.LVL22:
 119:Core/Src/ws2812b.c **** 
 514              		.loc 1 119 0
 515 00b2 2146     		mov	r1, r4
 516 00b4 2846     		mov	r0, r5
 517 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 518              	.LVL23:
ARM GAS  /tmp/ccSJArTl.s 			page 17


 121:Core/Src/ws2812b.c **** 
 519              		.loc 1 121 0
 520 00ba 2B68     		ldr	r3, [r5]
 521 00bc 196A     		ldr	r1, [r3, #32]
 522 00be 41F21112 		movw	r2, #4369
 523 00c2 1142     		tst	r1, r2
 524 00c4 08D1     		bne	.L11
 121:Core/Src/ws2812b.c **** 
 525              		.loc 1 121 0 is_stmt 0 discriminator 1
 526 00c6 196A     		ldr	r1, [r3, #32]
 527 00c8 40F24442 		movw	r2, #1092
 528 00cc 1142     		tst	r1, r2
 529 00ce 03D1     		bne	.L11
 121:Core/Src/ws2812b.c **** 
 530              		.loc 1 121 0 discriminator 2
 531 00d0 1A68     		ldr	r2, [r3]
 532 00d2 22F00102 		bic	r2, r2, #1
 533 00d6 1A60     		str	r2, [r3]
 534              	.L11:
 123:Core/Src/ws2812b.c **** 
 535              		.loc 1 123 0 is_stmt 1
 536 00d8 02B0     		add	sp, sp, #8
 537              	.LCFI10:
 538              		.cfi_def_cfa_offset 24
 539              		@ sp needed
 540 00da BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 541              	.LVL24:
 542              	.L15:
 543 00de 00BF     		.align	2
 544              	.L14:
 545 00e0 00380240 		.word	1073887232
 546 00e4 00000000 		.word	SystemCoreClock
 547 00e8 598B4F01 		.word	21990233
 548 00ec 00000000 		.word	tim_period
 549 00f0 B5814E1B 		.word	458129845
 550 00f4 00000000 		.word	timer_reset_pulse_period
 551 00f8 398EE338 		.word	954437177
 552 00fc 89888888 		.word	-2004318071
 553 0100 00000000 		.word	TIM1_handle
 554 0104 00000140 		.word	1073807360
 555 0108 00000000 		.word	tim2OC1
 556 010c 00000000 		.word	tim2OC2
 557              		.cfi_endproc
 558              	.LFE131:
 560              		.section	.text.DMA2_Stream2_IRQHandler,"ax",%progbits
 561              		.align	1
 562              		.global	DMA2_Stream2_IRQHandler
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	DMA2_Stream2_IRQHandler:
 569              	.LFB138:
 299:Core/Src/ws2812b.c **** 
 300:Core/Src/ws2812b.c **** 
 301:Core/Src/ws2812b.c **** void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
 302:Core/Src/ws2812b.c **** {
ARM GAS  /tmp/ccSJArTl.s 			page 18


 303:Core/Src/ws2812b.c **** 
 304:Core/Src/ws2812b.c **** 	// Is this the last LED?
 305:Core/Src/ws2812b.c **** 	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 306:Core/Src/ws2812b.c **** 	 {
 307:Core/Src/ws2812b.c **** 
 308:Core/Src/ws2812b.c **** 		// If this is the last pixel, set the next pixel value to zeros, because
 309:Core/Src/ws2812b.c **** 		// the DMA would not stop exactly at the last bit.
 310:Core/Src/ws2812b.c **** 		ws2812b_set_pixel(0, 0, 0, 0, 0);
 311:Core/Src/ws2812b.c **** 
 312:Core/Src/ws2812b.c **** 	} else {
 313:Core/Src/ws2812b.c **** 		uint32_t i;
 314:Core/Src/ws2812b.c **** 
 315:Core/Src/ws2812b.c **** 		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 316:Core/Src/ws2812b.c **** 		{
 317:Core/Src/ws2812b.c **** 			loadNextFramebufferData(&ws2812b.item[i], 0);
 318:Core/Src/ws2812b.c **** 		}
 319:Core/Src/ws2812b.c **** 
 320:Core/Src/ws2812b.c **** 		ws2812b.repeatCounter++;
 321:Core/Src/ws2812b.c **** 	}
 322:Core/Src/ws2812b.c **** 
 323:Core/Src/ws2812b.c **** 
 324:Core/Src/ws2812b.c **** 
 325:Core/Src/ws2812b.c **** }
 326:Core/Src/ws2812b.c **** 
 327:Core/Src/ws2812b.c **** void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
 328:Core/Src/ws2812b.c **** {
 329:Core/Src/ws2812b.c **** 
 330:Core/Src/ws2812b.c **** 	#if defined(LED_ORANGE_PORT)
 331:Core/Src/ws2812b.c **** 		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 332:Core/Src/ws2812b.c **** 	#endif
 333:Core/Src/ws2812b.c **** 
 334:Core/Src/ws2812b.c **** 	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 335:Core/Src/ws2812b.c **** 	{
 336:Core/Src/ws2812b.c **** 		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
 337:Core/Src/ws2812b.c **** 		ws2812b.repeatCounter = 0;
 338:Core/Src/ws2812b.c **** 
 339:Core/Src/ws2812b.c **** 		// Stop timer
 340:Core/Src/ws2812b.c **** 		TIM1->CR1 &= ~TIM_CR1_CEN;
 341:Core/Src/ws2812b.c **** 
 342:Core/Src/ws2812b.c **** 		// Disable DMA
 343:Core/Src/ws2812b.c **** 		__HAL_DMA_DISABLE(&dmaUpdate);
 344:Core/Src/ws2812b.c **** 		__HAL_DMA_DISABLE(&dmaCC1);
 345:Core/Src/ws2812b.c **** 		__HAL_DMA_DISABLE(&dmaCC2);
 346:Core/Src/ws2812b.c **** 
 347:Core/Src/ws2812b.c **** 		// Disable the DMA requests
 348:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 349:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 350:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 351:Core/Src/ws2812b.c **** 
 352:Core/Src/ws2812b.c **** 		// Set 50us period for Treset pulse
 353:Core/Src/ws2812b.c **** 		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
 354:Core/Src/ws2812b.c **** 		TIM1->ARR = timer_reset_pulse_period;
 355:Core/Src/ws2812b.c **** 		// Reset the timer
 356:Core/Src/ws2812b.c **** 		TIM1->CNT = 0;
 357:Core/Src/ws2812b.c **** 
 358:Core/Src/ws2812b.c **** 		// Generate an update event to reload the prescaler value immediately
 359:Core/Src/ws2812b.c **** 		TIM1->EGR = TIM_EGR_UG;
ARM GAS  /tmp/ccSJArTl.s 			page 19


 360:Core/Src/ws2812b.c **** 		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 361:Core/Src/ws2812b.c **** 
 362:Core/Src/ws2812b.c **** 		// Enable TIM2 Update interrupt for 50us Treset signal
 363:Core/Src/ws2812b.c **** 		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 364:Core/Src/ws2812b.c **** 		// Enable timer
 365:Core/Src/ws2812b.c **** 		TIM1->CR1 |= TIM_CR1_CEN;
 366:Core/Src/ws2812b.c **** 
 367:Core/Src/ws2812b.c **** 		// Manually set outputs to low to generate 50us reset impulse
 368:Core/Src/ws2812b.c **** 		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 369:Core/Src/ws2812b.c **** 	} else {
 370:Core/Src/ws2812b.c **** 
 371:Core/Src/ws2812b.c **** 		// Load bitbuffer with next RGB LED values
 372:Core/Src/ws2812b.c **** 		uint32_t i;
 373:Core/Src/ws2812b.c **** 		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 374:Core/Src/ws2812b.c **** 		{
 375:Core/Src/ws2812b.c **** 			loadNextFramebufferData(&ws2812b.item[i], 1);
 376:Core/Src/ws2812b.c **** 		}
 377:Core/Src/ws2812b.c **** 
 378:Core/Src/ws2812b.c **** 		ws2812b.repeatCounter++;
 379:Core/Src/ws2812b.c **** 	}
 380:Core/Src/ws2812b.c **** 
 381:Core/Src/ws2812b.c **** 
 382:Core/Src/ws2812b.c **** 
 383:Core/Src/ws2812b.c **** 	#if defined(LED_ORANGE_PORT)
 384:Core/Src/ws2812b.c **** 		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 385:Core/Src/ws2812b.c **** 	#endif
 386:Core/Src/ws2812b.c **** 
 387:Core/Src/ws2812b.c **** }
 388:Core/Src/ws2812b.c **** 
 389:Core/Src/ws2812b.c **** void DMA2_Stream2_IRQHandler(void)
 390:Core/Src/ws2812b.c **** {
 570              		.loc 1 390 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574 0000 10B5     		push	{r4, lr}
 575              	.LCFI11:
 576              		.cfi_def_cfa_offset 8
 577              		.cfi_offset 4, -8
 578              		.cfi_offset 14, -4
 391:Core/Src/ws2812b.c **** 
 392:Core/Src/ws2812b.c **** 	#if defined(LED_BLUE_PORT)
 393:Core/Src/ws2812b.c **** 		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 579              		.loc 1 393 0
 580 0002 054C     		ldr	r4, .L18
 581 0004 4FF40043 		mov	r3, #32768
 582 0008 A361     		str	r3, [r4, #24]
 394:Core/Src/ws2812b.c **** 	#endif
 395:Core/Src/ws2812b.c **** 
 396:Core/Src/ws2812b.c **** 	// Check the interrupt and clear flag
 397:Core/Src/ws2812b.c **** 	  HAL_DMA_IRQHandler(&dmaCC2);
 583              		.loc 1 397 0
 584 000a 0448     		ldr	r0, .L18+4
 585 000c FFF7FEFF 		bl	HAL_DMA_IRQHandler
 586              	.LVL25:
 398:Core/Src/ws2812b.c **** 
 399:Core/Src/ws2812b.c **** 	#if defined(LED_BLUE_PORT)
ARM GAS  /tmp/ccSJArTl.s 			page 20


 400:Core/Src/ws2812b.c **** 		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 587              		.loc 1 400 0
 588 0010 4FF00043 		mov	r3, #-2147483648
 589 0014 A361     		str	r3, [r4, #24]
 590 0016 10BD     		pop	{r4, pc}
 591              	.L19:
 592              		.align	2
 593              	.L18:
 594 0018 000C0240 		.word	1073875968
 595 001c 00000000 		.word	dmaCC2
 596              		.cfi_endproc
 597              	.LFE138:
 599              		.section	.text.TIM1_UP_TIM10_IRQHandler,"ax",%progbits
 600              		.align	1
 601              		.global	TIM1_UP_TIM10_IRQHandler
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu fpv4-sp-d16
 607              	TIM1_UP_TIM10_IRQHandler:
 608              	.LFB139:
 401:Core/Src/ws2812b.c **** 	#endif
 402:Core/Src/ws2812b.c **** }
 403:Core/Src/ws2812b.c **** 
 404:Core/Src/ws2812b.c **** void TIM1_UP_TIM10_IRQHandler(void)
 405:Core/Src/ws2812b.c **** {
 609              		.loc 1 405 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613 0000 10B5     		push	{r4, lr}
 614              	.LCFI12:
 615              		.cfi_def_cfa_offset 8
 616              		.cfi_offset 4, -8
 617              		.cfi_offset 14, -4
 406:Core/Src/ws2812b.c **** 	#if defined(LED_ORANGE_PORT)
 407:Core/Src/ws2812b.c **** 		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 618              		.loc 1 407 0
 619 0002 054C     		ldr	r4, .L22
 620 0004 4FF40053 		mov	r3, #8192
 621 0008 A361     		str	r3, [r4, #24]
 408:Core/Src/ws2812b.c **** 	#endif
 409:Core/Src/ws2812b.c **** 
 410:Core/Src/ws2812b.c **** 	HAL_TIM_IRQHandler(&TIM1_handle);
 622              		.loc 1 410 0
 623 000a 0448     		ldr	r0, .L22+4
 624 000c FFF7FEFF 		bl	HAL_TIM_IRQHandler
 625              	.LVL26:
 411:Core/Src/ws2812b.c **** 
 412:Core/Src/ws2812b.c **** 	#if defined(LED_ORANGE_PORT)
 413:Core/Src/ws2812b.c **** 		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 626              		.loc 1 413 0
 627 0010 4FF00053 		mov	r3, #536870912
 628 0014 A361     		str	r3, [r4, #24]
 629 0016 10BD     		pop	{r4, pc}
 630              	.L23:
 631              		.align	2
ARM GAS  /tmp/ccSJArTl.s 			page 21


 632              	.L22:
 633 0018 000C0240 		.word	1073875968
 634 001c 00000000 		.word	TIM1_handle
 635              		.cfi_endproc
 636              	.LFE139:
 638              		.section	.text.ws2812b_set_pixel,"ax",%progbits
 639              		.align	1
 640              		.global	ws2812b_set_pixel
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 644              		.fpu fpv4-sp-d16
 646              	ws2812b_set_pixel:
 647              	.LFB140:
 414:Core/Src/ws2812b.c **** 	#endif
 415:Core/Src/ws2812b.c **** }
 416:Core/Src/ws2812b.c **** 
 417:Core/Src/ws2812b.c **** /*
 418:Core/Src/ws2812b.c **** // TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
 419:Core/Src/ws2812b.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 420:Core/Src/ws2812b.c **** {
 421:Core/Src/ws2812b.c **** 	
 422:Core/Src/ws2812b.c **** 	// I have to wait 50us to generate Treset signal
 423:Core/Src/ws2812b.c **** 	if (ws2812b.timerPeriodCounter < (uint8_t)WS2812_RESET_PERIOD)
 424:Core/Src/ws2812b.c **** 	{
 425:Core/Src/ws2812b.c **** 		// count the number of timer periods
 426:Core/Src/ws2812b.c **** 		ws2812b.timerPeriodCounter++;
 427:Core/Src/ws2812b.c **** 	}
 428:Core/Src/ws2812b.c **** 	else
 429:Core/Src/ws2812b.c **** 	{
 430:Core/Src/ws2812b.c **** 		ws2812b.timerPeriodCounter = 0;
 431:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE(&TIM1_handle);
 432:Core/Src/ws2812b.c **** 		TIM1->CR1 = 0; // disable timer
 433:Core/Src/ws2812b.c **** 
 434:Core/Src/ws2812b.c **** 		// disable the TIM2 Update
 435:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 436:Core/Src/ws2812b.c **** 		// set TransferComplete flag
 437:Core/Src/ws2812b.c **** 		ws2812b.transferComplete = 1;
 438:Core/Src/ws2812b.c **** 	}*/
 439:Core/Src/ws2812b.c **** /*
 440:Core/Src/ws2812b.c ****     ws2812b.timerPeriodCounter = 0;
 441:Core/Src/ws2812b.c ****     TIM1->CR1 = 0; // disable timer
 442:Core/Src/ws2812b.c **** 
 443:Core/Src/ws2812b.c ****     // disable the TIM2 Update IRQ
 444:Core/Src/ws2812b.c ****     __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 445:Core/Src/ws2812b.c **** 
 446:Core/Src/ws2812b.c ****     // Set back 1,25us period
 447:Core/Src/ws2812b.c ****     TIM1->ARR = tim_period;
 448:Core/Src/ws2812b.c **** 
 449:Core/Src/ws2812b.c ****     // Generate an update event to reload the Prescaler value immediatly
 450:Core/Src/ws2812b.c ****     TIM1->EGR = TIM_EGR_UG;
 451:Core/Src/ws2812b.c ****     __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 452:Core/Src/ws2812b.c **** 
 453:Core/Src/ws2812b.c ****     // set transfer_complete flag
 454:Core/Src/ws2812b.c ****     ws2812b.transferComplete = 1;
 455:Core/Src/ws2812b.c **** 
 456:Core/Src/ws2812b.c **** }
ARM GAS  /tmp/ccSJArTl.s 			page 22


 457:Core/Src/ws2812b.c **** */ 
 458:Core/Src/ws2812b.c **** 
 459:Core/Src/ws2812b.c **** 
 460:Core/Src/ws2812b.c **** 
 461:Core/Src/ws2812b.c **** void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
 462:Core/Src/ws2812b.c **** {
 648              		.loc 1 462 0
 649              		.cfi_startproc
 650              		@ args = 4, pretend = 0, frame = 0
 651              		@ frame_needed = 0, uses_anonymous_args = 0
 652              	.LVL27:
 653 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 654              	.LCFI13:
 655              		.cfi_def_cfa_offset 32
 656              		.cfi_offset 4, -32
 657              		.cfi_offset 5, -28
 658              		.cfi_offset 6, -24
 659              		.cfi_offset 7, -20
 660              		.cfi_offset 8, -16
 661              		.cfi_offset 9, -12
 662              		.cfi_offset 10, -8
 663              		.cfi_offset 14, -4
 463:Core/Src/ws2812b.c **** 
 464:Core/Src/ws2812b.c **** 	// Apply gamma
 465:Core/Src/ws2812b.c **** 	red = gammaTable[red];
 664              		.loc 1 465 0
 665 0004 2A4C     		ldr	r4, .L28
 666 0006 14F802C0 		ldrb	ip, [r4, r2]	@ zero_extendqisi2
 667              	.LVL28:
 466:Core/Src/ws2812b.c **** 	green = gammaTable[green];
 668              		.loc 1 466 0
 669 000a 14F803E0 		ldrb	lr, [r4, r3]	@ zero_extendqisi2
 670              	.LVL29:
 467:Core/Src/ws2812b.c **** 	blue = gammaTable[blue];
 671              		.loc 1 467 0
 672 000e 9DF82030 		ldrb	r3, [sp, #32]	@ zero_extendqisi2
 673 0012 E75C     		ldrb	r7, [r4, r3]	@ zero_extendqisi2
 674              	.LVL30:
 468:Core/Src/ws2812b.c **** 
 469:Core/Src/ws2812b.c **** 
 470:Core/Src/ws2812b.c **** 	uint32_t calcCol = (column*24);
 675              		.loc 1 470 0
 676 0014 01EB4101 		add	r1, r1, r1, lsl #1
 677              	.LVL31:
 678 0018 CE00     		lsls	r6, r1, #3
 679              	.LVL32:
 471:Core/Src/ws2812b.c **** 	uint32_t invRed = ~red;
 680              		.loc 1 471 0
 681 001a 6FEA0C0C 		mvn	ip, ip
 682              	.LVL33:
 472:Core/Src/ws2812b.c **** 	uint32_t invGreen = ~green;
 683              		.loc 1 472 0
 684 001e 6FEA0E0E 		mvn	lr, lr
 685              	.LVL34:
 473:Core/Src/ws2812b.c **** 	uint32_t invBlue = ~blue;
 686              		.loc 1 473 0
 687 0022 FF43     		mvns	r7, r7
ARM GAS  /tmp/ccSJArTl.s 			page 23


 688              	.LVL35:
 474:Core/Src/ws2812b.c **** 
 475:Core/Src/ws2812b.c **** 
 476:Core/Src/ws2812b.c **** #if defined(SETPIX_1)
 477:Core/Src/ws2812b.c **** 	uint8_t i;
 478:Core/Src/ws2812b.c **** 	uint32_t calcClearRow = ~((0x01<<row) << 0);
 689              		.loc 1 478 0
 690 0024 0446     		mov	r4, r0
 691 0026 0125     		movs	r5, #1
 692 0028 8540     		lsls	r5, r5, r0
 693 002a ED43     		mvns	r5, r5
 694              	.LVL36:
 479:Core/Src/ws2812b.c **** 	for (i = 0; i < 8; i++)
 695              		.loc 1 479 0
 696 002c 0022     		movs	r2, #0
 697 002e 3AE0     		b	.L25
 698              	.LVL37:
 699              	.L26:
 480:Core/Src/ws2812b.c **** 	{
 481:Core/Src/ws2812b.c **** 		// clear the data for pixel
 482:Core/Src/ws2812b.c **** 
 483:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+i)] &= calcClearRow;
 700              		.loc 1 483 0 discriminator 3
 701 0030 02EB0609 		add	r9, r2, r6
 702 0034 A9B2     		uxth	r1, r5
 703 0036 1F4B     		ldr	r3, .L28+4
 704 0038 33F81900 		ldrh	r0, [r3, r9, lsl #1]
 705 003c 0840     		ands	r0, r0, r1
 706 003e 23F81900 		strh	r0, [r3, r9, lsl #1]	@ movhi
 484:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+8+i)] &= calcClearRow;
 707              		.loc 1 484 0 discriminator 3
 708 0042 09F10808 		add	r8, r9, #8
 709 0046 33F81800 		ldrh	r0, [r3, r8, lsl #1]
 710 004a 0840     		ands	r0, r0, r1
 711 004c 23F81800 		strh	r0, [r3, r8, lsl #1]	@ movhi
 485:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+16+i)] &= calcClearRow;
 712              		.loc 1 485 0 discriminator 3
 713 0050 09F11000 		add	r0, r9, #16
 714 0054 33F810A0 		ldrh	r10, [r3, r0, lsl #1]
 715 0058 01EA0A01 		and	r1, r1, r10
 716 005c 23F81010 		strh	r1, [r3, r0, lsl #1]	@ movhi
 486:Core/Src/ws2812b.c **** 
 487:Core/Src/ws2812b.c **** 		// write new data for pixel
 488:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+i)] |= (((((invGreen)<<i) & 0x80)>>7)<<(row+0));
 717              		.loc 1 488 0 discriminator 3
 718 0060 0EFA02F1 		lsl	r1, lr, r2
 719 0064 C1F3C011 		ubfx	r1, r1, #7, #1
 720 0068 A140     		lsls	r1, r1, r4
 721 006a 33F819A0 		ldrh	r10, [r3, r9, lsl #1]
 722 006e 41EA0A01 		orr	r1, r1, r10
 723 0072 23F81910 		strh	r1, [r3, r9, lsl #1]	@ movhi
 489:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+8+i)] |= (((((invRed)<<i) & 0x80)>>7)<<(row+0));
 724              		.loc 1 489 0 discriminator 3
 725 0076 0CFA02F1 		lsl	r1, ip, r2
 726 007a C1F3C011 		ubfx	r1, r1, #7, #1
 727 007e A140     		lsls	r1, r1, r4
 728 0080 33F81890 		ldrh	r9, [r3, r8, lsl #1]
ARM GAS  /tmp/ccSJArTl.s 			page 24


 729 0084 41EA0901 		orr	r1, r1, r9
 730 0088 23F81810 		strh	r1, [r3, r8, lsl #1]	@ movhi
 490:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+16+i)] |= (((((invBlue)<<i) & 0x80)>>7)<<(row+0));
 731              		.loc 1 490 0 discriminator 3
 732 008c 07FA02F1 		lsl	r1, r7, r2
 733 0090 C1F3C011 		ubfx	r1, r1, #7, #1
 734 0094 A140     		lsls	r1, r1, r4
 735 0096 33F81080 		ldrh	r8, [r3, r0, lsl #1]
 736 009a 41EA0801 		orr	r1, r1, r8
 737 009e 23F81010 		strh	r1, [r3, r0, lsl #1]	@ movhi
 479:Core/Src/ws2812b.c **** 	{
 738              		.loc 1 479 0 discriminator 3
 739 00a2 0132     		adds	r2, r2, #1
 740              	.LVL38:
 741 00a4 D2B2     		uxtb	r2, r2
 742              	.LVL39:
 743              	.L25:
 479:Core/Src/ws2812b.c **** 	{
 744              		.loc 1 479 0 is_stmt 0 discriminator 1
 745 00a6 072A     		cmp	r2, #7
 746 00a8 C2D9     		bls	.L26
 491:Core/Src/ws2812b.c **** 	}
 492:Core/Src/ws2812b.c **** #elif defined(SETPIX_2)
 493:Core/Src/ws2812b.c **** 	uint8_t i;
 494:Core/Src/ws2812b.c **** 	for (i = 0; i < 8; i++)
 495:Core/Src/ws2812b.c **** 	{
 496:Core/Src/ws2812b.c **** 		// Set or clear the data for the pixel
 497:Core/Src/ws2812b.c **** 
 498:Core/Src/ws2812b.c **** 		if(((invGreen)<<i) & 0x80)
 499:Core/Src/ws2812b.c **** 			varSetBit(ws2812bDmaBitBuffer[(calcCol+i)], row);
 500:Core/Src/ws2812b.c **** 		else
 501:Core/Src/ws2812b.c **** 			varResetBit(ws2812bDmaBitBuffer[(calcCol+i)], row);
 502:Core/Src/ws2812b.c **** 
 503:Core/Src/ws2812b.c **** 		if(((invRed)<<i) & 0x80)
 504:Core/Src/ws2812b.c **** 			varSetBit(ws2812bDmaBitBuffer[(calcCol+8+i)], row);
 505:Core/Src/ws2812b.c **** 		else
 506:Core/Src/ws2812b.c **** 			varResetBit(ws2812bDmaBitBuffer[(calcCol+8+i)], row);
 507:Core/Src/ws2812b.c **** 
 508:Core/Src/ws2812b.c **** 		if(((invBlue)<<i) & 0x80)
 509:Core/Src/ws2812b.c **** 			varSetBit(ws2812bDmaBitBuffer[(calcCol+16+i)], row);
 510:Core/Src/ws2812b.c **** 		else
 511:Core/Src/ws2812b.c **** 			varResetBit(ws2812bDmaBitBuffer[(calcCol+16+i)], row);
 512:Core/Src/ws2812b.c **** 
 513:Core/Src/ws2812b.c **** 	}
 514:Core/Src/ws2812b.c **** #elif defined(SETPIX_3)
 515:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+0)] |= (((((invGreen)<<0) & 0x80)>>7)<<row);
 516:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+0)] |= (((((invRed)<<0) & 0x80)>>7)<<row);
 517:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+0)] |= (((((invBlue)<<0) & 0x80)>>7)<<row);
 518:Core/Src/ws2812b.c **** 
 519:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+1)] |= (((((invGreen)<<1) & 0x80)>>7)<<row);
 520:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+1)] |= (((((invRed)<<1) & 0x80)>>7)<<row);
 521:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+1)] |= (((((invBlue)<<1) & 0x80)>>7)<<row);
 522:Core/Src/ws2812b.c **** 
 523:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+2)] |= (((((invGreen)<<2) & 0x80)>>7)<<row);
 524:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+2)] |= (((((invRed)<<2) & 0x80)>>7)<<row);
 525:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+2)] |= (((((invBlue)<<2) & 0x80)>>7)<<row);
 526:Core/Src/ws2812b.c **** 
ARM GAS  /tmp/ccSJArTl.s 			page 25


 527:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+3)] |= (((((invGreen)<<3) & 0x80)>>7)<<row);
 528:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+3)] |= (((((invRed)<<3) & 0x80)>>7)<<row);
 529:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+3)] |= (((((invBlue)<<3) & 0x80)>>7)<<row);
 530:Core/Src/ws2812b.c **** 
 531:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+4)] |= (((((invGreen)<<4) & 0x80)>>7)<<row);
 532:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+4)] |= (((((invRed)<<4) & 0x80)>>7)<<row);
 533:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+4)] |= (((((invBlue)<<4) & 0x80)>>7)<<row);
 534:Core/Src/ws2812b.c **** 
 535:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+5)] |= (((((invGreen)<<5) & 0x80)>>7)<<row);
 536:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+5)] |= (((((invRed)<<5) & 0x80)>>7)<<row);
 537:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+5)] |= (((((invBlue)<<5) & 0x80)>>7)<<row);
 538:Core/Src/ws2812b.c **** 
 539:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+6)] |= (((((invGreen)<<6) & 0x80)>>7)<<row);
 540:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+6)] |= (((((invRed)<<6) & 0x80)>>7)<<row);
 541:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+6)] |= (((((invBlue)<<6) & 0x80)>>7)<<row);
 542:Core/Src/ws2812b.c **** 
 543:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+7)] |= (((((invGreen)<<7) & 0x80)>>7)<<row);
 544:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
 545:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
 546:Core/Src/ws2812b.c **** #elif defined(SETPIX_4)
 547:Core/Src/ws2812b.c **** 
 548:Core/Src/ws2812b.c **** 	// Bitband optimizations with pure increments, 5us interrupts
 549:Core/Src/ws2812b.c **** 	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 550:Core/Src/ws2812b.c **** 
 551:Core/Src/ws2812b.c **** 	*bitBand =  (invGreen >> 7);
 552:Core/Src/ws2812b.c **** 	bitBand+=16;
 553:Core/Src/ws2812b.c **** 
 554:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 6);
 555:Core/Src/ws2812b.c **** 	bitBand+=16;
 556:Core/Src/ws2812b.c **** 
 557:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 5);
 558:Core/Src/ws2812b.c **** 	bitBand+=16;
 559:Core/Src/ws2812b.c **** 
 560:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 4);
 561:Core/Src/ws2812b.c **** 	bitBand+=16;
 562:Core/Src/ws2812b.c **** 
 563:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 3);
 564:Core/Src/ws2812b.c **** 	bitBand+=16;
 565:Core/Src/ws2812b.c **** 
 566:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 2);
 567:Core/Src/ws2812b.c **** 	bitBand+=16;
 568:Core/Src/ws2812b.c **** 
 569:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 1);
 570:Core/Src/ws2812b.c **** 	bitBand+=16;
 571:Core/Src/ws2812b.c **** 
 572:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 0);
 573:Core/Src/ws2812b.c **** 	bitBand+=16;
 574:Core/Src/ws2812b.c **** 
 575:Core/Src/ws2812b.c **** 	// RED
 576:Core/Src/ws2812b.c **** 	*bitBand =  (invRed >> 7);
 577:Core/Src/ws2812b.c **** 	bitBand+=16;
 578:Core/Src/ws2812b.c **** 
 579:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 6);
 580:Core/Src/ws2812b.c **** 	bitBand+=16;
 581:Core/Src/ws2812b.c **** 
 582:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 5);
 583:Core/Src/ws2812b.c **** 	bitBand+=16;
ARM GAS  /tmp/ccSJArTl.s 			page 26


 584:Core/Src/ws2812b.c **** 
 585:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 4);
 586:Core/Src/ws2812b.c **** 	bitBand+=16;
 587:Core/Src/ws2812b.c **** 
 588:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 3);
 589:Core/Src/ws2812b.c **** 	bitBand+=16;
 590:Core/Src/ws2812b.c **** 
 591:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 2);
 592:Core/Src/ws2812b.c **** 	bitBand+=16;
 593:Core/Src/ws2812b.c **** 
 594:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 1);
 595:Core/Src/ws2812b.c **** 	bitBand+=16;
 596:Core/Src/ws2812b.c **** 
 597:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 0);
 598:Core/Src/ws2812b.c **** 	bitBand+=16;
 599:Core/Src/ws2812b.c **** 
 600:Core/Src/ws2812b.c **** 	// BLUE
 601:Core/Src/ws2812b.c **** 	*bitBand =  (invBlue >> 7);
 602:Core/Src/ws2812b.c **** 	bitBand+=16;
 603:Core/Src/ws2812b.c **** 
 604:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 6);
 605:Core/Src/ws2812b.c **** 	bitBand+=16;
 606:Core/Src/ws2812b.c **** 
 607:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 5);
 608:Core/Src/ws2812b.c **** 	bitBand+=16;
 609:Core/Src/ws2812b.c **** 
 610:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 4);
 611:Core/Src/ws2812b.c **** 	bitBand+=16;
 612:Core/Src/ws2812b.c **** 
 613:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 3);
 614:Core/Src/ws2812b.c **** 	bitBand+=16;
 615:Core/Src/ws2812b.c **** 
 616:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 2);
 617:Core/Src/ws2812b.c **** 	bitBand+=16;
 618:Core/Src/ws2812b.c **** 
 619:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 1);
 620:Core/Src/ws2812b.c **** 	bitBand+=16;
 621:Core/Src/ws2812b.c **** 
 622:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 0);
 623:Core/Src/ws2812b.c **** 	bitBand+=16;
 624:Core/Src/ws2812b.c **** 
 625:Core/Src/ws2812b.c **** #endif
 626:Core/Src/ws2812b.c **** }
 747              		.loc 1 626 0 is_stmt 1
 748 00aa BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 749              	.LVL40:
 750              	.L29:
 751 00ae 00BF     		.align	2
 752              	.L28:
 753 00b0 00000000 		.word	.LANCHOR2
 754 00b4 00000000 		.word	ws2812bDmaBitBuffer
 755              		.cfi_endproc
 756              	.LFE140:
 758              		.section	.text.loadNextFramebufferData,"ax",%progbits
 759              		.align	1
 760              		.syntax unified
 761              		.thumb
ARM GAS  /tmp/ccSJArTl.s 			page 27


 762              		.thumb_func
 763              		.fpu fpv4-sp-d16
 765              	loadNextFramebufferData:
 766              	.LFB133:
 233:Core/Src/ws2812b.c **** 
 767              		.loc 1 233 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 0
 770              		@ frame_needed = 0, uses_anonymous_args = 0
 771              	.LVL41:
 772 0000 70B5     		push	{r4, r5, r6, lr}
 773              	.LCFI14:
 774              		.cfi_def_cfa_offset 16
 775              		.cfi_offset 4, -16
 776              		.cfi_offset 5, -12
 777              		.cfi_offset 6, -8
 778              		.cfi_offset 14, -4
 779 0002 82B0     		sub	sp, sp, #8
 780              	.LCFI15:
 781              		.cfi_def_cfa_offset 24
 235:Core/Src/ws2812b.c **** 	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 782              		.loc 1 235 0
 783 0004 0568     		ldr	r5, [r0]
 784 0006 8268     		ldr	r2, [r0, #8]
 785 0008 531C     		adds	r3, r2, #1
 786 000a 8360     		str	r3, [r0, #8]
 787 000c AA5C     		ldrb	r2, [r5, r2]	@ zero_extendqisi2
 788              	.LVL42:
 236:Core/Src/ws2812b.c **** 	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 789              		.loc 1 236 0
 790 000e 5C1C     		adds	r4, r3, #1
 791 0010 8460     		str	r4, [r0, #8]
 792 0012 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 793              	.LVL43:
 237:Core/Src/ws2812b.c **** 
 794              		.loc 1 237 0
 795 0014 661C     		adds	r6, r4, #1
 796 0016 8660     		str	r6, [r0, #8]
 797 0018 2C5D     		ldrb	r4, [r5, r4]	@ zero_extendqisi2
 798              	.LVL44:
 239:Core/Src/ws2812b.c **** 		bItem->frameBufferCounter = 0;
 799              		.loc 1 239 0
 800 001a 4568     		ldr	r5, [r0, #4]
 801 001c AE42     		cmp	r6, r5
 802 001e 06D0     		beq	.L33
 803              	.L31:
 242:Core/Src/ws2812b.c **** }
 804              		.loc 1 242 0
 805 0020 007B     		ldrb	r0, [r0, #12]	@ zero_extendqisi2
 806              	.LVL45:
 807 0022 0094     		str	r4, [sp]
 808 0024 89B2     		uxth	r1, r1
 809              	.LVL46:
 810 0026 FFF7FEFF 		bl	ws2812b_set_pixel
 811              	.LVL47:
 243:Core/Src/ws2812b.c **** 
 812              		.loc 1 243 0
ARM GAS  /tmp/ccSJArTl.s 			page 28


 813 002a 02B0     		add	sp, sp, #8
 814              	.LCFI16:
 815              		.cfi_remember_state
 816              		.cfi_def_cfa_offset 16
 817              		@ sp needed
 818 002c 70BD     		pop	{r4, r5, r6, pc}
 819              	.LVL48:
 820              	.L33:
 821              	.LCFI17:
 822              		.cfi_restore_state
 240:Core/Src/ws2812b.c **** 
 823              		.loc 1 240 0
 824 002e 0025     		movs	r5, #0
 825 0030 8560     		str	r5, [r0, #8]
 826 0032 F5E7     		b	.L31
 827              		.cfi_endproc
 828              	.LFE133:
 830              		.section	.text.DMA_TransferCompleteHandler,"ax",%progbits
 831              		.align	1
 832              		.global	DMA_TransferCompleteHandler
 833              		.syntax unified
 834              		.thumb
 835              		.thumb_func
 836              		.fpu fpv4-sp-d16
 838              	DMA_TransferCompleteHandler:
 839              	.LFB137:
 328:Core/Src/ws2812b.c **** 
 840              		.loc 1 328 0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 0
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 844              	.LVL49:
 331:Core/Src/ws2812b.c **** 	#endif
 845              		.loc 1 331 0
 846 0000 4FF40052 		mov	r2, #8192
 847 0004 2E4B     		ldr	r3, .L43
 848 0006 9A61     		str	r2, [r3, #24]
 334:Core/Src/ws2812b.c **** 	{
 849              		.loc 1 334 0
 850 0008 2E4B     		ldr	r3, .L43+4
 851 000a 9B69     		ldr	r3, [r3, #24]
 852 000c 042B     		cmp	r3, #4
 853 000e 02D0     		beq	.L42
 328:Core/Src/ws2812b.c **** 
 854              		.loc 1 328 0
 855 0010 10B5     		push	{r4, lr}
 856              	.LCFI18:
 857              		.cfi_def_cfa_offset 8
 858              		.cfi_offset 4, -8
 859              		.cfi_offset 14, -4
 860 0012 0024     		movs	r4, #0
 861 0014 48E0     		b	.L35
 862              	.L42:
 863              	.LCFI19:
 864              		.cfi_def_cfa_offset 0
 865              		.cfi_restore 4
 866              		.cfi_restore 14
ARM GAS  /tmp/ccSJArTl.s 			page 29


 337:Core/Src/ws2812b.c **** 
 867              		.loc 1 337 0
 868 0016 0020     		movs	r0, #0
 869              	.LVL50:
 870 0018 2A4B     		ldr	r3, .L43+4
 871 001a 9861     		str	r0, [r3, #24]
 340:Core/Src/ws2812b.c **** 
 872              		.loc 1 340 0
 873 001c 2A4A     		ldr	r2, .L43+8
 874 001e 1368     		ldr	r3, [r2]
 875 0020 23F00103 		bic	r3, r3, #1
 876 0024 1360     		str	r3, [r2]
 343:Core/Src/ws2812b.c **** 		__HAL_DMA_DISABLE(&dmaCC1);
 877              		.loc 1 343 0
 878 0026 294B     		ldr	r3, .L43+12
 879 0028 1968     		ldr	r1, [r3]
 880 002a 0B68     		ldr	r3, [r1]
 881 002c 23F00103 		bic	r3, r3, #1
 882 0030 0B60     		str	r3, [r1]
 344:Core/Src/ws2812b.c **** 		__HAL_DMA_DISABLE(&dmaCC2);
 883              		.loc 1 344 0
 884 0032 274B     		ldr	r3, .L43+16
 885 0034 1968     		ldr	r1, [r3]
 886 0036 0B68     		ldr	r3, [r1]
 887 0038 23F00103 		bic	r3, r3, #1
 888 003c 0B60     		str	r3, [r1]
 345:Core/Src/ws2812b.c **** 
 889              		.loc 1 345 0
 890 003e 254B     		ldr	r3, .L43+20
 891 0040 1968     		ldr	r1, [r3]
 892 0042 0B68     		ldr	r3, [r1]
 893 0044 23F00103 		bic	r3, r3, #1
 894 0048 0B60     		str	r3, [r1]
 348:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 895              		.loc 1 348 0
 896 004a 234B     		ldr	r3, .L43+24
 897 004c 1B68     		ldr	r3, [r3]
 898 004e D968     		ldr	r1, [r3, #12]
 899 0050 21F48071 		bic	r1, r1, #256
 900 0054 D960     		str	r1, [r3, #12]
 349:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 901              		.loc 1 349 0
 902 0056 D968     		ldr	r1, [r3, #12]
 903 0058 21F40071 		bic	r1, r1, #512
 904 005c D960     		str	r1, [r3, #12]
 350:Core/Src/ws2812b.c **** 
 905              		.loc 1 350 0
 906 005e D968     		ldr	r1, [r3, #12]
 907 0060 21F48061 		bic	r1, r1, #1024
 908 0064 D960     		str	r1, [r3, #12]
 354:Core/Src/ws2812b.c **** 		// Reset the timer
 909              		.loc 1 354 0
 910 0066 1D49     		ldr	r1, .L43+28
 911 0068 0968     		ldr	r1, [r1]
 912 006a D162     		str	r1, [r2, #44]
 356:Core/Src/ws2812b.c **** 
 913              		.loc 1 356 0
ARM GAS  /tmp/ccSJArTl.s 			page 30


 914 006c 5062     		str	r0, [r2, #36]
 359:Core/Src/ws2812b.c **** 		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 915              		.loc 1 359 0
 916 006e 0121     		movs	r1, #1
 917 0070 5161     		str	r1, [r2, #20]
 360:Core/Src/ws2812b.c **** 
 918              		.loc 1 360 0
 919 0072 6FF00101 		mvn	r1, #1
 920 0076 1961     		str	r1, [r3, #16]
 363:Core/Src/ws2812b.c **** 		// Enable timer
 921              		.loc 1 363 0
 922 0078 D968     		ldr	r1, [r3, #12]
 923 007a 41F00101 		orr	r1, r1, #1
 924 007e D960     		str	r1, [r3, #12]
 365:Core/Src/ws2812b.c **** 
 925              		.loc 1 365 0
 926 0080 1368     		ldr	r3, [r2]
 927 0082 43F00103 		orr	r3, r3, #1
 928 0086 1360     		str	r3, [r2]
 368:Core/Src/ws2812b.c **** 	} else {
 929              		.loc 1 368 0
 930 0088 154B     		ldr	r3, .L43+32
 931 008a 1A68     		ldr	r2, [r3]
 932 008c 154B     		ldr	r3, .L43+36
 933 008e 9A61     		str	r2, [r3, #24]
 384:Core/Src/ws2812b.c **** 	#endif
 934              		.loc 1 384 0
 935 0090 4FF00052 		mov	r2, #536870912
 936 0094 0A4B     		ldr	r3, .L43
 937 0096 9A61     		str	r2, [r3, #24]
 938 0098 7047     		bx	lr
 939              	.LVL51:
 940              	.L37:
 941              	.LCFI20:
 942              		.cfi_def_cfa_offset 8
 943              		.cfi_offset 4, -8
 944              		.cfi_offset 14, -4
 945              	.LBB6:
 375:Core/Src/ws2812b.c **** 		}
 946              		.loc 1 375 0 discriminator 3
 947 009a 0121     		movs	r1, #1
 948 009c 0948     		ldr	r0, .L43+4
 949 009e 00EB0410 		add	r0, r0, r4, lsl #4
 950 00a2 FFF7FEFF 		bl	loadNextFramebufferData
 951              	.LVL52:
 373:Core/Src/ws2812b.c **** 		{
 952              		.loc 1 373 0 discriminator 3
 953 00a6 0134     		adds	r4, r4, #1
 954              	.LVL53:
 955              	.L35:
 373:Core/Src/ws2812b.c **** 		{
 956              		.loc 1 373 0 is_stmt 0 discriminator 1
 957 00a8 002C     		cmp	r4, #0
 958 00aa F6D0     		beq	.L37
 378:Core/Src/ws2812b.c **** 	}
 959              		.loc 1 378 0 is_stmt 1
 960 00ac 054A     		ldr	r2, .L43+4
ARM GAS  /tmp/ccSJArTl.s 			page 31


 961 00ae 9369     		ldr	r3, [r2, #24]
 962 00b0 0133     		adds	r3, r3, #1
 963 00b2 9361     		str	r3, [r2, #24]
 964              	.LBE6:
 384:Core/Src/ws2812b.c **** 	#endif
 965              		.loc 1 384 0
 966 00b4 4FF00052 		mov	r2, #536870912
 967 00b8 014B     		ldr	r3, .L43
 968 00ba 9A61     		str	r2, [r3, #24]
 969 00bc 10BD     		pop	{r4, pc}
 970              	.LVL54:
 971              	.L44:
 972 00be 00BF     		.align	2
 973              	.L43:
 974 00c0 000C0240 		.word	1073875968
 975 00c4 00000000 		.word	ws2812b
 976 00c8 00000140 		.word	1073807360
 977 00cc 00000000 		.word	dmaUpdate
 978 00d0 00000000 		.word	dmaCC1
 979 00d4 00000000 		.word	dmaCC2
 980 00d8 00000000 		.word	TIM1_handle
 981 00dc 00000000 		.word	timer_reset_pulse_period
 982 00e0 00000000 		.word	.LANCHOR1
 983 00e4 00080240 		.word	1073874944
 984              		.cfi_endproc
 985              	.LFE137:
 987              		.section	.text.WS2812_sendbuf,"ax",%progbits
 988              		.align	1
 989              		.syntax unified
 990              		.thumb
 991              		.thumb_func
 992              		.fpu fpv4-sp-d16
 994              	WS2812_sendbuf:
 995              	.LFB134:
 248:Core/Src/ws2812b.c **** 	// transmission complete flag
 996              		.loc 1 248 0
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 0
 999              		@ frame_needed = 0, uses_anonymous_args = 0
 1000 0000 38B5     		push	{r3, r4, r5, lr}
 1001              	.LCFI21:
 1002              		.cfi_def_cfa_offset 16
 1003              		.cfi_offset 3, -16
 1004              		.cfi_offset 4, -12
 1005              		.cfi_offset 5, -8
 1006              		.cfi_offset 14, -4
 250:Core/Src/ws2812b.c **** 
 1007              		.loc 1 250 0
 1008 0002 0024     		movs	r4, #0
 1009 0004 4F4B     		ldr	r3, .L64
 1010 0006 1C74     		strb	r4, [r3, #16]
 1011              	.LVL55:
 1012              	.L46:
 254:Core/Src/ws2812b.c **** 	{
 1013              		.loc 1 254 0 discriminator 1
 1014 0008 0CB3     		cbz	r4, .L47
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
ARM GAS  /tmp/ccSJArTl.s 			page 32


 1015              		.loc 1 263 0
 1016 000a 4F4B     		ldr	r3, .L64+4
 1017 000c 1B68     		ldr	r3, [r3]
 1018 000e 4F4A     		ldr	r2, .L64+8
 1019 0010 9342     		cmp	r3, r2
 1020 0012 2AD9     		bls	.L48
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1021              		.loc 1 263 0 is_stmt 0 discriminator 1
 1022 0014 4FF46062 		mov	r2, #3584
 1023 0018 4D4B     		ldr	r3, .L64+12
 1024 001a DA60     		str	r2, [r3, #12]
 1025              	.L49:
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1026              		.loc 1 264 0 is_stmt 1
 1027 001c 4D4B     		ldr	r3, .L64+16
 1028 001e 1B68     		ldr	r3, [r3]
 1029 0020 4A4A     		ldr	r2, .L64+8
 1030 0022 9342     		cmp	r3, r2
 1031 0024 36D9     		bls	.L52
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1032              		.loc 1 264 0 is_stmt 0 discriminator 1
 1033 0026 4FF46062 		mov	r2, #3584
 1034 002a 494B     		ldr	r3, .L64+12
 1035 002c DA60     		str	r2, [r3, #12]
 1036              	.L53:
 265:Core/Src/ws2812b.c **** 
 1037              		.loc 1 265 0 is_stmt 1
 1038 002e 4A4B     		ldr	r3, .L64+20
 1039 0030 1B68     		ldr	r3, [r3]
 1040 0032 464A     		ldr	r2, .L64+8
 1041 0034 9342     		cmp	r3, r2
 1042 0036 42D8     		bhi	.L61
 265:Core/Src/ws2812b.c **** 
 1043              		.loc 1 265 0 is_stmt 0 discriminator 2
 1044 0038 484A     		ldr	r2, .L64+24
 1045 003a 9342     		cmp	r3, r2
 1046 003c 77D8     		bhi	.L62
 265:Core/Src/ws2812b.c **** 
 1047              		.loc 1 265 0 discriminator 4
 1048 003e 484A     		ldr	r2, .L64+28
 1049 0040 9342     		cmp	r3, r2
 1050 0042 79D8     		bhi	.L63
 265:Core/Src/ws2812b.c **** 
 1051              		.loc 1 265 0 discriminator 7
 1052 0044 4FF46012 		mov	r2, #3670016
 1053 0048 464B     		ldr	r3, .L64+32
 1054 004a 9A60     		str	r2, [r3, #8]
 1055 004c 3BE0     		b	.L57
 1056              	.L47:
 256:Core/Src/ws2812b.c **** 
 1057              		.loc 1 256 0 is_stmt 1 discriminator 3
 1058 004e 3D4D     		ldr	r5, .L64
 1059 0050 05EB0415 		add	r5, r5, r4, lsl #4
 1060 0054 0021     		movs	r1, #0
 1061 0056 A960     		str	r1, [r5, #8]
 258:Core/Src/ws2812b.c **** 		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 1062              		.loc 1 258 0 discriminator 3
ARM GAS  /tmp/ccSJArTl.s 			page 33


 1063 0058 2846     		mov	r0, r5
 1064 005a FFF7FEFF 		bl	loadNextFramebufferData
 1065              	.LVL56:
 259:Core/Src/ws2812b.c **** 	}
 1066              		.loc 1 259 0 discriminator 3
 1067 005e 0121     		movs	r1, #1
 1068 0060 2846     		mov	r0, r5
 1069 0062 FFF7FEFF 		bl	loadNextFramebufferData
 1070              	.LVL57:
 254:Core/Src/ws2812b.c **** 	{
 1071              		.loc 1 254 0 discriminator 3
 1072 0066 0134     		adds	r4, r4, #1
 1073              	.LVL58:
 1074 0068 CEE7     		b	.L46
 1075              	.L48:
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1076              		.loc 1 263 0 discriminator 2
 1077 006a 3C4A     		ldr	r2, .L64+24
 1078 006c 9342     		cmp	r3, r2
 1079 006e 04D9     		bls	.L50
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1080              		.loc 1 263 0 is_stmt 0 discriminator 3
 1081 0070 4FF46062 		mov	r2, #3584
 1082 0074 364B     		ldr	r3, .L64+12
 1083 0076 9A60     		str	r2, [r3, #8]
 1084 0078 D0E7     		b	.L49
 1085              	.L50:
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1086              		.loc 1 263 0 discriminator 4
 1087 007a 394A     		ldr	r2, .L64+28
 1088 007c 9342     		cmp	r3, r2
 1089 007e 04D9     		bls	.L51
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1090              		.loc 1 263 0 discriminator 6
 1091 0080 4FF46062 		mov	r2, #3584
 1092 0084 374B     		ldr	r3, .L64+32
 1093 0086 DA60     		str	r2, [r3, #12]
 1094 0088 C8E7     		b	.L49
 1095              	.L51:
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1096              		.loc 1 263 0 discriminator 7
 1097 008a 4FF46062 		mov	r2, #3584
 1098 008e 354B     		ldr	r3, .L64+32
 1099 0090 9A60     		str	r2, [r3, #8]
 1100 0092 C3E7     		b	.L49
 1101              	.L52:
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1102              		.loc 1 264 0 is_stmt 1 discriminator 2
 1103 0094 314A     		ldr	r2, .L64+24
 1104 0096 9342     		cmp	r3, r2
 1105 0098 04D9     		bls	.L54
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1106              		.loc 1 264 0 is_stmt 0 discriminator 3
 1107 009a 4FF46062 		mov	r2, #3584
 1108 009e 2C4B     		ldr	r3, .L64+12
 1109 00a0 9A60     		str	r2, [r3, #8]
 1110 00a2 C4E7     		b	.L53
ARM GAS  /tmp/ccSJArTl.s 			page 34


 1111              	.L54:
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1112              		.loc 1 264 0 discriminator 4
 1113 00a4 2E4A     		ldr	r2, .L64+28
 1114 00a6 9342     		cmp	r3, r2
 1115 00a8 04D9     		bls	.L55
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1116              		.loc 1 264 0 discriminator 6
 1117 00aa 4FF46062 		mov	r2, #3584
 1118 00ae 2D4B     		ldr	r3, .L64+32
 1119 00b0 DA60     		str	r2, [r3, #12]
 1120 00b2 BCE7     		b	.L53
 1121              	.L55:
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1122              		.loc 1 264 0 discriminator 7
 1123 00b4 4FF46062 		mov	r2, #3584
 1124 00b8 2A4B     		ldr	r3, .L64+32
 1125 00ba 9A60     		str	r2, [r3, #8]
 1126 00bc B7E7     		b	.L53
 1127              	.L61:
 265:Core/Src/ws2812b.c **** 
 1128              		.loc 1 265 0 is_stmt 1 discriminator 1
 1129 00be 4FF46012 		mov	r2, #3670016
 1130 00c2 234B     		ldr	r3, .L64+12
 1131 00c4 DA60     		str	r2, [r3, #12]
 1132              	.L57:
 270:Core/Src/ws2812b.c **** 	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 1133              		.loc 1 270 0
 1134 00c6 204B     		ldr	r3, .L64+4
 1135 00c8 1B68     		ldr	r3, [r3]
 1136 00ca 3022     		movs	r2, #48
 1137 00cc 5A60     		str	r2, [r3, #4]
 271:Core/Src/ws2812b.c **** 	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 1138              		.loc 1 271 0
 1139 00ce 214C     		ldr	r4, .L64+16
 1140              	.LVL59:
 1141 00d0 2168     		ldr	r1, [r4]
 1142 00d2 4A60     		str	r2, [r1, #4]
 272:Core/Src/ws2812b.c **** 
 1143              		.loc 1 272 0
 1144 00d4 2048     		ldr	r0, .L64+20
 1145 00d6 0168     		ldr	r1, [r0]
 1146 00d8 4A60     		str	r2, [r1, #4]
 275:Core/Src/ws2812b.c **** 
 1147              		.loc 1 275 0
 1148 00da 2349     		ldr	r1, .L64+36
 1149 00dc 0A68     		ldr	r2, [r1]
 1150 00de 6FF01F05 		mvn	r5, #31
 1151 00e2 1561     		str	r5, [r2, #16]
 278:Core/Src/ws2812b.c **** 	__HAL_DMA_ENABLE(&dmaCC1);
 1152              		.loc 1 278 0
 1153 00e4 1A68     		ldr	r2, [r3]
 1154 00e6 42F00102 		orr	r2, r2, #1
 1155 00ea 1A60     		str	r2, [r3]
 279:Core/Src/ws2812b.c **** 	__HAL_DMA_ENABLE(&dmaCC2);
 1156              		.loc 1 279 0
 1157 00ec 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccSJArTl.s 			page 35


 1158 00ee 1368     		ldr	r3, [r2]
 1159 00f0 43F00103 		orr	r3, r3, #1
 1160 00f4 1360     		str	r3, [r2]
 280:Core/Src/ws2812b.c **** 
 1161              		.loc 1 280 0
 1162 00f6 0268     		ldr	r2, [r0]
 1163 00f8 1368     		ldr	r3, [r2]
 1164 00fa 43F00103 		orr	r3, r3, #1
 1165 00fe 1360     		str	r3, [r2]
 283:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 1166              		.loc 1 283 0
 1167 0100 0B68     		ldr	r3, [r1]
 1168 0102 DA68     		ldr	r2, [r3, #12]
 1169 0104 42F48072 		orr	r2, r2, #256
 1170 0108 DA60     		str	r2, [r3, #12]
 284:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 1171              		.loc 1 284 0
 1172 010a DA68     		ldr	r2, [r3, #12]
 1173 010c 42F40072 		orr	r2, r2, #512
 1174 0110 DA60     		str	r2, [r3, #12]
 285:Core/Src/ws2812b.c **** 
 1175              		.loc 1 285 0
 1176 0112 DA68     		ldr	r2, [r3, #12]
 1177 0114 42F48062 		orr	r2, r2, #1024
 1178 0118 DA60     		str	r2, [r3, #12]
 287:Core/Src/ws2812b.c **** 
 1179              		.loc 1 287 0
 1180 011a 144A     		ldr	r2, .L64+40
 1181 011c 1268     		ldr	r2, [r2]
 1182 011e 013A     		subs	r2, r2, #1
 1183 0120 1349     		ldr	r1, .L64+44
 1184 0122 4A62     		str	r2, [r1, #36]
 290:Core/Src/ws2812b.c **** }
 1185              		.loc 1 290 0
 1186 0124 1A68     		ldr	r2, [r3]
 1187 0126 42F00102 		orr	r2, r2, #1
 1188 012a 1A60     		str	r2, [r3]
 1189 012c 38BD     		pop	{r3, r4, r5, pc}
 1190              	.LVL60:
 1191              	.L62:
 265:Core/Src/ws2812b.c **** 
 1192              		.loc 1 265 0 discriminator 3
 1193 012e 4FF46012 		mov	r2, #3670016
 1194 0132 074B     		ldr	r3, .L64+12
 1195 0134 9A60     		str	r2, [r3, #8]
 1196 0136 C6E7     		b	.L57
 1197              	.L63:
 265:Core/Src/ws2812b.c **** 
 1198              		.loc 1 265 0 is_stmt 0 discriminator 6
 1199 0138 4FF46012 		mov	r2, #3670016
 1200 013c 094B     		ldr	r3, .L64+32
 1201 013e DA60     		str	r2, [r3, #12]
 1202 0140 C1E7     		b	.L57
 1203              	.L65:
 1204 0142 00BF     		.align	2
 1205              	.L64:
 1206 0144 00000000 		.word	ws2812b
ARM GAS  /tmp/ccSJArTl.s 			page 36


 1207 0148 00000000 		.word	dmaUpdate
 1208 014c 58640240 		.word	1073898584
 1209 0150 00640240 		.word	1073898496
 1210 0154 00000000 		.word	dmaCC1
 1211 0158 00000000 		.word	dmaCC2
 1212 015c B8600240 		.word	1073897656
 1213 0160 58600240 		.word	1073897560
 1214 0164 00600240 		.word	1073897472
 1215 0168 00000000 		.word	TIM1_handle
 1216 016c 00000000 		.word	tim_period
 1217 0170 00000140 		.word	1073807360
 1218              		.cfi_endproc
 1219              	.LFE134:
 1221              		.section	.text.DMA_TransferHalfHandler,"ax",%progbits
 1222              		.align	1
 1223              		.global	DMA_TransferHalfHandler
 1224              		.syntax unified
 1225              		.thumb
 1226              		.thumb_func
 1227              		.fpu fpv4-sp-d16
 1229              	DMA_TransferHalfHandler:
 1230              	.LFB136:
 302:Core/Src/ws2812b.c **** 
 1231              		.loc 1 302 0 is_stmt 1
 1232              		.cfi_startproc
 1233              		@ args = 0, pretend = 0, frame = 0
 1234              		@ frame_needed = 0, uses_anonymous_args = 0
 1235              	.LVL61:
 1236 0000 10B5     		push	{r4, lr}
 1237              	.LCFI22:
 1238              		.cfi_def_cfa_offset 8
 1239              		.cfi_offset 4, -8
 1240              		.cfi_offset 14, -4
 1241 0002 82B0     		sub	sp, sp, #8
 1242              	.LCFI23:
 1243              		.cfi_def_cfa_offset 16
 305:Core/Src/ws2812b.c **** 	 {
 1244              		.loc 1 305 0
 1245 0004 0E4B     		ldr	r3, .L73
 1246 0006 9B69     		ldr	r3, [r3, #24]
 1247 0008 042B     		cmp	r3, #4
 1248 000a 01D0     		beq	.L72
 1249 000c 0024     		movs	r4, #0
 1250 000e 0EE0     		b	.L67
 1251              	.L72:
 310:Core/Src/ws2812b.c **** 
 1252              		.loc 1 310 0
 1253 0010 0020     		movs	r0, #0
 1254              	.LVL62:
 1255 0012 0090     		str	r0, [sp]
 1256 0014 0346     		mov	r3, r0
 1257 0016 0246     		mov	r2, r0
 1258 0018 0146     		mov	r1, r0
 1259 001a FFF7FEFF 		bl	ws2812b_set_pixel
 1260              	.LVL63:
 1261 001e 0CE0     		b	.L66
 1262              	.LVL64:
ARM GAS  /tmp/ccSJArTl.s 			page 37


 1263              	.L69:
 1264              	.LBB7:
 317:Core/Src/ws2812b.c **** 		}
 1265              		.loc 1 317 0 discriminator 3
 1266 0020 0021     		movs	r1, #0
 1267 0022 0748     		ldr	r0, .L73
 1268 0024 00EB0410 		add	r0, r0, r4, lsl #4
 1269 0028 FFF7FEFF 		bl	loadNextFramebufferData
 1270              	.LVL65:
 315:Core/Src/ws2812b.c **** 		{
 1271              		.loc 1 315 0 discriminator 3
 1272 002c 0134     		adds	r4, r4, #1
 1273              	.LVL66:
 1274              	.L67:
 315:Core/Src/ws2812b.c **** 		{
 1275              		.loc 1 315 0 is_stmt 0 discriminator 1
 1276 002e 002C     		cmp	r4, #0
 1277 0030 F6D0     		beq	.L69
 320:Core/Src/ws2812b.c **** 	}
 1278              		.loc 1 320 0 is_stmt 1
 1279 0032 034A     		ldr	r2, .L73
 1280 0034 9369     		ldr	r3, [r2, #24]
 1281 0036 0133     		adds	r3, r3, #1
 1282 0038 9361     		str	r3, [r2, #24]
 1283              	.LVL67:
 1284              	.L66:
 1285              	.LBE7:
 325:Core/Src/ws2812b.c **** 
 1286              		.loc 1 325 0
 1287 003a 02B0     		add	sp, sp, #8
 1288              	.LCFI24:
 1289              		.cfi_def_cfa_offset 8
 1290              		@ sp needed
 1291 003c 10BD     		pop	{r4, pc}
 1292              	.L74:
 1293 003e 00BF     		.align	2
 1294              	.L73:
 1295 0040 00000000 		.word	ws2812b
 1296              		.cfi_endproc
 1297              	.LFE136:
 1299              		.section	.text.ws2812b_init,"ax",%progbits
 1300              		.align	1
 1301              		.global	ws2812b_init
 1302              		.syntax unified
 1303              		.thumb
 1304              		.thumb_func
 1305              		.fpu fpv4-sp-d16
 1307              	ws2812b_init:
 1308              	.LFB141:
 627:Core/Src/ws2812b.c **** 
 628:Core/Src/ws2812b.c **** 
 629:Core/Src/ws2812b.c **** void ws2812b_init()
 630:Core/Src/ws2812b.c **** {
 1309              		.loc 1 630 0
 1310              		.cfi_startproc
 1311              		@ args = 0, pretend = 0, frame = 0
 1312              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccSJArTl.s 			page 38


 1313 0000 08B5     		push	{r3, lr}
 1314              	.LCFI25:
 1315              		.cfi_def_cfa_offset 8
 1316              		.cfi_offset 3, -8
 1317              		.cfi_offset 14, -4
 631:Core/Src/ws2812b.c **** 	ws2812b_gpio_init();
 1318              		.loc 1 631 0
 1319 0002 FFF7FEFF 		bl	ws2812b_gpio_init
 1320              	.LVL68:
 632:Core/Src/ws2812b.c **** 
 633:Core/Src/ws2812b.c **** 	/*TIM2_init();
 634:Core/Src/ws2812b.c **** 	DMA_init();*/
 635:Core/Src/ws2812b.c **** 
 636:Core/Src/ws2812b.c **** 
 637:Core/Src/ws2812b.c **** 	DMA2_init();
 1321              		.loc 1 637 0
 1322 0006 FFF7FEFF 		bl	DMA2_init
 1323              	.LVL69:
 638:Core/Src/ws2812b.c **** 	TIM1_init();
 1324              		.loc 1 638 0
 1325 000a FFF7FEFF 		bl	TIM1_init
 1326              	.LVL70:
 639:Core/Src/ws2812b.c **** 
 640:Core/Src/ws2812b.c **** 
 641:Core/Src/ws2812b.c **** 	// Need to start the first transfer
 642:Core/Src/ws2812b.c **** 	ws2812b.transferComplete = 1;
 1327              		.loc 1 642 0
 1328 000e 0122     		movs	r2, #1
 1329 0010 014B     		ldr	r3, .L77
 1330 0012 1A74     		strb	r2, [r3, #16]
 1331 0014 08BD     		pop	{r3, pc}
 1332              	.L78:
 1333 0016 00BF     		.align	2
 1334              	.L77:
 1335 0018 00000000 		.word	ws2812b
 1336              		.cfi_endproc
 1337              	.LFE141:
 1339              		.section	.text.ws2812b_handle,"ax",%progbits
 1340              		.align	1
 1341              		.global	ws2812b_handle
 1342              		.syntax unified
 1343              		.thumb
 1344              		.thumb_func
 1345              		.fpu fpv4-sp-d16
 1347              	ws2812b_handle:
 1348              	.LFB142:
 643:Core/Src/ws2812b.c **** }
 644:Core/Src/ws2812b.c **** 
 645:Core/Src/ws2812b.c **** 
 646:Core/Src/ws2812b.c **** void ws2812b_handle()
 647:Core/Src/ws2812b.c **** {
 1349              		.loc 1 647 0
 1350              		.cfi_startproc
 1351              		@ args = 0, pretend = 0, frame = 0
 1352              		@ frame_needed = 0, uses_anonymous_args = 0
 1353 0000 08B5     		push	{r3, lr}
 1354              	.LCFI26:
ARM GAS  /tmp/ccSJArTl.s 			page 39


 1355              		.cfi_def_cfa_offset 8
 1356              		.cfi_offset 3, -8
 1357              		.cfi_offset 14, -4
 648:Core/Src/ws2812b.c **** 	if(ws2812b.startTransfer) {
 1358              		.loc 1 648 0
 1359 0002 054B     		ldr	r3, .L83
 1360 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1361 0006 03B9     		cbnz	r3, .L82
 1362              	.L79:
 1363 0008 08BD     		pop	{r3, pc}
 1364              	.L82:
 649:Core/Src/ws2812b.c **** 		ws2812b.startTransfer = 0;
 1365              		.loc 1 649 0
 1366 000a 0022     		movs	r2, #0
 1367 000c 024B     		ldr	r3, .L83
 1368 000e 5A74     		strb	r2, [r3, #17]
 650:Core/Src/ws2812b.c **** 		WS2812_sendbuf();
 1369              		.loc 1 650 0
 1370 0010 FFF7FEFF 		bl	WS2812_sendbuf
 1371              	.LVL71:
 651:Core/Src/ws2812b.c **** 	}
 652:Core/Src/ws2812b.c **** 
 653:Core/Src/ws2812b.c **** }
 1372              		.loc 1 653 0
 1373 0014 F8E7     		b	.L79
 1374              	.L84:
 1375 0016 00BF     		.align	2
 1376              	.L83:
 1377 0018 00000000 		.word	ws2812b
 1378              		.cfi_endproc
 1379              	.LFE142:
 1381              		.comm	dummy,4,4
 1382              		.comm	dmaCC2,96,4
 1383              		.comm	dmaCC1,96,4
 1384              		.comm	dmaUpdate,96,4
 1385              		.global	gammaTable
 1386              		.comm	ws2812bDmaBitBuffer,96,4
 1387              		.global	WS2812_IO_Low
 1388              		.global	WS2812_IO_High
 1389              		.comm	ws2812b,28,4
 1390              		.comm	timer_reset_pulse_period,4,4
 1391              		.comm	tim_period,4,4
 1392              		.comm	tim2OC2,28,4
 1393              		.comm	tim2OC1,28,4
 1394              		.comm	TIM1_handle,64,4
 1395              		.section	.data.WS2812_IO_High,"aw",%progbits
 1396              		.align	2
 1397              		.set	.LANCHOR0,. + 0
 1400              	WS2812_IO_High:
 1401 0000 00200000 		.word	8192
 1402              		.section	.data.WS2812_IO_Low,"aw",%progbits
 1403              		.align	2
 1404              		.set	.LANCHOR1,. + 0
 1407              	WS2812_IO_Low:
 1408 0000 00000020 		.word	536870912
 1409              		.section	.rodata.gammaTable,"a",%progbits
 1410              		.align	2
ARM GAS  /tmp/ccSJArTl.s 			page 40


 1411              		.set	.LANCHOR2,. + 0
 1414              	gammaTable:
 1415 0000 00       		.byte	0
 1416 0001 00       		.byte	0
 1417 0002 00       		.byte	0
 1418 0003 00       		.byte	0
 1419 0004 00       		.byte	0
 1420 0005 00       		.byte	0
 1421 0006 00       		.byte	0
 1422 0007 00       		.byte	0
 1423 0008 00       		.byte	0
 1424 0009 00       		.byte	0
 1425 000a 00       		.byte	0
 1426 000b 00       		.byte	0
 1427 000c 00       		.byte	0
 1428 000d 00       		.byte	0
 1429 000e 00       		.byte	0
 1430 000f 00       		.byte	0
 1431 0010 00       		.byte	0
 1432 0011 00       		.byte	0
 1433 0012 00       		.byte	0
 1434 0013 00       		.byte	0
 1435 0014 00       		.byte	0
 1436 0015 00       		.byte	0
 1437 0016 00       		.byte	0
 1438 0017 00       		.byte	0
 1439 0018 00       		.byte	0
 1440 0019 00       		.byte	0
 1441 001a 00       		.byte	0
 1442 001b 00       		.byte	0
 1443 001c 01       		.byte	1
 1444 001d 01       		.byte	1
 1445 001e 01       		.byte	1
 1446 001f 01       		.byte	1
 1447 0020 01       		.byte	1
 1448 0021 01       		.byte	1
 1449 0022 01       		.byte	1
 1450 0023 01       		.byte	1
 1451 0024 01       		.byte	1
 1452 0025 01       		.byte	1
 1453 0026 01       		.byte	1
 1454 0027 01       		.byte	1
 1455 0028 01       		.byte	1
 1456 0029 02       		.byte	2
 1457 002a 02       		.byte	2
 1458 002b 02       		.byte	2
 1459 002c 02       		.byte	2
 1460 002d 02       		.byte	2
 1461 002e 02       		.byte	2
 1462 002f 02       		.byte	2
 1463 0030 02       		.byte	2
 1464 0031 03       		.byte	3
 1465 0032 03       		.byte	3
 1466 0033 03       		.byte	3
 1467 0034 03       		.byte	3
 1468 0035 03       		.byte	3
 1469 0036 03       		.byte	3
ARM GAS  /tmp/ccSJArTl.s 			page 41


 1470 0037 03       		.byte	3
 1471 0038 04       		.byte	4
 1472 0039 04       		.byte	4
 1473 003a 04       		.byte	4
 1474 003b 04       		.byte	4
 1475 003c 04       		.byte	4
 1476 003d 05       		.byte	5
 1477 003e 05       		.byte	5
 1478 003f 05       		.byte	5
 1479 0040 05       		.byte	5
 1480 0041 06       		.byte	6
 1481 0042 06       		.byte	6
 1482 0043 06       		.byte	6
 1483 0044 06       		.byte	6
 1484 0045 07       		.byte	7
 1485 0046 07       		.byte	7
 1486 0047 07       		.byte	7
 1487 0048 07       		.byte	7
 1488 0049 08       		.byte	8
 1489 004a 08       		.byte	8
 1490 004b 08       		.byte	8
 1491 004c 09       		.byte	9
 1492 004d 09       		.byte	9
 1493 004e 09       		.byte	9
 1494 004f 0A       		.byte	10
 1495 0050 0A       		.byte	10
 1496 0051 0A       		.byte	10
 1497 0052 0B       		.byte	11
 1498 0053 0B       		.byte	11
 1499 0054 0B       		.byte	11
 1500 0055 0C       		.byte	12
 1501 0056 0C       		.byte	12
 1502 0057 0D       		.byte	13
 1503 0058 0D       		.byte	13
 1504 0059 0D       		.byte	13
 1505 005a 0E       		.byte	14
 1506 005b 0E       		.byte	14
 1507 005c 0F       		.byte	15
 1508 005d 0F       		.byte	15
 1509 005e 10       		.byte	16
 1510 005f 10       		.byte	16
 1511 0060 11       		.byte	17
 1512 0061 11       		.byte	17
 1513 0062 12       		.byte	18
 1514 0063 12       		.byte	18
 1515 0064 13       		.byte	19
 1516 0065 13       		.byte	19
 1517 0066 14       		.byte	20
 1518 0067 14       		.byte	20
 1519 0068 15       		.byte	21
 1520 0069 15       		.byte	21
 1521 006a 16       		.byte	22
 1522 006b 16       		.byte	22
 1523 006c 17       		.byte	23
 1524 006d 18       		.byte	24
 1525 006e 18       		.byte	24
 1526 006f 19       		.byte	25
ARM GAS  /tmp/ccSJArTl.s 			page 42


 1527 0070 19       		.byte	25
 1528 0071 1A       		.byte	26
 1529 0072 1B       		.byte	27
 1530 0073 1B       		.byte	27
 1531 0074 1C       		.byte	28
 1532 0075 1D       		.byte	29
 1533 0076 1D       		.byte	29
 1534 0077 1E       		.byte	30
 1535 0078 1F       		.byte	31
 1536 0079 20       		.byte	32
 1537 007a 20       		.byte	32
 1538 007b 21       		.byte	33
 1539 007c 22       		.byte	34
 1540 007d 23       		.byte	35
 1541 007e 23       		.byte	35
 1542 007f 24       		.byte	36
 1543 0080 25       		.byte	37
 1544 0081 26       		.byte	38
 1545 0082 27       		.byte	39
 1546 0083 27       		.byte	39
 1547 0084 28       		.byte	40
 1548 0085 29       		.byte	41
 1549 0086 2A       		.byte	42
 1550 0087 2B       		.byte	43
 1551 0088 2C       		.byte	44
 1552 0089 2D       		.byte	45
 1553 008a 2E       		.byte	46
 1554 008b 2F       		.byte	47
 1555 008c 30       		.byte	48
 1556 008d 31       		.byte	49
 1557 008e 32       		.byte	50
 1558 008f 32       		.byte	50
 1559 0090 33       		.byte	51
 1560 0091 34       		.byte	52
 1561 0092 36       		.byte	54
 1562 0093 37       		.byte	55
 1563 0094 38       		.byte	56
 1564 0095 39       		.byte	57
 1565 0096 3A       		.byte	58
 1566 0097 3B       		.byte	59
 1567 0098 3C       		.byte	60
 1568 0099 3D       		.byte	61
 1569 009a 3E       		.byte	62
 1570 009b 3F       		.byte	63
 1571 009c 40       		.byte	64
 1572 009d 42       		.byte	66
 1573 009e 43       		.byte	67
 1574 009f 44       		.byte	68
 1575 00a0 45       		.byte	69
 1576 00a1 46       		.byte	70
 1577 00a2 48       		.byte	72
 1578 00a3 49       		.byte	73
 1579 00a4 4A       		.byte	74
 1580 00a5 4B       		.byte	75
 1581 00a6 4D       		.byte	77
 1582 00a7 4E       		.byte	78
 1583 00a8 4F       		.byte	79
ARM GAS  /tmp/ccSJArTl.s 			page 43


 1584 00a9 51       		.byte	81
 1585 00aa 52       		.byte	82
 1586 00ab 53       		.byte	83
 1587 00ac 55       		.byte	85
 1588 00ad 56       		.byte	86
 1589 00ae 57       		.byte	87
 1590 00af 59       		.byte	89
 1591 00b0 5A       		.byte	90
 1592 00b1 5C       		.byte	92
 1593 00b2 5D       		.byte	93
 1594 00b3 5F       		.byte	95
 1595 00b4 60       		.byte	96
 1596 00b5 62       		.byte	98
 1597 00b6 63       		.byte	99
 1598 00b7 65       		.byte	101
 1599 00b8 66       		.byte	102
 1600 00b9 68       		.byte	104
 1601 00ba 69       		.byte	105
 1602 00bb 6B       		.byte	107
 1603 00bc 6D       		.byte	109
 1604 00bd 6E       		.byte	110
 1605 00be 70       		.byte	112
 1606 00bf 72       		.byte	114
 1607 00c0 73       		.byte	115
 1608 00c1 75       		.byte	117
 1609 00c2 77       		.byte	119
 1610 00c3 78       		.byte	120
 1611 00c4 7A       		.byte	122
 1612 00c5 7C       		.byte	124
 1613 00c6 7E       		.byte	126
 1614 00c7 7F       		.byte	127
 1615 00c8 81       		.byte	-127
 1616 00c9 83       		.byte	-125
 1617 00ca 85       		.byte	-123
 1618 00cb 87       		.byte	-121
 1619 00cc 89       		.byte	-119
 1620 00cd 8A       		.byte	-118
 1621 00ce 8C       		.byte	-116
 1622 00cf 8E       		.byte	-114
 1623 00d0 90       		.byte	-112
 1624 00d1 92       		.byte	-110
 1625 00d2 94       		.byte	-108
 1626 00d3 96       		.byte	-106
 1627 00d4 98       		.byte	-104
 1628 00d5 9A       		.byte	-102
 1629 00d6 9C       		.byte	-100
 1630 00d7 9E       		.byte	-98
 1631 00d8 A0       		.byte	-96
 1632 00d9 A2       		.byte	-94
 1633 00da A4       		.byte	-92
 1634 00db A7       		.byte	-89
 1635 00dc A9       		.byte	-87
 1636 00dd AB       		.byte	-85
 1637 00de AD       		.byte	-83
 1638 00df AF       		.byte	-81
 1639 00e0 B1       		.byte	-79
 1640 00e1 B4       		.byte	-76
ARM GAS  /tmp/ccSJArTl.s 			page 44


 1641 00e2 B6       		.byte	-74
 1642 00e3 B8       		.byte	-72
 1643 00e4 BA       		.byte	-70
 1644 00e5 BD       		.byte	-67
 1645 00e6 BF       		.byte	-65
 1646 00e7 C1       		.byte	-63
 1647 00e8 C4       		.byte	-60
 1648 00e9 C6       		.byte	-58
 1649 00ea C8       		.byte	-56
 1650 00eb CB       		.byte	-53
 1651 00ec CD       		.byte	-51
 1652 00ed D0       		.byte	-48
 1653 00ee D2       		.byte	-46
 1654 00ef D5       		.byte	-43
 1655 00f0 D7       		.byte	-41
 1656 00f1 DA       		.byte	-38
 1657 00f2 DC       		.byte	-36
 1658 00f3 DF       		.byte	-33
 1659 00f4 E1       		.byte	-31
 1660 00f5 E4       		.byte	-28
 1661 00f6 E7       		.byte	-25
 1662 00f7 E9       		.byte	-23
 1663 00f8 EC       		.byte	-20
 1664 00f9 EF       		.byte	-17
 1665 00fa F1       		.byte	-15
 1666 00fb F4       		.byte	-12
 1667 00fc F7       		.byte	-9
 1668 00fd F9       		.byte	-7
 1669 00fe FC       		.byte	-4
 1670 00ff FF       		.byte	-1
 1671              		.text
 1672              	.Letext0:
 1673              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1674              		.file 3 "/usr/include/newlib/sys/lock.h"
 1675              		.file 4 "/usr/include/newlib/sys/_types.h"
 1676              		.file 5 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1677              		.file 6 "/usr/include/newlib/sys/reent.h"
 1678              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 1679              		.file 8 "Drivers/CMSIS/Include/core_cm4.h"
 1680              		.file 9 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1681              		.file 10 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 1682              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1683              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1684              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1685              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1686              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1687              		.file 16 "Core/Inc/ws2812b.h"
 1688              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/ccSJArTl.s 			page 45


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ws2812b.c
     /tmp/ccSJArTl.s:18     .text.DMA_TransferError:0000000000000000 $t
     /tmp/ccSJArTl.s:25     .text.DMA_TransferError:0000000000000000 DMA_TransferError
     /tmp/ccSJArTl.s:54     .text.ws2812b_gpio_init:0000000000000000 $t
     /tmp/ccSJArTl.s:60     .text.ws2812b_gpio_init:0000000000000000 ws2812b_gpio_init
     /tmp/ccSJArTl.s:148    .text.ws2812b_gpio_init:0000000000000070 $d
     /tmp/ccSJArTl.s:154    .text.DMA2_init:0000000000000000 $t
     /tmp/ccSJArTl.s:160    .text.DMA2_init:0000000000000000 DMA2_init
     /tmp/ccSJArTl.s:362    .text.DMA2_init:0000000000000124 $d
                            *COM*:0000000000000060 dmaUpdate
                            *COM*:0000000000000060 dmaCC1
                            *COM*:0000000000000060 ws2812bDmaBitBuffer
                            *COM*:0000000000000060 dmaCC2
     /tmp/ccSJArTl.s:838    .text.DMA_TransferCompleteHandler:0000000000000000 DMA_TransferCompleteHandler
     /tmp/ccSJArTl.s:1229   .text.DMA_TransferHalfHandler:0000000000000000 DMA_TransferHalfHandler
     /tmp/ccSJArTl.s:381    .text.TIM1_init:0000000000000000 $t
     /tmp/ccSJArTl.s:387    .text.TIM1_init:0000000000000000 TIM1_init
     /tmp/ccSJArTl.s:545    .text.TIM1_init:00000000000000e0 $d
                            *COM*:0000000000000004 tim_period
                            *COM*:0000000000000004 timer_reset_pulse_period
                            *COM*:0000000000000040 TIM1_handle
                            *COM*:000000000000001c tim2OC1
                            *COM*:000000000000001c tim2OC2
     /tmp/ccSJArTl.s:561    .text.DMA2_Stream2_IRQHandler:0000000000000000 $t
     /tmp/ccSJArTl.s:568    .text.DMA2_Stream2_IRQHandler:0000000000000000 DMA2_Stream2_IRQHandler
     /tmp/ccSJArTl.s:594    .text.DMA2_Stream2_IRQHandler:0000000000000018 $d
     /tmp/ccSJArTl.s:600    .text.TIM1_UP_TIM10_IRQHandler:0000000000000000 $t
     /tmp/ccSJArTl.s:607    .text.TIM1_UP_TIM10_IRQHandler:0000000000000000 TIM1_UP_TIM10_IRQHandler
     /tmp/ccSJArTl.s:633    .text.TIM1_UP_TIM10_IRQHandler:0000000000000018 $d
     /tmp/ccSJArTl.s:639    .text.ws2812b_set_pixel:0000000000000000 $t
     /tmp/ccSJArTl.s:646    .text.ws2812b_set_pixel:0000000000000000 ws2812b_set_pixel
     /tmp/ccSJArTl.s:753    .text.ws2812b_set_pixel:00000000000000b0 $d
     /tmp/ccSJArTl.s:759    .text.loadNextFramebufferData:0000000000000000 $t
     /tmp/ccSJArTl.s:765    .text.loadNextFramebufferData:0000000000000000 loadNextFramebufferData
     /tmp/ccSJArTl.s:831    .text.DMA_TransferCompleteHandler:0000000000000000 $t
     /tmp/ccSJArTl.s:974    .text.DMA_TransferCompleteHandler:00000000000000c0 $d
                            *COM*:000000000000001c ws2812b
     /tmp/ccSJArTl.s:988    .text.WS2812_sendbuf:0000000000000000 $t
     /tmp/ccSJArTl.s:994    .text.WS2812_sendbuf:0000000000000000 WS2812_sendbuf
     /tmp/ccSJArTl.s:1206   .text.WS2812_sendbuf:0000000000000144 $d
     /tmp/ccSJArTl.s:1222   .text.DMA_TransferHalfHandler:0000000000000000 $t
     /tmp/ccSJArTl.s:1295   .text.DMA_TransferHalfHandler:0000000000000040 $d
     /tmp/ccSJArTl.s:1300   .text.ws2812b_init:0000000000000000 $t
     /tmp/ccSJArTl.s:1307   .text.ws2812b_init:0000000000000000 ws2812b_init
     /tmp/ccSJArTl.s:1335   .text.ws2812b_init:0000000000000018 $d
     /tmp/ccSJArTl.s:1340   .text.ws2812b_handle:0000000000000000 $t
     /tmp/ccSJArTl.s:1347   .text.ws2812b_handle:0000000000000000 ws2812b_handle
     /tmp/ccSJArTl.s:1377   .text.ws2812b_handle:0000000000000018 $d
                            *COM*:0000000000000004 dummy
     /tmp/ccSJArTl.s:1414   .rodata.gammaTable:0000000000000000 gammaTable
     /tmp/ccSJArTl.s:1407   .data.WS2812_IO_Low:0000000000000000 WS2812_IO_Low
     /tmp/ccSJArTl.s:1400   .data.WS2812_IO_High:0000000000000000 WS2812_IO_High
     /tmp/ccSJArTl.s:1396   .data.WS2812_IO_High:0000000000000000 $d
     /tmp/ccSJArTl.s:1403   .data.WS2812_IO_Low:0000000000000000 $d
     /tmp/ccSJArTl.s:1410   .rodata.gammaTable:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
ARM GAS  /tmp/ccSJArTl.s 			page 46



UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_DMA_DeInit
HAL_DMA_Init
HAL_DMA_Start
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_DMA_Start_IT
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIM_Base_Start
HAL_TIM_PWM_Start
SystemCoreClock
HAL_DMA_IRQHandler
HAL_TIM_IRQHandler
