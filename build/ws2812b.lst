ARM GAS  /tmp/ccugV9H8.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ws2812b.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.DMA_TransferError,"ax",%progbits
  18              		.align	1
  19              		.global	DMA_TransferError
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	DMA_TransferError:
  26              	.LFB135:
  27              		.file 1 "Core/Src/ws2812b.c"
   1:Core/Src/ws2812b.c **** /*
   2:Core/Src/ws2812b.c **** 
   3:Core/Src/ws2812b.c ****   WS2812B CPU and memory efficient library
   4:Core/Src/ws2812b.c **** 
   5:Core/Src/ws2812b.c ****   Date: 28.9.2016
   6:Core/Src/ws2812b.c **** 
   7:Core/Src/ws2812b.c ****   Author: Martin Hubacek
   8:Core/Src/ws2812b.c ****   	  	  http://www.martinhubacek.cz
   9:Core/Src/ws2812b.c ****   	  	  @hubmartin
  10:Core/Src/ws2812b.c **** 
  11:Core/Src/ws2812b.c ****   Licence: MIT License
  12:Core/Src/ws2812b.c **** 
  13:Core/Src/ws2812b.c **** */
  14:Core/Src/ws2812b.c **** 
  15:Core/Src/ws2812b.c **** #include <string.h>
  16:Core/Src/ws2812b.c **** 
  17:Core/Src/ws2812b.c **** #include "stm32f4xx_hal.h"
  18:Core/Src/ws2812b.c **** #include "ws2812b.h"
  19:Core/Src/ws2812b.c **** 
  20:Core/Src/ws2812b.c **** extern WS2812_Struct ws2812b;
  21:Core/Src/ws2812b.c **** 
  22:Core/Src/ws2812b.c **** // Define source arrays for my DMAs
  23:Core/Src/ws2812b.c **** uint32_t WS2812_IO_High[] =  { WS2812B_PINS };
  24:Core/Src/ws2812b.c **** uint32_t WS2812_IO_Low[] = {WS2812B_PINS << 16};
  25:Core/Src/ws2812b.c **** 
  26:Core/Src/ws2812b.c **** // WS2812 framebuffer - buffer for 2 LEDs - two times 24 bits
  27:Core/Src/ws2812b.c **** uint16_t ws2812bDmaBitBuffer[24 * 2];
  28:Core/Src/ws2812b.c **** 
  29:Core/Src/ws2812b.c **** // Gamma correction table
  30:Core/Src/ws2812b.c **** const uint8_t gammaTable[] = {
  31:Core/Src/ws2812b.c ****     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
ARM GAS  /tmp/ccugV9H8.s 			page 2


  32:Core/Src/ws2812b.c ****     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,
  33:Core/Src/ws2812b.c ****     1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,
  34:Core/Src/ws2812b.c ****     2,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,
  35:Core/Src/ws2812b.c ****     5,  6,  6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,
  36:Core/Src/ws2812b.c ****    10, 10, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16,
  37:Core/Src/ws2812b.c ****    17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 24, 24, 25,
  38:Core/Src/ws2812b.c ****    25, 26, 27, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36,
  39:Core/Src/ws2812b.c ****    37, 38, 39, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50,
  40:Core/Src/ws2812b.c ****    51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68,
  41:Core/Src/ws2812b.c ****    69, 70, 72, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89,
  42:Core/Src/ws2812b.c ****    90, 92, 93, 95, 96, 98, 99,101,102,104,105,107,109,110,112,114,
  43:Core/Src/ws2812b.c ****   115,117,119,120,122,124,126,127,129,131,133,135,137,138,140,142,
  44:Core/Src/ws2812b.c ****   144,146,148,150,152,154,156,158,160,162,164,167,169,171,173,175,
  45:Core/Src/ws2812b.c ****   177,180,182,184,186,189,191,193,196,198,200,203,205,208,210,213,
  46:Core/Src/ws2812b.c ****   215,218,220,223,225,228,231,233,236,239,241,244,247,249,252,255 };
  47:Core/Src/ws2812b.c **** 
  48:Core/Src/ws2812b.c **** static void ws2812b_gpio_init(void)
  49:Core/Src/ws2812b.c **** {
  50:Core/Src/ws2812b.c **** 	// WS2812B outputs
  51:Core/Src/ws2812b.c **** 	WS2812B_GPIO_CLK_ENABLE();
  52:Core/Src/ws2812b.c **** 	GPIO_InitTypeDef  GPIO_InitStruct;
  53:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Pin       = WS2812B_PINS;
  54:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
  55:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Pull      = GPIO_NOPULL;
  56:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
  57:Core/Src/ws2812b.c **** 	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
  58:Core/Src/ws2812b.c **** 
  59:Core/Src/ws2812b.c **** 	// Enable output pins for debuging to see DMA Full and Half transfer interrupts
  60:Core/Src/ws2812b.c **** 	#if defined(LED_BLUE_PORT) && defined(LED_ORANGE_PORT)
  61:Core/Src/ws2812b.c **** 		__HAL_RCC_GPIOD_CLK_ENABLE();
  62:Core/Src/ws2812b.c **** 
  63:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  64:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Pull = GPIO_NOPULL;
  65:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  66:Core/Src/ws2812b.c **** 
  67:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Pin = LED_BLUE_PIN;
  68:Core/Src/ws2812b.c **** 		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
  69:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
  70:Core/Src/ws2812b.c **** 		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
  71:Core/Src/ws2812b.c **** 	#endif
  72:Core/Src/ws2812b.c **** }
  73:Core/Src/ws2812b.c **** 
  74:Core/Src/ws2812b.c **** 
  75:Core/Src/ws2812b.c **** 
  76:Core/Src/ws2812b.c **** static void TIM1_init(void)
  77:Core/Src/ws2812b.c **** {
  78:Core/Src/ws2812b.c **** 	// TIM2 Periph clock enable
  79:Core/Src/ws2812b.c **** 	__HAL_RCC_TIM1_CLK_ENABLE();
  80:Core/Src/ws2812b.c **** 
  81:Core/Src/ws2812b.c **** 	// This computation of pulse length should work ok,
  82:Core/Src/ws2812b.c **** 	// at some slower core speeds it needs some tuning.
  83:Core/Src/ws2812b.c **** 	tim_period =  SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to hav
  84:Core/Src/ws2812b.c **** 	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
  85:Core/Src/ws2812b.c **** 
  86:Core/Src/ws2812b.c **** 	uint32_t cc1 = (10 * tim_period) / 36;
  87:Core/Src/ws2812b.c **** 	uint32_t cc2 = (10 * tim_period) / 15;
  88:Core/Src/ws2812b.c **** 
ARM GAS  /tmp/ccugV9H8.s 			page 3


  89:Core/Src/ws2812b.c **** 	TIM1_handle.Instance = TIM1;
  90:Core/Src/ws2812b.c **** 
  91:Core/Src/ws2812b.c **** 	TIM1_handle.Init.Period            = tim_period;
  92:Core/Src/ws2812b.c **** 	TIM1_handle.Init.RepetitionCounter = 0;
  93:Core/Src/ws2812b.c **** 	TIM1_handle.Init.Prescaler         = 0;
  94:Core/Src/ws2812b.c **** 	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
  95:Core/Src/ws2812b.c **** 	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
  96:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_Init(&TIM1_handle);
  97:Core/Src/ws2812b.c **** 
  98:Core/Src/ws2812b.c **** 	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
  99:Core/Src/ws2812b.c **** 	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 100:Core/Src/ws2812b.c **** 
 101:Core/Src/ws2812b.c **** 	tim2OC1.OCMode       = TIM_OCMODE_PWM1;
 102:Core/Src/ws2812b.c **** 	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 103:Core/Src/ws2812b.c **** 	tim2OC1.Pulse        = cc1;
 104:Core/Src/ws2812b.c **** 	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 105:Core/Src/ws2812b.c **** 	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 106:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 107:Core/Src/ws2812b.c **** 
 108:Core/Src/ws2812b.c **** 	tim2OC2.OCMode       = TIM_OCMODE_PWM1;
 109:Core/Src/ws2812b.c **** 	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 110:Core/Src/ws2812b.c **** 	tim2OC2.Pulse        = cc2;
 111:Core/Src/ws2812b.c **** 	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 112:Core/Src/ws2812b.c **** 	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 113:Core/Src/ws2812b.c **** 	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 114:Core/Src/ws2812b.c **** 	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 115:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 116:Core/Src/ws2812b.c **** 
 117:Core/Src/ws2812b.c **** 
 118:Core/Src/ws2812b.c **** 	HAL_TIM_Base_Start(&TIM1_handle);
 119:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 120:Core/Src/ws2812b.c **** 
 121:Core/Src/ws2812b.c **** 	__HAL_TIM_DISABLE(&TIM1_handle);
 122:Core/Src/ws2812b.c **** 
 123:Core/Src/ws2812b.c **** }
 124:Core/Src/ws2812b.c **** 
 125:Core/Src/ws2812b.c **** 
 126:Core/Src/ws2812b.c **** 
 127:Core/Src/ws2812b.c **** DMA_HandleTypeDef     dmaUpdate;
 128:Core/Src/ws2812b.c **** DMA_HandleTypeDef     dmaCC1;
 129:Core/Src/ws2812b.c **** DMA_HandleTypeDef     dmaCC2;
 130:Core/Src/ws2812b.c **** #define BUFFER_SIZE		(sizeof(ws2812bDmaBitBuffer)/sizeof(uint16_t))
 131:Core/Src/ws2812b.c **** 
 132:Core/Src/ws2812b.c **** uint32_t dummy;
 133:Core/Src/ws2812b.c **** 
 134:Core/Src/ws2812b.c **** 
 135:Core/Src/ws2812b.c **** static void DMA2_init(void)
 136:Core/Src/ws2812b.c **** {
 137:Core/Src/ws2812b.c **** 
 138:Core/Src/ws2812b.c **** 	// TIM2 Update event
 139:Core/Src/ws2812b.c **** 	__HAL_RCC_DMA2_CLK_ENABLE();
 140:Core/Src/ws2812b.c **** 
 141:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 142:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 143:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 144:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 145:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
ARM GAS  /tmp/ccugV9H8.s 			page 4


 146:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 147:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 148:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 149:Core/Src/ws2812b.c **** 
 150:Core/Src/ws2812b.c **** 	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 151:Core/Src/ws2812b.c **** 	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 152:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 153:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 154:Core/Src/ws2812b.c **** 
 155:Core/Src/ws2812b.c **** 	dmaUpdate.Instance = DMA2_Stream5;
 156:Core/Src/ws2812b.c **** 	//dmaUpdate.XferCpltCallback  = TransferComplete;
 157:Core/Src/ws2812b.c **** 	//dmaUpdate.XferErrorCallback = TransferError;
 158:Core/Src/ws2812b.c **** 
 159:Core/Src/ws2812b.c **** 	HAL_DMA_DeInit(&dmaUpdate);
 160:Core/Src/ws2812b.c **** 	HAL_DMA_Init(&dmaUpdate);
 161:Core/Src/ws2812b.c **** 	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 162:Core/Src/ws2812b.c **** 	//HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 163:Core/Src/ws2812b.c **** 	HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)(&WS2812B_PORT->BSRR), BUFFER_SIZE);
 164:Core/Src/ws2812b.c **** 	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);
 165:Core/Src/ws2812b.c **** 
 166:Core/Src/ws2812b.c **** 
 167:Core/Src/ws2812b.c **** 	// TIM2 CC1 event
 168:Core/Src/ws2812b.c **** 	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 169:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 170:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 171:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 172:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 173:Core/Src/ws2812b.c **** 	dmaCC1.Init.Mode = DMA_CIRCULAR;
 174:Core/Src/ws2812b.c **** 	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 175:Core/Src/ws2812b.c **** 	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 176:Core/Src/ws2812b.c **** 
 177:Core/Src/ws2812b.c **** 	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 178:Core/Src/ws2812b.c **** 	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 179:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 180:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 181:Core/Src/ws2812b.c **** 
 182:Core/Src/ws2812b.c **** 	dmaCC1.Instance = DMA2_Stream1;
 183:Core/Src/ws2812b.c **** 	//dmaUpdate.XferCpltCallback  = TransferComplete;
 184:Core/Src/ws2812b.c **** 	//dmaUpdate.XferErrorCallback = TransferError;
 185:Core/Src/ws2812b.c **** 	//dmaUpdate.XferHalfCpltCallback = TransferHalf;
 186:Core/Src/ws2812b.c **** 	//HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 187:Core/Src/ws2812b.c **** 	//HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 188:Core/Src/ws2812b.c **** 	HAL_DMA_DeInit(&dmaCC1);
 189:Core/Src/ws2812b.c **** 	HAL_DMA_Init(&dmaCC1);
 190:Core/Src/ws2812b.c **** 	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_
 191:Core/Src/ws2812b.c **** 	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR
 192:Core/Src/ws2812b.c **** 
 193:Core/Src/ws2812b.c **** 
 194:Core/Src/ws2812b.c **** 	// TIM2 CC2 event
 195:Core/Src/ws2812b.c **** 	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 196:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 197:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 198:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 199:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 200:Core/Src/ws2812b.c **** 	dmaCC2.Init.Mode = DMA_CIRCULAR;
 201:Core/Src/ws2812b.c **** 	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 202:Core/Src/ws2812b.c **** 	dmaCC2.Init.Channel = DMA_CHANNEL_6;
ARM GAS  /tmp/ccugV9H8.s 			page 5


 203:Core/Src/ws2812b.c **** 
 204:Core/Src/ws2812b.c **** 	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 205:Core/Src/ws2812b.c **** 	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 206:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 207:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 208:Core/Src/ws2812b.c **** 
 209:Core/Src/ws2812b.c **** 	dmaCC2.Instance = DMA2_Stream2;
 210:Core/Src/ws2812b.c **** 
 211:Core/Src/ws2812b.c **** 	HAL_DMA_DeInit(&dmaCC2);
 212:Core/Src/ws2812b.c **** 
 213:Core/Src/ws2812b.c **** 	dmaCC2.XferCpltCallback  = DMA_TransferCompleteHandler;
 214:Core/Src/ws2812b.c **** 	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 215:Core/Src/ws2812b.c **** 	dmaCC2.XferErrorCallback = DMA_TransferError;
 216:Core/Src/ws2812b.c **** 
 217:Core/Src/ws2812b.c **** 	HAL_DMA_Init(&dmaCC2);
 218:Core/Src/ws2812b.c **** 	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 219:Core/Src/ws2812b.c **** 	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 220:Core/Src/ws2812b.c **** 	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 221:Core/Src/ws2812b.c **** 	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);
 222:Core/Src/ws2812b.c **** 
 223:Core/Src/ws2812b.c **** 	//__HAL_LINKDMA(&Tim2Handle, hdma,  &dmaCC2);
 224:Core/Src/ws2812b.c **** 
 225:Core/Src/ws2812b.c **** }
 226:Core/Src/ws2812b.c **** 
 227:Core/Src/ws2812b.c **** 
 228:Core/Src/ws2812b.c **** 
 229:Core/Src/ws2812b.c **** 
 230:Core/Src/ws2812b.c **** 
 231:Core/Src/ws2812b.c **** 
 232:Core/Src/ws2812b.c **** static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row)
 233:Core/Src/ws2812b.c **** {
 234:Core/Src/ws2812b.c **** 
 235:Core/Src/ws2812b.c **** 	uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 236:Core/Src/ws2812b.c **** 	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 237:Core/Src/ws2812b.c **** 	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 238:Core/Src/ws2812b.c **** 
 239:Core/Src/ws2812b.c **** 	if(bItem->frameBufferCounter == bItem->frameBufferSize)
 240:Core/Src/ws2812b.c **** 		bItem->frameBufferCounter = 0;
 241:Core/Src/ws2812b.c **** 
 242:Core/Src/ws2812b.c **** 	ws2812b_set_pixel(bItem->channel, row, r, g, b);
 243:Core/Src/ws2812b.c **** }
 244:Core/Src/ws2812b.c **** 
 245:Core/Src/ws2812b.c **** 
 246:Core/Src/ws2812b.c **** // Transmit the framebuffer
 247:Core/Src/ws2812b.c **** static void WS2812_sendbuf()
 248:Core/Src/ws2812b.c **** {
 249:Core/Src/ws2812b.c **** 	// transmission complete flag
 250:Core/Src/ws2812b.c **** 	ws2812b.transferComplete = 0;
 251:Core/Src/ws2812b.c **** 
 252:Core/Src/ws2812b.c **** 	uint32_t i;
 253:Core/Src/ws2812b.c **** 
 254:Core/Src/ws2812b.c **** 	for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 255:Core/Src/ws2812b.c **** 	{
 256:Core/Src/ws2812b.c **** 		ws2812b.item[i].frameBufferCounter = 0;
 257:Core/Src/ws2812b.c **** 
 258:Core/Src/ws2812b.c **** 		loadNextFramebufferData(&ws2812b.item[i], 0); // ROW 0
 259:Core/Src/ws2812b.c **** 		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
ARM GAS  /tmp/ccugV9H8.s 			page 6


 260:Core/Src/ws2812b.c **** 	}
 261:Core/Src/ws2812b.c **** 
 262:Core/Src/ws2812b.c **** 	// clear all DMA flags
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaUpdate, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 265:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 266:Core/Src/ws2812b.c **** 
 267:Core/Src/ws2812b.c **** 
 268:Core/Src/ws2812b.c **** 
 269:Core/Src/ws2812b.c **** 	// configure the number of bytes to be transferred by the DMA controller
 270:Core/Src/ws2812b.c **** 	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 271:Core/Src/ws2812b.c **** 	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 272:Core/Src/ws2812b.c **** 	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 273:Core/Src/ws2812b.c **** 
 274:Core/Src/ws2812b.c **** 	// clear all TIM2 flags
 275:Core/Src/ws2812b.c **** 	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE | TIM_FLAG_CC1 | TIM_FLAG_CC2 | TIM_FLAG_CC3 | 
 276:Core/Src/ws2812b.c **** 
 277:Core/Src/ws2812b.c **** 	// enable DMA channels
 278:Core/Src/ws2812b.c **** 	__HAL_DMA_ENABLE(&dmaUpdate);
 279:Core/Src/ws2812b.c **** 	__HAL_DMA_ENABLE(&dmaCC1);
 280:Core/Src/ws2812b.c **** 	__HAL_DMA_ENABLE(&dmaCC2);
 281:Core/Src/ws2812b.c **** 
 282:Core/Src/ws2812b.c **** 	// IMPORTANT: enable the TIM2 DMA requests AFTER enabling the DMA channels!
 283:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 284:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 285:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 286:Core/Src/ws2812b.c **** 
 287:Core/Src/ws2812b.c **** 	TIM1->CNT = tim_period-1;
 288:Core/Src/ws2812b.c **** 
 289:Core/Src/ws2812b.c **** 	// start TIM2
 290:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE(&TIM1_handle);
 291:Core/Src/ws2812b.c **** }
 292:Core/Src/ws2812b.c **** 
 293:Core/Src/ws2812b.c **** 
 294:Core/Src/ws2812b.c **** void DMA_TransferError(DMA_HandleTypeDef *DmaHandle)
 295:Core/Src/ws2812b.c **** {
  28              		.loc 1 295 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 82B0     		sub	sp, sp, #8
  35              		.cfi_def_cfa_offset 8
 296:Core/Src/ws2812b.c **** 	volatile int i = 0;
  36              		.loc 1 296 0
  37 0002 0023     		movs	r3, #0
  38 0004 0193     		str	r3, [sp, #4]
 297:Core/Src/ws2812b.c **** 	i++;
  39              		.loc 1 297 0
  40 0006 019B     		ldr	r3, [sp, #4]
  41 0008 0133     		adds	r3, r3, #1
  42 000a 0193     		str	r3, [sp, #4]
 298:Core/Src/ws2812b.c **** }
  43              		.loc 1 298 0
  44 000c 02B0     		add	sp, sp, #8
  45              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccugV9H8.s 			page 7


  46              		@ sp needed
  47 000e 7047     		bx	lr
  48              		.cfi_endproc
  49              	.LFE135:
  51              		.section	.text.ws2812b_gpio_init,"ax",%progbits
  52              		.align	1
  53              		.syntax unified
  54              		.thumb
  55              		.thumb_func
  56              		.fpu fpv4-sp-d16
  58              	ws2812b_gpio_init:
  59              	.LFB130:
  49:Core/Src/ws2812b.c **** 	// WS2812B outputs
  60              		.loc 1 49 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 32
  63              		@ frame_needed = 0, uses_anonymous_args = 0
  64 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  65              		.cfi_def_cfa_offset 20
  66              		.cfi_offset 4, -20
  67              		.cfi_offset 5, -16
  68              		.cfi_offset 6, -12
  69              		.cfi_offset 7, -8
  70              		.cfi_offset 14, -4
  71 0002 89B0     		sub	sp, sp, #36
  72              		.cfi_def_cfa_offset 56
  73              	.LBB2:
  51:Core/Src/ws2812b.c **** 	GPIO_InitTypeDef  GPIO_InitStruct;
  74              		.loc 1 51 0
  75 0004 0025     		movs	r5, #0
  76 0006 0195     		str	r5, [sp, #4]
  77 0008 194C     		ldr	r4, .L5
  78 000a 236B     		ldr	r3, [r4, #48]
  79 000c 43F00403 		orr	r3, r3, #4
  80 0010 2363     		str	r3, [r4, #48]
  81 0012 236B     		ldr	r3, [r4, #48]
  82 0014 03F00403 		and	r3, r3, #4
  83 0018 0193     		str	r3, [sp, #4]
  84 001a 019B     		ldr	r3, [sp, #4]
  85              	.LBE2:
  53:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP;
  86              		.loc 1 53 0
  87 001c 4FF40056 		mov	r6, #8192
  88 0020 0396     		str	r6, [sp, #12]
  54:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Pull      = GPIO_NOPULL;
  89              		.loc 1 54 0
  90 0022 0127     		movs	r7, #1
  91 0024 0497     		str	r7, [sp, #16]
  55:Core/Src/ws2812b.c **** 	GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
  92              		.loc 1 55 0
  93 0026 0595     		str	r5, [sp, #20]
  56:Core/Src/ws2812b.c **** 	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
  94              		.loc 1 56 0
  95 0028 0695     		str	r5, [sp, #24]
  57:Core/Src/ws2812b.c **** 
  96              		.loc 1 57 0
  97 002a 03A9     		add	r1, sp, #12
ARM GAS  /tmp/ccugV9H8.s 			page 8


  98 002c 1148     		ldr	r0, .L5+4
  99 002e FFF7FEFF 		bl	HAL_GPIO_Init
 100              	.LVL1:
 101              	.LBB3:
  61:Core/Src/ws2812b.c **** 
 102              		.loc 1 61 0
 103 0032 0295     		str	r5, [sp, #8]
 104 0034 236B     		ldr	r3, [r4, #48]
 105 0036 43F00803 		orr	r3, r3, #8
 106 003a 2363     		str	r3, [r4, #48]
 107 003c 236B     		ldr	r3, [r4, #48]
 108 003e 03F00803 		and	r3, r3, #8
 109 0042 0293     		str	r3, [sp, #8]
 110 0044 029B     		ldr	r3, [sp, #8]
 111              	.LBE3:
  63:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Pull = GPIO_NOPULL;
 112              		.loc 1 63 0
 113 0046 0497     		str	r7, [sp, #16]
  64:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 114              		.loc 1 64 0
 115 0048 0595     		str	r5, [sp, #20]
  65:Core/Src/ws2812b.c **** 
 116              		.loc 1 65 0
 117 004a 0223     		movs	r3, #2
 118 004c 0693     		str	r3, [sp, #24]
  67:Core/Src/ws2812b.c **** 		HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 119              		.loc 1 67 0
 120 004e 4FF40043 		mov	r3, #32768
 121 0052 0393     		str	r3, [sp, #12]
  68:Core/Src/ws2812b.c **** 		GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 122              		.loc 1 68 0
 123 0054 A4F53054 		sub	r4, r4, #11264
 124 0058 03A9     		add	r1, sp, #12
 125 005a 2046     		mov	r0, r4
 126 005c FFF7FEFF 		bl	HAL_GPIO_Init
 127              	.LVL2:
  69:Core/Src/ws2812b.c **** 		HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 128              		.loc 1 69 0
 129 0060 0396     		str	r6, [sp, #12]
  70:Core/Src/ws2812b.c **** 	#endif
 130              		.loc 1 70 0
 131 0062 03A9     		add	r1, sp, #12
 132 0064 2046     		mov	r0, r4
 133 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 134              	.LVL3:
  72:Core/Src/ws2812b.c **** 
 135              		.loc 1 72 0
 136 006a 09B0     		add	sp, sp, #36
 137              		.cfi_def_cfa_offset 20
 138              		@ sp needed
 139 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 140              	.L6:
 141 006e 00BF     		.align	2
 142              	.L5:
 143 0070 00380240 		.word	1073887232
 144 0074 00080240 		.word	1073874944
 145              		.cfi_endproc
ARM GAS  /tmp/ccugV9H8.s 			page 9


 146              	.LFE130:
 148              		.section	.text.DMA2_init,"ax",%progbits
 149              		.align	1
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu fpv4-sp-d16
 155              	DMA2_init:
 156              	.LFB132:
 136:Core/Src/ws2812b.c **** 
 157              		.loc 1 136 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 8
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 162              		.cfi_def_cfa_offset 36
 163              		.cfi_offset 4, -36
 164              		.cfi_offset 5, -32
 165              		.cfi_offset 6, -28
 166              		.cfi_offset 7, -24
 167              		.cfi_offset 8, -20
 168              		.cfi_offset 9, -16
 169              		.cfi_offset 10, -12
 170              		.cfi_offset 11, -8
 171              		.cfi_offset 14, -4
 172 0004 83B0     		sub	sp, sp, #12
 173              		.cfi_def_cfa_offset 48
 174              	.LBB4:
 139:Core/Src/ws2812b.c **** 
 175              		.loc 1 139 0
 176 0006 0025     		movs	r5, #0
 177 0008 0195     		str	r5, [sp, #4]
 178 000a 464B     		ldr	r3, .L9
 179 000c 1A6B     		ldr	r2, [r3, #48]
 180 000e 42F48002 		orr	r2, r2, #4194304
 181 0012 1A63     		str	r2, [r3, #48]
 182 0014 1B6B     		ldr	r3, [r3, #48]
 183 0016 03F48003 		and	r3, r3, #4194304
 184 001a 0193     		str	r3, [sp, #4]
 185 001c 019B     		ldr	r3, [sp, #4]
 186              	.LBE4:
 141:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 187              		.loc 1 141 0
 188 001e 424C     		ldr	r4, .L9+4
 189 0020 4FF0400A 		mov	r10, #64
 190 0024 C4F808A0 		str	r10, [r4, #8]
 142:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 191              		.loc 1 142 0
 192 0028 E560     		str	r5, [r4, #12]
 143:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 193              		.loc 1 143 0
 194 002a 2561     		str	r5, [r4, #16]
 144:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 195              		.loc 1 144 0
 196 002c 4FF4805B 		mov	fp, #4096
 197 0030 C4F814B0 		str	fp, [r4, #20]
 145:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Mode = DMA_CIRCULAR;
ARM GAS  /tmp/ccugV9H8.s 			page 10


 198              		.loc 1 145 0
 199 0034 4FF48043 		mov	r3, #16384
 200 0038 A361     		str	r3, [r4, #24]
 146:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 201              		.loc 1 146 0
 202 003a 4FF48079 		mov	r9, #256
 203 003e C4F81C90 		str	r9, [r4, #28]
 147:Core/Src/ws2812b.c **** 	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 204              		.loc 1 147 0
 205 0042 4FF44038 		mov	r8, #196608
 206 0046 C4F82080 		str	r8, [r4, #32]
 148:Core/Src/ws2812b.c **** 
 207              		.loc 1 148 0
 208 004a 4FF04067 		mov	r7, #201326592
 209 004e 6760     		str	r7, [r4, #4]
 150:Core/Src/ws2812b.c **** 	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 210              		.loc 1 150 0
 211 0050 6562     		str	r5, [r4, #36]
 151:Core/Src/ws2812b.c **** 	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 212              		.loc 1 151 0
 213 0052 0326     		movs	r6, #3
 214 0054 A662     		str	r6, [r4, #40]
 152:Core/Src/ws2812b.c **** 	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 215              		.loc 1 152 0
 216 0056 E562     		str	r5, [r4, #44]
 153:Core/Src/ws2812b.c **** 
 217              		.loc 1 153 0
 218 0058 2563     		str	r5, [r4, #48]
 155:Core/Src/ws2812b.c **** 	//dmaUpdate.XferCpltCallback  = TransferComplete;
 219              		.loc 1 155 0
 220 005a 344B     		ldr	r3, .L9+8
 221 005c 2360     		str	r3, [r4]
 159:Core/Src/ws2812b.c **** 	HAL_DMA_Init(&dmaUpdate);
 222              		.loc 1 159 0
 223 005e 2046     		mov	r0, r4
 224 0060 FFF7FEFF 		bl	HAL_DMA_DeInit
 225              	.LVL4:
 160:Core/Src/ws2812b.c **** 	//HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 226              		.loc 1 160 0
 227 0064 2046     		mov	r0, r4
 228 0066 FFF7FEFF 		bl	HAL_DMA_Init
 229              	.LVL5:
 163:Core/Src/ws2812b.c **** 	//HAL_DMA_Start(&dmaUpdate, (uint32_t)WS2812_IO_High, (uint32_t)&dummy, BUFFER_SIZE);
 230              		.loc 1 163 0
 231 006a 3023     		movs	r3, #48
 232 006c 304A     		ldr	r2, .L9+12
 233 006e 3149     		ldr	r1, .L9+16
 234 0070 2046     		mov	r0, r4
 235 0072 FFF7FEFF 		bl	HAL_DMA_Start
 236              	.LVL6:
 168:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 237              		.loc 1 168 0
 238 0076 304C     		ldr	r4, .L9+20
 239 0078 C4F808A0 		str	r10, [r4, #8]
 169:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 240              		.loc 1 169 0
 241 007c E560     		str	r5, [r4, #12]
ARM GAS  /tmp/ccugV9H8.s 			page 11


 170:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 242              		.loc 1 170 0
 243 007e 4FF48063 		mov	r3, #1024
 244 0082 2361     		str	r3, [r4, #16]
 171:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 245              		.loc 1 171 0
 246 0084 4FF40063 		mov	r3, #2048
 247 0088 6361     		str	r3, [r4, #20]
 172:Core/Src/ws2812b.c **** 	dmaCC1.Init.Mode = DMA_CIRCULAR;
 248              		.loc 1 172 0
 249 008a 4FF40053 		mov	r3, #8192
 250 008e A361     		str	r3, [r4, #24]
 173:Core/Src/ws2812b.c **** 	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 251              		.loc 1 173 0
 252 0090 C4F81C90 		str	r9, [r4, #28]
 174:Core/Src/ws2812b.c **** 	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 253              		.loc 1 174 0
 254 0094 C4F82080 		str	r8, [r4, #32]
 175:Core/Src/ws2812b.c **** 
 255              		.loc 1 175 0
 256 0098 6760     		str	r7, [r4, #4]
 177:Core/Src/ws2812b.c **** 	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 257              		.loc 1 177 0
 258 009a 6562     		str	r5, [r4, #36]
 178:Core/Src/ws2812b.c **** 	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 259              		.loc 1 178 0
 260 009c A662     		str	r6, [r4, #40]
 179:Core/Src/ws2812b.c **** 	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 261              		.loc 1 179 0
 262 009e E562     		str	r5, [r4, #44]
 180:Core/Src/ws2812b.c **** 
 263              		.loc 1 180 0
 264 00a0 2563     		str	r5, [r4, #48]
 182:Core/Src/ws2812b.c **** 	//dmaUpdate.XferCpltCallback  = TransferComplete;
 265              		.loc 1 182 0
 266 00a2 264B     		ldr	r3, .L9+24
 267 00a4 2360     		str	r3, [r4]
 188:Core/Src/ws2812b.c **** 	HAL_DMA_Init(&dmaCC1);
 268              		.loc 1 188 0
 269 00a6 2046     		mov	r0, r4
 270 00a8 FFF7FEFF 		bl	HAL_DMA_DeInit
 271              	.LVL7:
 189:Core/Src/ws2812b.c **** 	HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)(&WS2812B_PORT->BSRR) + 2, BUFFER_
 272              		.loc 1 189 0
 273 00ac 2046     		mov	r0, r4
 274 00ae FFF7FEFF 		bl	HAL_DMA_Init
 275              	.LVL8:
 190:Core/Src/ws2812b.c **** 	//HAL_DMA_Start(&dmaCC1, (uint32_t)ws2812bDmaBitBuffer, (uint32_t)&dummy, BUFFER_SIZE); //BRR
 276              		.loc 1 190 0
 277 00b2 3023     		movs	r3, #48
 278 00b4 224A     		ldr	r2, .L9+28
 279 00b6 2349     		ldr	r1, .L9+32
 280 00b8 2046     		mov	r0, r4
 281 00ba FFF7FEFF 		bl	HAL_DMA_Start
 282              	.LVL9:
 195:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 283              		.loc 1 195 0
ARM GAS  /tmp/ccugV9H8.s 			page 12


 284 00be 224C     		ldr	r4, .L9+36
 285 00c0 C4F808A0 		str	r10, [r4, #8]
 196:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 286              		.loc 1 196 0
 287 00c4 E560     		str	r5, [r4, #12]
 197:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 288              		.loc 1 197 0
 289 00c6 2561     		str	r5, [r4, #16]
 198:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 290              		.loc 1 198 0
 291 00c8 C4F814B0 		str	fp, [r4, #20]
 199:Core/Src/ws2812b.c **** 	dmaCC2.Init.Mode = DMA_CIRCULAR;
 292              		.loc 1 199 0
 293 00cc 4FF48043 		mov	r3, #16384
 294 00d0 A361     		str	r3, [r4, #24]
 200:Core/Src/ws2812b.c **** 	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 295              		.loc 1 200 0
 296 00d2 C4F81C90 		str	r9, [r4, #28]
 201:Core/Src/ws2812b.c **** 	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 297              		.loc 1 201 0
 298 00d6 C4F82080 		str	r8, [r4, #32]
 202:Core/Src/ws2812b.c **** 
 299              		.loc 1 202 0
 300 00da 6760     		str	r7, [r4, #4]
 204:Core/Src/ws2812b.c **** 	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 301              		.loc 1 204 0
 302 00dc 6562     		str	r5, [r4, #36]
 205:Core/Src/ws2812b.c **** 	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 303              		.loc 1 205 0
 304 00de A662     		str	r6, [r4, #40]
 206:Core/Src/ws2812b.c **** 	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 305              		.loc 1 206 0
 306 00e0 E562     		str	r5, [r4, #44]
 207:Core/Src/ws2812b.c **** 
 307              		.loc 1 207 0
 308 00e2 2563     		str	r5, [r4, #48]
 209:Core/Src/ws2812b.c **** 
 309              		.loc 1 209 0
 310 00e4 194B     		ldr	r3, .L9+40
 311 00e6 2360     		str	r3, [r4]
 211:Core/Src/ws2812b.c **** 
 312              		.loc 1 211 0
 313 00e8 2046     		mov	r0, r4
 314 00ea FFF7FEFF 		bl	HAL_DMA_DeInit
 315              	.LVL10:
 213:Core/Src/ws2812b.c **** 	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 316              		.loc 1 213 0
 317 00ee 184B     		ldr	r3, .L9+44
 318 00f0 E363     		str	r3, [r4, #60]
 214:Core/Src/ws2812b.c **** 	dmaCC2.XferErrorCallback = DMA_TransferError;
 319              		.loc 1 214 0
 320 00f2 184B     		ldr	r3, .L9+48
 321 00f4 2364     		str	r3, [r4, #64]
 215:Core/Src/ws2812b.c **** 
 322              		.loc 1 215 0
 323 00f6 184B     		ldr	r3, .L9+52
 324 00f8 E364     		str	r3, [r4, #76]
ARM GAS  /tmp/ccugV9H8.s 			page 13


 217:Core/Src/ws2812b.c **** 	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 325              		.loc 1 217 0
 326 00fa 2046     		mov	r0, r4
 327 00fc FFF7FEFF 		bl	HAL_DMA_Init
 328              	.LVL11:
 218:Core/Src/ws2812b.c **** 	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 329              		.loc 1 218 0
 330 0100 2A46     		mov	r2, r5
 331 0102 2946     		mov	r1, r5
 332 0104 3A20     		movs	r0, #58
 333 0106 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 334              	.LVL12:
 219:Core/Src/ws2812b.c **** 	HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&WS2812B_PORT->BSRR, BUFFER_SIZE);
 335              		.loc 1 219 0
 336 010a 3A20     		movs	r0, #58
 337 010c FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 338              	.LVL13:
 220:Core/Src/ws2812b.c **** 	//HAL_DMA_Start_IT(&dmaCC2, (uint32_t)WS2812_IO_Low, (uint32_t)&dummy, BUFFER_SIZE);
 339              		.loc 1 220 0
 340 0110 3023     		movs	r3, #48
 341 0112 074A     		ldr	r2, .L9+12
 342 0114 1149     		ldr	r1, .L9+56
 343 0116 2046     		mov	r0, r4
 344 0118 FFF7FEFF 		bl	HAL_DMA_Start_IT
 345              	.LVL14:
 225:Core/Src/ws2812b.c **** 
 346              		.loc 1 225 0
 347 011c 03B0     		add	sp, sp, #12
 348              		.cfi_def_cfa_offset 36
 349              		@ sp needed
 350 011e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 351              	.L10:
 352 0122 00BF     		.align	2
 353              	.L9:
 354 0124 00380240 		.word	1073887232
 355 0128 00000000 		.word	dmaUpdate
 356 012c 88640240 		.word	1073898632
 357 0130 18080240 		.word	1073874968
 358 0134 00000000 		.word	.LANCHOR0
 359 0138 00000000 		.word	dmaCC1
 360 013c 28640240 		.word	1073898536
 361 0140 1A080240 		.word	1073874970
 362 0144 00000000 		.word	ws2812bDmaBitBuffer
 363 0148 00000000 		.word	dmaCC2
 364 014c 40640240 		.word	1073898560
 365 0150 00000000 		.word	DMA_TransferCompleteHandler
 366 0154 00000000 		.word	DMA_TransferHalfHandler
 367 0158 00000000 		.word	DMA_TransferError
 368 015c 00000000 		.word	.LANCHOR1
 369              		.cfi_endproc
 370              	.LFE132:
 372              		.section	.text.TIM1_init,"ax",%progbits
 373              		.align	1
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 377              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccugV9H8.s 			page 14


 379              	TIM1_init:
 380              	.LFB131:
  77:Core/Src/ws2812b.c **** 	// TIM2 Periph clock enable
 381              		.loc 1 77 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 8
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 386              		.cfi_def_cfa_offset 24
 387              		.cfi_offset 4, -24
 388              		.cfi_offset 5, -20
 389              		.cfi_offset 6, -16
 390              		.cfi_offset 7, -12
 391              		.cfi_offset 8, -8
 392              		.cfi_offset 14, -4
 393 0004 82B0     		sub	sp, sp, #8
 394              		.cfi_def_cfa_offset 32
 395              	.LBB5:
  79:Core/Src/ws2812b.c **** 
 396              		.loc 1 79 0
 397 0006 0024     		movs	r4, #0
 398 0008 0194     		str	r4, [sp, #4]
 399 000a 354B     		ldr	r3, .L14
 400 000c 5A6C     		ldr	r2, [r3, #68]
 401 000e 42F00102 		orr	r2, r2, #1
 402 0012 5A64     		str	r2, [r3, #68]
 403 0014 5B6C     		ldr	r3, [r3, #68]
 404 0016 03F00103 		and	r3, r3, #1
 405 001a 0193     		str	r3, [sp, #4]
 406 001c 019B     		ldr	r3, [sp, #4]
 407              	.LBE5:
  83:Core/Src/ws2812b.c **** 	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 408              		.loc 1 83 0
 409 001e 314B     		ldr	r3, .L14+4
 410 0020 1A68     		ldr	r2, [r3]
 411 0022 130A     		lsrs	r3, r2, #8
 412 0024 3049     		ldr	r1, .L14+8
 413 0026 A1FB0313 		umull	r1, r3, r1, r3
 414 002a 1B09     		lsrs	r3, r3, #4
 415 002c 2F49     		ldr	r1, .L14+12
 416 002e 0B60     		str	r3, [r1]
  84:Core/Src/ws2812b.c **** 
 417              		.loc 1 84 0
 418 0030 2F49     		ldr	r1, .L14+16
 419 0032 A1FB0212 		umull	r1, r2, r1, r2
 420 0036 D20A     		lsrs	r2, r2, #11
 421 0038 2E49     		ldr	r1, .L14+20
 422 003a 0A60     		str	r2, [r1]
  86:Core/Src/ws2812b.c **** 	uint32_t cc2 = (10 * tim_period) / 15;
 423              		.loc 1 86 0
 424 003c 03EB8301 		add	r1, r3, r3, lsl #2
 425 0040 4A00     		lsls	r2, r1, #1
 426 0042 2D49     		ldr	r1, .L14+24
 427 0044 A1FB0201 		umull	r0, r1, r1, r2
 428 0048 CF08     		lsrs	r7, r1, #3
 429              	.LVL15:
  87:Core/Src/ws2812b.c **** 
ARM GAS  /tmp/ccugV9H8.s 			page 15


 430              		.loc 1 87 0
 431 004a 2C49     		ldr	r1, .L14+28
 432 004c A1FB0212 		umull	r1, r2, r1, r2
 433 0050 D608     		lsrs	r6, r2, #3
 434              	.LVL16:
  89:Core/Src/ws2812b.c **** 
 435              		.loc 1 89 0
 436 0052 2B4D     		ldr	r5, .L14+32
 437 0054 2B4A     		ldr	r2, .L14+36
 438 0056 2A60     		str	r2, [r5]
  91:Core/Src/ws2812b.c **** 	TIM1_handle.Init.RepetitionCounter = 0;
 439              		.loc 1 91 0
 440 0058 EB60     		str	r3, [r5, #12]
  92:Core/Src/ws2812b.c **** 	TIM1_handle.Init.Prescaler         = 0;
 441              		.loc 1 92 0
 442 005a 6C61     		str	r4, [r5, #20]
  93:Core/Src/ws2812b.c **** 	TIM1_handle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 443              		.loc 1 93 0
 444 005c 6C60     		str	r4, [r5, #4]
  94:Core/Src/ws2812b.c **** 	TIM1_handle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 445              		.loc 1 94 0
 446 005e 2C61     		str	r4, [r5, #16]
  95:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_Init(&TIM1_handle);
 447              		.loc 1 95 0
 448 0060 AC60     		str	r4, [r5, #8]
  96:Core/Src/ws2812b.c **** 
 449              		.loc 1 96 0
 450 0062 2846     		mov	r0, r5
 451 0064 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 452              	.LVL17:
  98:Core/Src/ws2812b.c **** 	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 453              		.loc 1 98 0
 454 0068 2246     		mov	r2, r4
 455 006a 2146     		mov	r1, r4
 456 006c 1920     		movs	r0, #25
 457 006e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 458              	.LVL18:
  99:Core/Src/ws2812b.c **** 
 459              		.loc 1 99 0
 460 0072 1920     		movs	r0, #25
 461 0074 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 462              	.LVL19:
 101:Core/Src/ws2812b.c **** 	tim2OC1.OCPolarity   = TIM_OCPOLARITY_HIGH;
 463              		.loc 1 101 0
 464 0078 2349     		ldr	r1, .L14+40
 465 007a 4FF06008 		mov	r8, #96
 466 007e C1F80080 		str	r8, [r1]
 102:Core/Src/ws2812b.c **** 	tim2OC1.Pulse        = cc1;
 467              		.loc 1 102 0
 468 0082 8C60     		str	r4, [r1, #8]
 103:Core/Src/ws2812b.c **** 	tim2OC1.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 469              		.loc 1 103 0
 470 0084 4F60     		str	r7, [r1, #4]
 104:Core/Src/ws2812b.c **** 	tim2OC1.OCFastMode   = TIM_OCFAST_DISABLE;
 471              		.loc 1 104 0
 472 0086 CC60     		str	r4, [r1, #12]
 105:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
ARM GAS  /tmp/ccugV9H8.s 			page 16


 473              		.loc 1 105 0
 474 0088 0C61     		str	r4, [r1, #16]
 106:Core/Src/ws2812b.c **** 
 475              		.loc 1 106 0
 476 008a 2246     		mov	r2, r4
 477 008c 2846     		mov	r0, r5
 478 008e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 479              	.LVL20:
 108:Core/Src/ws2812b.c **** 	tim2OC2.OCPolarity   = TIM_OCPOLARITY_HIGH;
 480              		.loc 1 108 0
 481 0092 1E49     		ldr	r1, .L14+44
 482 0094 C1F80080 		str	r8, [r1]
 109:Core/Src/ws2812b.c **** 	tim2OC2.Pulse        = cc2;
 483              		.loc 1 109 0
 484 0098 8C60     		str	r4, [r1, #8]
 110:Core/Src/ws2812b.c **** 	tim2OC2.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 485              		.loc 1 110 0
 486 009a 4E60     		str	r6, [r1, #4]
 111:Core/Src/ws2812b.c **** 	tim2OC2.OCFastMode   = TIM_OCFAST_DISABLE;
 487              		.loc 1 111 0
 488 009c CC60     		str	r4, [r1, #12]
 112:Core/Src/ws2812b.c **** 	tim2OC2.OCIdleState  = TIM_OCIDLESTATE_RESET;
 489              		.loc 1 112 0
 490 009e 0C61     		str	r4, [r1, #16]
 113:Core/Src/ws2812b.c **** 	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 491              		.loc 1 113 0
 492 00a0 4C61     		str	r4, [r1, #20]
 114:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 493              		.loc 1 114 0
 494 00a2 8C61     		str	r4, [r1, #24]
 115:Core/Src/ws2812b.c **** 
 495              		.loc 1 115 0
 496 00a4 0422     		movs	r2, #4
 497 00a6 2846     		mov	r0, r5
 498 00a8 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 499              	.LVL21:
 118:Core/Src/ws2812b.c **** 	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 500              		.loc 1 118 0
 501 00ac 2846     		mov	r0, r5
 502 00ae FFF7FEFF 		bl	HAL_TIM_Base_Start
 503              	.LVL22:
 119:Core/Src/ws2812b.c **** 
 504              		.loc 1 119 0
 505 00b2 2146     		mov	r1, r4
 506 00b4 2846     		mov	r0, r5
 507 00b6 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 508              	.LVL23:
 121:Core/Src/ws2812b.c **** 
 509              		.loc 1 121 0
 510 00ba 2B68     		ldr	r3, [r5]
 511 00bc 196A     		ldr	r1, [r3, #32]
 512 00be 41F21112 		movw	r2, #4369
 513 00c2 1142     		tst	r1, r2
 514 00c4 08D1     		bne	.L11
 121:Core/Src/ws2812b.c **** 
 515              		.loc 1 121 0 is_stmt 0 discriminator 1
 516 00c6 196A     		ldr	r1, [r3, #32]
ARM GAS  /tmp/ccugV9H8.s 			page 17


 517 00c8 40F24442 		movw	r2, #1092
 518 00cc 1142     		tst	r1, r2
 519 00ce 03D1     		bne	.L11
 121:Core/Src/ws2812b.c **** 
 520              		.loc 1 121 0 discriminator 2
 521 00d0 1A68     		ldr	r2, [r3]
 522 00d2 22F00102 		bic	r2, r2, #1
 523 00d6 1A60     		str	r2, [r3]
 524              	.L11:
 123:Core/Src/ws2812b.c **** 
 525              		.loc 1 123 0 is_stmt 1
 526 00d8 02B0     		add	sp, sp, #8
 527              		.cfi_def_cfa_offset 24
 528              		@ sp needed
 529 00da BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 530              	.LVL24:
 531              	.L15:
 532 00de 00BF     		.align	2
 533              	.L14:
 534 00e0 00380240 		.word	1073887232
 535 00e4 00000000 		.word	SystemCoreClock
 536 00e8 598B4F01 		.word	21990233
 537 00ec 00000000 		.word	tim_period
 538 00f0 B5814E1B 		.word	458129845
 539 00f4 00000000 		.word	timer_reset_pulse_period
 540 00f8 398EE338 		.word	954437177
 541 00fc 89888888 		.word	-2004318071
 542 0100 00000000 		.word	TIM1_handle
 543 0104 00000140 		.word	1073807360
 544 0108 00000000 		.word	tim2OC1
 545 010c 00000000 		.word	tim2OC2
 546              		.cfi_endproc
 547              	.LFE131:
 549              		.section	.text.DMA2_Stream2_IRQHandler,"ax",%progbits
 550              		.align	1
 551              		.global	DMA2_Stream2_IRQHandler
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu fpv4-sp-d16
 557              	DMA2_Stream2_IRQHandler:
 558              	.LFB138:
 299:Core/Src/ws2812b.c **** 
 300:Core/Src/ws2812b.c **** 
 301:Core/Src/ws2812b.c **** void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle)
 302:Core/Src/ws2812b.c **** {
 303:Core/Src/ws2812b.c **** 
 304:Core/Src/ws2812b.c **** 	// Is this the last LED?
 305:Core/Src/ws2812b.c **** 	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 306:Core/Src/ws2812b.c **** 	 {
 307:Core/Src/ws2812b.c **** 
 308:Core/Src/ws2812b.c **** 		// If this is the last pixel, set the next pixel value to zeros, because
 309:Core/Src/ws2812b.c **** 		// the DMA would not stop exactly at the last bit.
 310:Core/Src/ws2812b.c **** 		ws2812b_set_pixel(0, 0, 0, 0, 0);
 311:Core/Src/ws2812b.c **** 
 312:Core/Src/ws2812b.c **** 	} else {
 313:Core/Src/ws2812b.c **** 		uint32_t i;
ARM GAS  /tmp/ccugV9H8.s 			page 18


 314:Core/Src/ws2812b.c **** 
 315:Core/Src/ws2812b.c **** 		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 316:Core/Src/ws2812b.c **** 		{
 317:Core/Src/ws2812b.c **** 			loadNextFramebufferData(&ws2812b.item[i], 0);
 318:Core/Src/ws2812b.c **** 		}
 319:Core/Src/ws2812b.c **** 
 320:Core/Src/ws2812b.c **** 		ws2812b.repeatCounter++;
 321:Core/Src/ws2812b.c **** 	}
 322:Core/Src/ws2812b.c **** 
 323:Core/Src/ws2812b.c **** 
 324:Core/Src/ws2812b.c **** 
 325:Core/Src/ws2812b.c **** }
 326:Core/Src/ws2812b.c **** 
 327:Core/Src/ws2812b.c **** void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle)
 328:Core/Src/ws2812b.c **** {
 329:Core/Src/ws2812b.c **** 
 330:Core/Src/ws2812b.c **** 	#if defined(LED_ORANGE_PORT)
 331:Core/Src/ws2812b.c **** 		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 332:Core/Src/ws2812b.c **** 	#endif
 333:Core/Src/ws2812b.c **** 
 334:Core/Src/ws2812b.c **** 	if(ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS)
 335:Core/Src/ws2812b.c **** 	{
 336:Core/Src/ws2812b.c **** 		// Transfer of all LEDs is done, disable DMA but enable tiemr update IRQ to stop the 50us pulse
 337:Core/Src/ws2812b.c **** 		ws2812b.repeatCounter = 0;
 338:Core/Src/ws2812b.c **** 
 339:Core/Src/ws2812b.c **** 		// Stop timer
 340:Core/Src/ws2812b.c **** 		TIM1->CR1 &= ~TIM_CR1_CEN;
 341:Core/Src/ws2812b.c **** 
 342:Core/Src/ws2812b.c **** 		// Disable DMA
 343:Core/Src/ws2812b.c **** 		__HAL_DMA_DISABLE(&dmaUpdate);
 344:Core/Src/ws2812b.c **** 		__HAL_DMA_DISABLE(&dmaCC1);
 345:Core/Src/ws2812b.c **** 		__HAL_DMA_DISABLE(&dmaCC2);
 346:Core/Src/ws2812b.c **** 
 347:Core/Src/ws2812b.c **** 		// Disable the DMA requests
 348:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 349:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 350:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 351:Core/Src/ws2812b.c **** 
 352:Core/Src/ws2812b.c **** 		// Set 50us period for Treset pulse
 353:Core/Src/ws2812b.c **** 		//TIM2->PSC = 1000; // For this long period we need prescaler 1000
 354:Core/Src/ws2812b.c **** 		TIM1->ARR = timer_reset_pulse_period;
 355:Core/Src/ws2812b.c **** 		// Reset the timer
 356:Core/Src/ws2812b.c **** 		TIM1->CNT = 0;
 357:Core/Src/ws2812b.c **** 
 358:Core/Src/ws2812b.c **** 		// Generate an update event to reload the prescaler value immediately
 359:Core/Src/ws2812b.c **** 		TIM1->EGR = TIM_EGR_UG;
 360:Core/Src/ws2812b.c **** 		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 361:Core/Src/ws2812b.c **** 
 362:Core/Src/ws2812b.c **** 		// Enable TIM2 Update interrupt for 50us Treset signal
 363:Core/Src/ws2812b.c **** 		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 364:Core/Src/ws2812b.c **** 		// Enable timer
 365:Core/Src/ws2812b.c **** 		TIM1->CR1 |= TIM_CR1_CEN;
 366:Core/Src/ws2812b.c **** 
 367:Core/Src/ws2812b.c **** 		// Manually set outputs to low to generate 50us reset impulse
 368:Core/Src/ws2812b.c **** 		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 369:Core/Src/ws2812b.c **** 	} else {
 370:Core/Src/ws2812b.c **** 
ARM GAS  /tmp/ccugV9H8.s 			page 19


 371:Core/Src/ws2812b.c **** 		// Load bitbuffer with next RGB LED values
 372:Core/Src/ws2812b.c **** 		uint32_t i;
 373:Core/Src/ws2812b.c **** 		for( i = 0; i < WS2812_BUFFER_COUNT; i++ )
 374:Core/Src/ws2812b.c **** 		{
 375:Core/Src/ws2812b.c **** 			loadNextFramebufferData(&ws2812b.item[i], 1);
 376:Core/Src/ws2812b.c **** 		}
 377:Core/Src/ws2812b.c **** 
 378:Core/Src/ws2812b.c **** 		ws2812b.repeatCounter++;
 379:Core/Src/ws2812b.c **** 	}
 380:Core/Src/ws2812b.c **** 
 381:Core/Src/ws2812b.c **** 
 382:Core/Src/ws2812b.c **** 
 383:Core/Src/ws2812b.c **** 	#if defined(LED_ORANGE_PORT)
 384:Core/Src/ws2812b.c **** 		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 385:Core/Src/ws2812b.c **** 	#endif
 386:Core/Src/ws2812b.c **** 
 387:Core/Src/ws2812b.c **** }
 388:Core/Src/ws2812b.c **** 
 389:Core/Src/ws2812b.c **** void DMA2_Stream2_IRQHandler(void)
 390:Core/Src/ws2812b.c **** {
 559              		.loc 1 390 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563 0000 10B5     		push	{r4, lr}
 564              		.cfi_def_cfa_offset 8
 565              		.cfi_offset 4, -8
 566              		.cfi_offset 14, -4
 391:Core/Src/ws2812b.c **** 
 392:Core/Src/ws2812b.c **** 	#if defined(LED_BLUE_PORT)
 393:Core/Src/ws2812b.c **** 		LED_BLUE_PORT->BSRR = LED_BLUE_PIN;
 567              		.loc 1 393 0
 568 0002 054C     		ldr	r4, .L18
 569 0004 4FF40043 		mov	r3, #32768
 570 0008 A361     		str	r3, [r4, #24]
 394:Core/Src/ws2812b.c **** 	#endif
 395:Core/Src/ws2812b.c **** 
 396:Core/Src/ws2812b.c **** 	// Check the interrupt and clear flag
 397:Core/Src/ws2812b.c **** 	  HAL_DMA_IRQHandler(&dmaCC2);
 571              		.loc 1 397 0
 572 000a 0448     		ldr	r0, .L18+4
 573 000c FFF7FEFF 		bl	HAL_DMA_IRQHandler
 574              	.LVL25:
 398:Core/Src/ws2812b.c **** 
 399:Core/Src/ws2812b.c **** 	#if defined(LED_BLUE_PORT)
 400:Core/Src/ws2812b.c **** 		LED_BLUE_PORT->BSRR = LED_BLUE_PIN << 16;
 575              		.loc 1 400 0
 576 0010 4FF00043 		mov	r3, #-2147483648
 577 0014 A361     		str	r3, [r4, #24]
 578 0016 10BD     		pop	{r4, pc}
 579              	.L19:
 580              		.align	2
 581              	.L18:
 582 0018 000C0240 		.word	1073875968
 583 001c 00000000 		.word	dmaCC2
 584              		.cfi_endproc
 585              	.LFE138:
ARM GAS  /tmp/ccugV9H8.s 			page 20


 587              		.section	.text.TIM1_UP_TIM10_IRQHandler,"ax",%progbits
 588              		.align	1
 589              		.global	TIM1_UP_TIM10_IRQHandler
 590              		.syntax unified
 591              		.thumb
 592              		.thumb_func
 593              		.fpu fpv4-sp-d16
 595              	TIM1_UP_TIM10_IRQHandler:
 596              	.LFB139:
 401:Core/Src/ws2812b.c **** 	#endif
 402:Core/Src/ws2812b.c **** }
 403:Core/Src/ws2812b.c **** 
 404:Core/Src/ws2812b.c **** void TIM1_UP_TIM10_IRQHandler(void)
 405:Core/Src/ws2812b.c **** {
 597              		.loc 1 405 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 0
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601 0000 10B5     		push	{r4, lr}
 602              		.cfi_def_cfa_offset 8
 603              		.cfi_offset 4, -8
 604              		.cfi_offset 14, -4
 406:Core/Src/ws2812b.c **** 	#if defined(LED_ORANGE_PORT)
 407:Core/Src/ws2812b.c **** 		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 605              		.loc 1 407 0
 606 0002 054C     		ldr	r4, .L22
 607 0004 4FF40053 		mov	r3, #8192
 608 0008 A361     		str	r3, [r4, #24]
 408:Core/Src/ws2812b.c **** 	#endif
 409:Core/Src/ws2812b.c **** 
 410:Core/Src/ws2812b.c **** 	HAL_TIM_IRQHandler(&TIM1_handle);
 609              		.loc 1 410 0
 610 000a 0448     		ldr	r0, .L22+4
 611 000c FFF7FEFF 		bl	HAL_TIM_IRQHandler
 612              	.LVL26:
 411:Core/Src/ws2812b.c **** 
 412:Core/Src/ws2812b.c **** 	#if defined(LED_ORANGE_PORT)
 413:Core/Src/ws2812b.c **** 		LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 613              		.loc 1 413 0
 614 0010 4FF00053 		mov	r3, #536870912
 615 0014 A361     		str	r3, [r4, #24]
 616 0016 10BD     		pop	{r4, pc}
 617              	.L23:
 618              		.align	2
 619              	.L22:
 620 0018 000C0240 		.word	1073875968
 621 001c 00000000 		.word	TIM1_handle
 622              		.cfi_endproc
 623              	.LFE139:
 625              		.section	.text.ws2812b_set_pixel,"ax",%progbits
 626              		.align	1
 627              		.global	ws2812b_set_pixel
 628              		.syntax unified
 629              		.thumb
 630              		.thumb_func
 631              		.fpu fpv4-sp-d16
 633              	ws2812b_set_pixel:
ARM GAS  /tmp/ccugV9H8.s 			page 21


 634              	.LFB140:
 414:Core/Src/ws2812b.c **** 	#endif
 415:Core/Src/ws2812b.c **** }
 416:Core/Src/ws2812b.c **** 
 417:Core/Src/ws2812b.c **** /*
 418:Core/Src/ws2812b.c **** // TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
 419:Core/Src/ws2812b.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 420:Core/Src/ws2812b.c **** {
 421:Core/Src/ws2812b.c **** 	
 422:Core/Src/ws2812b.c **** 	// I have to wait 50us to generate Treset signal
 423:Core/Src/ws2812b.c **** 	if (ws2812b.timerPeriodCounter < (uint8_t)WS2812_RESET_PERIOD)
 424:Core/Src/ws2812b.c **** 	{
 425:Core/Src/ws2812b.c **** 		// count the number of timer periods
 426:Core/Src/ws2812b.c **** 		ws2812b.timerPeriodCounter++;
 427:Core/Src/ws2812b.c **** 	}
 428:Core/Src/ws2812b.c **** 	else
 429:Core/Src/ws2812b.c **** 	{
 430:Core/Src/ws2812b.c **** 		ws2812b.timerPeriodCounter = 0;
 431:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE(&TIM1_handle);
 432:Core/Src/ws2812b.c **** 		TIM1->CR1 = 0; // disable timer
 433:Core/Src/ws2812b.c **** 
 434:Core/Src/ws2812b.c **** 		// disable the TIM2 Update
 435:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 436:Core/Src/ws2812b.c **** 		// set TransferComplete flag
 437:Core/Src/ws2812b.c **** 		ws2812b.transferComplete = 1;
 438:Core/Src/ws2812b.c **** 	}*/
 439:Core/Src/ws2812b.c **** /*
 440:Core/Src/ws2812b.c ****     ws2812b.timerPeriodCounter = 0;
 441:Core/Src/ws2812b.c ****     TIM1->CR1 = 0; // disable timer
 442:Core/Src/ws2812b.c **** 
 443:Core/Src/ws2812b.c ****     // disable the TIM2 Update IRQ
 444:Core/Src/ws2812b.c ****     __HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 445:Core/Src/ws2812b.c **** 
 446:Core/Src/ws2812b.c ****     // Set back 1,25us period
 447:Core/Src/ws2812b.c ****     TIM1->ARR = tim_period;
 448:Core/Src/ws2812b.c **** 
 449:Core/Src/ws2812b.c ****     // Generate an update event to reload the Prescaler value immediatly
 450:Core/Src/ws2812b.c ****     TIM1->EGR = TIM_EGR_UG;
 451:Core/Src/ws2812b.c ****     __HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 452:Core/Src/ws2812b.c **** 
 453:Core/Src/ws2812b.c ****     // set transfer_complete flag
 454:Core/Src/ws2812b.c ****     ws2812b.transferComplete = 1;
 455:Core/Src/ws2812b.c **** 
 456:Core/Src/ws2812b.c **** }
 457:Core/Src/ws2812b.c **** */ 
 458:Core/Src/ws2812b.c **** 
 459:Core/Src/ws2812b.c **** 
 460:Core/Src/ws2812b.c **** 
 461:Core/Src/ws2812b.c **** void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green, uint8_t blue)
 462:Core/Src/ws2812b.c **** {
 635              		.loc 1 462 0
 636              		.cfi_startproc
 637              		@ args = 4, pretend = 0, frame = 0
 638              		@ frame_needed = 0, uses_anonymous_args = 0
 639              	.LVL27:
 640 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 641              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccugV9H8.s 			page 22


 642              		.cfi_offset 4, -32
 643              		.cfi_offset 5, -28
 644              		.cfi_offset 6, -24
 645              		.cfi_offset 7, -20
 646              		.cfi_offset 8, -16
 647              		.cfi_offset 9, -12
 648              		.cfi_offset 10, -8
 649              		.cfi_offset 14, -4
 463:Core/Src/ws2812b.c **** 
 464:Core/Src/ws2812b.c **** 	// Apply gamma
 465:Core/Src/ws2812b.c **** 	red = gammaTable[red];
 650              		.loc 1 465 0
 651 0004 2A4C     		ldr	r4, .L28
 652 0006 14F802C0 		ldrb	ip, [r4, r2]	@ zero_extendqisi2
 653              	.LVL28:
 466:Core/Src/ws2812b.c **** 	green = gammaTable[green];
 654              		.loc 1 466 0
 655 000a 14F803E0 		ldrb	lr, [r4, r3]	@ zero_extendqisi2
 656              	.LVL29:
 467:Core/Src/ws2812b.c **** 	blue = gammaTable[blue];
 657              		.loc 1 467 0
 658 000e 9DF82030 		ldrb	r3, [sp, #32]	@ zero_extendqisi2
 659 0012 E75C     		ldrb	r7, [r4, r3]	@ zero_extendqisi2
 660              	.LVL30:
 468:Core/Src/ws2812b.c **** 
 469:Core/Src/ws2812b.c **** 
 470:Core/Src/ws2812b.c **** 	uint32_t calcCol = (column*24);
 661              		.loc 1 470 0
 662 0014 01EB4101 		add	r1, r1, r1, lsl #1
 663              	.LVL31:
 664 0018 CE00     		lsls	r6, r1, #3
 665              	.LVL32:
 471:Core/Src/ws2812b.c **** 	uint32_t invRed = ~red;
 666              		.loc 1 471 0
 667 001a 6FEA0C0C 		mvn	ip, ip
 668              	.LVL33:
 472:Core/Src/ws2812b.c **** 	uint32_t invGreen = ~green;
 669              		.loc 1 472 0
 670 001e 6FEA0E0E 		mvn	lr, lr
 671              	.LVL34:
 473:Core/Src/ws2812b.c **** 	uint32_t invBlue = ~blue;
 672              		.loc 1 473 0
 673 0022 FF43     		mvns	r7, r7
 674              	.LVL35:
 474:Core/Src/ws2812b.c **** 
 475:Core/Src/ws2812b.c **** 
 476:Core/Src/ws2812b.c **** #if defined(SETPIX_1)
 477:Core/Src/ws2812b.c **** 	uint8_t i;
 478:Core/Src/ws2812b.c **** 	uint32_t calcClearRow = ~((0x01<<row) << 0);
 675              		.loc 1 478 0
 676 0024 0446     		mov	r4, r0
 677 0026 0125     		movs	r5, #1
 678 0028 8540     		lsls	r5, r5, r0
 679 002a ED43     		mvns	r5, r5
 680              	.LVL36:
 479:Core/Src/ws2812b.c **** 	for (i = 0; i < 8; i++)
 681              		.loc 1 479 0
ARM GAS  /tmp/ccugV9H8.s 			page 23


 682 002c 0022     		movs	r2, #0
 683 002e 3AE0     		b	.L25
 684              	.LVL37:
 685              	.L26:
 480:Core/Src/ws2812b.c **** 	{
 481:Core/Src/ws2812b.c **** 		// clear the data for pixel
 482:Core/Src/ws2812b.c **** 
 483:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+i)] &= calcClearRow;
 686              		.loc 1 483 0 discriminator 3
 687 0030 02EB0609 		add	r9, r2, r6
 688 0034 A9B2     		uxth	r1, r5
 689 0036 1F4B     		ldr	r3, .L28+4
 690 0038 33F81900 		ldrh	r0, [r3, r9, lsl #1]
 691 003c 0840     		ands	r0, r0, r1
 692 003e 23F81900 		strh	r0, [r3, r9, lsl #1]	@ movhi
 484:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+8+i)] &= calcClearRow;
 693              		.loc 1 484 0 discriminator 3
 694 0042 09F10808 		add	r8, r9, #8
 695 0046 33F81800 		ldrh	r0, [r3, r8, lsl #1]
 696 004a 0840     		ands	r0, r0, r1
 697 004c 23F81800 		strh	r0, [r3, r8, lsl #1]	@ movhi
 485:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+16+i)] &= calcClearRow;
 698              		.loc 1 485 0 discriminator 3
 699 0050 09F11000 		add	r0, r9, #16
 700 0054 33F810A0 		ldrh	r10, [r3, r0, lsl #1]
 701 0058 01EA0A01 		and	r1, r1, r10
 702 005c 23F81010 		strh	r1, [r3, r0, lsl #1]	@ movhi
 486:Core/Src/ws2812b.c **** 
 487:Core/Src/ws2812b.c **** 		// write new data for pixel
 488:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+i)] |= (((((invGreen)<<i) & 0x80)>>7)<<(row+0));
 703              		.loc 1 488 0 discriminator 3
 704 0060 0EFA02F1 		lsl	r1, lr, r2
 705 0064 C1F3C011 		ubfx	r1, r1, #7, #1
 706 0068 A140     		lsls	r1, r1, r4
 707 006a 33F819A0 		ldrh	r10, [r3, r9, lsl #1]
 708 006e 41EA0A01 		orr	r1, r1, r10
 709 0072 23F81910 		strh	r1, [r3, r9, lsl #1]	@ movhi
 489:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+8+i)] |= (((((invRed)<<i) & 0x80)>>7)<<(row+0));
 710              		.loc 1 489 0 discriminator 3
 711 0076 0CFA02F1 		lsl	r1, ip, r2
 712 007a C1F3C011 		ubfx	r1, r1, #7, #1
 713 007e A140     		lsls	r1, r1, r4
 714 0080 33F81890 		ldrh	r9, [r3, r8, lsl #1]
 715 0084 41EA0901 		orr	r1, r1, r9
 716 0088 23F81810 		strh	r1, [r3, r8, lsl #1]	@ movhi
 490:Core/Src/ws2812b.c **** 		ws2812bDmaBitBuffer[(calcCol+16+i)] |= (((((invBlue)<<i) & 0x80)>>7)<<(row+0));
 717              		.loc 1 490 0 discriminator 3
 718 008c 07FA02F1 		lsl	r1, r7, r2
 719 0090 C1F3C011 		ubfx	r1, r1, #7, #1
 720 0094 A140     		lsls	r1, r1, r4
 721 0096 33F81080 		ldrh	r8, [r3, r0, lsl #1]
 722 009a 41EA0801 		orr	r1, r1, r8
 723 009e 23F81010 		strh	r1, [r3, r0, lsl #1]	@ movhi
 479:Core/Src/ws2812b.c **** 	{
 724              		.loc 1 479 0 discriminator 3
 725 00a2 0132     		adds	r2, r2, #1
 726              	.LVL38:
ARM GAS  /tmp/ccugV9H8.s 			page 24


 727 00a4 D2B2     		uxtb	r2, r2
 728              	.LVL39:
 729              	.L25:
 479:Core/Src/ws2812b.c **** 	{
 730              		.loc 1 479 0 is_stmt 0 discriminator 1
 731 00a6 072A     		cmp	r2, #7
 732 00a8 C2D9     		bls	.L26
 491:Core/Src/ws2812b.c **** 	}
 492:Core/Src/ws2812b.c **** #elif defined(SETPIX_2)
 493:Core/Src/ws2812b.c **** 	uint8_t i;
 494:Core/Src/ws2812b.c **** 	for (i = 0; i < 8; i++)
 495:Core/Src/ws2812b.c **** 	{
 496:Core/Src/ws2812b.c **** 		// Set or clear the data for the pixel
 497:Core/Src/ws2812b.c **** 
 498:Core/Src/ws2812b.c **** 		if(((invGreen)<<i) & 0x80)
 499:Core/Src/ws2812b.c **** 			varSetBit(ws2812bDmaBitBuffer[(calcCol+i)], row);
 500:Core/Src/ws2812b.c **** 		else
 501:Core/Src/ws2812b.c **** 			varResetBit(ws2812bDmaBitBuffer[(calcCol+i)], row);
 502:Core/Src/ws2812b.c **** 
 503:Core/Src/ws2812b.c **** 		if(((invRed)<<i) & 0x80)
 504:Core/Src/ws2812b.c **** 			varSetBit(ws2812bDmaBitBuffer[(calcCol+8+i)], row);
 505:Core/Src/ws2812b.c **** 		else
 506:Core/Src/ws2812b.c **** 			varResetBit(ws2812bDmaBitBuffer[(calcCol+8+i)], row);
 507:Core/Src/ws2812b.c **** 
 508:Core/Src/ws2812b.c **** 		if(((invBlue)<<i) & 0x80)
 509:Core/Src/ws2812b.c **** 			varSetBit(ws2812bDmaBitBuffer[(calcCol+16+i)], row);
 510:Core/Src/ws2812b.c **** 		else
 511:Core/Src/ws2812b.c **** 			varResetBit(ws2812bDmaBitBuffer[(calcCol+16+i)], row);
 512:Core/Src/ws2812b.c **** 
 513:Core/Src/ws2812b.c **** 	}
 514:Core/Src/ws2812b.c **** #elif defined(SETPIX_3)
 515:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+0)] |= (((((invGreen)<<0) & 0x80)>>7)<<row);
 516:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+0)] |= (((((invRed)<<0) & 0x80)>>7)<<row);
 517:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+0)] |= (((((invBlue)<<0) & 0x80)>>7)<<row);
 518:Core/Src/ws2812b.c **** 
 519:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+1)] |= (((((invGreen)<<1) & 0x80)>>7)<<row);
 520:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+1)] |= (((((invRed)<<1) & 0x80)>>7)<<row);
 521:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+1)] |= (((((invBlue)<<1) & 0x80)>>7)<<row);
 522:Core/Src/ws2812b.c **** 
 523:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+2)] |= (((((invGreen)<<2) & 0x80)>>7)<<row);
 524:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+2)] |= (((((invRed)<<2) & 0x80)>>7)<<row);
 525:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+2)] |= (((((invBlue)<<2) & 0x80)>>7)<<row);
 526:Core/Src/ws2812b.c **** 
 527:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+3)] |= (((((invGreen)<<3) & 0x80)>>7)<<row);
 528:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+3)] |= (((((invRed)<<3) & 0x80)>>7)<<row);
 529:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+3)] |= (((((invBlue)<<3) & 0x80)>>7)<<row);
 530:Core/Src/ws2812b.c **** 
 531:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+4)] |= (((((invGreen)<<4) & 0x80)>>7)<<row);
 532:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+4)] |= (((((invRed)<<4) & 0x80)>>7)<<row);
 533:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+4)] |= (((((invBlue)<<4) & 0x80)>>7)<<row);
 534:Core/Src/ws2812b.c **** 
 535:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+5)] |= (((((invGreen)<<5) & 0x80)>>7)<<row);
 536:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+5)] |= (((((invRed)<<5) & 0x80)>>7)<<row);
 537:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+5)] |= (((((invBlue)<<5) & 0x80)>>7)<<row);
 538:Core/Src/ws2812b.c **** 
 539:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+6)] |= (((((invGreen)<<6) & 0x80)>>7)<<row);
 540:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+6)] |= (((((invRed)<<6) & 0x80)>>7)<<row);
ARM GAS  /tmp/ccugV9H8.s 			page 25


 541:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+6)] |= (((((invBlue)<<6) & 0x80)>>7)<<row);
 542:Core/Src/ws2812b.c **** 
 543:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+7)] |= (((((invGreen)<<7) & 0x80)>>7)<<row);
 544:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
 545:Core/Src/ws2812b.c **** 	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
 546:Core/Src/ws2812b.c **** #elif defined(SETPIX_4)
 547:Core/Src/ws2812b.c **** 
 548:Core/Src/ws2812b.c **** 	// Bitband optimizations with pure increments, 5us interrupts
 549:Core/Src/ws2812b.c **** 	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 550:Core/Src/ws2812b.c **** 
 551:Core/Src/ws2812b.c **** 	*bitBand =  (invGreen >> 7);
 552:Core/Src/ws2812b.c **** 	bitBand+=16;
 553:Core/Src/ws2812b.c **** 
 554:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 6);
 555:Core/Src/ws2812b.c **** 	bitBand+=16;
 556:Core/Src/ws2812b.c **** 
 557:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 5);
 558:Core/Src/ws2812b.c **** 	bitBand+=16;
 559:Core/Src/ws2812b.c **** 
 560:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 4);
 561:Core/Src/ws2812b.c **** 	bitBand+=16;
 562:Core/Src/ws2812b.c **** 
 563:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 3);
 564:Core/Src/ws2812b.c **** 	bitBand+=16;
 565:Core/Src/ws2812b.c **** 
 566:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 2);
 567:Core/Src/ws2812b.c **** 	bitBand+=16;
 568:Core/Src/ws2812b.c **** 
 569:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 1);
 570:Core/Src/ws2812b.c **** 	bitBand+=16;
 571:Core/Src/ws2812b.c **** 
 572:Core/Src/ws2812b.c **** 	*bitBand = (invGreen >> 0);
 573:Core/Src/ws2812b.c **** 	bitBand+=16;
 574:Core/Src/ws2812b.c **** 
 575:Core/Src/ws2812b.c **** 	// RED
 576:Core/Src/ws2812b.c **** 	*bitBand =  (invRed >> 7);
 577:Core/Src/ws2812b.c **** 	bitBand+=16;
 578:Core/Src/ws2812b.c **** 
 579:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 6);
 580:Core/Src/ws2812b.c **** 	bitBand+=16;
 581:Core/Src/ws2812b.c **** 
 582:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 5);
 583:Core/Src/ws2812b.c **** 	bitBand+=16;
 584:Core/Src/ws2812b.c **** 
 585:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 4);
 586:Core/Src/ws2812b.c **** 	bitBand+=16;
 587:Core/Src/ws2812b.c **** 
 588:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 3);
 589:Core/Src/ws2812b.c **** 	bitBand+=16;
 590:Core/Src/ws2812b.c **** 
 591:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 2);
 592:Core/Src/ws2812b.c **** 	bitBand+=16;
 593:Core/Src/ws2812b.c **** 
 594:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 1);
 595:Core/Src/ws2812b.c **** 	bitBand+=16;
 596:Core/Src/ws2812b.c **** 
 597:Core/Src/ws2812b.c **** 	*bitBand = (invRed >> 0);
ARM GAS  /tmp/ccugV9H8.s 			page 26


 598:Core/Src/ws2812b.c **** 	bitBand+=16;
 599:Core/Src/ws2812b.c **** 
 600:Core/Src/ws2812b.c **** 	// BLUE
 601:Core/Src/ws2812b.c **** 	*bitBand =  (invBlue >> 7);
 602:Core/Src/ws2812b.c **** 	bitBand+=16;
 603:Core/Src/ws2812b.c **** 
 604:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 6);
 605:Core/Src/ws2812b.c **** 	bitBand+=16;
 606:Core/Src/ws2812b.c **** 
 607:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 5);
 608:Core/Src/ws2812b.c **** 	bitBand+=16;
 609:Core/Src/ws2812b.c **** 
 610:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 4);
 611:Core/Src/ws2812b.c **** 	bitBand+=16;
 612:Core/Src/ws2812b.c **** 
 613:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 3);
 614:Core/Src/ws2812b.c **** 	bitBand+=16;
 615:Core/Src/ws2812b.c **** 
 616:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 2);
 617:Core/Src/ws2812b.c **** 	bitBand+=16;
 618:Core/Src/ws2812b.c **** 
 619:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 1);
 620:Core/Src/ws2812b.c **** 	bitBand+=16;
 621:Core/Src/ws2812b.c **** 
 622:Core/Src/ws2812b.c **** 	*bitBand = (invBlue >> 0);
 623:Core/Src/ws2812b.c **** 	bitBand+=16;
 624:Core/Src/ws2812b.c **** 
 625:Core/Src/ws2812b.c **** #endif
 626:Core/Src/ws2812b.c **** }
 733              		.loc 1 626 0 is_stmt 1
 734 00aa BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 735              	.LVL40:
 736              	.L29:
 737 00ae 00BF     		.align	2
 738              	.L28:
 739 00b0 00000000 		.word	.LANCHOR2
 740 00b4 00000000 		.word	ws2812bDmaBitBuffer
 741              		.cfi_endproc
 742              	.LFE140:
 744              		.section	.text.loadNextFramebufferData,"ax",%progbits
 745              		.align	1
 746              		.syntax unified
 747              		.thumb
 748              		.thumb_func
 749              		.fpu fpv4-sp-d16
 751              	loadNextFramebufferData:
 752              	.LFB133:
 233:Core/Src/ws2812b.c **** 
 753              		.loc 1 233 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757              	.LVL41:
 758 0000 70B5     		push	{r4, r5, r6, lr}
 759              		.cfi_def_cfa_offset 16
 760              		.cfi_offset 4, -16
 761              		.cfi_offset 5, -12
ARM GAS  /tmp/ccugV9H8.s 			page 27


 762              		.cfi_offset 6, -8
 763              		.cfi_offset 14, -4
 764 0002 82B0     		sub	sp, sp, #8
 765              		.cfi_def_cfa_offset 24
 235:Core/Src/ws2812b.c **** 	uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 766              		.loc 1 235 0
 767 0004 0568     		ldr	r5, [r0]
 768 0006 8268     		ldr	r2, [r0, #8]
 769 0008 531C     		adds	r3, r2, #1
 770 000a 8360     		str	r3, [r0, #8]
 771 000c AA5C     		ldrb	r2, [r5, r2]	@ zero_extendqisi2
 772              	.LVL42:
 236:Core/Src/ws2812b.c **** 	uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 773              		.loc 1 236 0
 774 000e 5C1C     		adds	r4, r3, #1
 775 0010 8460     		str	r4, [r0, #8]
 776 0012 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 777              	.LVL43:
 237:Core/Src/ws2812b.c **** 
 778              		.loc 1 237 0
 779 0014 661C     		adds	r6, r4, #1
 780 0016 8660     		str	r6, [r0, #8]
 781 0018 2C5D     		ldrb	r4, [r5, r4]	@ zero_extendqisi2
 782              	.LVL44:
 239:Core/Src/ws2812b.c **** 		bItem->frameBufferCounter = 0;
 783              		.loc 1 239 0
 784 001a 4568     		ldr	r5, [r0, #4]
 785 001c AE42     		cmp	r6, r5
 786 001e 06D0     		beq	.L33
 787              	.L31:
 242:Core/Src/ws2812b.c **** }
 788              		.loc 1 242 0
 789 0020 007B     		ldrb	r0, [r0, #12]	@ zero_extendqisi2
 790              	.LVL45:
 791 0022 0094     		str	r4, [sp]
 792 0024 89B2     		uxth	r1, r1
 793              	.LVL46:
 794 0026 FFF7FEFF 		bl	ws2812b_set_pixel
 795              	.LVL47:
 243:Core/Src/ws2812b.c **** 
 796              		.loc 1 243 0
 797 002a 02B0     		add	sp, sp, #8
 798              		.cfi_remember_state
 799              		.cfi_def_cfa_offset 16
 800              		@ sp needed
 801 002c 70BD     		pop	{r4, r5, r6, pc}
 802              	.LVL48:
 803              	.L33:
 804              		.cfi_restore_state
 240:Core/Src/ws2812b.c **** 
 805              		.loc 1 240 0
 806 002e 0025     		movs	r5, #0
 807 0030 8560     		str	r5, [r0, #8]
 808 0032 F5E7     		b	.L31
 809              		.cfi_endproc
 810              	.LFE133:
 812              		.section	.text.DMA_TransferCompleteHandler,"ax",%progbits
ARM GAS  /tmp/ccugV9H8.s 			page 28


 813              		.align	1
 814              		.global	DMA_TransferCompleteHandler
 815              		.syntax unified
 816              		.thumb
 817              		.thumb_func
 818              		.fpu fpv4-sp-d16
 820              	DMA_TransferCompleteHandler:
 821              	.LFB137:
 328:Core/Src/ws2812b.c **** 
 822              		.loc 1 328 0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              	.LVL49:
 331:Core/Src/ws2812b.c **** 	#endif
 827              		.loc 1 331 0
 828 0000 4FF40052 		mov	r2, #8192
 829 0004 2E4B     		ldr	r3, .L43
 830 0006 9A61     		str	r2, [r3, #24]
 334:Core/Src/ws2812b.c **** 	{
 831              		.loc 1 334 0
 832 0008 2E4B     		ldr	r3, .L43+4
 833 000a 9B69     		ldr	r3, [r3, #24]
 834 000c 042B     		cmp	r3, #4
 835 000e 02D0     		beq	.L42
 328:Core/Src/ws2812b.c **** 
 836              		.loc 1 328 0
 837 0010 10B5     		push	{r4, lr}
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 4, -8
 840              		.cfi_offset 14, -4
 841 0012 0024     		movs	r4, #0
 842 0014 48E0     		b	.L35
 843              	.L42:
 844              		.cfi_def_cfa_offset 0
 845              		.cfi_restore 4
 846              		.cfi_restore 14
 337:Core/Src/ws2812b.c **** 
 847              		.loc 1 337 0
 848 0016 0020     		movs	r0, #0
 849              	.LVL50:
 850 0018 2A4B     		ldr	r3, .L43+4
 851 001a 9861     		str	r0, [r3, #24]
 340:Core/Src/ws2812b.c **** 
 852              		.loc 1 340 0
 853 001c 2A4A     		ldr	r2, .L43+8
 854 001e 1368     		ldr	r3, [r2]
 855 0020 23F00103 		bic	r3, r3, #1
 856 0024 1360     		str	r3, [r2]
 343:Core/Src/ws2812b.c **** 		__HAL_DMA_DISABLE(&dmaCC1);
 857              		.loc 1 343 0
 858 0026 294B     		ldr	r3, .L43+12
 859 0028 1968     		ldr	r1, [r3]
 860 002a 0B68     		ldr	r3, [r1]
 861 002c 23F00103 		bic	r3, r3, #1
 862 0030 0B60     		str	r3, [r1]
 344:Core/Src/ws2812b.c **** 		__HAL_DMA_DISABLE(&dmaCC2);
ARM GAS  /tmp/ccugV9H8.s 			page 29


 863              		.loc 1 344 0
 864 0032 274B     		ldr	r3, .L43+16
 865 0034 1968     		ldr	r1, [r3]
 866 0036 0B68     		ldr	r3, [r1]
 867 0038 23F00103 		bic	r3, r3, #1
 868 003c 0B60     		str	r3, [r1]
 345:Core/Src/ws2812b.c **** 
 869              		.loc 1 345 0
 870 003e 254B     		ldr	r3, .L43+20
 871 0040 1968     		ldr	r1, [r3]
 872 0042 0B68     		ldr	r3, [r1]
 873 0044 23F00103 		bic	r3, r3, #1
 874 0048 0B60     		str	r3, [r1]
 348:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 875              		.loc 1 348 0
 876 004a 234B     		ldr	r3, .L43+24
 877 004c 1B68     		ldr	r3, [r3]
 878 004e D968     		ldr	r1, [r3, #12]
 879 0050 21F48071 		bic	r1, r1, #256
 880 0054 D960     		str	r1, [r3, #12]
 349:Core/Src/ws2812b.c **** 		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 881              		.loc 1 349 0
 882 0056 D968     		ldr	r1, [r3, #12]
 883 0058 21F40071 		bic	r1, r1, #512
 884 005c D960     		str	r1, [r3, #12]
 350:Core/Src/ws2812b.c **** 
 885              		.loc 1 350 0
 886 005e D968     		ldr	r1, [r3, #12]
 887 0060 21F48061 		bic	r1, r1, #1024
 888 0064 D960     		str	r1, [r3, #12]
 354:Core/Src/ws2812b.c **** 		// Reset the timer
 889              		.loc 1 354 0
 890 0066 1D49     		ldr	r1, .L43+28
 891 0068 0968     		ldr	r1, [r1]
 892 006a D162     		str	r1, [r2, #44]
 356:Core/Src/ws2812b.c **** 
 893              		.loc 1 356 0
 894 006c 5062     		str	r0, [r2, #36]
 359:Core/Src/ws2812b.c **** 		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 895              		.loc 1 359 0
 896 006e 0121     		movs	r1, #1
 897 0070 5161     		str	r1, [r2, #20]
 360:Core/Src/ws2812b.c **** 
 898              		.loc 1 360 0
 899 0072 6FF00101 		mvn	r1, #1
 900 0076 1961     		str	r1, [r3, #16]
 363:Core/Src/ws2812b.c **** 		// Enable timer
 901              		.loc 1 363 0
 902 0078 D968     		ldr	r1, [r3, #12]
 903 007a 41F00101 		orr	r1, r1, #1
 904 007e D960     		str	r1, [r3, #12]
 365:Core/Src/ws2812b.c **** 
 905              		.loc 1 365 0
 906 0080 1368     		ldr	r3, [r2]
 907 0082 43F00103 		orr	r3, r3, #1
 908 0086 1360     		str	r3, [r2]
 368:Core/Src/ws2812b.c **** 	} else {
ARM GAS  /tmp/ccugV9H8.s 			page 30


 909              		.loc 1 368 0
 910 0088 154B     		ldr	r3, .L43+32
 911 008a 1A68     		ldr	r2, [r3]
 912 008c 154B     		ldr	r3, .L43+36
 913 008e 9A61     		str	r2, [r3, #24]
 384:Core/Src/ws2812b.c **** 	#endif
 914              		.loc 1 384 0
 915 0090 4FF00052 		mov	r2, #536870912
 916 0094 0A4B     		ldr	r3, .L43
 917 0096 9A61     		str	r2, [r3, #24]
 918 0098 7047     		bx	lr
 919              	.LVL51:
 920              	.L37:
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 4, -8
 923              		.cfi_offset 14, -4
 924              	.LBB6:
 375:Core/Src/ws2812b.c **** 		}
 925              		.loc 1 375 0 discriminator 3
 926 009a 0121     		movs	r1, #1
 927 009c 0948     		ldr	r0, .L43+4
 928 009e 00EB0410 		add	r0, r0, r4, lsl #4
 929 00a2 FFF7FEFF 		bl	loadNextFramebufferData
 930              	.LVL52:
 373:Core/Src/ws2812b.c **** 		{
 931              		.loc 1 373 0 discriminator 3
 932 00a6 0134     		adds	r4, r4, #1
 933              	.LVL53:
 934              	.L35:
 373:Core/Src/ws2812b.c **** 		{
 935              		.loc 1 373 0 is_stmt 0 discriminator 1
 936 00a8 002C     		cmp	r4, #0
 937 00aa F6D0     		beq	.L37
 378:Core/Src/ws2812b.c **** 	}
 938              		.loc 1 378 0 is_stmt 1
 939 00ac 054A     		ldr	r2, .L43+4
 940 00ae 9369     		ldr	r3, [r2, #24]
 941 00b0 0133     		adds	r3, r3, #1
 942 00b2 9361     		str	r3, [r2, #24]
 943              	.LBE6:
 384:Core/Src/ws2812b.c **** 	#endif
 944              		.loc 1 384 0
 945 00b4 4FF00052 		mov	r2, #536870912
 946 00b8 014B     		ldr	r3, .L43
 947 00ba 9A61     		str	r2, [r3, #24]
 948 00bc 10BD     		pop	{r4, pc}
 949              	.LVL54:
 950              	.L44:
 951 00be 00BF     		.align	2
 952              	.L43:
 953 00c0 000C0240 		.word	1073875968
 954 00c4 00000000 		.word	ws2812b
 955 00c8 00000140 		.word	1073807360
 956 00cc 00000000 		.word	dmaUpdate
 957 00d0 00000000 		.word	dmaCC1
 958 00d4 00000000 		.word	dmaCC2
 959 00d8 00000000 		.word	TIM1_handle
ARM GAS  /tmp/ccugV9H8.s 			page 31


 960 00dc 00000000 		.word	timer_reset_pulse_period
 961 00e0 00000000 		.word	.LANCHOR1
 962 00e4 00080240 		.word	1073874944
 963              		.cfi_endproc
 964              	.LFE137:
 966              		.section	.text.WS2812_sendbuf,"ax",%progbits
 967              		.align	1
 968              		.syntax unified
 969              		.thumb
 970              		.thumb_func
 971              		.fpu fpv4-sp-d16
 973              	WS2812_sendbuf:
 974              	.LFB134:
 248:Core/Src/ws2812b.c **** 	// transmission complete flag
 975              		.loc 1 248 0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 0
 978              		@ frame_needed = 0, uses_anonymous_args = 0
 979 0000 38B5     		push	{r3, r4, r5, lr}
 980              		.cfi_def_cfa_offset 16
 981              		.cfi_offset 3, -16
 982              		.cfi_offset 4, -12
 983              		.cfi_offset 5, -8
 984              		.cfi_offset 14, -4
 250:Core/Src/ws2812b.c **** 
 985              		.loc 1 250 0
 986 0002 0024     		movs	r4, #0
 987 0004 4F4B     		ldr	r3, .L64
 988 0006 1C74     		strb	r4, [r3, #16]
 989              	.LVL55:
 990              	.L46:
 254:Core/Src/ws2812b.c **** 	{
 991              		.loc 1 254 0 discriminator 1
 992 0008 0CB3     		cbz	r4, .L47
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 993              		.loc 1 263 0
 994 000a 4F4B     		ldr	r3, .L64+4
 995 000c 1B68     		ldr	r3, [r3]
 996 000e 4F4A     		ldr	r2, .L64+8
 997 0010 9342     		cmp	r3, r2
 998 0012 2AD9     		bls	.L48
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 999              		.loc 1 263 0 is_stmt 0 discriminator 1
 1000 0014 4FF46062 		mov	r2, #3584
 1001 0018 4D4B     		ldr	r3, .L64+12
 1002 001a DA60     		str	r2, [r3, #12]
 1003              	.L49:
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1004              		.loc 1 264 0 is_stmt 1
 1005 001c 4D4B     		ldr	r3, .L64+16
 1006 001e 1B68     		ldr	r3, [r3]
 1007 0020 4A4A     		ldr	r2, .L64+8
 1008 0022 9342     		cmp	r3, r2
 1009 0024 36D9     		bls	.L52
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1010              		.loc 1 264 0 is_stmt 0 discriminator 1
 1011 0026 4FF46062 		mov	r2, #3584
ARM GAS  /tmp/ccugV9H8.s 			page 32


 1012 002a 494B     		ldr	r3, .L64+12
 1013 002c DA60     		str	r2, [r3, #12]
 1014              	.L53:
 265:Core/Src/ws2812b.c **** 
 1015              		.loc 1 265 0 is_stmt 1
 1016 002e 4A4B     		ldr	r3, .L64+20
 1017 0030 1B68     		ldr	r3, [r3]
 1018 0032 464A     		ldr	r2, .L64+8
 1019 0034 9342     		cmp	r3, r2
 1020 0036 42D8     		bhi	.L61
 265:Core/Src/ws2812b.c **** 
 1021              		.loc 1 265 0 is_stmt 0 discriminator 2
 1022 0038 484A     		ldr	r2, .L64+24
 1023 003a 9342     		cmp	r3, r2
 1024 003c 77D8     		bhi	.L62
 265:Core/Src/ws2812b.c **** 
 1025              		.loc 1 265 0 discriminator 4
 1026 003e 484A     		ldr	r2, .L64+28
 1027 0040 9342     		cmp	r3, r2
 1028 0042 79D8     		bhi	.L63
 265:Core/Src/ws2812b.c **** 
 1029              		.loc 1 265 0 discriminator 7
 1030 0044 4FF46012 		mov	r2, #3670016
 1031 0048 464B     		ldr	r3, .L64+32
 1032 004a 9A60     		str	r2, [r3, #8]
 1033 004c 3BE0     		b	.L57
 1034              	.L47:
 256:Core/Src/ws2812b.c **** 
 1035              		.loc 1 256 0 is_stmt 1 discriminator 3
 1036 004e 3D4D     		ldr	r5, .L64
 1037 0050 05EB0415 		add	r5, r5, r4, lsl #4
 1038 0054 0021     		movs	r1, #0
 1039 0056 A960     		str	r1, [r5, #8]
 258:Core/Src/ws2812b.c **** 		loadNextFramebufferData(&ws2812b.item[i], 1); // ROW 0
 1040              		.loc 1 258 0 discriminator 3
 1041 0058 2846     		mov	r0, r5
 1042 005a FFF7FEFF 		bl	loadNextFramebufferData
 1043              	.LVL56:
 259:Core/Src/ws2812b.c **** 	}
 1044              		.loc 1 259 0 discriminator 3
 1045 005e 0121     		movs	r1, #1
 1046 0060 2846     		mov	r0, r5
 1047 0062 FFF7FEFF 		bl	loadNextFramebufferData
 1048              	.LVL57:
 254:Core/Src/ws2812b.c **** 	{
 1049              		.loc 1 254 0 discriminator 3
 1050 0066 0134     		adds	r4, r4, #1
 1051              	.LVL58:
 1052 0068 CEE7     		b	.L46
 1053              	.L48:
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1054              		.loc 1 263 0 discriminator 2
 1055 006a 3C4A     		ldr	r2, .L64+24
 1056 006c 9342     		cmp	r3, r2
 1057 006e 04D9     		bls	.L50
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1058              		.loc 1 263 0 is_stmt 0 discriminator 3
ARM GAS  /tmp/ccugV9H8.s 			page 33


 1059 0070 4FF46062 		mov	r2, #3584
 1060 0074 364B     		ldr	r3, .L64+12
 1061 0076 9A60     		str	r2, [r3, #8]
 1062 0078 D0E7     		b	.L49
 1063              	.L50:
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1064              		.loc 1 263 0 discriminator 4
 1065 007a 394A     		ldr	r2, .L64+28
 1066 007c 9342     		cmp	r3, r2
 1067 007e 04D9     		bls	.L51
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1068              		.loc 1 263 0 discriminator 6
 1069 0080 4FF46062 		mov	r2, #3584
 1070 0084 374B     		ldr	r3, .L64+32
 1071 0086 DA60     		str	r2, [r3, #12]
 1072 0088 C8E7     		b	.L49
 1073              	.L51:
 263:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC1, DMA_FLAG_TCIF1_5 | DMA_FLAG_HTIF1_5 | DMA_FLAG_TEIF1_5);
 1074              		.loc 1 263 0 discriminator 7
 1075 008a 4FF46062 		mov	r2, #3584
 1076 008e 354B     		ldr	r3, .L64+32
 1077 0090 9A60     		str	r2, [r3, #8]
 1078 0092 C3E7     		b	.L49
 1079              	.L52:
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1080              		.loc 1 264 0 is_stmt 1 discriminator 2
 1081 0094 314A     		ldr	r2, .L64+24
 1082 0096 9342     		cmp	r3, r2
 1083 0098 04D9     		bls	.L54
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1084              		.loc 1 264 0 is_stmt 0 discriminator 3
 1085 009a 4FF46062 		mov	r2, #3584
 1086 009e 2C4B     		ldr	r3, .L64+12
 1087 00a0 9A60     		str	r2, [r3, #8]
 1088 00a2 C4E7     		b	.L53
 1089              	.L54:
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1090              		.loc 1 264 0 discriminator 4
 1091 00a4 2E4A     		ldr	r2, .L64+28
 1092 00a6 9342     		cmp	r3, r2
 1093 00a8 04D9     		bls	.L55
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1094              		.loc 1 264 0 discriminator 6
 1095 00aa 4FF46062 		mov	r2, #3584
 1096 00ae 2D4B     		ldr	r3, .L64+32
 1097 00b0 DA60     		str	r2, [r3, #12]
 1098 00b2 BCE7     		b	.L53
 1099              	.L55:
 264:Core/Src/ws2812b.c **** 	__HAL_DMA_CLEAR_FLAG(&dmaCC2, DMA_FLAG_TCIF2_6 | DMA_FLAG_HTIF2_6 | DMA_FLAG_TEIF2_6);
 1100              		.loc 1 264 0 discriminator 7
 1101 00b4 4FF46062 		mov	r2, #3584
 1102 00b8 2A4B     		ldr	r3, .L64+32
 1103 00ba 9A60     		str	r2, [r3, #8]
 1104 00bc B7E7     		b	.L53
 1105              	.L61:
 265:Core/Src/ws2812b.c **** 
 1106              		.loc 1 265 0 is_stmt 1 discriminator 1
ARM GAS  /tmp/ccugV9H8.s 			page 34


 1107 00be 4FF46012 		mov	r2, #3670016
 1108 00c2 234B     		ldr	r3, .L64+12
 1109 00c4 DA60     		str	r2, [r3, #12]
 1110              	.L57:
 270:Core/Src/ws2812b.c **** 	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 1111              		.loc 1 270 0
 1112 00c6 204B     		ldr	r3, .L64+4
 1113 00c8 1B68     		ldr	r3, [r3]
 1114 00ca 3022     		movs	r2, #48
 1115 00cc 5A60     		str	r2, [r3, #4]
 271:Core/Src/ws2812b.c **** 	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 1116              		.loc 1 271 0
 1117 00ce 214C     		ldr	r4, .L64+16
 1118              	.LVL59:
 1119 00d0 2168     		ldr	r1, [r4]
 1120 00d2 4A60     		str	r2, [r1, #4]
 272:Core/Src/ws2812b.c **** 
 1121              		.loc 1 272 0
 1122 00d4 2048     		ldr	r0, .L64+20
 1123 00d6 0168     		ldr	r1, [r0]
 1124 00d8 4A60     		str	r2, [r1, #4]
 275:Core/Src/ws2812b.c **** 
 1125              		.loc 1 275 0
 1126 00da 2349     		ldr	r1, .L64+36
 1127 00dc 0A68     		ldr	r2, [r1]
 1128 00de 6FF01F05 		mvn	r5, #31
 1129 00e2 1561     		str	r5, [r2, #16]
 278:Core/Src/ws2812b.c **** 	__HAL_DMA_ENABLE(&dmaCC1);
 1130              		.loc 1 278 0
 1131 00e4 1A68     		ldr	r2, [r3]
 1132 00e6 42F00102 		orr	r2, r2, #1
 1133 00ea 1A60     		str	r2, [r3]
 279:Core/Src/ws2812b.c **** 	__HAL_DMA_ENABLE(&dmaCC2);
 1134              		.loc 1 279 0
 1135 00ec 2268     		ldr	r2, [r4]
 1136 00ee 1368     		ldr	r3, [r2]
 1137 00f0 43F00103 		orr	r3, r3, #1
 1138 00f4 1360     		str	r3, [r2]
 280:Core/Src/ws2812b.c **** 
 1139              		.loc 1 280 0
 1140 00f6 0268     		ldr	r2, [r0]
 1141 00f8 1368     		ldr	r3, [r2]
 1142 00fa 43F00103 		orr	r3, r3, #1
 1143 00fe 1360     		str	r3, [r2]
 283:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 1144              		.loc 1 283 0
 1145 0100 0B68     		ldr	r3, [r1]
 1146 0102 DA68     		ldr	r2, [r3, #12]
 1147 0104 42F48072 		orr	r2, r2, #256
 1148 0108 DA60     		str	r2, [r3, #12]
 284:Core/Src/ws2812b.c **** 	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 1149              		.loc 1 284 0
 1150 010a DA68     		ldr	r2, [r3, #12]
 1151 010c 42F40072 		orr	r2, r2, #512
 1152 0110 DA60     		str	r2, [r3, #12]
 285:Core/Src/ws2812b.c **** 
 1153              		.loc 1 285 0
ARM GAS  /tmp/ccugV9H8.s 			page 35


 1154 0112 DA68     		ldr	r2, [r3, #12]
 1155 0114 42F48062 		orr	r2, r2, #1024
 1156 0118 DA60     		str	r2, [r3, #12]
 287:Core/Src/ws2812b.c **** 
 1157              		.loc 1 287 0
 1158 011a 144A     		ldr	r2, .L64+40
 1159 011c 1268     		ldr	r2, [r2]
 1160 011e 013A     		subs	r2, r2, #1
 1161 0120 1349     		ldr	r1, .L64+44
 1162 0122 4A62     		str	r2, [r1, #36]
 290:Core/Src/ws2812b.c **** }
 1163              		.loc 1 290 0
 1164 0124 1A68     		ldr	r2, [r3]
 1165 0126 42F00102 		orr	r2, r2, #1
 1166 012a 1A60     		str	r2, [r3]
 1167 012c 38BD     		pop	{r3, r4, r5, pc}
 1168              	.LVL60:
 1169              	.L62:
 265:Core/Src/ws2812b.c **** 
 1170              		.loc 1 265 0 discriminator 3
 1171 012e 4FF46012 		mov	r2, #3670016
 1172 0132 074B     		ldr	r3, .L64+12
 1173 0134 9A60     		str	r2, [r3, #8]
 1174 0136 C6E7     		b	.L57
 1175              	.L63:
 265:Core/Src/ws2812b.c **** 
 1176              		.loc 1 265 0 is_stmt 0 discriminator 6
 1177 0138 4FF46012 		mov	r2, #3670016
 1178 013c 094B     		ldr	r3, .L64+32
 1179 013e DA60     		str	r2, [r3, #12]
 1180 0140 C1E7     		b	.L57
 1181              	.L65:
 1182 0142 00BF     		.align	2
 1183              	.L64:
 1184 0144 00000000 		.word	ws2812b
 1185 0148 00000000 		.word	dmaUpdate
 1186 014c 58640240 		.word	1073898584
 1187 0150 00640240 		.word	1073898496
 1188 0154 00000000 		.word	dmaCC1
 1189 0158 00000000 		.word	dmaCC2
 1190 015c B8600240 		.word	1073897656
 1191 0160 58600240 		.word	1073897560
 1192 0164 00600240 		.word	1073897472
 1193 0168 00000000 		.word	TIM1_handle
 1194 016c 00000000 		.word	tim_period
 1195 0170 00000140 		.word	1073807360
 1196              		.cfi_endproc
 1197              	.LFE134:
 1199              		.section	.text.DMA_TransferHalfHandler,"ax",%progbits
 1200              		.align	1
 1201              		.global	DMA_TransferHalfHandler
 1202              		.syntax unified
 1203              		.thumb
 1204              		.thumb_func
 1205              		.fpu fpv4-sp-d16
 1207              	DMA_TransferHalfHandler:
 1208              	.LFB136:
ARM GAS  /tmp/ccugV9H8.s 			page 36


 302:Core/Src/ws2812b.c **** 
 1209              		.loc 1 302 0 is_stmt 1
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 0
 1212              		@ frame_needed = 0, uses_anonymous_args = 0
 1213              	.LVL61:
 1214 0000 10B5     		push	{r4, lr}
 1215              		.cfi_def_cfa_offset 8
 1216              		.cfi_offset 4, -8
 1217              		.cfi_offset 14, -4
 1218 0002 82B0     		sub	sp, sp, #8
 1219              		.cfi_def_cfa_offset 16
 305:Core/Src/ws2812b.c **** 	 {
 1220              		.loc 1 305 0
 1221 0004 0E4B     		ldr	r3, .L73
 1222 0006 9B69     		ldr	r3, [r3, #24]
 1223 0008 042B     		cmp	r3, #4
 1224 000a 01D0     		beq	.L72
 1225 000c 0024     		movs	r4, #0
 1226 000e 0EE0     		b	.L67
 1227              	.L72:
 310:Core/Src/ws2812b.c **** 
 1228              		.loc 1 310 0
 1229 0010 0020     		movs	r0, #0
 1230              	.LVL62:
 1231 0012 0090     		str	r0, [sp]
 1232 0014 0346     		mov	r3, r0
 1233 0016 0246     		mov	r2, r0
 1234 0018 0146     		mov	r1, r0
 1235 001a FFF7FEFF 		bl	ws2812b_set_pixel
 1236              	.LVL63:
 1237 001e 0CE0     		b	.L66
 1238              	.LVL64:
 1239              	.L69:
 1240              	.LBB7:
 317:Core/Src/ws2812b.c **** 		}
 1241              		.loc 1 317 0 discriminator 3
 1242 0020 0021     		movs	r1, #0
 1243 0022 0748     		ldr	r0, .L73
 1244 0024 00EB0410 		add	r0, r0, r4, lsl #4
 1245 0028 FFF7FEFF 		bl	loadNextFramebufferData
 1246              	.LVL65:
 315:Core/Src/ws2812b.c **** 		{
 1247              		.loc 1 315 0 discriminator 3
 1248 002c 0134     		adds	r4, r4, #1
 1249              	.LVL66:
 1250              	.L67:
 315:Core/Src/ws2812b.c **** 		{
 1251              		.loc 1 315 0 is_stmt 0 discriminator 1
 1252 002e 002C     		cmp	r4, #0
 1253 0030 F6D0     		beq	.L69
 320:Core/Src/ws2812b.c **** 	}
 1254              		.loc 1 320 0 is_stmt 1
 1255 0032 034A     		ldr	r2, .L73
 1256 0034 9369     		ldr	r3, [r2, #24]
 1257 0036 0133     		adds	r3, r3, #1
 1258 0038 9361     		str	r3, [r2, #24]
ARM GAS  /tmp/ccugV9H8.s 			page 37


 1259              	.LVL67:
 1260              	.L66:
 1261              	.LBE7:
 325:Core/Src/ws2812b.c **** 
 1262              		.loc 1 325 0
 1263 003a 02B0     		add	sp, sp, #8
 1264              		.cfi_def_cfa_offset 8
 1265              		@ sp needed
 1266 003c 10BD     		pop	{r4, pc}
 1267              	.L74:
 1268 003e 00BF     		.align	2
 1269              	.L73:
 1270 0040 00000000 		.word	ws2812b
 1271              		.cfi_endproc
 1272              	.LFE136:
 1274              		.section	.text.ws2812b_init,"ax",%progbits
 1275              		.align	1
 1276              		.global	ws2812b_init
 1277              		.syntax unified
 1278              		.thumb
 1279              		.thumb_func
 1280              		.fpu fpv4-sp-d16
 1282              	ws2812b_init:
 1283              	.LFB141:
 627:Core/Src/ws2812b.c **** 
 628:Core/Src/ws2812b.c **** 
 629:Core/Src/ws2812b.c **** void ws2812b_init()
 630:Core/Src/ws2812b.c **** {
 1284              		.loc 1 630 0
 1285              		.cfi_startproc
 1286              		@ args = 0, pretend = 0, frame = 0
 1287              		@ frame_needed = 0, uses_anonymous_args = 0
 1288 0000 08B5     		push	{r3, lr}
 1289              		.cfi_def_cfa_offset 8
 1290              		.cfi_offset 3, -8
 1291              		.cfi_offset 14, -4
 631:Core/Src/ws2812b.c **** 	ws2812b_gpio_init();
 1292              		.loc 1 631 0
 1293 0002 FFF7FEFF 		bl	ws2812b_gpio_init
 1294              	.LVL68:
 632:Core/Src/ws2812b.c **** 
 633:Core/Src/ws2812b.c **** 	/*TIM2_init();
 634:Core/Src/ws2812b.c **** 	DMA_init();*/
 635:Core/Src/ws2812b.c **** 
 636:Core/Src/ws2812b.c **** 
 637:Core/Src/ws2812b.c **** 	DMA2_init();
 1295              		.loc 1 637 0
 1296 0006 FFF7FEFF 		bl	DMA2_init
 1297              	.LVL69:
 638:Core/Src/ws2812b.c **** 	TIM1_init();
 1298              		.loc 1 638 0
 1299 000a FFF7FEFF 		bl	TIM1_init
 1300              	.LVL70:
 639:Core/Src/ws2812b.c **** 
 640:Core/Src/ws2812b.c **** 
 641:Core/Src/ws2812b.c **** 	// Need to start the first transfer
 642:Core/Src/ws2812b.c **** 	ws2812b.transferComplete = 1;
ARM GAS  /tmp/ccugV9H8.s 			page 38


 1301              		.loc 1 642 0
 1302 000e 0122     		movs	r2, #1
 1303 0010 014B     		ldr	r3, .L77
 1304 0012 1A74     		strb	r2, [r3, #16]
 1305 0014 08BD     		pop	{r3, pc}
 1306              	.L78:
 1307 0016 00BF     		.align	2
 1308              	.L77:
 1309 0018 00000000 		.word	ws2812b
 1310              		.cfi_endproc
 1311              	.LFE141:
 1313              		.section	.text.ws2812b_handle,"ax",%progbits
 1314              		.align	1
 1315              		.global	ws2812b_handle
 1316              		.syntax unified
 1317              		.thumb
 1318              		.thumb_func
 1319              		.fpu fpv4-sp-d16
 1321              	ws2812b_handle:
 1322              	.LFB142:
 643:Core/Src/ws2812b.c **** }
 644:Core/Src/ws2812b.c **** 
 645:Core/Src/ws2812b.c **** 
 646:Core/Src/ws2812b.c **** void ws2812b_handle()
 647:Core/Src/ws2812b.c **** {
 1323              		.loc 1 647 0
 1324              		.cfi_startproc
 1325              		@ args = 0, pretend = 0, frame = 0
 1326              		@ frame_needed = 0, uses_anonymous_args = 0
 1327 0000 08B5     		push	{r3, lr}
 1328              		.cfi_def_cfa_offset 8
 1329              		.cfi_offset 3, -8
 1330              		.cfi_offset 14, -4
 648:Core/Src/ws2812b.c **** 	if(ws2812b.startTransfer) {
 1331              		.loc 1 648 0
 1332 0002 054B     		ldr	r3, .L83
 1333 0004 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 1334 0006 03B9     		cbnz	r3, .L82
 1335              	.L79:
 1336 0008 08BD     		pop	{r3, pc}
 1337              	.L82:
 649:Core/Src/ws2812b.c **** 		ws2812b.startTransfer = 0;
 1338              		.loc 1 649 0
 1339 000a 0022     		movs	r2, #0
 1340 000c 024B     		ldr	r3, .L83
 1341 000e 5A74     		strb	r2, [r3, #17]
 650:Core/Src/ws2812b.c **** 		WS2812_sendbuf();
 1342              		.loc 1 650 0
 1343 0010 FFF7FEFF 		bl	WS2812_sendbuf
 1344              	.LVL71:
 651:Core/Src/ws2812b.c **** 	}
 652:Core/Src/ws2812b.c **** 
 653:Core/Src/ws2812b.c **** }
 1345              		.loc 1 653 0
 1346 0014 F8E7     		b	.L79
 1347              	.L84:
 1348 0016 00BF     		.align	2
ARM GAS  /tmp/ccugV9H8.s 			page 39


 1349              	.L83:
 1350 0018 00000000 		.word	ws2812b
 1351              		.cfi_endproc
 1352              	.LFE142:
 1354              		.comm	dummy,4,4
 1355              		.comm	dmaCC2,96,4
 1356              		.comm	dmaCC1,96,4
 1357              		.comm	dmaUpdate,96,4
 1358              		.global	gammaTable
 1359              		.comm	ws2812bDmaBitBuffer,96,4
 1360              		.global	WS2812_IO_Low
 1361              		.global	WS2812_IO_High
 1362              		.comm	ws2812b,28,4
 1363              		.comm	timer_reset_pulse_period,4,4
 1364              		.comm	tim_period,4,4
 1365              		.comm	tim2OC2,28,4
 1366              		.comm	tim2OC1,28,4
 1367              		.comm	TIM1_handle,64,4
 1368              		.section	.data.WS2812_IO_High,"aw",%progbits
 1369              		.align	2
 1370              		.set	.LANCHOR0,. + 0
 1373              	WS2812_IO_High:
 1374 0000 00200000 		.word	8192
 1375              		.section	.data.WS2812_IO_Low,"aw",%progbits
 1376              		.align	2
 1377              		.set	.LANCHOR1,. + 0
 1380              	WS2812_IO_Low:
 1381 0000 00000020 		.word	536870912
 1382              		.section	.rodata.gammaTable,"a",%progbits
 1383              		.align	2
 1384              		.set	.LANCHOR2,. + 0
 1387              	gammaTable:
 1388 0000 00       		.byte	0
 1389 0001 00       		.byte	0
 1390 0002 00       		.byte	0
 1391 0003 00       		.byte	0
 1392 0004 00       		.byte	0
 1393 0005 00       		.byte	0
 1394 0006 00       		.byte	0
 1395 0007 00       		.byte	0
 1396 0008 00       		.byte	0
 1397 0009 00       		.byte	0
 1398 000a 00       		.byte	0
 1399 000b 00       		.byte	0
 1400 000c 00       		.byte	0
 1401 000d 00       		.byte	0
 1402 000e 00       		.byte	0
 1403 000f 00       		.byte	0
 1404 0010 00       		.byte	0
 1405 0011 00       		.byte	0
 1406 0012 00       		.byte	0
 1407 0013 00       		.byte	0
 1408 0014 00       		.byte	0
 1409 0015 00       		.byte	0
 1410 0016 00       		.byte	0
 1411 0017 00       		.byte	0
 1412 0018 00       		.byte	0
ARM GAS  /tmp/ccugV9H8.s 			page 40


 1413 0019 00       		.byte	0
 1414 001a 00       		.byte	0
 1415 001b 00       		.byte	0
 1416 001c 01       		.byte	1
 1417 001d 01       		.byte	1
 1418 001e 01       		.byte	1
 1419 001f 01       		.byte	1
 1420 0020 01       		.byte	1
 1421 0021 01       		.byte	1
 1422 0022 01       		.byte	1
 1423 0023 01       		.byte	1
 1424 0024 01       		.byte	1
 1425 0025 01       		.byte	1
 1426 0026 01       		.byte	1
 1427 0027 01       		.byte	1
 1428 0028 01       		.byte	1
 1429 0029 02       		.byte	2
 1430 002a 02       		.byte	2
 1431 002b 02       		.byte	2
 1432 002c 02       		.byte	2
 1433 002d 02       		.byte	2
 1434 002e 02       		.byte	2
 1435 002f 02       		.byte	2
 1436 0030 02       		.byte	2
 1437 0031 03       		.byte	3
 1438 0032 03       		.byte	3
 1439 0033 03       		.byte	3
 1440 0034 03       		.byte	3
 1441 0035 03       		.byte	3
 1442 0036 03       		.byte	3
 1443 0037 03       		.byte	3
 1444 0038 04       		.byte	4
 1445 0039 04       		.byte	4
 1446 003a 04       		.byte	4
 1447 003b 04       		.byte	4
 1448 003c 04       		.byte	4
 1449 003d 05       		.byte	5
 1450 003e 05       		.byte	5
 1451 003f 05       		.byte	5
 1452 0040 05       		.byte	5
 1453 0041 06       		.byte	6
 1454 0042 06       		.byte	6
 1455 0043 06       		.byte	6
 1456 0044 06       		.byte	6
 1457 0045 07       		.byte	7
 1458 0046 07       		.byte	7
 1459 0047 07       		.byte	7
 1460 0048 07       		.byte	7
 1461 0049 08       		.byte	8
 1462 004a 08       		.byte	8
 1463 004b 08       		.byte	8
 1464 004c 09       		.byte	9
 1465 004d 09       		.byte	9
 1466 004e 09       		.byte	9
 1467 004f 0A       		.byte	10
 1468 0050 0A       		.byte	10
 1469 0051 0A       		.byte	10
ARM GAS  /tmp/ccugV9H8.s 			page 41


 1470 0052 0B       		.byte	11
 1471 0053 0B       		.byte	11
 1472 0054 0B       		.byte	11
 1473 0055 0C       		.byte	12
 1474 0056 0C       		.byte	12
 1475 0057 0D       		.byte	13
 1476 0058 0D       		.byte	13
 1477 0059 0D       		.byte	13
 1478 005a 0E       		.byte	14
 1479 005b 0E       		.byte	14
 1480 005c 0F       		.byte	15
 1481 005d 0F       		.byte	15
 1482 005e 10       		.byte	16
 1483 005f 10       		.byte	16
 1484 0060 11       		.byte	17
 1485 0061 11       		.byte	17
 1486 0062 12       		.byte	18
 1487 0063 12       		.byte	18
 1488 0064 13       		.byte	19
 1489 0065 13       		.byte	19
 1490 0066 14       		.byte	20
 1491 0067 14       		.byte	20
 1492 0068 15       		.byte	21
 1493 0069 15       		.byte	21
 1494 006a 16       		.byte	22
 1495 006b 16       		.byte	22
 1496 006c 17       		.byte	23
 1497 006d 18       		.byte	24
 1498 006e 18       		.byte	24
 1499 006f 19       		.byte	25
 1500 0070 19       		.byte	25
 1501 0071 1A       		.byte	26
 1502 0072 1B       		.byte	27
 1503 0073 1B       		.byte	27
 1504 0074 1C       		.byte	28
 1505 0075 1D       		.byte	29
 1506 0076 1D       		.byte	29
 1507 0077 1E       		.byte	30
 1508 0078 1F       		.byte	31
 1509 0079 20       		.byte	32
 1510 007a 20       		.byte	32
 1511 007b 21       		.byte	33
 1512 007c 22       		.byte	34
 1513 007d 23       		.byte	35
 1514 007e 23       		.byte	35
 1515 007f 24       		.byte	36
 1516 0080 25       		.byte	37
 1517 0081 26       		.byte	38
 1518 0082 27       		.byte	39
 1519 0083 27       		.byte	39
 1520 0084 28       		.byte	40
 1521 0085 29       		.byte	41
 1522 0086 2A       		.byte	42
 1523 0087 2B       		.byte	43
 1524 0088 2C       		.byte	44
 1525 0089 2D       		.byte	45
 1526 008a 2E       		.byte	46
ARM GAS  /tmp/ccugV9H8.s 			page 42


 1527 008b 2F       		.byte	47
 1528 008c 30       		.byte	48
 1529 008d 31       		.byte	49
 1530 008e 32       		.byte	50
 1531 008f 32       		.byte	50
 1532 0090 33       		.byte	51
 1533 0091 34       		.byte	52
 1534 0092 36       		.byte	54
 1535 0093 37       		.byte	55
 1536 0094 38       		.byte	56
 1537 0095 39       		.byte	57
 1538 0096 3A       		.byte	58
 1539 0097 3B       		.byte	59
 1540 0098 3C       		.byte	60
 1541 0099 3D       		.byte	61
 1542 009a 3E       		.byte	62
 1543 009b 3F       		.byte	63
 1544 009c 40       		.byte	64
 1545 009d 42       		.byte	66
 1546 009e 43       		.byte	67
 1547 009f 44       		.byte	68
 1548 00a0 45       		.byte	69
 1549 00a1 46       		.byte	70
 1550 00a2 48       		.byte	72
 1551 00a3 49       		.byte	73
 1552 00a4 4A       		.byte	74
 1553 00a5 4B       		.byte	75
 1554 00a6 4D       		.byte	77
 1555 00a7 4E       		.byte	78
 1556 00a8 4F       		.byte	79
 1557 00a9 51       		.byte	81
 1558 00aa 52       		.byte	82
 1559 00ab 53       		.byte	83
 1560 00ac 55       		.byte	85
 1561 00ad 56       		.byte	86
 1562 00ae 57       		.byte	87
 1563 00af 59       		.byte	89
 1564 00b0 5A       		.byte	90
 1565 00b1 5C       		.byte	92
 1566 00b2 5D       		.byte	93
 1567 00b3 5F       		.byte	95
 1568 00b4 60       		.byte	96
 1569 00b5 62       		.byte	98
 1570 00b6 63       		.byte	99
 1571 00b7 65       		.byte	101
 1572 00b8 66       		.byte	102
 1573 00b9 68       		.byte	104
 1574 00ba 69       		.byte	105
 1575 00bb 6B       		.byte	107
 1576 00bc 6D       		.byte	109
 1577 00bd 6E       		.byte	110
 1578 00be 70       		.byte	112
 1579 00bf 72       		.byte	114
 1580 00c0 73       		.byte	115
 1581 00c1 75       		.byte	117
 1582 00c2 77       		.byte	119
 1583 00c3 78       		.byte	120
ARM GAS  /tmp/ccugV9H8.s 			page 43


 1584 00c4 7A       		.byte	122
 1585 00c5 7C       		.byte	124
 1586 00c6 7E       		.byte	126
 1587 00c7 7F       		.byte	127
 1588 00c8 81       		.byte	-127
 1589 00c9 83       		.byte	-125
 1590 00ca 85       		.byte	-123
 1591 00cb 87       		.byte	-121
 1592 00cc 89       		.byte	-119
 1593 00cd 8A       		.byte	-118
 1594 00ce 8C       		.byte	-116
 1595 00cf 8E       		.byte	-114
 1596 00d0 90       		.byte	-112
 1597 00d1 92       		.byte	-110
 1598 00d2 94       		.byte	-108
 1599 00d3 96       		.byte	-106
 1600 00d4 98       		.byte	-104
 1601 00d5 9A       		.byte	-102
 1602 00d6 9C       		.byte	-100
 1603 00d7 9E       		.byte	-98
 1604 00d8 A0       		.byte	-96
 1605 00d9 A2       		.byte	-94
 1606 00da A4       		.byte	-92
 1607 00db A7       		.byte	-89
 1608 00dc A9       		.byte	-87
 1609 00dd AB       		.byte	-85
 1610 00de AD       		.byte	-83
 1611 00df AF       		.byte	-81
 1612 00e0 B1       		.byte	-79
 1613 00e1 B4       		.byte	-76
 1614 00e2 B6       		.byte	-74
 1615 00e3 B8       		.byte	-72
 1616 00e4 BA       		.byte	-70
 1617 00e5 BD       		.byte	-67
 1618 00e6 BF       		.byte	-65
 1619 00e7 C1       		.byte	-63
 1620 00e8 C4       		.byte	-60
 1621 00e9 C6       		.byte	-58
 1622 00ea C8       		.byte	-56
 1623 00eb CB       		.byte	-53
 1624 00ec CD       		.byte	-51
 1625 00ed D0       		.byte	-48
 1626 00ee D2       		.byte	-46
 1627 00ef D5       		.byte	-43
 1628 00f0 D7       		.byte	-41
 1629 00f1 DA       		.byte	-38
 1630 00f2 DC       		.byte	-36
 1631 00f3 DF       		.byte	-33
 1632 00f4 E1       		.byte	-31
 1633 00f5 E4       		.byte	-28
 1634 00f6 E7       		.byte	-25
 1635 00f7 E9       		.byte	-23
 1636 00f8 EC       		.byte	-20
 1637 00f9 EF       		.byte	-17
 1638 00fa F1       		.byte	-15
 1639 00fb F4       		.byte	-12
 1640 00fc F7       		.byte	-9
ARM GAS  /tmp/ccugV9H8.s 			page 44


 1641 00fd F9       		.byte	-7
 1642 00fe FC       		.byte	-4
 1643 00ff FF       		.byte	-1
 1644              		.text
 1645              	.Letext0:
 1646              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1647              		.file 3 "/usr/include/newlib/sys/lock.h"
 1648              		.file 4 "/usr/include/newlib/sys/_types.h"
 1649              		.file 5 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1650              		.file 6 "/usr/include/newlib/sys/reent.h"
 1651              		.file 7 "/usr/include/newlib/sys/_stdint.h"
 1652              		.file 8 "Drivers/CMSIS/Include/core_cm4.h"
 1653              		.file 9 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1654              		.file 10 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f413xx.h"
 1655              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1656              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1657              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1658              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1659              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1660              		.file 16 "Core/Inc/ws2812b.h"
 1661              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
ARM GAS  /tmp/ccugV9H8.s 			page 45


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ws2812b.c
     /tmp/ccugV9H8.s:18     .text.DMA_TransferError:0000000000000000 $t
     /tmp/ccugV9H8.s:25     .text.DMA_TransferError:0000000000000000 DMA_TransferError
     /tmp/ccugV9H8.s:52     .text.ws2812b_gpio_init:0000000000000000 $t
     /tmp/ccugV9H8.s:58     .text.ws2812b_gpio_init:0000000000000000 ws2812b_gpio_init
     /tmp/ccugV9H8.s:143    .text.ws2812b_gpio_init:0000000000000070 $d
     /tmp/ccugV9H8.s:149    .text.DMA2_init:0000000000000000 $t
     /tmp/ccugV9H8.s:155    .text.DMA2_init:0000000000000000 DMA2_init
     /tmp/ccugV9H8.s:354    .text.DMA2_init:0000000000000124 $d
                            *COM*:0000000000000060 dmaUpdate
                            *COM*:0000000000000060 dmaCC1
                            *COM*:0000000000000060 ws2812bDmaBitBuffer
                            *COM*:0000000000000060 dmaCC2
     /tmp/ccugV9H8.s:820    .text.DMA_TransferCompleteHandler:0000000000000000 DMA_TransferCompleteHandler
     /tmp/ccugV9H8.s:1207   .text.DMA_TransferHalfHandler:0000000000000000 DMA_TransferHalfHandler
     /tmp/ccugV9H8.s:373    .text.TIM1_init:0000000000000000 $t
     /tmp/ccugV9H8.s:379    .text.TIM1_init:0000000000000000 TIM1_init
     /tmp/ccugV9H8.s:534    .text.TIM1_init:00000000000000e0 $d
                            *COM*:0000000000000004 tim_period
                            *COM*:0000000000000004 timer_reset_pulse_period
                            *COM*:0000000000000040 TIM1_handle
                            *COM*:000000000000001c tim2OC1
                            *COM*:000000000000001c tim2OC2
     /tmp/ccugV9H8.s:550    .text.DMA2_Stream2_IRQHandler:0000000000000000 $t
     /tmp/ccugV9H8.s:557    .text.DMA2_Stream2_IRQHandler:0000000000000000 DMA2_Stream2_IRQHandler
     /tmp/ccugV9H8.s:582    .text.DMA2_Stream2_IRQHandler:0000000000000018 $d
     /tmp/ccugV9H8.s:588    .text.TIM1_UP_TIM10_IRQHandler:0000000000000000 $t
     /tmp/ccugV9H8.s:595    .text.TIM1_UP_TIM10_IRQHandler:0000000000000000 TIM1_UP_TIM10_IRQHandler
     /tmp/ccugV9H8.s:620    .text.TIM1_UP_TIM10_IRQHandler:0000000000000018 $d
     /tmp/ccugV9H8.s:626    .text.ws2812b_set_pixel:0000000000000000 $t
     /tmp/ccugV9H8.s:633    .text.ws2812b_set_pixel:0000000000000000 ws2812b_set_pixel
     /tmp/ccugV9H8.s:739    .text.ws2812b_set_pixel:00000000000000b0 $d
     /tmp/ccugV9H8.s:745    .text.loadNextFramebufferData:0000000000000000 $t
     /tmp/ccugV9H8.s:751    .text.loadNextFramebufferData:0000000000000000 loadNextFramebufferData
     /tmp/ccugV9H8.s:813    .text.DMA_TransferCompleteHandler:0000000000000000 $t
     /tmp/ccugV9H8.s:953    .text.DMA_TransferCompleteHandler:00000000000000c0 $d
                            *COM*:000000000000001c ws2812b
     /tmp/ccugV9H8.s:967    .text.WS2812_sendbuf:0000000000000000 $t
     /tmp/ccugV9H8.s:973    .text.WS2812_sendbuf:0000000000000000 WS2812_sendbuf
     /tmp/ccugV9H8.s:1184   .text.WS2812_sendbuf:0000000000000144 $d
     /tmp/ccugV9H8.s:1200   .text.DMA_TransferHalfHandler:0000000000000000 $t
     /tmp/ccugV9H8.s:1270   .text.DMA_TransferHalfHandler:0000000000000040 $d
     /tmp/ccugV9H8.s:1275   .text.ws2812b_init:0000000000000000 $t
     /tmp/ccugV9H8.s:1282   .text.ws2812b_init:0000000000000000 ws2812b_init
     /tmp/ccugV9H8.s:1309   .text.ws2812b_init:0000000000000018 $d
     /tmp/ccugV9H8.s:1314   .text.ws2812b_handle:0000000000000000 $t
     /tmp/ccugV9H8.s:1321   .text.ws2812b_handle:0000000000000000 ws2812b_handle
     /tmp/ccugV9H8.s:1350   .text.ws2812b_handle:0000000000000018 $d
                            *COM*:0000000000000004 dummy
     /tmp/ccugV9H8.s:1387   .rodata.gammaTable:0000000000000000 gammaTable
     /tmp/ccugV9H8.s:1380   .data.WS2812_IO_Low:0000000000000000 WS2812_IO_Low
     /tmp/ccugV9H8.s:1373   .data.WS2812_IO_High:0000000000000000 WS2812_IO_High
     /tmp/ccugV9H8.s:1369   .data.WS2812_IO_High:0000000000000000 $d
     /tmp/ccugV9H8.s:1376   .data.WS2812_IO_Low:0000000000000000 $d
     /tmp/ccugV9H8.s:1383   .rodata.gammaTable:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
ARM GAS  /tmp/ccugV9H8.s 			page 46



UNDEFINED SYMBOLS
HAL_GPIO_Init
HAL_DMA_DeInit
HAL_DMA_Init
HAL_DMA_Start
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_DMA_Start_IT
HAL_TIM_PWM_Init
HAL_TIM_PWM_ConfigChannel
HAL_TIM_Base_Start
HAL_TIM_PWM_Start
SystemCoreClock
HAL_DMA_IRQHandler
HAL_TIM_IRQHandler
